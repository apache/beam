// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package playground

import (
	context "context"
	grpc "google.golang.org/grpc"
	sync "sync"
)

// Ensure, that PlaygroundServiceClientMock does implement PlaygroundServiceClient.
// If this is not the case, regenerate this file with moq.
var _ PlaygroundServiceClient = &PlaygroundServiceClientMock{}

// PlaygroundServiceClientMock is a mock implementation of PlaygroundServiceClient.
//
//	func TestSomethingThatUsesPlaygroundServiceClient(t *testing.T) {
//
//		// make and configure a mocked PlaygroundServiceClient
//		mockedPlaygroundServiceClient := &PlaygroundServiceClientMock{
//			CancelFunc: func(ctx context.Context, in *CancelRequest, opts ...grpc.CallOption) (*CancelResponse, error) {
//				panic("mock out the Cancel method")
//			},
//			CheckStatusFunc: func(ctx context.Context, in *CheckStatusRequest, opts ...grpc.CallOption) (*CheckStatusResponse, error) {
//				panic("mock out the CheckStatus method")
//			},
//			GetCompileOutputFunc: func(ctx context.Context, in *GetCompileOutputRequest, opts ...grpc.CallOption) (*GetCompileOutputResponse, error) {
//				panic("mock out the GetCompileOutput method")
//			},
//			GetDefaultPrecompiledObjectFunc: func(ctx context.Context, in *GetDefaultPrecompiledObjectRequest, opts ...grpc.CallOption) (*GetDefaultPrecompiledObjectResponse, error) {
//				panic("mock out the GetDefaultPrecompiledObject method")
//			},
//			GetGraphFunc: func(ctx context.Context, in *GetGraphRequest, opts ...grpc.CallOption) (*GetGraphResponse, error) {
//				panic("mock out the GetGraph method")
//			},
//			GetLogsFunc: func(ctx context.Context, in *GetLogsRequest, opts ...grpc.CallOption) (*GetLogsResponse, error) {
//				panic("mock out the GetLogs method")
//			},
//			GetMetadataFunc: func(ctx context.Context, in *GetMetadataRequest, opts ...grpc.CallOption) (*GetMetadataResponse, error) {
//				panic("mock out the GetMetadata method")
//			},
//			GetPrecompiledObjectFunc: func(ctx context.Context, in *GetPrecompiledObjectRequest, opts ...grpc.CallOption) (*GetPrecompiledObjectResponse, error) {
//				panic("mock out the GetPrecompiledObject method")
//			},
//			GetPrecompiledObjectCodeFunc: func(ctx context.Context, in *GetPrecompiledObjectCodeRequest, opts ...grpc.CallOption) (*GetPrecompiledObjectCodeResponse, error) {
//				panic("mock out the GetPrecompiledObjectCode method")
//			},
//			GetPrecompiledObjectGraphFunc: func(ctx context.Context, in *GetPrecompiledObjectGraphRequest, opts ...grpc.CallOption) (*GetPrecompiledObjectGraphResponse, error) {
//				panic("mock out the GetPrecompiledObjectGraph method")
//			},
//			GetPrecompiledObjectLogsFunc: func(ctx context.Context, in *GetPrecompiledObjectLogsRequest, opts ...grpc.CallOption) (*GetPrecompiledObjectLogsResponse, error) {
//				panic("mock out the GetPrecompiledObjectLogs method")
//			},
//			GetPrecompiledObjectOutputFunc: func(ctx context.Context, in *GetPrecompiledObjectOutputRequest, opts ...grpc.CallOption) (*GetPrecompiledObjectOutputResponse, error) {
//				panic("mock out the GetPrecompiledObjectOutput method")
//			},
//			GetPrecompiledObjectsFunc: func(ctx context.Context, in *GetPrecompiledObjectsRequest, opts ...grpc.CallOption) (*GetPrecompiledObjectsResponse, error) {
//				panic("mock out the GetPrecompiledObjects method")
//			},
//			GetPreparationOutputFunc: func(ctx context.Context, in *GetPreparationOutputRequest, opts ...grpc.CallOption) (*GetPreparationOutputResponse, error) {
//				panic("mock out the GetPreparationOutput method")
//			},
//			GetRunErrorFunc: func(ctx context.Context, in *GetRunErrorRequest, opts ...grpc.CallOption) (*GetRunErrorResponse, error) {
//				panic("mock out the GetRunError method")
//			},
//			GetRunOutputFunc: func(ctx context.Context, in *GetRunOutputRequest, opts ...grpc.CallOption) (*GetRunOutputResponse, error) {
//				panic("mock out the GetRunOutput method")
//			},
//			GetSnippetFunc: func(ctx context.Context, in *GetSnippetRequest, opts ...grpc.CallOption) (*GetSnippetResponse, error) {
//				panic("mock out the GetSnippet method")
//			},
//			GetValidationOutputFunc: func(ctx context.Context, in *GetValidationOutputRequest, opts ...grpc.CallOption) (*GetValidationOutputResponse, error) {
//				panic("mock out the GetValidationOutput method")
//			},
//			RunCodeFunc: func(ctx context.Context, in *RunCodeRequest, opts ...grpc.CallOption) (*RunCodeResponse, error) {
//				panic("mock out the RunCode method")
//			},
//			SaveSnippetFunc: func(ctx context.Context, in *SaveSnippetRequest, opts ...grpc.CallOption) (*SaveSnippetResponse, error) {
//				panic("mock out the SaveSnippet method")
//			},
//		}
//
//		// use mockedPlaygroundServiceClient in code that requires PlaygroundServiceClient
//		// and then make assertions.
//
//	}
type PlaygroundServiceClientMock struct {
	// CancelFunc mocks the Cancel method.
	CancelFunc func(ctx context.Context, in *CancelRequest, opts ...grpc.CallOption) (*CancelResponse, error)

	// CheckStatusFunc mocks the CheckStatus method.
	CheckStatusFunc func(ctx context.Context, in *CheckStatusRequest, opts ...grpc.CallOption) (*CheckStatusResponse, error)

	// GetCompileOutputFunc mocks the GetCompileOutput method.
	GetCompileOutputFunc func(ctx context.Context, in *GetCompileOutputRequest, opts ...grpc.CallOption) (*GetCompileOutputResponse, error)

	// GetDefaultPrecompiledObjectFunc mocks the GetDefaultPrecompiledObject method.
	GetDefaultPrecompiledObjectFunc func(ctx context.Context, in *GetDefaultPrecompiledObjectRequest, opts ...grpc.CallOption) (*GetDefaultPrecompiledObjectResponse, error)

	// GetGraphFunc mocks the GetGraph method.
	GetGraphFunc func(ctx context.Context, in *GetGraphRequest, opts ...grpc.CallOption) (*GetGraphResponse, error)

	// GetLogsFunc mocks the GetLogs method.
	GetLogsFunc func(ctx context.Context, in *GetLogsRequest, opts ...grpc.CallOption) (*GetLogsResponse, error)

	// GetMetadataFunc mocks the GetMetadata method.
	GetMetadataFunc func(ctx context.Context, in *GetMetadataRequest, opts ...grpc.CallOption) (*GetMetadataResponse, error)

	// GetPrecompiledObjectFunc mocks the GetPrecompiledObject method.
	GetPrecompiledObjectFunc func(ctx context.Context, in *GetPrecompiledObjectRequest, opts ...grpc.CallOption) (*GetPrecompiledObjectResponse, error)

	// GetPrecompiledObjectCodeFunc mocks the GetPrecompiledObjectCode method.
	GetPrecompiledObjectCodeFunc func(ctx context.Context, in *GetPrecompiledObjectCodeRequest, opts ...grpc.CallOption) (*GetPrecompiledObjectCodeResponse, error)

	// GetPrecompiledObjectGraphFunc mocks the GetPrecompiledObjectGraph method.
	GetPrecompiledObjectGraphFunc func(ctx context.Context, in *GetPrecompiledObjectGraphRequest, opts ...grpc.CallOption) (*GetPrecompiledObjectGraphResponse, error)

	// GetPrecompiledObjectLogsFunc mocks the GetPrecompiledObjectLogs method.
	GetPrecompiledObjectLogsFunc func(ctx context.Context, in *GetPrecompiledObjectLogsRequest, opts ...grpc.CallOption) (*GetPrecompiledObjectLogsResponse, error)

	// GetPrecompiledObjectOutputFunc mocks the GetPrecompiledObjectOutput method.
	GetPrecompiledObjectOutputFunc func(ctx context.Context, in *GetPrecompiledObjectOutputRequest, opts ...grpc.CallOption) (*GetPrecompiledObjectOutputResponse, error)

	// GetPrecompiledObjectsFunc mocks the GetPrecompiledObjects method.
	GetPrecompiledObjectsFunc func(ctx context.Context, in *GetPrecompiledObjectsRequest, opts ...grpc.CallOption) (*GetPrecompiledObjectsResponse, error)

	// GetPreparationOutputFunc mocks the GetPreparationOutput method.
	GetPreparationOutputFunc func(ctx context.Context, in *GetPreparationOutputRequest, opts ...grpc.CallOption) (*GetPreparationOutputResponse, error)

	// GetRunErrorFunc mocks the GetRunError method.
	GetRunErrorFunc func(ctx context.Context, in *GetRunErrorRequest, opts ...grpc.CallOption) (*GetRunErrorResponse, error)

	// GetRunOutputFunc mocks the GetRunOutput method.
	GetRunOutputFunc func(ctx context.Context, in *GetRunOutputRequest, opts ...grpc.CallOption) (*GetRunOutputResponse, error)

	// GetSnippetFunc mocks the GetSnippet method.
	GetSnippetFunc func(ctx context.Context, in *GetSnippetRequest, opts ...grpc.CallOption) (*GetSnippetResponse, error)

	// GetValidationOutputFunc mocks the GetValidationOutput method.
	GetValidationOutputFunc func(ctx context.Context, in *GetValidationOutputRequest, opts ...grpc.CallOption) (*GetValidationOutputResponse, error)

	// RunCodeFunc mocks the RunCode method.
	RunCodeFunc func(ctx context.Context, in *RunCodeRequest, opts ...grpc.CallOption) (*RunCodeResponse, error)

	// SaveSnippetFunc mocks the SaveSnippet method.
	SaveSnippetFunc func(ctx context.Context, in *SaveSnippetRequest, opts ...grpc.CallOption) (*SaveSnippetResponse, error)

	// calls tracks calls to the methods.
	calls struct {
		// Cancel holds details about calls to the Cancel method.
		Cancel []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *CancelRequest
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
		// CheckStatus holds details about calls to the CheckStatus method.
		CheckStatus []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *CheckStatusRequest
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
		// GetCompileOutput holds details about calls to the GetCompileOutput method.
		GetCompileOutput []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *GetCompileOutputRequest
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
		// GetDefaultPrecompiledObject holds details about calls to the GetDefaultPrecompiledObject method.
		GetDefaultPrecompiledObject []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *GetDefaultPrecompiledObjectRequest
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
		// GetGraph holds details about calls to the GetGraph method.
		GetGraph []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *GetGraphRequest
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
		// GetLogs holds details about calls to the GetLogs method.
		GetLogs []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *GetLogsRequest
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
		// GetMetadata holds details about calls to the GetMetadata method.
		GetMetadata []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *GetMetadataRequest
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
		// GetPrecompiledObject holds details about calls to the GetPrecompiledObject method.
		GetPrecompiledObject []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *GetPrecompiledObjectRequest
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
		// GetPrecompiledObjectCode holds details about calls to the GetPrecompiledObjectCode method.
		GetPrecompiledObjectCode []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *GetPrecompiledObjectCodeRequest
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
		// GetPrecompiledObjectGraph holds details about calls to the GetPrecompiledObjectGraph method.
		GetPrecompiledObjectGraph []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *GetPrecompiledObjectGraphRequest
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
		// GetPrecompiledObjectLogs holds details about calls to the GetPrecompiledObjectLogs method.
		GetPrecompiledObjectLogs []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *GetPrecompiledObjectLogsRequest
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
		// GetPrecompiledObjectOutput holds details about calls to the GetPrecompiledObjectOutput method.
		GetPrecompiledObjectOutput []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *GetPrecompiledObjectOutputRequest
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
		// GetPrecompiledObjects holds details about calls to the GetPrecompiledObjects method.
		GetPrecompiledObjects []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *GetPrecompiledObjectsRequest
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
		// GetPreparationOutput holds details about calls to the GetPreparationOutput method.
		GetPreparationOutput []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *GetPreparationOutputRequest
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
		// GetRunError holds details about calls to the GetRunError method.
		GetRunError []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *GetRunErrorRequest
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
		// GetRunOutput holds details about calls to the GetRunOutput method.
		GetRunOutput []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *GetRunOutputRequest
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
		// GetSnippet holds details about calls to the GetSnippet method.
		GetSnippet []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *GetSnippetRequest
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
		// GetValidationOutput holds details about calls to the GetValidationOutput method.
		GetValidationOutput []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *GetValidationOutputRequest
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
		// RunCode holds details about calls to the RunCode method.
		RunCode []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *RunCodeRequest
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
		// SaveSnippet holds details about calls to the SaveSnippet method.
		SaveSnippet []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *SaveSnippetRequest
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
	}
	lockCancel                      sync.RWMutex
	lockCheckStatus                 sync.RWMutex
	lockGetCompileOutput            sync.RWMutex
	lockGetDefaultPrecompiledObject sync.RWMutex
	lockGetGraph                    sync.RWMutex
	lockGetLogs                     sync.RWMutex
	lockGetMetadata                 sync.RWMutex
	lockGetPrecompiledObject        sync.RWMutex
	lockGetPrecompiledObjectCode    sync.RWMutex
	lockGetPrecompiledObjectGraph   sync.RWMutex
	lockGetPrecompiledObjectLogs    sync.RWMutex
	lockGetPrecompiledObjectOutput  sync.RWMutex
	lockGetPrecompiledObjects       sync.RWMutex
	lockGetPreparationOutput        sync.RWMutex
	lockGetRunError                 sync.RWMutex
	lockGetRunOutput                sync.RWMutex
	lockGetSnippet                  sync.RWMutex
	lockGetValidationOutput         sync.RWMutex
	lockRunCode                     sync.RWMutex
	lockSaveSnippet                 sync.RWMutex
}

// Cancel calls CancelFunc.
func (mock *PlaygroundServiceClientMock) Cancel(ctx context.Context, in *CancelRequest, opts ...grpc.CallOption) (*CancelResponse, error) {
	if mock.CancelFunc == nil {
		panic("PlaygroundServiceClientMock.CancelFunc: method is nil but PlaygroundServiceClient.Cancel was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *CancelRequest
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockCancel.Lock()
	mock.calls.Cancel = append(mock.calls.Cancel, callInfo)
	mock.lockCancel.Unlock()
	return mock.CancelFunc(ctx, in, opts...)
}

// CancelCalls gets all the calls that were made to Cancel.
// Check the length with:
//
//	len(mockedPlaygroundServiceClient.CancelCalls())
func (mock *PlaygroundServiceClientMock) CancelCalls() []struct {
	Ctx  context.Context
	In   *CancelRequest
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *CancelRequest
		Opts []grpc.CallOption
	}
	mock.lockCancel.RLock()
	calls = mock.calls.Cancel
	mock.lockCancel.RUnlock()
	return calls
}

// CheckStatus calls CheckStatusFunc.
func (mock *PlaygroundServiceClientMock) CheckStatus(ctx context.Context, in *CheckStatusRequest, opts ...grpc.CallOption) (*CheckStatusResponse, error) {
	if mock.CheckStatusFunc == nil {
		panic("PlaygroundServiceClientMock.CheckStatusFunc: method is nil but PlaygroundServiceClient.CheckStatus was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *CheckStatusRequest
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockCheckStatus.Lock()
	mock.calls.CheckStatus = append(mock.calls.CheckStatus, callInfo)
	mock.lockCheckStatus.Unlock()
	return mock.CheckStatusFunc(ctx, in, opts...)
}

// CheckStatusCalls gets all the calls that were made to CheckStatus.
// Check the length with:
//
//	len(mockedPlaygroundServiceClient.CheckStatusCalls())
func (mock *PlaygroundServiceClientMock) CheckStatusCalls() []struct {
	Ctx  context.Context
	In   *CheckStatusRequest
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *CheckStatusRequest
		Opts []grpc.CallOption
	}
	mock.lockCheckStatus.RLock()
	calls = mock.calls.CheckStatus
	mock.lockCheckStatus.RUnlock()
	return calls
}

// GetCompileOutput calls GetCompileOutputFunc.
func (mock *PlaygroundServiceClientMock) GetCompileOutput(ctx context.Context, in *GetCompileOutputRequest, opts ...grpc.CallOption) (*GetCompileOutputResponse, error) {
	if mock.GetCompileOutputFunc == nil {
		panic("PlaygroundServiceClientMock.GetCompileOutputFunc: method is nil but PlaygroundServiceClient.GetCompileOutput was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *GetCompileOutputRequest
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockGetCompileOutput.Lock()
	mock.calls.GetCompileOutput = append(mock.calls.GetCompileOutput, callInfo)
	mock.lockGetCompileOutput.Unlock()
	return mock.GetCompileOutputFunc(ctx, in, opts...)
}

// GetCompileOutputCalls gets all the calls that were made to GetCompileOutput.
// Check the length with:
//
//	len(mockedPlaygroundServiceClient.GetCompileOutputCalls())
func (mock *PlaygroundServiceClientMock) GetCompileOutputCalls() []struct {
	Ctx  context.Context
	In   *GetCompileOutputRequest
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *GetCompileOutputRequest
		Opts []grpc.CallOption
	}
	mock.lockGetCompileOutput.RLock()
	calls = mock.calls.GetCompileOutput
	mock.lockGetCompileOutput.RUnlock()
	return calls
}

// GetDefaultPrecompiledObject calls GetDefaultPrecompiledObjectFunc.
func (mock *PlaygroundServiceClientMock) GetDefaultPrecompiledObject(ctx context.Context, in *GetDefaultPrecompiledObjectRequest, opts ...grpc.CallOption) (*GetDefaultPrecompiledObjectResponse, error) {
	if mock.GetDefaultPrecompiledObjectFunc == nil {
		panic("PlaygroundServiceClientMock.GetDefaultPrecompiledObjectFunc: method is nil but PlaygroundServiceClient.GetDefaultPrecompiledObject was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *GetDefaultPrecompiledObjectRequest
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockGetDefaultPrecompiledObject.Lock()
	mock.calls.GetDefaultPrecompiledObject = append(mock.calls.GetDefaultPrecompiledObject, callInfo)
	mock.lockGetDefaultPrecompiledObject.Unlock()
	return mock.GetDefaultPrecompiledObjectFunc(ctx, in, opts...)
}

// GetDefaultPrecompiledObjectCalls gets all the calls that were made to GetDefaultPrecompiledObject.
// Check the length with:
//
//	len(mockedPlaygroundServiceClient.GetDefaultPrecompiledObjectCalls())
func (mock *PlaygroundServiceClientMock) GetDefaultPrecompiledObjectCalls() []struct {
	Ctx  context.Context
	In   *GetDefaultPrecompiledObjectRequest
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *GetDefaultPrecompiledObjectRequest
		Opts []grpc.CallOption
	}
	mock.lockGetDefaultPrecompiledObject.RLock()
	calls = mock.calls.GetDefaultPrecompiledObject
	mock.lockGetDefaultPrecompiledObject.RUnlock()
	return calls
}

// GetGraph calls GetGraphFunc.
func (mock *PlaygroundServiceClientMock) GetGraph(ctx context.Context, in *GetGraphRequest, opts ...grpc.CallOption) (*GetGraphResponse, error) {
	if mock.GetGraphFunc == nil {
		panic("PlaygroundServiceClientMock.GetGraphFunc: method is nil but PlaygroundServiceClient.GetGraph was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *GetGraphRequest
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockGetGraph.Lock()
	mock.calls.GetGraph = append(mock.calls.GetGraph, callInfo)
	mock.lockGetGraph.Unlock()
	return mock.GetGraphFunc(ctx, in, opts...)
}

// GetGraphCalls gets all the calls that were made to GetGraph.
// Check the length with:
//
//	len(mockedPlaygroundServiceClient.GetGraphCalls())
func (mock *PlaygroundServiceClientMock) GetGraphCalls() []struct {
	Ctx  context.Context
	In   *GetGraphRequest
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *GetGraphRequest
		Opts []grpc.CallOption
	}
	mock.lockGetGraph.RLock()
	calls = mock.calls.GetGraph
	mock.lockGetGraph.RUnlock()
	return calls
}

// GetLogs calls GetLogsFunc.
func (mock *PlaygroundServiceClientMock) GetLogs(ctx context.Context, in *GetLogsRequest, opts ...grpc.CallOption) (*GetLogsResponse, error) {
	if mock.GetLogsFunc == nil {
		panic("PlaygroundServiceClientMock.GetLogsFunc: method is nil but PlaygroundServiceClient.GetLogs was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *GetLogsRequest
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockGetLogs.Lock()
	mock.calls.GetLogs = append(mock.calls.GetLogs, callInfo)
	mock.lockGetLogs.Unlock()
	return mock.GetLogsFunc(ctx, in, opts...)
}

// GetLogsCalls gets all the calls that were made to GetLogs.
// Check the length with:
//
//	len(mockedPlaygroundServiceClient.GetLogsCalls())
func (mock *PlaygroundServiceClientMock) GetLogsCalls() []struct {
	Ctx  context.Context
	In   *GetLogsRequest
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *GetLogsRequest
		Opts []grpc.CallOption
	}
	mock.lockGetLogs.RLock()
	calls = mock.calls.GetLogs
	mock.lockGetLogs.RUnlock()
	return calls
}

// GetMetadata calls GetMetadataFunc.
func (mock *PlaygroundServiceClientMock) GetMetadata(ctx context.Context, in *GetMetadataRequest, opts ...grpc.CallOption) (*GetMetadataResponse, error) {
	if mock.GetMetadataFunc == nil {
		panic("PlaygroundServiceClientMock.GetMetadataFunc: method is nil but PlaygroundServiceClient.GetMetadata was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *GetMetadataRequest
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockGetMetadata.Lock()
	mock.calls.GetMetadata = append(mock.calls.GetMetadata, callInfo)
	mock.lockGetMetadata.Unlock()
	return mock.GetMetadataFunc(ctx, in, opts...)
}

// GetMetadataCalls gets all the calls that were made to GetMetadata.
// Check the length with:
//
//	len(mockedPlaygroundServiceClient.GetMetadataCalls())
func (mock *PlaygroundServiceClientMock) GetMetadataCalls() []struct {
	Ctx  context.Context
	In   *GetMetadataRequest
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *GetMetadataRequest
		Opts []grpc.CallOption
	}
	mock.lockGetMetadata.RLock()
	calls = mock.calls.GetMetadata
	mock.lockGetMetadata.RUnlock()
	return calls
}

// GetPrecompiledObject calls GetPrecompiledObjectFunc.
func (mock *PlaygroundServiceClientMock) GetPrecompiledObject(ctx context.Context, in *GetPrecompiledObjectRequest, opts ...grpc.CallOption) (*GetPrecompiledObjectResponse, error) {
	if mock.GetPrecompiledObjectFunc == nil {
		panic("PlaygroundServiceClientMock.GetPrecompiledObjectFunc: method is nil but PlaygroundServiceClient.GetPrecompiledObject was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *GetPrecompiledObjectRequest
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockGetPrecompiledObject.Lock()
	mock.calls.GetPrecompiledObject = append(mock.calls.GetPrecompiledObject, callInfo)
	mock.lockGetPrecompiledObject.Unlock()
	return mock.GetPrecompiledObjectFunc(ctx, in, opts...)
}

// GetPrecompiledObjectCalls gets all the calls that were made to GetPrecompiledObject.
// Check the length with:
//
//	len(mockedPlaygroundServiceClient.GetPrecompiledObjectCalls())
func (mock *PlaygroundServiceClientMock) GetPrecompiledObjectCalls() []struct {
	Ctx  context.Context
	In   *GetPrecompiledObjectRequest
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *GetPrecompiledObjectRequest
		Opts []grpc.CallOption
	}
	mock.lockGetPrecompiledObject.RLock()
	calls = mock.calls.GetPrecompiledObject
	mock.lockGetPrecompiledObject.RUnlock()
	return calls
}

// GetPrecompiledObjectCode calls GetPrecompiledObjectCodeFunc.
func (mock *PlaygroundServiceClientMock) GetPrecompiledObjectCode(ctx context.Context, in *GetPrecompiledObjectCodeRequest, opts ...grpc.CallOption) (*GetPrecompiledObjectCodeResponse, error) {
	if mock.GetPrecompiledObjectCodeFunc == nil {
		panic("PlaygroundServiceClientMock.GetPrecompiledObjectCodeFunc: method is nil but PlaygroundServiceClient.GetPrecompiledObjectCode was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *GetPrecompiledObjectCodeRequest
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockGetPrecompiledObjectCode.Lock()
	mock.calls.GetPrecompiledObjectCode = append(mock.calls.GetPrecompiledObjectCode, callInfo)
	mock.lockGetPrecompiledObjectCode.Unlock()
	return mock.GetPrecompiledObjectCodeFunc(ctx, in, opts...)
}

// GetPrecompiledObjectCodeCalls gets all the calls that were made to GetPrecompiledObjectCode.
// Check the length with:
//
//	len(mockedPlaygroundServiceClient.GetPrecompiledObjectCodeCalls())
func (mock *PlaygroundServiceClientMock) GetPrecompiledObjectCodeCalls() []struct {
	Ctx  context.Context
	In   *GetPrecompiledObjectCodeRequest
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *GetPrecompiledObjectCodeRequest
		Opts []grpc.CallOption
	}
	mock.lockGetPrecompiledObjectCode.RLock()
	calls = mock.calls.GetPrecompiledObjectCode
	mock.lockGetPrecompiledObjectCode.RUnlock()
	return calls
}

// GetPrecompiledObjectGraph calls GetPrecompiledObjectGraphFunc.
func (mock *PlaygroundServiceClientMock) GetPrecompiledObjectGraph(ctx context.Context, in *GetPrecompiledObjectGraphRequest, opts ...grpc.CallOption) (*GetPrecompiledObjectGraphResponse, error) {
	if mock.GetPrecompiledObjectGraphFunc == nil {
		panic("PlaygroundServiceClientMock.GetPrecompiledObjectGraphFunc: method is nil but PlaygroundServiceClient.GetPrecompiledObjectGraph was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *GetPrecompiledObjectGraphRequest
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockGetPrecompiledObjectGraph.Lock()
	mock.calls.GetPrecompiledObjectGraph = append(mock.calls.GetPrecompiledObjectGraph, callInfo)
	mock.lockGetPrecompiledObjectGraph.Unlock()
	return mock.GetPrecompiledObjectGraphFunc(ctx, in, opts...)
}

// GetPrecompiledObjectGraphCalls gets all the calls that were made to GetPrecompiledObjectGraph.
// Check the length with:
//
//	len(mockedPlaygroundServiceClient.GetPrecompiledObjectGraphCalls())
func (mock *PlaygroundServiceClientMock) GetPrecompiledObjectGraphCalls() []struct {
	Ctx  context.Context
	In   *GetPrecompiledObjectGraphRequest
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *GetPrecompiledObjectGraphRequest
		Opts []grpc.CallOption
	}
	mock.lockGetPrecompiledObjectGraph.RLock()
	calls = mock.calls.GetPrecompiledObjectGraph
	mock.lockGetPrecompiledObjectGraph.RUnlock()
	return calls
}

// GetPrecompiledObjectLogs calls GetPrecompiledObjectLogsFunc.
func (mock *PlaygroundServiceClientMock) GetPrecompiledObjectLogs(ctx context.Context, in *GetPrecompiledObjectLogsRequest, opts ...grpc.CallOption) (*GetPrecompiledObjectLogsResponse, error) {
	if mock.GetPrecompiledObjectLogsFunc == nil {
		panic("PlaygroundServiceClientMock.GetPrecompiledObjectLogsFunc: method is nil but PlaygroundServiceClient.GetPrecompiledObjectLogs was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *GetPrecompiledObjectLogsRequest
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockGetPrecompiledObjectLogs.Lock()
	mock.calls.GetPrecompiledObjectLogs = append(mock.calls.GetPrecompiledObjectLogs, callInfo)
	mock.lockGetPrecompiledObjectLogs.Unlock()
	return mock.GetPrecompiledObjectLogsFunc(ctx, in, opts...)
}

// GetPrecompiledObjectLogsCalls gets all the calls that were made to GetPrecompiledObjectLogs.
// Check the length with:
//
//	len(mockedPlaygroundServiceClient.GetPrecompiledObjectLogsCalls())
func (mock *PlaygroundServiceClientMock) GetPrecompiledObjectLogsCalls() []struct {
	Ctx  context.Context
	In   *GetPrecompiledObjectLogsRequest
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *GetPrecompiledObjectLogsRequest
		Opts []grpc.CallOption
	}
	mock.lockGetPrecompiledObjectLogs.RLock()
	calls = mock.calls.GetPrecompiledObjectLogs
	mock.lockGetPrecompiledObjectLogs.RUnlock()
	return calls
}

// GetPrecompiledObjectOutput calls GetPrecompiledObjectOutputFunc.
func (mock *PlaygroundServiceClientMock) GetPrecompiledObjectOutput(ctx context.Context, in *GetPrecompiledObjectOutputRequest, opts ...grpc.CallOption) (*GetPrecompiledObjectOutputResponse, error) {
	if mock.GetPrecompiledObjectOutputFunc == nil {
		panic("PlaygroundServiceClientMock.GetPrecompiledObjectOutputFunc: method is nil but PlaygroundServiceClient.GetPrecompiledObjectOutput was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *GetPrecompiledObjectOutputRequest
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockGetPrecompiledObjectOutput.Lock()
	mock.calls.GetPrecompiledObjectOutput = append(mock.calls.GetPrecompiledObjectOutput, callInfo)
	mock.lockGetPrecompiledObjectOutput.Unlock()
	return mock.GetPrecompiledObjectOutputFunc(ctx, in, opts...)
}

// GetPrecompiledObjectOutputCalls gets all the calls that were made to GetPrecompiledObjectOutput.
// Check the length with:
//
//	len(mockedPlaygroundServiceClient.GetPrecompiledObjectOutputCalls())
func (mock *PlaygroundServiceClientMock) GetPrecompiledObjectOutputCalls() []struct {
	Ctx  context.Context
	In   *GetPrecompiledObjectOutputRequest
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *GetPrecompiledObjectOutputRequest
		Opts []grpc.CallOption
	}
	mock.lockGetPrecompiledObjectOutput.RLock()
	calls = mock.calls.GetPrecompiledObjectOutput
	mock.lockGetPrecompiledObjectOutput.RUnlock()
	return calls
}

// GetPrecompiledObjects calls GetPrecompiledObjectsFunc.
func (mock *PlaygroundServiceClientMock) GetPrecompiledObjects(ctx context.Context, in *GetPrecompiledObjectsRequest, opts ...grpc.CallOption) (*GetPrecompiledObjectsResponse, error) {
	if mock.GetPrecompiledObjectsFunc == nil {
		panic("PlaygroundServiceClientMock.GetPrecompiledObjectsFunc: method is nil but PlaygroundServiceClient.GetPrecompiledObjects was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *GetPrecompiledObjectsRequest
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockGetPrecompiledObjects.Lock()
	mock.calls.GetPrecompiledObjects = append(mock.calls.GetPrecompiledObjects, callInfo)
	mock.lockGetPrecompiledObjects.Unlock()
	return mock.GetPrecompiledObjectsFunc(ctx, in, opts...)
}

// GetPrecompiledObjectsCalls gets all the calls that were made to GetPrecompiledObjects.
// Check the length with:
//
//	len(mockedPlaygroundServiceClient.GetPrecompiledObjectsCalls())
func (mock *PlaygroundServiceClientMock) GetPrecompiledObjectsCalls() []struct {
	Ctx  context.Context
	In   *GetPrecompiledObjectsRequest
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *GetPrecompiledObjectsRequest
		Opts []grpc.CallOption
	}
	mock.lockGetPrecompiledObjects.RLock()
	calls = mock.calls.GetPrecompiledObjects
	mock.lockGetPrecompiledObjects.RUnlock()
	return calls
}

// GetPreparationOutput calls GetPreparationOutputFunc.
func (mock *PlaygroundServiceClientMock) GetPreparationOutput(ctx context.Context, in *GetPreparationOutputRequest, opts ...grpc.CallOption) (*GetPreparationOutputResponse, error) {
	if mock.GetPreparationOutputFunc == nil {
		panic("PlaygroundServiceClientMock.GetPreparationOutputFunc: method is nil but PlaygroundServiceClient.GetPreparationOutput was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *GetPreparationOutputRequest
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockGetPreparationOutput.Lock()
	mock.calls.GetPreparationOutput = append(mock.calls.GetPreparationOutput, callInfo)
	mock.lockGetPreparationOutput.Unlock()
	return mock.GetPreparationOutputFunc(ctx, in, opts...)
}

// GetPreparationOutputCalls gets all the calls that were made to GetPreparationOutput.
// Check the length with:
//
//	len(mockedPlaygroundServiceClient.GetPreparationOutputCalls())
func (mock *PlaygroundServiceClientMock) GetPreparationOutputCalls() []struct {
	Ctx  context.Context
	In   *GetPreparationOutputRequest
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *GetPreparationOutputRequest
		Opts []grpc.CallOption
	}
	mock.lockGetPreparationOutput.RLock()
	calls = mock.calls.GetPreparationOutput
	mock.lockGetPreparationOutput.RUnlock()
	return calls
}

// GetRunError calls GetRunErrorFunc.
func (mock *PlaygroundServiceClientMock) GetRunError(ctx context.Context, in *GetRunErrorRequest, opts ...grpc.CallOption) (*GetRunErrorResponse, error) {
	if mock.GetRunErrorFunc == nil {
		panic("PlaygroundServiceClientMock.GetRunErrorFunc: method is nil but PlaygroundServiceClient.GetRunError was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *GetRunErrorRequest
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockGetRunError.Lock()
	mock.calls.GetRunError = append(mock.calls.GetRunError, callInfo)
	mock.lockGetRunError.Unlock()
	return mock.GetRunErrorFunc(ctx, in, opts...)
}

// GetRunErrorCalls gets all the calls that were made to GetRunError.
// Check the length with:
//
//	len(mockedPlaygroundServiceClient.GetRunErrorCalls())
func (mock *PlaygroundServiceClientMock) GetRunErrorCalls() []struct {
	Ctx  context.Context
	In   *GetRunErrorRequest
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *GetRunErrorRequest
		Opts []grpc.CallOption
	}
	mock.lockGetRunError.RLock()
	calls = mock.calls.GetRunError
	mock.lockGetRunError.RUnlock()
	return calls
}

// GetRunOutput calls GetRunOutputFunc.
func (mock *PlaygroundServiceClientMock) GetRunOutput(ctx context.Context, in *GetRunOutputRequest, opts ...grpc.CallOption) (*GetRunOutputResponse, error) {
	if mock.GetRunOutputFunc == nil {
		panic("PlaygroundServiceClientMock.GetRunOutputFunc: method is nil but PlaygroundServiceClient.GetRunOutput was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *GetRunOutputRequest
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockGetRunOutput.Lock()
	mock.calls.GetRunOutput = append(mock.calls.GetRunOutput, callInfo)
	mock.lockGetRunOutput.Unlock()
	return mock.GetRunOutputFunc(ctx, in, opts...)
}

// GetRunOutputCalls gets all the calls that were made to GetRunOutput.
// Check the length with:
//
//	len(mockedPlaygroundServiceClient.GetRunOutputCalls())
func (mock *PlaygroundServiceClientMock) GetRunOutputCalls() []struct {
	Ctx  context.Context
	In   *GetRunOutputRequest
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *GetRunOutputRequest
		Opts []grpc.CallOption
	}
	mock.lockGetRunOutput.RLock()
	calls = mock.calls.GetRunOutput
	mock.lockGetRunOutput.RUnlock()
	return calls
}

// GetSnippet calls GetSnippetFunc.
func (mock *PlaygroundServiceClientMock) GetSnippet(ctx context.Context, in *GetSnippetRequest, opts ...grpc.CallOption) (*GetSnippetResponse, error) {
	if mock.GetSnippetFunc == nil {
		panic("PlaygroundServiceClientMock.GetSnippetFunc: method is nil but PlaygroundServiceClient.GetSnippet was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *GetSnippetRequest
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockGetSnippet.Lock()
	mock.calls.GetSnippet = append(mock.calls.GetSnippet, callInfo)
	mock.lockGetSnippet.Unlock()
	return mock.GetSnippetFunc(ctx, in, opts...)
}

// GetSnippetCalls gets all the calls that were made to GetSnippet.
// Check the length with:
//
//	len(mockedPlaygroundServiceClient.GetSnippetCalls())
func (mock *PlaygroundServiceClientMock) GetSnippetCalls() []struct {
	Ctx  context.Context
	In   *GetSnippetRequest
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *GetSnippetRequest
		Opts []grpc.CallOption
	}
	mock.lockGetSnippet.RLock()
	calls = mock.calls.GetSnippet
	mock.lockGetSnippet.RUnlock()
	return calls
}

// GetValidationOutput calls GetValidationOutputFunc.
func (mock *PlaygroundServiceClientMock) GetValidationOutput(ctx context.Context, in *GetValidationOutputRequest, opts ...grpc.CallOption) (*GetValidationOutputResponse, error) {
	if mock.GetValidationOutputFunc == nil {
		panic("PlaygroundServiceClientMock.GetValidationOutputFunc: method is nil but PlaygroundServiceClient.GetValidationOutput was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *GetValidationOutputRequest
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockGetValidationOutput.Lock()
	mock.calls.GetValidationOutput = append(mock.calls.GetValidationOutput, callInfo)
	mock.lockGetValidationOutput.Unlock()
	return mock.GetValidationOutputFunc(ctx, in, opts...)
}

// GetValidationOutputCalls gets all the calls that were made to GetValidationOutput.
// Check the length with:
//
//	len(mockedPlaygroundServiceClient.GetValidationOutputCalls())
func (mock *PlaygroundServiceClientMock) GetValidationOutputCalls() []struct {
	Ctx  context.Context
	In   *GetValidationOutputRequest
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *GetValidationOutputRequest
		Opts []grpc.CallOption
	}
	mock.lockGetValidationOutput.RLock()
	calls = mock.calls.GetValidationOutput
	mock.lockGetValidationOutput.RUnlock()
	return calls
}

// RunCode calls RunCodeFunc.
func (mock *PlaygroundServiceClientMock) RunCode(ctx context.Context, in *RunCodeRequest, opts ...grpc.CallOption) (*RunCodeResponse, error) {
	if mock.RunCodeFunc == nil {
		panic("PlaygroundServiceClientMock.RunCodeFunc: method is nil but PlaygroundServiceClient.RunCode was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *RunCodeRequest
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockRunCode.Lock()
	mock.calls.RunCode = append(mock.calls.RunCode, callInfo)
	mock.lockRunCode.Unlock()
	return mock.RunCodeFunc(ctx, in, opts...)
}

// RunCodeCalls gets all the calls that were made to RunCode.
// Check the length with:
//
//	len(mockedPlaygroundServiceClient.RunCodeCalls())
func (mock *PlaygroundServiceClientMock) RunCodeCalls() []struct {
	Ctx  context.Context
	In   *RunCodeRequest
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *RunCodeRequest
		Opts []grpc.CallOption
	}
	mock.lockRunCode.RLock()
	calls = mock.calls.RunCode
	mock.lockRunCode.RUnlock()
	return calls
}

// SaveSnippet calls SaveSnippetFunc.
func (mock *PlaygroundServiceClientMock) SaveSnippet(ctx context.Context, in *SaveSnippetRequest, opts ...grpc.CallOption) (*SaveSnippetResponse, error) {
	if mock.SaveSnippetFunc == nil {
		panic("PlaygroundServiceClientMock.SaveSnippetFunc: method is nil but PlaygroundServiceClient.SaveSnippet was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *SaveSnippetRequest
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockSaveSnippet.Lock()
	mock.calls.SaveSnippet = append(mock.calls.SaveSnippet, callInfo)
	mock.lockSaveSnippet.Unlock()
	return mock.SaveSnippetFunc(ctx, in, opts...)
}

// SaveSnippetCalls gets all the calls that were made to SaveSnippet.
// Check the length with:
//
//	len(mockedPlaygroundServiceClient.SaveSnippetCalls())
func (mock *PlaygroundServiceClientMock) SaveSnippetCalls() []struct {
	Ctx  context.Context
	In   *SaveSnippetRequest
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *SaveSnippetRequest
		Opts []grpc.CallOption
	}
	mock.lockSaveSnippet.RLock()
	calls = mock.calls.SaveSnippet
	mock.lockSaveSnippet.RUnlock()
	return calls
}
