// Code generated by protoc-gen-go.
// source: v1.proto
// DO NOT EDIT!

/*
Package v1 is a generated protocol buffer package.

It is generated from these files:
	v1.proto

It has these top-level messages:
	Type
	FullType
	UserFn
	DynFn
	Fn
	CustomCoder
	MultiEdge
*/
package v1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Kind is mostly identical to reflect.TypeKind, expect we handle certain
// types specially, such as "error".
type Type_Kind int32

const (
	Type_INVALID Type_Kind = 0
	// Primitive.
	Type_BOOL   Type_Kind = 1
	Type_INT    Type_Kind = 2
	Type_INT8   Type_Kind = 3
	Type_INT16  Type_Kind = 4
	Type_INT32  Type_Kind = 5
	Type_INT64  Type_Kind = 6
	Type_UINT   Type_Kind = 7
	Type_UINT8  Type_Kind = 8
	Type_UINT16 Type_Kind = 9
	Type_UINT32 Type_Kind = 10
	Type_UINT64 Type_Kind = 11
	Type_STRING Type_Kind = 12
	// Non-primitive types.
	Type_SLICE    Type_Kind = 20
	Type_STRUCT   Type_Kind = 21
	Type_FUNC     Type_Kind = 22
	Type_CHAN     Type_Kind = 23
	Type_PTR      Type_Kind = 24
	Type_SPECIAL  Type_Kind = 25
	Type_EXTERNAL Type_Kind = 26
)

var Type_Kind_name = map[int32]string{
	0:  "INVALID",
	1:  "BOOL",
	2:  "INT",
	3:  "INT8",
	4:  "INT16",
	5:  "INT32",
	6:  "INT64",
	7:  "UINT",
	8:  "UINT8",
	9:  "UINT16",
	10: "UINT32",
	11: "UINT64",
	12: "STRING",
	20: "SLICE",
	21: "STRUCT",
	22: "FUNC",
	23: "CHAN",
	24: "PTR",
	25: "SPECIAL",
	26: "EXTERNAL",
}
var Type_Kind_value = map[string]int32{
	"INVALID":  0,
	"BOOL":     1,
	"INT":      2,
	"INT8":     3,
	"INT16":    4,
	"INT32":    5,
	"INT64":    6,
	"UINT":     7,
	"UINT8":    8,
	"UINT16":   9,
	"UINT32":   10,
	"UINT64":   11,
	"STRING":   12,
	"SLICE":    20,
	"STRUCT":   21,
	"FUNC":     22,
	"CHAN":     23,
	"PTR":      24,
	"SPECIAL":  25,
	"EXTERNAL": 26,
}

func (x Type_Kind) String() string {
	return proto.EnumName(Type_Kind_name, int32(x))
}
func (Type_Kind) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

// ChanDir matches reflect.ChanDir.
type Type_ChanDir int32

const (
	Type_RECV Type_ChanDir = 0
	Type_SEND Type_ChanDir = 1
	Type_BOTH Type_ChanDir = 2
)

var Type_ChanDir_name = map[int32]string{
	0: "RECV",
	1: "SEND",
	2: "BOTH",
}
var Type_ChanDir_value = map[string]int32{
	"RECV": 0,
	"SEND": 1,
	"BOTH": 2,
}

func (x Type_ChanDir) String() string {
	return proto.EnumName(Type_ChanDir_name, int32(x))
}
func (Type_ChanDir) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 1} }

type Type_Special int32

const (
	Type_ILLEGAL Type_Special = 0
	// Go
	Type_ERROR   Type_Special = 1
	Type_CONTEXT Type_Special = 2
	Type_TYPE    Type_Special = 3
	// Beam
	Type_EVENTTIME     Type_Special = 10
	Type_KV            Type_Special = 11
	Type_GBK           Type_Special = 12
	Type_COGBK         Type_Special = 13
	Type_WINDOWEDVALUE Type_Special = 14
	Type_T             Type_Special = 15
	Type_U             Type_Special = 16
	Type_V             Type_Special = 17
	Type_W             Type_Special = 18
	Type_X             Type_Special = 19
	Type_Y             Type_Special = 20
	Type_Z             Type_Special = 21
)

var Type_Special_name = map[int32]string{
	0:  "ILLEGAL",
	1:  "ERROR",
	2:  "CONTEXT",
	3:  "TYPE",
	10: "EVENTTIME",
	11: "KV",
	12: "GBK",
	13: "COGBK",
	14: "WINDOWEDVALUE",
	15: "T",
	16: "U",
	17: "V",
	18: "W",
	19: "X",
	20: "Y",
	21: "Z",
}
var Type_Special_value = map[string]int32{
	"ILLEGAL":       0,
	"ERROR":         1,
	"CONTEXT":       2,
	"TYPE":          3,
	"EVENTTIME":     10,
	"KV":            11,
	"GBK":           12,
	"COGBK":         13,
	"WINDOWEDVALUE": 14,
	"T":             15,
	"U":             16,
	"V":             17,
	"W":             18,
	"X":             19,
	"Y":             20,
	"Z":             21,
}

func (x Type_Special) String() string {
	return proto.EnumName(Type_Special_name, int32(x))
}
func (Type_Special) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 2} }

type MultiEdge_Inbound_InputKind int32

const (
	MultiEdge_Inbound_INVALID   MultiEdge_Inbound_InputKind = 0
	MultiEdge_Inbound_MAIN      MultiEdge_Inbound_InputKind = 1
	MultiEdge_Inbound_SINGLETON MultiEdge_Inbound_InputKind = 2
	MultiEdge_Inbound_SLICE     MultiEdge_Inbound_InputKind = 3
	MultiEdge_Inbound_MAP       MultiEdge_Inbound_InputKind = 4
	MultiEdge_Inbound_MULTIMAP  MultiEdge_Inbound_InputKind = 5
	MultiEdge_Inbound_ITER      MultiEdge_Inbound_InputKind = 6
	MultiEdge_Inbound_REITER    MultiEdge_Inbound_InputKind = 7
)

var MultiEdge_Inbound_InputKind_name = map[int32]string{
	0: "INVALID",
	1: "MAIN",
	2: "SINGLETON",
	3: "SLICE",
	4: "MAP",
	5: "MULTIMAP",
	6: "ITER",
	7: "REITER",
}
var MultiEdge_Inbound_InputKind_value = map[string]int32{
	"INVALID":   0,
	"MAIN":      1,
	"SINGLETON": 2,
	"SLICE":     3,
	"MAP":       4,
	"MULTIMAP":  5,
	"ITER":      6,
	"REITER":    7,
}

func (x MultiEdge_Inbound_InputKind) String() string {
	return proto.EnumName(MultiEdge_Inbound_InputKind_name, int32(x))
}
func (MultiEdge_Inbound_InputKind) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{6, 0, 0}
}

// Type represents a serializable reflect.Type.
type Type struct {
	// (Required) Type kind.
	Kind Type_Kind `protobuf:"varint,1,opt,name=kind,enum=v1.Type_Kind" json:"kind,omitempty"`
	// (Optional) Element type (if SLICE, PTR or CHAN)
	Element *Type `protobuf:"bytes,2,opt,name=element" json:"element,omitempty"`
	// (Optional) Fields (if STRUCT).
	Fields []*Type_StructField `protobuf:"bytes,3,rep,name=fields" json:"fields,omitempty"`
	// (Optional) Parameter types (if FUNC).
	ParameterTypes []*Type `protobuf:"bytes,4,rep,name=parameter_types,json=parameterTypes" json:"parameter_types,omitempty"`
	// (Optional) Return types (if FUNC).
	ReturnTypes []*Type `protobuf:"bytes,5,rep,name=return_types,json=returnTypes" json:"return_types,omitempty"`
	// (Optional) Is variadic (if FUNC).
	IsVariadic bool `protobuf:"varint,6,opt,name=is_variadic,json=isVariadic" json:"is_variadic,omitempty"`
	// (Optional) Channel direction (if CHAN).
	ChanDir Type_ChanDir `protobuf:"varint,7,opt,name=chan_dir,json=chanDir,enum=v1.Type_ChanDir" json:"chan_dir,omitempty"`
	// (Optional) Special type (if SPECIAL)
	Special Type_Special `protobuf:"varint,8,opt,name=special,enum=v1.Type_Special" json:"special,omitempty"`
	// (Optional) Key for external types.
	// External types are types that are not directly serialized using
	// the types above, but rather indirectly serialized.  The wire format
	// holds a lookup key into a registry to reify the types in a worker from a
	// registry. The main usage of external serialization is to preserve
	// methods attached to types.
	ExternalKey string `protobuf:"bytes,9,opt,name=external_key,json=externalKey" json:"external_key,omitempty"`
}

func (m *Type) Reset()                    { *m = Type{} }
func (m *Type) String() string            { return proto.CompactTextString(m) }
func (*Type) ProtoMessage()               {}
func (*Type) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Type) GetKind() Type_Kind {
	if m != nil {
		return m.Kind
	}
	return Type_INVALID
}

func (m *Type) GetElement() *Type {
	if m != nil {
		return m.Element
	}
	return nil
}

func (m *Type) GetFields() []*Type_StructField {
	if m != nil {
		return m.Fields
	}
	return nil
}

func (m *Type) GetParameterTypes() []*Type {
	if m != nil {
		return m.ParameterTypes
	}
	return nil
}

func (m *Type) GetReturnTypes() []*Type {
	if m != nil {
		return m.ReturnTypes
	}
	return nil
}

func (m *Type) GetIsVariadic() bool {
	if m != nil {
		return m.IsVariadic
	}
	return false
}

func (m *Type) GetChanDir() Type_ChanDir {
	if m != nil {
		return m.ChanDir
	}
	return Type_RECV
}

func (m *Type) GetSpecial() Type_Special {
	if m != nil {
		return m.Special
	}
	return Type_ILLEGAL
}

func (m *Type) GetExternalKey() string {
	if m != nil {
		return m.ExternalKey
	}
	return ""
}

// StructField matches reflect.StructField.
type Type_StructField struct {
	Name      string  `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	PkgPath   string  `protobuf:"bytes,2,opt,name=pkg_path,json=pkgPath" json:"pkg_path,omitempty"`
	Type      *Type   `protobuf:"bytes,3,opt,name=type" json:"type,omitempty"`
	Tag       string  `protobuf:"bytes,4,opt,name=tag" json:"tag,omitempty"`
	Offset    int64   `protobuf:"varint,5,opt,name=offset" json:"offset,omitempty"`
	Index     []int32 `protobuf:"varint,6,rep,packed,name=index" json:"index,omitempty"`
	Anonymous bool    `protobuf:"varint,7,opt,name=anonymous" json:"anonymous,omitempty"`
}

func (m *Type_StructField) Reset()                    { *m = Type_StructField{} }
func (m *Type_StructField) String() string            { return proto.CompactTextString(m) }
func (*Type_StructField) ProtoMessage()               {}
func (*Type_StructField) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

func (m *Type_StructField) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Type_StructField) GetPkgPath() string {
	if m != nil {
		return m.PkgPath
	}
	return ""
}

func (m *Type_StructField) GetType() *Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *Type_StructField) GetTag() string {
	if m != nil {
		return m.Tag
	}
	return ""
}

func (m *Type_StructField) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *Type_StructField) GetIndex() []int32 {
	if m != nil {
		return m.Index
	}
	return nil
}

func (m *Type_StructField) GetAnonymous() bool {
	if m != nil {
		return m.Anonymous
	}
	return false
}

// FullType represents a serialized typex.FullType
type FullType struct {
	Type       *Type       `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	Components []*FullType `protobuf:"bytes,2,rep,name=components" json:"components,omitempty"`
}

func (m *FullType) Reset()                    { *m = FullType{} }
func (m *FullType) String() string            { return proto.CompactTextString(m) }
func (*FullType) ProtoMessage()               {}
func (*FullType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *FullType) GetType() *Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *FullType) GetComponents() []*FullType {
	if m != nil {
		return m.Components
	}
	return nil
}

// UserFn represents a serialized function reference. The
// implementation is notably not serialized and must be present (and
// somehow discoverable from the symbol name) on the decoding side.
type UserFn struct {
	// (Required) Symbol name of function.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// (Required) Function type.
	Type *Type `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
}

func (m *UserFn) Reset()                    { *m = UserFn{} }
func (m *UserFn) String() string            { return proto.CompactTextString(m) }
func (*UserFn) ProtoMessage()               {}
func (*UserFn) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *UserFn) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UserFn) GetType() *Type {
	if m != nil {
		return m.Type
	}
	return nil
}

// DynFn represents a serialiazed function generator.
type DynFn struct {
	// (Required) Name of the generated function.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// (Required) Type of the generated function.
	Type *Type `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	// (Required) Input to generator.
	Data []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	// (Required) Symbol name of generator (of type []byte ->
	// []reflect.Value -> []reflect.Value).
	Gen string `protobuf:"bytes,4,opt,name=gen" json:"gen,omitempty"`
}

func (m *DynFn) Reset()                    { *m = DynFn{} }
func (m *DynFn) String() string            { return proto.CompactTextString(m) }
func (*DynFn) ProtoMessage()               {}
func (*DynFn) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *DynFn) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DynFn) GetType() *Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *DynFn) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *DynFn) GetGen() string {
	if m != nil {
		return m.Gen
	}
	return ""
}

// Fn represents a serialized function reference or struct.
type Fn struct {
	// (Optional) Function reference.
	Fn *UserFn `protobuf:"bytes,1,opt,name=fn" json:"fn,omitempty"`
	// (Optional) Struct type.
	Type *Type `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	// (Optional) JSON-serialized value, if struct.
	Opt string `protobuf:"bytes,3,opt,name=opt" json:"opt,omitempty"`
	// (Optional) Function generator, if dynamic function.
	Dynfn *DynFn `protobuf:"bytes,4,opt,name=dynfn" json:"dynfn,omitempty"`
}

func (m *Fn) Reset()                    { *m = Fn{} }
func (m *Fn) String() string            { return proto.CompactTextString(m) }
func (*Fn) ProtoMessage()               {}
func (*Fn) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Fn) GetFn() *UserFn {
	if m != nil {
		return m.Fn
	}
	return nil
}

func (m *Fn) GetType() *Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *Fn) GetOpt() string {
	if m != nil {
		return m.Opt
	}
	return ""
}

func (m *Fn) GetDynfn() *DynFn {
	if m != nil {
		return m.Dynfn
	}
	return nil
}

// CustomCoder
type CustomCoder struct {
	// (Required) Name of the coder. For informational purposes only.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// (Required) Concrete type being coded.
	Type *Type `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	// (Required) Encoding function.
	Enc *UserFn `protobuf:"bytes,3,opt,name=enc" json:"enc,omitempty"`
	// (Required) Decoding function.
	Dec *UserFn `protobuf:"bytes,4,opt,name=dec" json:"dec,omitempty"`
}

func (m *CustomCoder) Reset()                    { *m = CustomCoder{} }
func (m *CustomCoder) String() string            { return proto.CompactTextString(m) }
func (*CustomCoder) ProtoMessage()               {}
func (*CustomCoder) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *CustomCoder) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CustomCoder) GetType() *Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *CustomCoder) GetEnc() *UserFn {
	if m != nil {
		return m.Enc
	}
	return nil
}

func (m *CustomCoder) GetDec() *UserFn {
	if m != nil {
		return m.Dec
	}
	return nil
}

// MultiEdge represents a partly-serialized MultiEdge. It does not include
// node information, because runners manipulate the graph structure.
type MultiEdge struct {
	Dofn     *Fn                   `protobuf:"bytes,1,opt,name=dofn" json:"dofn,omitempty"`
	Inbound  []*MultiEdge_Inbound  `protobuf:"bytes,2,rep,name=inbound" json:"inbound,omitempty"`
	Outbound []*MultiEdge_Outbound `protobuf:"bytes,3,rep,name=outbound" json:"outbound,omitempty"`
}

func (m *MultiEdge) Reset()                    { *m = MultiEdge{} }
func (m *MultiEdge) String() string            { return proto.CompactTextString(m) }
func (*MultiEdge) ProtoMessage()               {}
func (*MultiEdge) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *MultiEdge) GetDofn() *Fn {
	if m != nil {
		return m.Dofn
	}
	return nil
}

func (m *MultiEdge) GetInbound() []*MultiEdge_Inbound {
	if m != nil {
		return m.Inbound
	}
	return nil
}

func (m *MultiEdge) GetOutbound() []*MultiEdge_Outbound {
	if m != nil {
		return m.Outbound
	}
	return nil
}

type MultiEdge_Inbound struct {
	Kind MultiEdge_Inbound_InputKind `protobuf:"varint,1,opt,name=kind,enum=v1.MultiEdge_Inbound_InputKind" json:"kind,omitempty"`
	Type *FullType                   `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
}

func (m *MultiEdge_Inbound) Reset()                    { *m = MultiEdge_Inbound{} }
func (m *MultiEdge_Inbound) String() string            { return proto.CompactTextString(m) }
func (*MultiEdge_Inbound) ProtoMessage()               {}
func (*MultiEdge_Inbound) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6, 0} }

func (m *MultiEdge_Inbound) GetKind() MultiEdge_Inbound_InputKind {
	if m != nil {
		return m.Kind
	}
	return MultiEdge_Inbound_INVALID
}

func (m *MultiEdge_Inbound) GetType() *FullType {
	if m != nil {
		return m.Type
	}
	return nil
}

type MultiEdge_Outbound struct {
	Type *FullType `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
}

func (m *MultiEdge_Outbound) Reset()                    { *m = MultiEdge_Outbound{} }
func (m *MultiEdge_Outbound) String() string            { return proto.CompactTextString(m) }
func (*MultiEdge_Outbound) ProtoMessage()               {}
func (*MultiEdge_Outbound) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6, 1} }

func (m *MultiEdge_Outbound) GetType() *FullType {
	if m != nil {
		return m.Type
	}
	return nil
}

func init() {
	proto.RegisterType((*Type)(nil), "v1.Type")
	proto.RegisterType((*Type_StructField)(nil), "v1.Type.StructField")
	proto.RegisterType((*FullType)(nil), "v1.FullType")
	proto.RegisterType((*UserFn)(nil), "v1.UserFn")
	proto.RegisterType((*DynFn)(nil), "v1.DynFn")
	proto.RegisterType((*Fn)(nil), "v1.Fn")
	proto.RegisterType((*CustomCoder)(nil), "v1.CustomCoder")
	proto.RegisterType((*MultiEdge)(nil), "v1.MultiEdge")
	proto.RegisterType((*MultiEdge_Inbound)(nil), "v1.MultiEdge.Inbound")
	proto.RegisterType((*MultiEdge_Outbound)(nil), "v1.MultiEdge.Outbound")
	proto.RegisterEnum("v1.Type_Kind", Type_Kind_name, Type_Kind_value)
	proto.RegisterEnum("v1.Type_ChanDir", Type_ChanDir_name, Type_ChanDir_value)
	proto.RegisterEnum("v1.Type_Special", Type_Special_name, Type_Special_value)
	proto.RegisterEnum("v1.MultiEdge_Inbound_InputKind", MultiEdge_Inbound_InputKind_name, MultiEdge_Inbound_InputKind_value)
}

func init() { proto.RegisterFile("v1.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1008 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x55, 0xdd, 0x6e, 0xdb, 0x36,
	0x14, 0xae, 0x2c, 0xdb, 0x92, 0x8e, 0x9d, 0x96, 0xe5, 0xd2, 0x4e, 0x35, 0x02, 0xc4, 0xd5, 0xcd,
	0x8c, 0x35, 0xf0, 0x10, 0xa7, 0x08, 0x86, 0xdd, 0xb9, 0xb2, 0x92, 0x0a, 0x51, 0xe4, 0x80, 0x96,
	0x9d, 0x74, 0x37, 0x86, 0x6a, 0xd1, 0x8e, 0x10, 0x9b, 0xd2, 0x24, 0x39, 0xa8, 0xb1, 0x17, 0xd8,
	0x9b, 0xec, 0x15, 0xf6, 0x0e, 0x7b, 0x8e, 0xdd, 0xee, 0x19, 0x06, 0x52, 0x92, 0xf3, 0xb3, 0x0c,
	0x03, 0x7a, 0xc5, 0xc3, 0xef, 0x9c, 0x8f, 0xe7, 0x87, 0xe7, 0x90, 0xa0, 0xde, 0x1e, 0x76, 0xe3,
	0x24, 0xca, 0x22, 0x5c, 0xb9, 0x3d, 0x34, 0xfe, 0x56, 0xa0, 0xea, 0x6d, 0x62, 0x8a, 0xdf, 0x42,
	0xf5, 0x26, 0x64, 0x81, 0x2e, 0xb5, 0xa5, 0xce, 0xf3, 0xde, 0x4e, 0xf7, 0xf6, 0xb0, 0xcb, 0xf1,
	0xee, 0x59, 0xc8, 0x02, 0x22, 0x54, 0xd8, 0x00, 0x85, 0x2e, 0xe9, 0x8a, 0xb2, 0x4c, 0xaf, 0xb4,
	0xa5, 0x4e, 0xa3, 0xa7, 0x96, 0x56, 0xa4, 0x54, 0xe0, 0x03, 0xa8, 0xcf, 0x43, 0xba, 0x0c, 0x52,
	0x5d, 0x6e, 0xcb, 0x9d, 0x46, 0x6f, 0x77, 0x7b, 0xd0, 0x28, 0x4b, 0xd6, 0xb3, 0xec, 0x84, 0x2b,
	0x49, 0x61, 0x83, 0x0f, 0xe1, 0x45, 0xec, 0x27, 0xfe, 0x8a, 0x66, 0x34, 0x99, 0x66, 0x9b, 0x98,
	0xa6, 0x7a, 0x55, 0xd0, 0xee, 0x4e, 0x7e, 0xbe, 0x35, 0xe0, 0xdb, 0x14, 0xbf, 0x83, 0x66, 0x42,
	0xb3, 0x75, 0xc2, 0x0a, 0xfb, 0xda, 0x23, 0xfb, 0x46, 0xae, 0xcd, 0x8d, 0xf7, 0xa1, 0x11, 0xa6,
	0xd3, 0x5b, 0x3f, 0x09, 0xfd, 0x20, 0x9c, 0xe9, 0xf5, 0xb6, 0xd4, 0x51, 0x09, 0x84, 0xe9, 0xa4,
	0x40, 0xf0, 0x3b, 0x50, 0x67, 0xd7, 0x3e, 0x9b, 0x06, 0x61, 0xa2, 0x2b, 0x22, 0x73, 0xb4, 0x0d,
	0xd8, 0xbc, 0xf6, 0xd9, 0x20, 0x4c, 0x88, 0x32, 0xcb, 0x05, 0xfc, 0x3d, 0x28, 0x69, 0x4c, 0x67,
	0xa1, 0xbf, 0xd4, 0xd5, 0x47, 0xb6, 0xa3, 0x1c, 0x27, 0xa5, 0x01, 0x7e, 0x0b, 0x4d, 0xfa, 0x25,
	0xa3, 0x09, 0xf3, 0x97, 0xd3, 0x1b, 0xba, 0xd1, 0xb5, 0xb6, 0xd4, 0xd1, 0x48, 0xa3, 0xc4, 0xce,
	0xe8, 0xa6, 0xf5, 0x87, 0x04, 0x8d, 0x7b, 0x45, 0xc1, 0x18, 0xaa, 0xcc, 0x5f, 0x51, 0x71, 0x03,
	0x1a, 0x11, 0x32, 0x7e, 0x03, 0x6a, 0x7c, 0xb3, 0x98, 0xc6, 0x7e, 0x76, 0x2d, 0x6a, 0xae, 0x11,
	0x25, 0xbe, 0x59, 0x5c, 0xf8, 0xd9, 0x35, 0xde, 0x83, 0x2a, 0xaf, 0x80, 0x2e, 0x3f, 0xba, 0x0a,
	0x81, 0x62, 0x04, 0x72, 0xe6, 0x2f, 0xf4, 0xaa, 0xe0, 0x70, 0x11, 0xbf, 0x86, 0x7a, 0x34, 0x9f,
	0xa7, 0x34, 0xd3, 0x6b, 0x6d, 0xa9, 0x23, 0x93, 0x62, 0x87, 0x77, 0xa1, 0x16, 0xb2, 0x80, 0x7e,
	0xd1, 0xeb, 0x6d, 0xb9, 0x53, 0x23, 0xf9, 0x06, 0xef, 0x81, 0xe6, 0xb3, 0x88, 0x6d, 0x56, 0xd1,
	0x3a, 0x15, 0x95, 0x51, 0xc9, 0x1d, 0x60, 0xfc, 0x25, 0x41, 0x95, 0x37, 0x06, 0x6e, 0x80, 0x62,
	0xbb, 0x93, 0xbe, 0x63, 0x0f, 0xd0, 0x33, 0xac, 0x42, 0xf5, 0xc3, 0x70, 0xe8, 0x20, 0x09, 0x2b,
	0x20, 0xdb, 0xae, 0x87, 0x2a, 0x1c, 0xb2, 0x5d, 0xef, 0x47, 0x24, 0x63, 0x0d, 0x6a, 0xb6, 0xeb,
	0x1d, 0x1e, 0xa3, 0x6a, 0x21, 0x1e, 0xf5, 0x50, 0xad, 0x10, 0x8f, 0xdf, 0xa3, 0x3a, 0x37, 0x1d,
	0x73, 0x92, 0xc2, 0xc1, 0xb1, 0x60, 0xa9, 0x18, 0xa0, 0x3e, 0xce, 0x69, 0x5a, 0x29, 0x1f, 0xf5,
	0x10, 0x94, 0xf2, 0xf1, 0x7b, 0xd4, 0xe0, 0xf2, 0xc8, 0x23, 0xb6, 0x7b, 0x8a, 0x9a, 0x9c, 0x3a,
	0x72, 0x6c, 0xd3, 0x42, 0xbb, 0x05, 0x3c, 0x36, 0x3d, 0xf4, 0x8a, 0x9f, 0x7d, 0x32, 0x76, 0x4d,
	0xf4, 0x9a, 0x4b, 0xe6, 0xc7, 0xbe, 0x8b, 0xbe, 0xe5, 0x31, 0x5e, 0x78, 0x04, 0xe9, 0x3c, 0x87,
	0xd1, 0x85, 0x65, 0xda, 0x7d, 0x07, 0xbd, 0xc1, 0x4d, 0x50, 0xad, 0x2b, 0xcf, 0x22, 0x6e, 0xdf,
	0x41, 0x2d, 0xe3, 0x3b, 0x50, 0x8a, 0x2e, 0xe0, 0x44, 0x62, 0x99, 0x93, 0x3c, 0xcd, 0x91, 0xe5,
	0x0e, 0x90, 0x94, 0x27, 0xec, 0x7d, 0x44, 0x15, 0xe3, 0x77, 0x09, 0x94, 0xa2, 0x07, 0x44, 0x4d,
	0x1c, 0xc7, 0x3a, 0xed, 0x3b, 0xe8, 0x19, 0x0f, 0xc8, 0x22, 0x64, 0x48, 0x90, 0xc4, 0x71, 0x73,
	0xe8, 0x7a, 0xd6, 0x55, 0x51, 0x18, 0xef, 0xd3, 0x85, 0x85, 0x64, 0xbc, 0x03, 0x9a, 0x35, 0xb1,
	0x5c, 0xcf, 0xb3, 0xcf, 0x2d, 0x04, 0xb8, 0x0e, 0x95, 0xb3, 0x09, 0x6a, 0xf0, 0xf0, 0x4e, 0x3f,
	0x9c, 0xe5, 0x29, 0x99, 0x43, 0x2e, 0xee, 0xe0, 0x97, 0xb0, 0x73, 0x69, 0xbb, 0x83, 0xe1, 0xa5,
	0x35, 0x98, 0xf4, 0x9d, 0xb1, 0x85, 0x9e, 0xe3, 0x1a, 0x48, 0x1e, 0x7a, 0xc1, 0x97, 0x31, 0x42,
	0x7c, 0x99, 0xa0, 0x97, 0x7c, 0xb9, 0x44, 0x98, 0x2f, 0x57, 0xe8, 0x1b, 0xbe, 0x7c, 0x42, 0xbb,
	0x7c, 0xf9, 0x19, 0xbd, 0x32, 0x26, 0xa0, 0x9e, 0xac, 0x97, 0x4b, 0x31, 0xf3, 0x65, 0x0b, 0x49,
	0x4f, 0xb6, 0xd0, 0x01, 0xc0, 0x2c, 0x5a, 0xc5, 0x11, 0xa3, 0x2c, 0x4b, 0xf5, 0x8a, 0x98, 0xb3,
	0x26, 0xb7, 0x29, 0xf9, 0xe4, 0x9e, 0xde, 0xf8, 0x09, 0xea, 0xe3, 0x94, 0x26, 0x27, 0xec, 0xc9,
	0x3e, 0x2e, 0x3d, 0x55, 0x9e, 0xf2, 0x64, 0x4c, 0xa1, 0x36, 0xd8, 0xb0, 0xaf, 0xa1, 0x72, 0x46,
	0xe0, 0x67, 0xbe, 0x98, 0x82, 0x26, 0x11, 0x32, 0xef, 0xfd, 0x05, 0x65, 0x65, 0xef, 0x2f, 0x28,
	0x33, 0x7e, 0x81, 0xca, 0x09, 0xc3, 0x2d, 0xa8, 0xcc, 0x59, 0x91, 0x2c, 0xf0, 0x73, 0xf2, 0x80,
	0x49, 0x65, 0xce, 0xfe, 0xc7, 0x0b, 0x02, 0x39, 0x8a, 0x33, 0xe1, 0x44, 0x23, 0x5c, 0xc4, 0xfb,
	0x50, 0x0b, 0x36, 0x6c, 0x9e, 0x7b, 0x69, 0xf4, 0x34, 0x4e, 0x10, 0x39, 0x90, 0x1c, 0x37, 0x7e,
	0x85, 0x86, 0xb9, 0x4e, 0xb3, 0x68, 0x65, 0x46, 0x01, 0x4d, 0xbe, 0x22, 0xb3, 0x3d, 0x90, 0x29,
	0x9b, 0x15, 0xe3, 0x7d, 0x3f, 0x5c, 0x0e, 0x73, 0x6d, 0x40, 0x67, 0x85, 0xf7, 0x07, 0xda, 0x80,
	0xce, 0x8c, 0xdf, 0x64, 0xd0, 0xce, 0xd7, 0xcb, 0x2c, 0xb4, 0x82, 0x05, 0xc5, 0x2d, 0xa8, 0x06,
	0xd1, 0x36, 0xf3, 0xba, 0xb8, 0x42, 0x46, 0x04, 0x86, 0x7f, 0x00, 0x25, 0x64, 0x9f, 0xa3, 0x35,
	0x0b, 0x8a, 0x1b, 0x7e, 0xc5, 0xd5, 0x5b, 0x6e, 0xd7, 0xce, 0x95, 0xa4, 0xb4, 0xc2, 0x3d, 0x50,
	0xa3, 0x75, 0x96, 0x33, 0xf2, 0x27, 0xfe, 0xf5, 0x43, 0xc6, 0xb0, 0xd0, 0x92, 0xad, 0x5d, 0xeb,
	0x4f, 0x09, 0x94, 0xe2, 0x20, 0x7c, 0xf4, 0xe0, 0x9f, 0xd9, 0x7f, 0xd2, 0x5b, 0xd7, 0x66, 0xf1,
	0x3a, 0xbb, 0xf7, 0xf3, 0xb4, 0x1f, 0x54, 0xea, 0x61, 0x13, 0xe6, 0x2d, 0x14, 0x82, 0xb6, 0x25,
	0xfd, 0xeb, 0x55, 0x3a, 0xef, 0xdb, 0x2e, 0x92, 0xf8, 0xa4, 0x8d, 0x6c, 0xf7, 0xd4, 0xb1, 0xbc,
	0xa1, 0x8b, 0x2a, 0x77, 0x6f, 0x85, 0xcc, 0x87, 0xed, 0xbc, 0x7f, 0x81, 0xaa, 0x7c, 0xfc, 0xcf,
	0xc7, 0x8e, 0x67, 0xf3, 0x5d, 0x4d, 0xbc, 0x5e, 0x9e, 0x45, 0x50, 0x9d, 0x3f, 0x26, 0xc4, 0x12,
	0xb2, 0xd2, 0x3a, 0x00, 0xb5, 0xcc, 0x71, 0x1b, 0x98, 0xf4, 0x5f, 0x81, 0x7d, 0xae, 0x8b, 0xbf,
	0xf6, 0xe8, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x5d, 0xda, 0xb6, 0x95, 0x77, 0x07, 0x00, 0x00,
}
