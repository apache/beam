// File generated by specialize. Do not edit.

package stats

import (
	"fmt"
	"reflect"

	"github.com/apache/beam/sdks/go/pkg/beam"
)

func minSwitch(p *beam.Pipeline, t reflect.Type, col beam.PCollection) beam.PCollection {
	switch t.String() {
	case "int":
		return beam.Combine(p, minIntFn, col)
	case "int8":
		return beam.Combine(p, minInt8Fn, col)
	case "int16":
		return beam.Combine(p, minInt16Fn, col)
	case "int32":
		return beam.Combine(p, minInt32Fn, col)
	case "int64":
		return beam.Combine(p, minInt64Fn, col)
	case "uint":
		return beam.Combine(p, minUintFn, col)
	case "uint8":
		return beam.Combine(p, minUint8Fn, col)
	case "uint16":
		return beam.Combine(p, minUint16Fn, col)
	case "uint32":
		return beam.Combine(p, minUint32Fn, col)
	case "uint64":
		return beam.Combine(p, minUint64Fn, col)
	case "float32":
		return beam.Combine(p, minFloat32Fn, col)
	case "float64":
		return beam.Combine(p, minFloat64Fn, col)
	default:
		panic(fmt.Sprintf("Unexpected number type: %v", t))
	}
}

func minIntFn(x, y int) int {
	if x < y {
		return x
	}
	return y
}

func minInt8Fn(x, y int8) int8 {
	if x < y {
		return x
	}
	return y
}

func minInt16Fn(x, y int16) int16 {
	if x < y {
		return x
	}
	return y
}

func minInt32Fn(x, y int32) int32 {
	if x < y {
		return x
	}
	return y
}

func minInt64Fn(x, y int64) int64 {
	if x < y {
		return x
	}
	return y
}

func minUintFn(x, y uint) uint {
	if x < y {
		return x
	}
	return y
}

func minUint8Fn(x, y uint8) uint8 {
	if x < y {
		return x
	}
	return y
}

func minUint16Fn(x, y uint16) uint16 {
	if x < y {
		return x
	}
	return y
}

func minUint32Fn(x, y uint32) uint32 {
	if x < y {
		return x
	}
	return y
}

func minUint64Fn(x, y uint64) uint64 {
	if x < y {
		return x
	}
	return y
}

func minFloat32Fn(x, y float32) float32 {
	if x < y {
		return x
	}
	return y
}

func minFloat64Fn(x, y float64) float64 {
	if x < y {
		return x
	}
	return y
}
