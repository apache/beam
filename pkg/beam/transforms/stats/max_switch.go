// File generated by specialize. Do not edit.

// Licensed to the Apache Software Foundation (ASF) under one or more
// contributor license agreements.  See the NOTICE file distributed with
// this work for additional information regarding copyright ownership.
// The ASF licenses this file to You under the Apache License, Version 2.0
// (the "License"); you may not use this file except in compliance with
// the License.  You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package stats

import (
	"fmt"
	"reflect"

	"github.com/apache/beam/sdks/go/pkg/beam"
)

func maxSwitch(p *beam.Pipeline, t reflect.Type, col beam.PCollection) beam.PCollection {
	switch t.String() {
	case "int":
		return beam.Combine(p, maxIntFn, col)
	case "int8":
		return beam.Combine(p, maxInt8Fn, col)
	case "int16":
		return beam.Combine(p, maxInt16Fn, col)
	case "int32":
		return beam.Combine(p, maxInt32Fn, col)
	case "int64":
		return beam.Combine(p, maxInt64Fn, col)
	case "uint":
		return beam.Combine(p, maxUintFn, col)
	case "uint8":
		return beam.Combine(p, maxUint8Fn, col)
	case "uint16":
		return beam.Combine(p, maxUint16Fn, col)
	case "uint32":
		return beam.Combine(p, maxUint32Fn, col)
	case "uint64":
		return beam.Combine(p, maxUint64Fn, col)
	case "float32":
		return beam.Combine(p, maxFloat32Fn, col)
	case "float64":
		return beam.Combine(p, maxFloat64Fn, col)
	default:
		panic(fmt.Sprintf("Unexpected number type: %v", t))
	}
}

func maxIntFn(x, y int) int {
	if x > y {
		return x
	}
	return y
}

func maxInt8Fn(x, y int8) int8 {
	if x > y {
		return x
	}
	return y
}

func maxInt16Fn(x, y int16) int16 {
	if x > y {
		return x
	}
	return y
}

func maxInt32Fn(x, y int32) int32 {
	if x > y {
		return x
	}
	return y
}

func maxInt64Fn(x, y int64) int64 {
	if x > y {
		return x
	}
	return y
}

func maxUintFn(x, y uint) uint {
	if x > y {
		return x
	}
	return y
}

func maxUint8Fn(x, y uint8) uint8 {
	if x > y {
		return x
	}
	return y
}

func maxUint16Fn(x, y uint16) uint16 {
	if x > y {
		return x
	}
	return y
}

func maxUint32Fn(x, y uint32) uint32 {
	if x > y {
		return x
	}
	return y
}

func maxUint64Fn(x, y uint64) uint64 {
	if x > y {
		return x
	}
	return y
}

func maxFloat32Fn(x, y float32) float32 {
	if x > y {
		return x
	}
	return y
}

func maxFloat64Fn(x, y float64) float64 {
	if x > y {
		return x
	}
	return y
}
