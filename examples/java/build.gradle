/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * License); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import groovy.json.JsonOutput

apply from: project(":").file("build_rules.gradle")
applyJavaNature(artifactId: "beam-examples-java")

description = "Apache Beam :: Examples :: Java"

/*
 * We need to rely on manually specifying these evaluationDependsOn to ensure that
 * the following projects are evaluated before we evaluate this project. This is because
 * we are attempting to reference the "sourceSets.test.output" directly.
 * TODO: Swap to generating test artifacts which we can then rely on instead of
 * the test outputs directly.
 */
evaluationDependsOn(":sdks:java:io:google-cloud-platform")

/** Define the list of runners which execute a precommit test. */
// https://issues.apache.org/jira/browse/BEAM-3583
def preCommitRunners = ["dataflowRunner", "dataflowStreamingRunner", "directRunner", "flinkRunner", "sparkRunner"]
for (String runner : preCommitRunners) {
  configurations.create(runner + "PreCommit")
}
configurations.sparkRunnerPreCommit {
  // Ban certain dependencies to prevent a StackOverflow within Spark
  // because JUL -> SLF4J -> JUL, and similarly JDK14 -> SLF4J -> JDK14
  exclude group: "org.slf4j", module: "jul-to-slf4j"
  exclude group: "org.slf4j", module: "slf4j-jdk14"
}

dependencies {
  compile library.java.guava
  shadow project(path: ":sdks:java:core", configuration: "shadow")
  shadow project(path: ":sdks:java:extensions:google-cloud-platform-core", configuration: "shadow")
  shadow project(path: ":sdks:java:io:google-cloud-platform", configuration: "shadow")
  shadow library.java.google_api_client
  shadow library.java.google_api_services_bigquery
  shadow library.java.findbugs_jsr305
  shadow library.java.google_http_client
  shadow library.java.bigdataoss_util
  shadow library.java.google_auth_library_oauth2_http
  shadow library.java.google_auth_library_credentials
  shadow library.java.avro
  shadow library.java.google_api_services_pubsub
  shadow library.java.datastore_v1_proto_client
  shadow library.java.datastore_v1_protos
  shadow library.java.joda_time
  shadow library.java.slf4j_api
  shadow project(path: ":runners:direct-java", configuration: "shadow")
  shadow library.java.slf4j_jdk14
  shadowTest project(":sdks:java:io:google-cloud-platform").sourceSets.test.output
  shadowTest library.java.hamcrest_core
  shadowTest library.java.junit
  shadowTest library.java.mockito_core

  // Add dependencies for the PreCommit configurations
  // For each runner a project level dependency on the examples project.
  for (String runner : preCommitRunners) {
    delegate.add(runner + "PreCommit", project(path: ":examples:java", configuration: "shadow"))
    delegate.add(runner + "PreCommit", project(path: ":examples:java", configuration: "shadowTest"))
  }
  // https://issues.apache.org/jira/browse/BEAM-3583
  // apexRunnerPreCommit project(path: ":runners:apex", configuration: "shadow")
  dataflowRunnerPreCommit project(path: ":runners:google-cloud-dataflow-java", configuration: "shadow")
  dataflowStreamingRunnerPreCommit project(path: ":runners:google-cloud-dataflow-java", configuration: "shadow")
  directRunnerPreCommit project(path: ":runners:direct-java", configuration: "shadow")
  flinkRunnerPreCommit project(path: ":runners:flink", configuration: "shadow")
  sparkRunnerPreCommit project(path: ":runners:spark", configuration: "shadow")
  sparkRunnerPreCommit project(path: ":sdks:java:io:hadoop-file-system", configuration: "shadow")
  sparkRunnerPreCommit library.java.spark_streaming
  sparkRunnerPreCommit library.java.spark_core
}

// Create a shaded test jar.
task shadowTestJar(type: com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar) {
  classifier = "shaded-tests"
  from sourceSets.test.output
  configurations = [project.configurations.testRuntime]
  dependencies {
    exclude(".*")
    include(dependency(library.java.guava))
  }
  relocate("com.google.common", getJavaRelocatedPath("com.google.common")) {
    // com.google.common is too generic, need to exclude guava-testlib
    exclude "com.google.common.collect.testing.**"
    exclude "com.google.common.escape.testing.**"
    exclude "com.google.common.testing.**"
    exclude "com.google.common.util.concurrent.testing.**"
  }
}

artifacts {
  shadowTest shadowTestJar
}

/*
 * Create a ${runner}PreCommit task for each runner which runs a set
 * of integration tests for WordCount and WindowedWordCount.
 */
def preCommitRunnerClass = [
  apexRunner: "org.apache.beam.runners.apex.TestApexRunner",
  dataflowRunner: "TestDataflowRunner",
  dataflowStreamingRunner: "TestDataflowRunner",
  directRunner: "org.apache.beam.runners.direct.DirectRunner",
  flinkRunner: "org.apache.beam.runners.flink.TestFlinkRunner",
  sparkRunner: "org.apache.beam.runners.spark.TestSparkRunner",
]
def preCommitAdditionalFlags = [
  dataflowStreamingRunner: [ "--streaming=true" ],
]
for (String runner : preCommitRunners) {
  tasks.create(name: runner + "PreCommit", type: Test) {
    def preCommitBeamTestPipelineOptions = [
       "--project=apache-beam-testing",
       "--tempRoot=gs://temp-storage-for-end-to-end-tests",
       "--runner=" + preCommitRunnerClass[runner],
    ] + preCommitAdditionalFlags[runner]
    classpath = configurations."${runner}PreCommit"
    include "**/WordCountIT.class"
    if (!"sparkRunner".equals(runner)) {
      include "**/WindowedWordCountIT.class"
    }
    forkEvery 1
    maxParallelForks 4
    systemProperty "beamTestPipelineOptions", JsonOutput.toJson(preCommitBeamTestPipelineOptions)
  }
}

/* Define a common precommit task which depends on all the individual precommits. */
task preCommit() {
  for (String runner : preCommitRunners) {
    dependsOn runner + "PreCommit"
  }
}

