# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: PreCommit Python ML tests with ML deps installed
on:
  pull_request_target:
    branches: [ "master", "release-*" ]
    paths: [ "model/**","sdks/python/**","release/**", 'release/trigger_all_tests.json', '.github/trigger_files/beam_PreCommit_Python_ML.json']
  issue_comment:
    types: [created]
  push:
    tags: ['v*']
    branches: ['master', 'release-*']
    paths: [ "model/**","sdks/python/**","release/**",".github/workflows/beam_PreCommit_Python_ML.yml"]
  schedule:
    - cron: '45 2/6 * * *'
  workflow_dispatch:

#Setting explicit permissions for the action to avoid the default permissions which are `write-all` in case of pull_request_target event
permissions:
  actions: write
  pull-requests: write
  checks: write
  contents: read
  deployments: read
  id-token: none
  issues: write
  discussions: read
  packages: read
  pages: read
  repository-projects: read
  security-events: read
  statuses: read

# This allows a subsequently queued workflow run to interrupt previous runs
concurrency:
  group: '${{ github.workflow }} @ ${{ github.event.issue.number || github.event.pull_request.head.label || github.sha || github.head_ref || github.ref }}-${{ github.event.schedule || github.event.comment.id || github.event.sender.login }}'
  cancel-in-progress: true

env:
  DEVELOCITY_ACCESS_KEY: ${{ secrets.DEVELOCITY_ACCESS_KEY }}
  GRADLE_ENTERPRISE_CACHE_USERNAME: ${{ secrets.GE_CACHE_USERNAME }}
  GRADLE_ENTERPRISE_CACHE_PASSWORD: ${{ secrets.GE_CACHE_PASSWORD }}
  ALLOYDB_PASSWORD: ${{ secrets.ALLOYDB_PASSWORD }}

jobs:
  beam_PreCommit_Python_ML:
    name: ${{ matrix.job_name }} (${{ matrix.job_phrase }} ${{ matrix.python_version }})
    runs-on: [self-hosted, ubuntu-20.04, main]
    timeout-minutes: 180
    strategy:
      fail-fast: false
      matrix:
        job_name: ['beam_PreCommit_Python_ML']
        job_phrase: ['Run Python_ML PreCommit']
        python_version: ['3.9','3.10','3.11','3.12']
    if: |
      github.event_name == 'push' ||
      github.event_name == 'pull_request_target' ||
      (github.event_name == 'schedule' && github.repository == 'apache/beam') ||
      github.event_name == 'workflow_dispatch' ||
      startsWith(github.event.comment.body, 'Run Python_ML PreCommit')
    steps:
      - uses: actions/checkout@v4
      - name: Setup repository
        uses: ./.github/actions/setup-action
        with:
          comment_phrase: ${{ matrix.job_phrase }} ${{ matrix.python_version }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          github_job: ${{ matrix.job_name }} (${{ matrix.job_phrase }} ${{ matrix.python_version }})
      - name: Setup environment
        uses: ./.github/actions/setup-environment-action
        with:
          java-version: default
          python-version: ${{ matrix.python_version }}
      # Add Docker verification steps
      - name: Verify Docker installation
        run: |
          echo "Checking Docker installation..."
          docker --version
          if [ $? -ne 0 ]; then
            echo "::error::Docker is not installed or not accessible"
            exit 1
          fi

          echo "Checking Docker service status..."
          sudo systemctl status docker || true

          echo "Checking Docker permissions..."
          docker info
          if [ $? -ne 0 ]; then
            echo "::error::Docker permissions issue - runner may not have access"
            exit 1
          fi

          echo "Verifying port mapping capability..."
          # Run a simple container with port mapping
          CONTAINER_ID=$(docker run -d -p 127.0.0.1:34567:80 nginx:alpine)

          # Wait for container to start
          sleep 3

          # Check if port mapping is working
          PORT_CHECK=$(docker port $CONTAINER_ID 80)
          echo "Port mapping: $PORT_CHECK"
          if [[ "$PORT_CHECK" != *"0.0.0.0:34567"* && "$PORT_CHECK" != *"127.0.0.1:34567"* ]]; then
            echo "::error::Port mapping is not working properly"
            docker logs $CONTAINER_ID
            docker rm -f $CONTAINER_ID
            exit 1
          fi

          # Check if the port is actually accessible
          curl -s -o /dev/null -w "%{http_code}" http://localhost:34567
          HTTP_STATUS=$?
          if [ $HTTP_STATUS -ne 0 ]; then
            echo "::error::Cannot connect to mapped port, HTTP status: $HTTP_STATUS"
            docker logs $CONTAINER_ID
            docker rm -f $CONTAINER_ID
            exit 1
          fi

          # Clean up
          docker rm -f $CONTAINER_ID
          echo "Docker port mapping verification successful"
      - name: Set PY_VER_CLEAN
        id: set_py_ver_clean
        run: |
          PY_VER=${{ matrix.python_version }}
          PY_VER_CLEAN=${PY_VER//.}
          echo "py_ver_clean=$PY_VER_CLEAN" >> $GITHUB_OUTPUT
      - name: Run pythonPreCommit
        uses: ./.github/actions/gradle-command-self-hosted-action
        with:
          gradle-command: :sdks:python:test-suites:tox:py${{steps.set_py_ver_clean.outputs.py_ver_clean}}:testPy${{steps.set_py_ver_clean.outputs.py_ver_clean}}ML
          arguments: |
            -Pposargs=apache_beam/ml/ \
            -PpythonVersion=${{ matrix.python_version }}
      - name: Archive Python Test Results
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: Python ${{ matrix.python_version }} Test Results
          path: '**/pytest*.xml'
      - name: Publish Python Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          commit: '${{ env.prsha || env.GITHUB_SHA }}'
          comment_mode: ${{ github.event_name == 'issue_comment'  && 'always' || 'off' }}
          files: '**/pytest*.xml'
          large_files: true
