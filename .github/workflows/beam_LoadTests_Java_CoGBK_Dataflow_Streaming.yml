# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Load Tests CoGBK Dataflow Streaming Java

on:
  issue_comment:
    types: [created]
  schedule:
    - cron: '50 10 * * *'
  workflow_dispatch:

#Setting explicit permissions for the action to avoid the default permissions which are `write-all` in case of pull_request_target event
permissions:
  actions: write
  pull-requests: write
  checks: write
  contents: read
  deployments: read
  id-token: none
  issues: write
  discussions: read
  packages: read
  pages: read
  repository-projects: read
  security-events: read
  statuses: read

# This allows a subsequently queued workflow run to interrupt previous runs
concurrency:
  group: '${{ github.workflow }} @ ${{ github.event.issue.number || github.sha || github.head_ref || github.ref }}-${{ github.event.schedule || github.event.comment.body || github.event.sender.login }}'
  cancel-in-progress: true

env:
  GRADLE_ENTERPRISE_ACCESS_KEY: ${{ secrets.GE_ACCESS_TOKEN }}
  GRADLE_ENTERPRISE_CACHE_USERNAME: ${{ secrets.GE_CACHE_USERNAME }}
  GRADLE_ENTERPRISE_CACHE_PASSWORD: ${{ secrets.GE_CACHE_PASSWORD }}

jobs:
  beam_LoadTests_Java_CoGBK_Dataflow_Streaming:
    if: |
      github.event_name == 'workflow_dispatch' ||
      github.event_name == 'schedule' ||
      github.event.comment.body == 'Run Load Tests Java CoGBK Dataflow Streaming'
    runs-on: [self-hosted, ubuntu-20.04, main]
    timeout-minutes: 240
    name: ${{ matrix.job_name }} (${{ matrix.job_phrase }})
    strategy:
      matrix:
        job_name: [ "beam_LoadTests_Java_CoGBK_Dataflow_Streaming" ]
        job_phrase: ["Run Load Tests Java CoGBK Dataflow Streaming"]
    steps:
      - uses: actions/checkout@v3
      - name: Setup repository
        uses: ./.github/actions/setup-action
        with:
          comment_phrase: ${{ matrix.job_phrase }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          github_job: ${{ matrix.job_name }} (${{ matrix.job_phrase }})
      - name: Prepare configs
        id: set_configs
        shell: bash
        run: |
          CURCONFIG=$(grep -v "^#.*" ./.github/workflows/load-tests-job-configs/config_CoGBK_Java_Streaming_2GB_SingleKey.txt | tr '\n' ' ')
          echo "prepared_config_1=$CURCONFIG" >> $GITHUB_OUTPUT
          CURCONFIG=$(grep -v "^#.*" ./.github/workflows/load-tests-job-configs/config_CoGBK_Java_Streaming_2GB_MultipleKey.txt | tr '\n' ' ')
          echo "prepared_config_2=$CURCONFIG" >> $GITHUB_OUTPUT
          CURCONFIG=$(grep -v "^#.*" ./.github/workflows/load-tests-job-configs/config_CoGBK_Java_Streaming_2GB_Reiteration_10KB.txt | tr '\n' ' ')
          echo "prepared_config_3=$CURCONFIG" >> $GITHUB_OUTPUT
          CURCONFIG=$(grep -v "^#.*" ./.github/workflows/load-tests-job-configs/config_CoGBK_Java_Streaming_2GB_Reiteration_2MB.txt | tr '\n' ' ')
          echo "prepared_config_4=$CURCONFIG" >> $GITHUB_OUTPUT
      - name: run CoGBK Dataflow Streaming Java Load Test 1 (single key)
        uses: ./.github/actions/gradle-command-self-hosted-action
        with:
          gradle-command: :sdks:java:testing:load-tests:run
          arguments: |
            -PloadTest.mainClass=org.apache.beam.sdk.loadtests.CoGroupByKeyLoadTest \
            -Prunner=:runners:google-cloud-dataflow-java \
            '-PloadTest.args=${{ steps.set_configs.outputs.prepared_config_1 }}' \
      - name: run CoGBK Dataflow Streaming Java Load Test 2 (multiple key)
        uses: ./.github/actions/gradle-command-self-hosted-action
        with:
          gradle-command: :sdks:java:testing:load-tests:run
          arguments: |
            -PloadTest.mainClass=org.apache.beam.sdk.loadtests.CoGroupByKeyLoadTest \
            -Prunner=:runners:google-cloud-dataflow-java \
            '-PloadTest.args=${{ steps.set_configs.outputs.prepared_config_2 }}' \
      - name: run CoGBK Dataflow Streaming Java Load Test 3 (reiteration 10KB value)
        uses: ./.github/actions/gradle-command-self-hosted-action
        with:
          gradle-command: :sdks:java:testing:load-tests:run
          arguments: |
            -PloadTest.mainClass=org.apache.beam.sdk.loadtests.CoGroupByKeyLoadTest \
            -Prunner=:runners:google-cloud-dataflow-java \
            '-PloadTest.args=${{ steps.set_configs.outputs.prepared_config_3 }}' \
      - name: run CoGBK Dataflow Streaming Java Load Test 4 (reiteration 2MB value)
        uses: ./.github/actions/gradle-command-self-hosted-action
        with:
          gradle-command: :sdks:java:testing:load-tests:run
          arguments: |
            -PloadTest.mainClass=org.apache.beam.sdk.loadtests.CoGroupByKeyLoadTest \
            -Prunner=:runners:google-cloud-dataflow-java \
            '-PloadTest.args=${{ steps.set_configs.outputs.prepared_config_4 }}' \
      - name: Archive JUnit Test Results
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: JUnit Test Results
          path: "**/build/reports/tests/"
      - name: Publish JUnit Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          files: '**/build/test-results/**/*.xml'