name: Verify Release Build
on:
  workflow_dispatch:
    inputs:
      RELEASE_VER:
        description: Beam version of current release
        required: true
        default: vtest # remove default before merging
      COMMENT_TRIGGER_PHRASES:
        description: Flag to comment the Jenkins Trigger Phrases in the new PR
        required: true
        default: 'true'
env:
  #WORKING_BRANCH: postcommit_validation_pr # Is it always the same branch name? or should we need to add it as input?
  WORKING_BRANCH: 'verify-release-pr-test'
jobs:
  # Run Gradle release build and all Tests against Release Branch on Jenkins.
  # This create_release_pr task will create a PR against apache/beam.
  update_create_release_pr:
    runs-on: [self-hosted, ubuntu-20.04]
    permissions:
      pull-requests: write
      contents: write
    env:
      RELEASE_VER: ${{ github.event.inputs.RELEASE_VER }}
    steps:
      - name: Set RELEASE_BRANCH env variable
        run: |
          RELEASE_BRANCH=release-${{env.RELEASE_VER}}
          echo "RELEASE_BRANCH=${RELEASE_BRANCH}" >> $GITHUB_ENV
      - name: Check out code
        uses: actions/checkout@v3
        with:
          ref: ${{ env.RELEASE_BRANCH }}
      - name: Install gh cli
        uses: ./.github/actions/setup-gh-cli-linux
      - name: Set git config
        run: |
          git config user.name $GITHUB_ACTOR
          git config user.email actions@"$RUNNER_NAME".local
      - name: Set Release Version
        run: |
          git checkout -b ${{env.WORKING_BRANCH}} --quiet
          /bin/bash release/src/main/scripts/set_version.sh "$RELEASE_VER" --git-add
          # In case the version string was not changed, append a newline to CHANGES.md
          echo "" >> CHANGES.md
      - name: Push Changes in ${{ env.WORKING_BRANCH }} Branch
        run: |
          git add CHANGES.md
          git commit -m "Changed version.py and gradle.properties to python dev version to create a test PR" --quiet
          git push origin $WORKING_BRANCH --quiet
      - name: Create new Release PR
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          GITHUB_PR_URL=$(gh pr create -B ${{env.RELEASE_BRANCH}} -H ${{env.WORKING_BRANCH}} -t "[DO NOT MERGE] Run all PostCommit and PreCommit Tests against Release Branch" -b "You can run many tests automatically using release/src/main/scripts/mass_comment.py.")
      - name: Comment Jenkins Trigger Phrases in PR
        if: ${{ github.event.inputs.COMMENT_TRIGGER_PHRASES == 'true' }}
        run: |
          sh ./comment_pr_trigger_phrases.sh $GITHUB_PR_URL
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        working-directory: 'scripts/ci/release'
