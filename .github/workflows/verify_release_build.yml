name: Verify Release Build
on:
  workflow_dispatch:
    inputs:
      RELEASE_VER:
        description: Beam version of current release
        required: true
        default: vtest # remove default before merging
env:
  #WORKING_BRANCH: postcommit_validation_pr # Is it always the same branch name? or should we need to add it as input?
  WORKING_BRANCH: 'verify-release-pr-test'
jobs:
  check_environment:
    runs-on: ubuntu-latest
    steps:
      - name: Check environment
        run: |
          echo "Verify hub installation."
          git version
          hub version
  # Run Gradle release build and all PostCommit Tests against Release Branch on Jenkins.
  # This create_release_pr task will create a PR against apache/beam.
  update_create_release_pr:
    needs: check_environment
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: write
    env:
      RELEASE_VER: ${{ github.event.inputs.RELEASE_VER }}
    steps:
      - name: Set RELEASE_BRANCH env variable
        run: |
          RELEASE_BRANCH=release-${{env.RELEASE_VER}}
          echo "RELEASE_BRANCH=${RELEASE_BRANCH}" >> $GITHUB_ENV
      - name: Check out code
        uses: actions/checkout@v3
        with:
          ref: ${{ env.RELEASE_BRANCH }}
      - name: Set git config
        run: |
          git config user.name $GITHUB_ACTOR
      - name: Set Dataflow Python Batch Tests Release Version
        run: |
          git checkout -b ${{env.WORKING_BRANCH}} --quiet
          /bin/bash release/src/main/scripts/set_version.sh "$RELEASE_VER" --git-add
          # In case the version string was not changed, append a newline to CHANGES.md
          echo "" >> CHANGES.md
          git add CHANGES.md
          git commit -m "Changed version.py and gradle.properties to python dev version to create a test PR" --quiet
          git push origin $WORKING_BRANCH --quiet
      - name: Create new Release PR
        id: create_pr
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          GITHUB_PR_URL=$(hub pull-request -b $GITHUB_ACTOR:${{env.RELEASE_BRANCH}} -h $GITHUB_ACTOR:${{env.WORKING_BRANCH}} -l ${{env.RELEASE_BRANCH}}  -F - <<<"[DO NOT MERGE] Run all PostCommit and PreCommit Tests against Release Branch.
          You can run many tests automatically using release/src/main/scripts/mass_comment.py.")
          GITHUB_PR_NUMBER=$(echo $GITHUB_PR_URL |cut -d"/" -f7)
          echo "GITHUB_PR_NUMBER=${GITHUB_PR_NUMBER}" >> $GITHUB_ENV
          echo $GITHUB_PR_NUMBER
          echo "::set-output name=git_pr_number::${GITHUB_PR_NUMBER}"
    outputs:
      git_pr_number: ${{ steps.create_pr.outputs.git_pr_number }}
  comment_trigger_phrases:
      needs: update_create_release_pr
      runs-on: ubuntu-latest
      steps:
        - name: Create PR Comment
          run: |
            echo ${{ env.GITHUB_PR_NUMBER }}
            echo 'Test'
            echo ${{ needs.update_create_release_pr.outputs.git_pr_number }}
            echo 'Test 2'
            echo ${{ env.GH_PR_NUMBER}}
            echo 'Test 3'
            echo $GH_PR_NUMBER
          env:
            GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            GH_PR_NUMBER: ${{ needs.create_release_pr.outputs.git_pr_number }}
# gh pr comment $GITHUB_PR_NUMBER --body "Hi! This is a test from Verify Release Workflow."
# Commenting this clean-up step 'cause I think this step is not needed, as the final self-hosted implementation has ephemeral runners.
#  clean-up:
#    if: always()
#    runs-on: ubuntu-latest
#    steps:
#      - name: Clean Temporal Directory
#        run: |
#          echo "==================== Final Cleanup ===================="
#          rm -rf $LOCAL_BEAM_DIR
#          echo "* Deleted workspace ${LOCAL_BEAM_DIR}"


# echo "[NOTE]: Please make sure all test targets have been invoked."
# echo "Please check the test results. If there is any failure, follow the policy in release guide."