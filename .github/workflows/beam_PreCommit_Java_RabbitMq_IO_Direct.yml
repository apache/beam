# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: PreCommit Java RabbitMq IO Direct

on:
  push:
    tags: ['v*']
    branches: ['master', 'release-*']
    paths:
      - "sdks/java/io/rabbitmq/**"
      - ".github/workflows/beam_PreCommit_Java_RabbitMq_IO_Direct.yml"
  pull_request_target:
    branches: ['master', 'release-*']
    paths:
      - "sdks/java/io/rabbitmq/**"
  issue_comment:
    types: [created]
  schedule:
    - cron: '0 */6 * * *'
  workflow_dispatch:

#Setting explicit permissions for the action to avoid the default permissions which are `write-all` in case of pull_request_target event
permissions:
  actions: write
  pull-requests: read
  checks: read
  contents: read
  deployments: read
  id-token: none
  issues: read
  discussions: read
  packages: read
  pages: read
  repository-projects: read
  security-events: read
  statuses: read

# This allows a subsequently queued workflow run to interrupt previous runs
concurrency:
  group: '${{ github.workflow }} @ ${{ github.event.issue.number || github.event.pull_request.head.label || github.sha || github.head_ref || github.ref }}-${{ github.event.schedule || github.event.comment.body || github.event.sender.login}}'
  cancel-in-progress: true

env:
  GRADLE_ENTERPRISE_ACCESS_KEY: ${{ secrets.GE_ACCESS_TOKEN }}
  GRADLE_ENTERPRISE_CACHE_USERNAME: ${{ secrets.GE_CACHE_USERNAME }}
  GRADLE_ENTERPRISE_CACHE_PASSWORD: ${{ secrets.GE_CACHE_PASSWORD }}

jobs:
  beam_PreCommit_Java_RabbitMq_IO_Direct:
    name: ${{ matrix.job_name }} (${{ matrix.job_phrase }})
    strategy:
      matrix:
        job_name: ["beam_PreCommit_Java_RabbitMq_IO_Direct"]
        job_phrase: ["Run Java_RabbitMq_IO_Direct PreCommit"]
    timeout-minutes: 60
    if: |
      github.event_name == 'push' ||
      github.event_name == 'pull_request_target' ||
      github.event_name == 'schedule' ||
      github.event_name == 'workflow_dispatch' ||
      github.event.comment.body == 'Run Java_RabbitMq_IO_Direct PreCommit'
    runs-on: [self-hosted, ubuntu-20.04, main]
    steps:
      - uses: actions/checkout@v3
      - name: Setup repository
        uses: ./.github/actions/setup-action
        with:
          comment_phrase: ${{ matrix.job_phrase }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          github_job: ${{ matrix.job_name }} (${{ matrix.job_phrase }})
      - name: run RabbitMq IO build script
        uses: ./.github/actions/gradle-command-self-hosted-action
        with:
          gradle-command: :sdks:java:io:rabbitmq:build
          arguments: |
            -PdisableSpotlessCheck=true \
            -PdisableCheckStyle=true \
      - name: Archive code coverage results
        uses: actions/upload-artifact@v3
        with:
          name: java-code-coverage-report
          path: "**/build/test-results/**/*.xml"
      - name: Archive SpotBugs Results
        uses: actions/upload-artifact@v3
        with:
          name: SpotBugs Results
          path: "**/build/reports/spotbugs/*.html"