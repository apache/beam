# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

name: Run Python Mobile Gaming RC Validation

on:
  workflow_dispatch:
    inputs:
      RELEASE_VER:
        description: 'Beam Release Version (e.g., 2.64.0)'
        required: true
        default: '2.64.0'
      RC_NUM:
        description: 'Release Candidate number (e.g., 1)'
        required: true
        default: '1'
      APACHE_CONTENTS_REPO:
        description: 'Apache Staging Repository URL for Java Injector (e.g., https://repository.apache.org/content/repositories/orgapachebeam-1234)'
        required: true
      CLEANUP_BQ_RESOURCES:
        description: 'Whether to delete the BigQuery dataset after the test run (true/false)'
        required: false
        type: boolean
        default: true

# This allows a subsequently queued workflow run to interrupt previous runs
concurrency:
  group: '${{ github.workflow }} @ ${{ github.event.inputs.RELEASE_VER }}-${{ github.event.inputs.RC_NUM }}'
  cancel-in-progress: true

# Setting explicit permissions for the action
permissions:
  actions: write
  pull-requests: write # Needed for setup-action potentially
  checks: write
  contents: read # Needs read to checkout the code
  deployments: read
  id-token: write # Required for GCP Workload Identity Federation
  issues: write
  discussions: read
  packages: read
  pages: read
  repository-projects: read
  security-events: read
  statuses: read

env: # Workflow level env vars if needed, specific ones are below
  GCP_PROJECT_ID: 'apache-beam-testing'
  GCS_BUCKET: 'gs://rc-validation-migration-tests'

jobs:
  run_python_mobile_gaming_rc_validation:
    name: Run Python Mobile Gaming RC Validation (${{ github.event.inputs.RELEASE_VER }} RC${{ github.event.inputs.RC_NUM }})
    runs-on: [self-hosted, ubuntu-20.04, main]
    timeout-minutes: 180
    env: # Job-level env vars inherit workflow level and define job-specific ones
      DEVELOCITY_ACCESS_KEY: ${{ secrets.DEVELOCITY_ACCESS_KEY }}
      GRADLE_ENTERPRISE_CACHE_USERNAME: ${{ secrets.GE_CACHE_USERNAME }}
      GRADLE_ENTERPRISE_CACHE_PASSWORD: ${{ secrets.GE_CACHE_PASSWORD }}
      RUN_ID_SUFFIX: ${{ github.run_id }}_${{ github.run_attempt }}
      BQ_DATASET: mobilegaming_py_rc_${{ github.run_id }}_${{ github.run_attempt }}
      PUBSUB_TOPIC: mobilegaming_py_rc_${{ github.run_id }}_${{ github.run_attempt }}
      GCE_REGION: 'us-central1'
      APACHE_REPO_URL: ${{ github.event.inputs.APACHE_CONTENTS_REPO }}
      RELEASE_VERSION: ${{ github.event.inputs.RELEASE_VER }}
      RC_NUM: ${{ github.event.inputs.RC_NUM }}
      RC_TAG: "v${{github.event.inputs.RELEASE_VER}}-RC${{github.event.inputs.RC_NUM}}"
      PYTHON_VERSION: '3.9'
      BEAM_PYTHON_SDK_TAR_GZ: apache_beam-${{ github.event.inputs.RELEASE_VER }}.tar.gz
      BEAM_SOURCE_ZIP: apache-beam-${{ github.event.inputs.RELEASE_VER }}-source-release.zip
      APACHE_DIST_URL_BASE: https://dist.apache.org/repos/dist/dev/beam/${{ github.event.inputs.RELEASE_VER }}
      GAME_STATS_WINDOW_DURATION: 60

      # --- Define the validation function with enhanced debugging ---
      VALIDATE_TABLE_FUNC: |
        validate_table() {
          local table_name=$1
          echo "DEBUG: ===== Starting validate_table for table: $table_name ====="
          # Ensure required env vars are set (GCP_PROJECT_ID, BQ_DATASET are inherited)
          if [[ -z "$GCP_PROJECT_ID" || -z "$BQ_DATASET" ]]; then
             echo "ERROR: GCP_PROJECT_ID and BQ_DATASET must be set in the environment."
             exit 1
          fi

          local full_table_id="${GCP_PROJECT_ID}.${BQ_DATASET}.${table_name}"
          local count=""
          local exit_code=1
          local retries=3
          local delay=10 # Default seconds between retries

          # Allow overriding delay via second argument (optional)
          if [[ -n "$2" && "$2" =~ ^[0-9]+$ ]]; then
              delay=$2
              echo "DEBUG: Using custom retry delay: ${delay}s for table ${table_name}"
          else
              echo "DEBUG: Using default retry delay: ${delay}s for table ${table_name}"
          fi
          echo "DEBUG: Full table ID: ${full_table_id}, Max retries: ${retries}"

          for i in $(seq 1 $retries); do
            echo "DEBUG: Starting attempt $i/$retries..."
            local query_output
            local bq_command="bq query --project_id=${GCP_PROJECT_ID} --use_legacy_sql=false --format=sparse --max_rows=1 'SELECT COUNT(*) FROM \`${full_table_id}\`'"
            echo "DEBUG: Executing command: ${bq_command}"
            query_output=$($bq_command 2>&1)
            exit_code=$?
            echo "DEBUG: bq query exit code: $exit_code"
            echo "DEBUG: bq query raw output: [$query_output]"

            if [ $exit_code -eq 0 ]; then
                echo "DEBUG: bq query exited successfully (code 0)."
                count=$(echo "$query_output" | tr -d '[:space:]')
                echo "DEBUG: Processed count after removing whitespace: [$count]"
                # Check if count is a positive integer
                if [[ "$count" =~ ^[0-9]+$ ]] && [ "$count" -gt 0 ]; then
                    echo "DEBUG: Count [$count] is a positive integer. Validation successful for this attempt."
                    break # Success! Found non-zero rows
                else
                    echo "DEBUG: Count [$count] is zero or not a positive integer."
                fi
            else
                echo "DEBUG: bq query failed (exit code: $exit_code)."
                # Check if table exists explicitly on failure for better context
                echo "DEBUG: Checking table existence with bq show..."
                if ! bq show --project_id=${GCP_PROJECT_ID} "${full_table_id}" > /dev/null 2>&1; then
                  echo "DEBUG: Table ${full_table_id} appears not to exist (bq show failed)."
                else
                  echo "DEBUG: Table ${full_table_id} appears to exist (bq show succeeded), but query failed."
                fi
            fi

            # Don't sleep on the last attempt
            if [ $i -lt $retries ]; then
              echo "DEBUG: Validation condition not met on attempt $i. Retrying in $delay seconds..."
              sleep $delay
            else
              echo "DEBUG: Final attempt ($i) failed."
            fi
          done

          # Final check after all retries
          echo "DEBUG: ===== Final validation check for table: $table_name ====="
          if [[ "$count" =~ ^[0-9]+$ ]] && [ "$count" -gt 0 ]; then
            echo "SUCCESS: Table ${table_name} has ${count} rows. Final validation OK."
            echo "DEBUG: validate_table returning 0 (success)."
            return 0 # Indicate success
          else
            echo "ERROR: Failed to get a non-zero row count for table ${table_name} after $retries retries (Last exit code: $exit_code, Last processed count: '$count')."
            echo "DEBUG: validate_table returning 1 (failure)."
            return 1 # Indicate failure
          fi
        }

    steps:
      - name: Checkout code at RC tag
        uses: actions/checkout@v4
        with:
          ref: ${{ env.RC_TAG }}

      - name: Setup environment
        uses: ./.github/actions/setup-environment-action
        with:
          java-version: 11

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Dependencies
        run: |
          sudo apt-get update --yes
          sudo apt-get install -y wget unzip coreutils procps
        shell: bash

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Download RC Artifacts
        run: |
          echo "Downloading from ${{ env.APACHE_DIST_URL_BASE }}"
          wget ${{ env.APACHE_DIST_URL_BASE }}/python/${{ env.BEAM_PYTHON_SDK_TAR_GZ }}
          wget ${{ env.APACHE_DIST_URL_BASE }}/python/${{ env.BEAM_PYTHON_SDK_TAR_GZ }}.sha512
          wget ${{ env.APACHE_DIST_URL_BASE }}/${{ env.BEAM_SOURCE_ZIP }}
          wget ${{ env.APACHE_DIST_URL_BASE }}/${{ env.BEAM_SOURCE_ZIP }}.sha512
        shell: bash

      - name: Verify Hashes
        run: |
          echo "Verifying sha512 checksums..."
          sha512sum -c ${{ env.BEAM_PYTHON_SDK_TAR_GZ }}.sha512
          sha512sum -c ${{ env.BEAM_SOURCE_ZIP }}.sha512
        shell: bash

      - name: Setup Python Virtual Environment
        run: |
          echo "Setting up Python virtual environment..."
          python -m venv beam_env
          source beam_env/bin/activate
          pip install --upgrade pip setuptools wheel build
          echo "Virtual environment ready."
        shell: bash

      - name: Build Python SDK from Source
        run: |
          echo "Building Python SDK sdist..."
          source beam_env/bin/activate
          unzip ${{ env.BEAM_SOURCE_ZIP }}
          mkdir -p beam-${{ env.RELEASE_VERSION }}/website/www/site/content/en/documentation/sdks
          sudo mkdir -p /website/www/site/content/en/documentation/sdks
          cd beam-${{ env.RELEASE_VERSION }}/sdks/python
          python -m build --sdist
          mv dist/apache_beam-${{ env.RELEASE_VERSION }}.tar.gz ../../../
        shell: bash

      - name: Install Python SDK
        run: |
          echo "Installing built Python SDK: apache_beam-${{ env.RELEASE_VERSION }}.tar.gz"
          source beam_env/bin/activate
          pip install apache_beam-${{ env.RELEASE_VERSION }}.tar.gz
          pip install apache_beam-${{ env.RELEASE_VERSION }}.tar.gz[gcp]
          echo "SDK installed."
          pip freeze # Log installed packages
        shell: bash

      # ================== GCP Resource Setup ==================
      - name: Create BigQuery Dataset
        run: |
          echo "Creating BigQuery dataset: ${{ env.BQ_DATASET }} in project ${{ env.GCP_PROJECT_ID }}"
          bq mk --project_id=${{ env.GCP_PROJECT_ID }} ${{ env.BQ_DATASET }}
        shell: bash

      - name: Create GCS Bucket (if needed - reusing input bucket)
        run: |
          echo "Ensuring GCS Bucket exists: ${{ env.GCS_BUCKET }} in project ${{ env.GCP_PROJECT_ID }}"
          gsutil mb -p ${{ env.GCP_PROJECT_ID }} ${{ env.GCS_BUCKET }} || echo "Bucket ${{ env.GCS_BUCKET }} likely already exists."
        shell: bash

      - name: Create PubSub Topic
        run: |
          echo "Creating PubSub topic: ${{ env.PUBSUB_TOPIC }} in project ${{ env.GCP_PROJECT_ID }}"
          gcloud pubsub topics create --project=${{ env.GCP_PROJECT_ID }} ${{ env.PUBSUB_TOPIC }}
        shell: bash

      # ================== Java Data Injector ==================
      - name: Configure Maven Settings for Injector
        run: |
          mkdir -p ~/.m2
          cat <<EOF > ~/.m2/settings.xml
          <settings>
            <profiles>
              <profile>
                <id>release-repo</id>
                <activation>
                  <activeByDefault>true</activeByDefault>
                </activation>
                <repositories>
                  <repository>
                    <id>Release ${{ env.RELEASE_VERSION }} RC${{ env.RC_NUM }}</id>
                    <name>Release ${{ env.RELEASE_VERSION }} RC${{ env.RC_NUM }}</name>
                    <url>${{ env.APACHE_REPO_URL }}</url>
                  </repository>
                </repositories>
              </profile>
            </profiles>
          </settings>
          EOF
          echo "Maven settings.xml configured for Java Injector."
        shell: bash

      - name: Run Java Injector in Background
        run: |
          echo "Running Java Injector in Background..."
          mvn archetype:generate \
              -DarchetypeGroupId=org.apache.beam \
              -DarchetypeArtifactId=beam-sdks-java-maven-archetypes-examples \
              -DarchetypeVersion=${{ env.RELEASE_VERSION }} \
              -DgroupId=org.example \
              -DartifactId=injector-temp \
              -Dversion="0.1" \
              -Dpackage=org.apache.beam.examples \
              -DinteractiveMode=false \
              -DarchetypeCatalog=internal

          cd injector-temp
          mvn compile exec:java -Dexec.mainClass=org.apache.beam.examples.complete.game.injector.Injector \
            -Dexec.args="${{ env.GCP_PROJECT_ID }} ${{ env.PUBSUB_TOPIC }} none" \
            -Dmaven.wagon.http.retryHandler.count=3 \
            -Dmaven.wagon.httpconnectionManager.ttlSeconds=25 &

          INJECTOR_PID=$!
          echo "Java Injector started in background with PID: ${INJECTOR_PID}"
          echo ${INJECTOR_PID} > ../injector.pid

          cd ..
          echo "Java Injector startup command finished. Process running in background."
          sleep 10
        shell: bash

      # ================== Leaderboard Tests ==================
      - name: Run Leaderboard (Direct Runner) in Background
        run: |
          echo "Running Leaderboard with DirectRunner in Background..."
          source beam_env/bin/activate
          python -m apache_beam.examples.complete.game.leader_board \
            --project=${{ env.GCP_PROJECT_ID }} \
            --topic projects/${{ env.GCP_PROJECT_ID }}/topics/${{ env.PUBSUB_TOPIC }} \
            --dataset ${{ env.BQ_DATASET }} &

          LB_DIRECT_PID=$!
          echo "Leaderboard (Direct Runner) started in background with PID: ${LB_DIRECT_PID}"
          echo ${LB_DIRECT_PID} > leaderboard_direct.pid
        shell: bash

      - name: Validate Leaderboard Results (Direct Runner)
        run: |
          source beam_env/bin/activate
          # Define the function in this step's shell environment using eval
          eval "$VALIDATE_TABLE_FUNC"

          echo "Validating BigQuery results for Leaderboard (DirectRunner)..."
          sleep 90 # Adjust as needed

          # Call the function; exit if it fails (returns non-zero)
          validate_table "leader_board_users" || exit 1
          validate_table "leader_board_teams" || exit 1

          echo "Leaderboard (Direct Runner) BQ validation finished successfully."
        shell: bash

      - name: Kill Leaderboard Direct Runner Process
        if: always()
        run: |
          if [ -f leaderboard_direct.pid ]; then
            LB_DIRECT_PID=$(cat leaderboard_direct.pid)
            echo "Attempting to kill Leaderboard Direct Runner process with PID: $LB_DIRECT_PID"
            kill -9 $LB_DIRECT_PID || echo "Leaderboard Direct Runner process $LB_DIRECT_PID already stopped or not found."
            rm leaderboard_direct.pid
          else
            echo "leaderboard_direct.pid not found, cannot kill process."
          fi
        shell: bash

      - name: Run Leaderboard (Dataflow Runner)
        run: |
          echo "Running Leaderboard with DataflowRunner..."
          source beam_env/bin/activate
          python -m apache_beam.examples.complete.game.leader_board \
            --project=${{ env.GCP_PROJECT_ID }} \
            --region=${{ env.GCE_REGION }} \
            --topic projects/${{ env.GCP_PROJECT_ID }}/topics/${{ env.PUBSUB_TOPIC }} \
            --dataset ${{ env.BQ_DATASET }} \
            --runner DataflowRunner \
            --temp_location=${{ env.GCS_BUCKET }}/temp/ \
            --sdk_location=apache-beam-${{ env.RELEASE_VERSION }}.tar.gz
          echo "Leaderboard (Dataflow Runner) submission command finished."
        shell: bash

      - name: Validate Leaderboard Results (Dataflow Runner)
        run: |
          source beam_env/bin/activate
          # Define the function in this step's shell environment using eval
          eval "$VALIDATE_TABLE_FUNC"

          echo "Validating BigQuery results for Leaderboard (DataflowRunner)..."
          sleep 180 # Adjust as needed

          # Call the function, passing optional delay; exit if it fails
          validate_table "leader_board_users" 15 || exit 1 # Use 15s retry delay
          validate_table "leader_board_teams" 15 || exit 1 # Use 15s retry delay

          echo "Leaderboard (Dataflow Runner) BQ validation finished successfully."
        shell: bash

      # ================== GameStats Tests ==================
      - name: Run GameStats (Direct Runner) in Background
        run: |
          echo "Running GameStats with DirectRunner in Background..."
          source beam_env/bin/activate
          python -m apache_beam.examples.complete.game.game_stats \
            --project=${{ env.GCP_PROJECT_ID }} \
            --topic projects/${{ env.GCP_PROJECT_ID }}/topics/${{ env.PUBSUB_TOPIC }} \
            --dataset ${{ env.BQ_DATASET }} \
            --fixed_window_duration ${{ env.GAME_STATS_WINDOW_DURATION }} &

          GS_DIRECT_PID=$!
          echo "GameStats (Direct Runner) started in background with PID: ${GS_DIRECT_PID}"
          echo ${GS_DIRECT_PID} > gamestats_direct.pid
        shell: bash

      - name: Validate GameStats Results (Direct Runner)
        run: |
          source beam_env/bin/activate
          # Define the function in this step's shell environment using eval
          eval "$VALIDATE_TABLE_FUNC"

          echo "Validating BigQuery results for GameStats (DirectRunner)..."
          sleep 90 # Adjust as needed

          # Call the function; exit if it fails
          validate_table "game_stats_teams" || exit 1
          validate_table "game_stats_sessions" || exit 1

          echo "GameStats (Direct Runner) BQ validation finished successfully."
        shell: bash

      - name: Kill GameStats Direct Runner Process
        if: always()
        run: |
          if [ -f gamestats_direct.pid ]; then
            GS_DIRECT_PID=$(cat gamestats_direct.pid)
            echo "Attempting to kill GameStats Direct Runner process with PID: $GS_DIRECT_PID"
            kill -9 $GS_DIRECT_PID || echo "GameStats Direct Runner process $GS_DIRECT_PID already stopped or not found."
            rm gamestats_direct.pid
          else
            echo "gamestats_direct.pid not found, cannot kill process."
          fi
        shell: bash

      - name: Run GameStats (Dataflow Runner)
        run: |
          echo "Running GameStats with DataflowRunner..."
          source beam_env/bin/activate
          python -m apache_beam.examples.complete.game.game_stats \
            --project=${{ env.GCP_PROJECT_ID }} \
            --region=${{ env.GCE_REGION }} \
            --topic projects/${{ env.GCP_PROJECT_ID }}/topics/${{ env.PUBSUB_TOPIC }} \
            --dataset ${{ env.BQ_DATASET }} \
            --runner DataflowRunner \
            --temp_location=${{ env.GCS_BUCKET }}/temp/ \
            --sdk_location=apache-beam-${{ env.RELEASE_VERSION }}.tar.gz \
            --fixed_window_duration ${{ env.GAME_STATS_WINDOW_DURATION }}
          echo "GameStats (Dataflow Runner) submission command finished."
        shell: bash

      - name: Validate GameStats Results (Dataflow Runner)
        run: |
          source beam_env/bin/activate
          # Define the function in this step's shell environment using eval
          eval "$VALIDATE_TABLE_FUNC"

          echo "Validating BigQuery results for GameStats (DataflowRunner)..."
          sleep 180 # Adjust as needed

          # Call the function, passing optional delay; exit if it fails
          validate_table "game_stats_teams" 15 || exit 1 # Use 15s retry delay
          validate_table "game_stats_sessions" 15 || exit 1 # Use 15s retry delay

          echo "GameStats (Dataflow Runner) BQ validation finished successfully."
        shell: bash

      # ================== Cleanup ==================
      # Kill background processes first
      - name: Kill Java Injector Process
        if: always()
        run: |
          if [ -f injector.pid ]; then
            INJECTOR_PID=$(cat injector.pid)
            echo "Attempting to kill Java Injector process with PID: $INJECTOR_PID"
            kill $INJECTOR_PID || echo "Injector process $INJECTOR_PID may have already stopped or was not found."
            sleep 5
            if ps -p $INJECTOR_PID > /dev/null; then
               echo "Process $INJECTOR_PID still running, sending SIGKILL."
               kill -9 $INJECTOR_PID || echo "Failed to SIGKILL process $INJECTOR_PID."
            else
               echo "Process $INJECTOR_PID terminated or was not running."
            fi
            rm injector.pid
          else
            echo "injector.pid not found, cannot kill process."
          fi
        shell: bash

      # Note: DirectRunner Kill steps are placed after their respective validations above.

      # Cleanup GCP resources
      - name: Cleanup BigQuery Dataset
        if: always() && github.event.inputs.CLEANUP_BQ_RESOURCES == 'true'
        run: |
          echo "Deleting BigQuery dataset: ${{ env.BQ_DATASET }} in project ${{ env.GCP_PROJECT_ID }}"
          bq rm --project_id=${{ env.GCP_PROJECT_ID }} -f -r ${{ env.BQ_DATASET }} || echo "Failed to delete BQ dataset ${{ env.BQ_DATASET }}, continuing..."
        shell: bash

      - name: Cleanup GCS Bucket Objects (Optional - depends on policy)
        if: always()
        run: |
          echo "Deleting objects in GCS Bucket: ${{ env.GCS_BUCKET }}/temp/"
          gsutil -m rm -r "${{ env.GCS_BUCKET }}/temp/**" || echo "Failed to delete objects in GCS bucket temp folder, continuing..."
        shell: bash

      - name: Cleanup PubSub Topic
        if: always()
        run: |
          echo "Deleting PubSub topic: ${{ env.PUBSUB_TOPIC }} in project ${{ env.GCP_PROJECT_ID }}"
          gcloud pubsub topics delete --project=${{ env.GCP_PROJECT_ID }} ${{ env.PUBSUB_TOPIC }} --quiet || echo "Failed to delete PubSub topic ${{ env.PUBSUB_TOPIC }}, continuing..."
        shell: bash
