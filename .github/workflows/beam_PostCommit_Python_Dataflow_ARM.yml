# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Python PostCommit Dataflow ARM

on:
  issue_comment:
    types: [created]
  push:
    tags: ['v*']
    branches: ['master', 'release-*']
    paths: ["sdks/python/**",".github/workflows/beam_PostCommit_Python_Dataflow_ARM.yml"]
  schedule:
    - cron: '0 */6 * * *'
  workflow_dispatch:

#Setting explicit permissions for the action to avoid the default permissions which are `write-all` in case of pull_request_target event
permissions:
  actions: write
  pull-requests: read
  checks: read
  contents: read
  deployments: read
  id-token: none
  issues: read
  discussions: read
  packages: read
  pages: read
  repository-projects: read
  security-events: read
  statuses: read

# This allows a subsequently queued workflow run to interrupt previous runs
concurrency:
  group: '${{ github.workflow }} @ ${{ github.event.pull_request.head.label || github.head_ref || github.ref }}'
  cancel-in-progress: true

env:
  USER: github-actions

jobs:
  beam_PostCommit_Python_Dataflow_ARM:
    name: beam_PostCommit_Python_Dataflow_ARM
    strategy:
      fail-fast: false
      matrix:
        python_version: ['3.8','3.9','3.10','3.11']
    if: |
      github.event_name == 'push' ||
      startsWith(github.event.comment.body, 'Run Python PostCommit Dataflow ARM') || 
      github.event_name == 'schedule'
    runs-on: [self-hosted, ubuntu-20.04, main]
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Set comment body with matrix
        id: set_comment_body
        run: |
          echo "comment_body=Run Python PostCommit Dataflow ARM (${{ matrix.python_version }})" >> $GITHUB_OUTPUT
      - name: Rerun on comment
        if: github.event.comment.body == steps.set_comment_body.outputs.comment_body
        uses: ./.github/actions/rerun-job-action
        with:
          pull_request_url: ${{ github.event.issue.pull_request.url }}
          github_repository: ${{ github.repository }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          github_job: "${{ github.job }} (${{ matrix.python_version }})"
          github_current_run_id: ${{ github.run_id }}
      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python_version }}
      - name: Install Java
        uses: actions/setup-java@v3.8.0
        with:
          distribution: 'zulu'
          java-version: '8'
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          cache-read-only: false
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: run Python postCommitDataflowARM64 test
        run: |
          PY_VER=${{ matrix.python_version }}
          ./gradlew :sdks:python:test-suites:dataflow:py${PY_VER//.}:postCommitARM64 -PuseWheelDistribution -PpythonVersion=${PY_VER} -Pcontainer-architecture-list=arm64,amd64 -Ppush-containers
      - name: Archive code coverage results
        uses: actions/upload-artifact@v3
        with:
          name: python-code-coverage-report
          path: "**/pytest*.xml"