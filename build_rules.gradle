/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * License); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

println "Applying build_rules.gradle to $project.name"

/*************************************************************************************************/
// Apply common properties/repositories and tasks to all builds.

group = "org.apache.beam"
version = "2.3.0-SNAPSHOT"

// Define the default set of properties
repositories {
  mavenLocal()
  mavenCentral()
  jcenter()

  // Release staging repository
  maven { url "https://oss.sonatype.org/content/repositories/staging/" }

  // Apache nightly snapshots
  maven { url "https://repository.apache.org/snapshots" }

  // Apache release snapshots
  maven { url "https://repository.apache.org/content/repositories/releases" }
}

// Add a task "allDeps" which lists all dependencies of the project
// and all subprojects.
task allDeps(type: DependencyReportTask) {
}

apply plugin: 'project-report'

/*************************************************************************************************/

/** Used as configuration within the applyJavaNature closure. */
class JavaNatureConfiguration {
  double javaVersion = 1.7
}

/** Takes a map of parameters. See JavaNatureConfiguration for the set of parameters allowed. */
ext.applyJavaNature = {
  println "applyJavaNature with " + (it ? "$it" : "default configuration") + " for project $project.name"
  // Use the implicit it parameter of the closure to handle zero argument or one argument map calls.
  JavaNatureConfiguration configuration = it ? it as JavaNatureConfiguration : new JavaNatureConfiguration()
  apply plugin: "maven"
  apply plugin: "java"

  sourceCompatibility = configuration.javaVersion
  targetCompatibility = configuration.javaVersion
  tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
  }

  // Skip test failures to enumerate all that is failing
  test {
//    ignoreFailures = true
    exclude '**/*IT.class'
    useJUnit {
      setExcludeCategories([
              "org.apache.beam.sdk.testing.NeedsRunner",
              "org.apache.beam.sdk.testing.ValidatesRunner"] as Set)
    }
  }

  apply plugin: "net.ltgt.apt"
  dependencies {
    def auto_value = "com.google.auto.value:auto-value:1.4.1"
    def auto_service = "com.google.auto.service:auto-service:1.0-rc2"
    compileOnly auto_value
    apt auto_value
    testCompileOnly auto_value
    testApt auto_value

    compileOnly auto_service
    apt auto_service
    testCompileOnly auto_service
    testApt auto_service
  }

  // Add the optional and provided scopes for dependencies
  apply plugin: 'propdeps'
  apply plugin: 'propdeps-maven'

  apply plugin: 'checkstyle'

  tasks.withType(Checkstyle) {
    configFile = project(":").file("sdks/java/build-tools/src/main/resources/beam/checkstyle.xml")
    configProperties = [ "checkstyle.suppressions.file": project(":").file("sdks/java/build-tools/src/main/resources/beam/suppressions.xml") ]
    showViolations = true
    maxErrors = 0
  }

  apply plugin: 'com.diffplug.gradle.spotless'
  spotless {
    java {
      target rootProject.fileTree(rootProject.rootDir) {
        include 'sdks/java/**/*.java'
      }
      // Code formatting disabled because style rules are out of date.
      // eclipse().configFile(rootProject.file('sdks/java/build-tools/src/main/resources/beam/beam-codestyle.xml'))
    }
  }

  if (!(project.name in [
    'beam-model-pipeline',
    'beam-model-job-management',
    'beam-model-fn-execution',
    'beam-runners-google-cloud-dataflow-java',
    'beam-sdks-java-io-kafka'])) {
    delegate.apply plugin: 'findbugs'
    delegate.findbugs {
      excludeFilter = rootProject.file('sdks/java/build-tools/src/main/resources/beam/findbugs-filter.xml')
      sourceSets = [sourceSets.main]
    }
  }

  // Ban these dependencies from all configurations
  configurations.all {
    exclude group: "com.google.guava", module: "guava-jdk5"
    exclude group: "jdk.tools", module: "jdk.tools"
  }

  configurations.all {
    resolutionStrategy {
      force library.java.values()
    }
  }

}

ext.applyGoNature = {
  println "applyGoNature with " + (it ? "$it" : "default configuration") + " for project $project.name"
  apply plugin: "com.github.blindpirate.gogradle"
  golang {
    goVersion = '1.9'
  }
}

ext.applyGrpcNature = {
  println "applyGrpcNature with " + (it ? "$it" : "default configuration") + " for project $project.name"
  apply plugin: "com.google.protobuf"
  protobuf {
    protoc {
      // The artifact spec for the Protobuf Compiler
      artifact = "com.google.protobuf:protoc:3.2.0"
    }

    // Configure the codegen plugins
    plugins {
      // An artifact spec for a protoc plugin, with "grpc" as
      // the identifier, which can be referred to in the "plugins"
      // container of the "generateProtoTasks" closure.
      grpc {
        artifact = "io.grpc:protoc-gen-grpc-java:1.2.0"
      }
    }

    generateProtoTasks {
      ofSourceSet("main")*.plugins {
        // Apply the "grpc" plugin whose spec is defined above, without
        // options.  Note the braces cannot be omitted, otherwise the
        // plugin will not be added. This is because of the implicit way
        // NamedDomainObjectContainer binds the methods.
        grpc { }
      }
    }
  }
}

ext.applyAvroNature = {
  println "applyAvroNature with " + (it ? "$it" : "default configuration") + " for project $project.name"
  apply plugin: "com.commercehub.gradle.plugin.avro"
}
