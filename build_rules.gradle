/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * License); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

println "Applying build_rules.gradle to $project.name"

/*************************************************************************************************/
// Apply common properties/repositories and tasks to all builds.

group = "org.apache.beam"
version = "2.3.0-SNAPSHOT"

// Define the default set of properties
repositories {
  mavenLocal()
  mavenCentral()
  jcenter()

  // Release staging repository
  maven { url "https://oss.sonatype.org/content/repositories/staging/" }

  // Apache nightly snapshots
  maven { url "https://repository.apache.org/snapshots" }

  // Apache release snapshots
  maven { url "https://repository.apache.org/content/repositories/releases" }
}

// Provide code coverage
apply plugin: "jacoco"

// Provies "htmlDependencyReport" task which spits out a nice page per subproject
// showing all the dependencies per Gradle configuration.
apply plugin: "project-report"

// Apply a task dependency visualization plugin which creates a ".dot" file in the build directory
// giving the task dependencies for that project
apply plugin: "cz.malohlava.visteg"

/*************************************************************************************************/

/** Used as configuration within the applyJavaNature closure. */
class JavaNatureConfiguration {
  double javaVersion = 1.7
  boolean enableFindbugs = true
  boolean enableShadow = true
}

/** Takes a map of parameters. See JavaNatureConfiguration for the set of parameters allowed. */
ext.applyJavaNature = {
  println "applyJavaNature with " + (it ? "$it" : "default configuration") + " for project $project.name"
  // Use the implicit it parameter of the closure to handle zero argument or one argument map calls.
  JavaNatureConfiguration configuration = it ? it as JavaNatureConfiguration : new JavaNatureConfiguration()
  apply plugin: "maven"
  apply plugin: "java"

  sourceCompatibility = configuration.javaVersion
  targetCompatibility = configuration.javaVersion
  tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
  }

  test {
    // Configure the gradle include defaults to be equivalent to the maven-surefire-plugin
    // http://maven.apache.org/components/surefire/maven-surefire-plugin/test-mojo.html
    include "**/Test*.class"
    include "**/*Test.class"
    include "**/*Tests.class"
    include "**/*TestCase.class"
    useJUnit { }
  }

  apply plugin: "net.ltgt.apt"
  dependencies {
    def auto_value = "com.google.auto.value:auto-value:1.5.1"
    def auto_service = "com.google.auto.service:auto-service:1.0-rc2"
    compileOnly auto_value
    apt auto_value
    testCompileOnly auto_value
    testApt auto_value

    compileOnly auto_service
    apt auto_service
    testCompileOnly auto_service
    testApt auto_service
  }

  // Add the optional and provided scopes for dependencies
  apply plugin: 'propdeps'
  apply plugin: 'propdeps-maven'

  apply plugin: 'checkstyle'

  tasks.withType(Checkstyle) {
    configFile = project(":").file("sdks/java/build-tools/src/main/resources/beam/checkstyle.xml")
    configProperties = [ "checkstyle.suppressions.file": project(":").file("sdks/java/build-tools/src/main/resources/beam/suppressions.xml") ]
    showViolations = true
    maxErrors = 0
  }

  apply plugin: 'com.diffplug.gradle.spotless'
  spotless {
    java {
      target rootProject.fileTree(rootProject.rootDir) {
        include 'sdks/java/**/*.java'
      }
      // Code formatting disabled because style rules are out of date.
      // eclipse().configFile(rootProject.file('sdks/java/build-tools/src/main/resources/beam/beam-codestyle.xml'))
    }
  }

  if (configuration.enableFindbugs) {
    apply plugin: 'findbugs'
    findbugs {
      excludeFilter = rootProject.file('sdks/java/build-tools/src/main/resources/beam/findbugs-filter.xml')
      sourceSets = [sourceSets.main]
    }
  }

  if (configuration.enableShadow) {
    apply plugin: 'com.github.johnrengelman.shadow'

    // Shade guava in all our dependencies.
    shadowJar {
      classifier = "shaded"
      mergeServiceFiles()
      dependencies {
        exclude(".*")
        include(dependency(library.java.guava))
      }
      relocate("com.google.common", "org.apache.beam.${project.name}.repackaged.com.google.common") {
        // com.google.common is too generic, need to exclude guava-testlib
        exclude "com.google.common.collect.testing.**"
        exclude "com.google.common.escape.testing.**"
        exclude "com.google.common.testing.**"
        exclude "com.google.common.util.concurrent.testing.**"
      }
    }

    // Create a new configuration 'shadowTest' like 'shadow' for the test scope
    configurations {
      shadow {
        description = "Dependencies for shaded source set 'main'"
      }
      compile.extendsFrom shadow
      shadowTest {
        description = "Dependencies for shaded source set 'test'"
        extendsFrom shadow
      }
      testCompile.extendsFrom shadowTest
    }
    // TODO: Figure out how to create ShadowJar task for testShadowJar here
    // that is extendable within each sub-project with any additional includes.
    // Optimally, a single configuration would apply to both.
  }

  // Ban these dependencies from all configurations
  configurations.all {
    // guava-jdk5 brings in classes which conflict with guava
    exclude group: "com.google.guava", module: "guava-jdk5"
    // Ban the usage of the JDK tools as a library as this is system dependent
    exclude group: "jdk.tools", module: "jdk.tools"
    // protobuf-lite duplicates classes which conflict with protobuf-java
    exclude group: "com.google.protobuf", module: "protobuf-lite"
    // Exclude these test dependencies because they bundle other common
    // test libraries classes causing version conflicts. Users should rely
    // on using the yyy-core package instead of the yyy-all package.
    exclude group: "org.hamcrest", module: "hamcrest-all"
    exclude group: "org.mockito", module: "mockito-all"
  }

  // Force usage of the libraries defined within our common set
  // instead of using Gradles default dependency resolution mechanism
  // which chooses the latest version available.
  configurations.all {
    resolutionStrategy {
      force library.java.values()
    }
  }

}

ext.applyGoNature = {
  println "applyGoNature with " + (it ? "$it" : "default configuration") + " for project $project.name"
  apply plugin: "com.github.blindpirate.gogradle"
  golang {
    goVersion = '1.9'
  }

  // GoGradle fails in a parallel build during dependency resolution/installation.
  // Force a dependency between all GoGradle projects during dependency resolution/installation.
  // TODO: Figure out how to do this by automatically figuring out the task dependency DAG
  // based upon task type.
  List<String> goProjects = [
      ":beam-sdks-parent:beam-sdks-go",
      ":beam-runners-parent:beam-runners-gcp-parent:beam-runners-gcp-gcemd",
      ":beam-runners-parent:beam-runners-gcp-parent:beam-runners-gcp-gcsproxy",
      ":beam-sdks-parent:beam-sdks-python:beam-sdks-python-container",
      ":beam-sdks-parent:beam-sdks-java-parent:beam-sdks-java-container",
  ]
  if (!goProjects.contains(project.path)) {
    throw new GradleException(project.path + " has not been defined within the list of well known go projects within build_rules.gradle.")
  }

  int index = goProjects.indexOf(project.path)
  if (index != 0) {
    String previous = goProjects.get(index - 1)
    println "Forcing: '" + previous + "' to be evaulated before '" + project.path + "'"
    evaluationDependsOn(previous)
    afterEvaluate {
      println "Forcing: '" + previous + ":installBuildDependencies' must run before '" + project.path + ":resolveBuildDependencies'"
      tasks.getByPath(project.path + ":resolveBuildDependencies").mustRunAfter tasks.getByPath(previous + ":installDependencies")
    }
  }
}

ext.applyDockerNature = {
  println "applyDockerNature with " + (it ? "$it" : "default configuration") + " for project $project.name"
  apply plugin: "com.palantir.docker"
  docker {
    noCache true
  }
}

ext.applyGrpcNature = {
  println "applyGrpcNature with " + (it ? "$it" : "default configuration") + " for project $project.name"
  apply plugin: "com.google.protobuf"
  protobuf {
    protoc {
      // The artifact spec for the Protobuf Compiler
      artifact = "com.google.protobuf:protoc:3.2.0"
    }

    // Configure the codegen plugins
    plugins {
      // An artifact spec for a protoc plugin, with "grpc" as
      // the identifier, which can be referred to in the "plugins"
      // container of the "generateProtoTasks" closure.
      grpc {
        artifact = "io.grpc:protoc-gen-grpc-java:1.2.0"
      }
    }

    generateProtoTasks {
      ofSourceSet("main")*.plugins {
        // Apply the "grpc" plugin whose spec is defined above, without
        // options.  Note the braces cannot be omitted, otherwise the
        // plugin will not be added. This is because of the implicit way
        // NamedDomainObjectContainer binds the methods.
        grpc { }
      }
    }
  }
}

ext.applyAvroNature = {
  println "applyAvroNature with " + (it ? "$it" : "default configuration") + " for project $project.name"
  apply plugin: "com.commercehub.gradle.plugin.avro"
}
