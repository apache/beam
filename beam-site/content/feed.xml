<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Apache Beam</title>
    <description>Apache Beam is an open source, unified model and set of language-specific SDKs for defining and executing data processing workflows, and also data ingestion and integration flows, supporting Enterprise Integration Patterns (EIPs) and Domain Specific Languages (DSLs). Dataflow pipelines simplify the mechanics of large-scale batch and streaming data processing and can run on a number of runtimes like Apache Flink, Apache Spark, and Google Cloud Dataflow (a cloud service). Beam also brings DSL in different languages, allowing users to easily implement their data integration processes.
</description>
    <link>https://beam.apache.org/</link>
    <atom:link href="https://beam.apache.org/feed.xml" rel="self" type="application/rss+xml"/>
    <generator>Jekyll v3.2.0</generator>
    
      <item>
        <title>Apache Beam 2.3.0</title>
        <description>&lt;p&gt;We are glad to present the new 2.3.0 release of Beam. This release includes
multiple fixes and new functionalities. &lt;!--more--&gt; For more information
please check the detailed release notes.&lt;/p&gt;

&lt;h1 id=&quot;new-features--improvements&quot;&gt;New Features / Improvements&lt;/h1&gt;

&lt;h2 id=&quot;beam-moves-to-java-8&quot;&gt;Beam moves to Java 8&lt;/h2&gt;

&lt;p&gt;The supported version of Java for Beam is now Java 8. The code and examples have
been refactored to use multiple of the advantages of the language, e.g. lambdas,
streams, improved type inference, etc.&lt;/p&gt;

&lt;h2 id=&quot;spark-runner-is-now-based-on-spark-2x&quot;&gt;Spark runner is now based on Spark 2.x&lt;/h2&gt;

&lt;p&gt;Spark runner moves forward into the Spark 2.x development line, this would allow
to benefit of improved performance, as well as open the runner for future
compatibility with the Structured Streaming APIs. Notice that support for Spark
1.x is finished with this release.&lt;/p&gt;

&lt;h2 id=&quot;amazon-web-services-s3-filesystem-support&quot;&gt;Amazon Web Services S3 Filesystem support&lt;/h2&gt;

&lt;p&gt;Beam already supported AWS S3 via HadoopFileSystem, but this version brings a
native implementation with the corresponding performance advantages of the S3
filesystem.&lt;/p&gt;

&lt;h2 id=&quot;general-purpose-writing-to-files&quot;&gt;General-purpose writing to files&lt;/h2&gt;

&lt;p&gt;This release contains a new transform, FileIO.write() / writeDynamic() that
implements a general-purpose fluent and Java8-friendly API for writing to files
using a FileIO.Sink. This API has similar capabilities to DynamicDestinations
APIs from Beam 2.2 but is much easier to use and extend. The DynamicDestinations
APIs for writing to files are deprecated by it, as is FileBasedSink.&lt;/p&gt;

&lt;h2 id=&quot;splittable-dofn-support-on-the-python-sdk&quot;&gt;Splittable DoFn support on the Python SDK&lt;/h2&gt;

&lt;p&gt;This release adds the Splittable DoFn API for Python SDK and adds Splittable
DoFn support for Python streaming DirectRunner.&lt;/p&gt;

&lt;h2 id=&quot;portability&quot;&gt;Portability&lt;/h2&gt;

&lt;p&gt;Progress continues to being able to execute Python on runners other then Google
Cloud Dataflow and the Go SDK on any runner.&lt;/p&gt;

&lt;h1 id=&quot;miscellaneous-fixes&quot;&gt;Miscellaneous Fixes&lt;/h1&gt;

&lt;h2 id=&quot;sdks&quot;&gt;SDKs&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;MapElements and FlatMapElements support using side inputs using the new
interface Contextful.Fn. For library authors, this interface is the
recommended choice for user-code callbacks that may use side inputs.&lt;/li&gt;
  &lt;li&gt;Introduces the family of Reify transforms for converting between explicit and
implicit representations of various Beam entities.&lt;/li&gt;
  &lt;li&gt;Introduces two transforms for approximate sketching of data: Count-Min Sketch
(approximate element frequency estimation) and HyperLogLog (approximate
cardinality estimation).&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;runners&quot;&gt;Runners&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Staging files on Dataflow shows progress&lt;/li&gt;
  &lt;li&gt;Flink runner is based now on Flink version 1.4.0&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;ios&quot;&gt;IOs&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;BigtableIO now supports ValueProvider configuration&lt;/li&gt;
  &lt;li&gt;BigQueryIO supports writing bounded collections to tables with partition
decorators&lt;/li&gt;
  &lt;li&gt;KafkaIO moves to version 1.0 (it is still backwards compatible with versions &amp;gt;= 0.9.x.x)&lt;/li&gt;
  &lt;li&gt;Added IO source for VCF files (Python)&lt;/li&gt;
  &lt;li&gt;Added support for backoff on deadlocks in JdbcIO.write() and connection
improvement&lt;/li&gt;
  &lt;li&gt;Improved performance of KinesisIO.read()&lt;/li&gt;
  &lt;li&gt;Many improvements to TikaIO&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;list-of-contributors&quot;&gt;List of Contributors&lt;/h1&gt;

&lt;p&gt;According to git shortlog, the following 78 people contributed to the 2.3.0 release. Thank you to all contributors!&lt;/p&gt;

&lt;p&gt;Ahmet Altay, Alan Myrvold, Alex Amato, Alexey Romanenko, Ankur Goenka, Anton Kedin, Arnaud Fournier, Asha Rostamianfar, Ben Chambers, Ben Sidhom, Bill Neubauer, Brian Foo, cclauss, Chamikara Jayalath, Charles Chen, Colm O hEigeartaigh, Daniel Oliveira, Dariusz Aniszewski, David Cavazos, David Sabater, David Sabater Dinter, Dawid Wysakowicz, Dmytro Ivanov, Etienne Chauchot, Eugene Kirpichov, Exprosed, Grzegorz Kołakowski, Henning Rohde, Holden Karau, Huygaa Batsaikhan, Ilya Figotin, Innocent Djiofack, Ismaël Mejía, Itamar Ostricher, Jacky, Jacob Marble, James Xu, Jean-Baptiste Onofré, Jeremie Lenfant-Engelmann, Kamil Szewczyk, Kenneth Knowles, Lukasz Cwik, Łukasz Gajowy, Luke Zhu, Mairbek Khadikov, María García Herrero, Marian Dvorsky, Mark Liu, melissa, Miles Saul, mingmxu, Motty Gruda, nerdynick, Neville Li, Nigel Kilmer, Pablo, Pawel Kaczmarczyk, Petr Shevtsov, Rafal Wojdyla, Raghu Angadi, Robert Bradshaw, Robert Burke, Romain Manni-Bucau, Ryan Niemocienski, Ryan Skraba, Sam Whittle, Scott Wegner, Shashank Prabhakara, Solomon Duskis, Thomas Groh, Thomas Weise, Udi Meiri, Valentyn Tymofieiev, wtanaka.com, XuMingmin, zhouhai02, Zohar Yahav, 琨瑜.&lt;/p&gt;

</description>
        <pubDate>Mon, 19 Feb 2018 00:00:01 -0800</pubDate>
        <link>https://beam.apache.org/blog/2018/02/19/beam-2.3.0.html</link>
        <guid isPermaLink="true">https://beam.apache.org/blog/2018/02/19/beam-2.3.0.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Apache Beam: A Look Back at 2017</title>
        <description>&lt;p&gt;On January 10, 2017, Apache Beam got &lt;a href=&quot;/blog/2017/01/10/beam-graduates.html&quot;&gt;promoted&lt;/a&gt;
as a Top-Level Apache Software Foundation project. It was an important milestone
that validated the value of the project, legitimacy of its community, and
heralded its growing adoption. In the past year, Apache Beam has been on a
phenomenal growth trajectory, with significant growth in its community and
feature set. Let us walk you through some of the notable achievements.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;use-cases&quot;&gt;Use cases&lt;/h2&gt;

&lt;p&gt;First, lets take a glimpse at how Beam was used in 2017. Apache Beam being a
unified framework for batch and stream processing, enables a very wide spectrum
of diverse use cases. Here are some use cases that exemplify the versatility of
Beam.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center-block&quot; src=&quot;/images/blog/2017-look-back/timeline.png&quot; alt=&quot;Use Cases&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;community-growth&quot;&gt;Community growth&lt;/h2&gt;

&lt;p&gt;In 2017, Apache Beam had 174 contributors worldwide, from many different
organizations. As an Apache project, we are proud to count 18 PMC members and
31 committers. The community had 7 releases in 2017, each bringing a rich set of
new features and fixes.&lt;/p&gt;

&lt;p&gt;The most obvious and encouraging sign of the growth of Apache Beam’s community,
and validation of its core value proposition of portability, is the addition of
significant new &lt;a href=&quot;/documentation/runners/capability-matrix/&quot;&gt;runners&lt;/a&gt;
(i.e. execution engines). We entered 2017 with Apache Flink, Apache Spark 1.x,
Google Cloud Dataflow, Apache Apex, and Apache Gearpump. In 2017, the following
new and updated runners were developed:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Apache Spark 2.x update&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.ibm.com/blogs/bluemix/2017/10/streaming-analytics-updates-ibm-streams-runner-apache-beam-2-0/&quot;&gt;IBM Streams runner&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;MapReduce runner&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://jstorm.io/&quot;&gt;JStorm runner&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In addition to runners, Beam added new IO connectors, some notable ones being
the Cassandra, MQTT, AMQP, HBase/HCatalog, JDBC, Solr, Tika, Redis, and
ElasticSearch connectors. Beam’s IO connectors make it possible to read from or
write to data sources/sinks even when they are not natively supported by the
underlying execution engine. Beam also provides fully pluggable filesystem
support, allowing us to support and extend our coverage to HDFS, S3, Azure
Storage, and Google Storage. We continue to add new IO connectors and
filesystems to extend the Beam use cases.&lt;/p&gt;

&lt;p&gt;A particularly telling sign of the maturity of an open source community is when
it is able to collaborate with multiple other open source communities, and
mutually improve the state of the art. Over the past few months, the Beam,
Calcite, and Flink communities have come together to define a robust &lt;a href=&quot;https://docs.google.com/document/d/1wrla8mF_mmq-NW9sdJHYVgMyZsgCmHumJJ5f5WUzTiM/edit&quot;&gt;spec&lt;/a&gt;
for Streaming SQL, with engineers from over four organizations contributing to
it. If, like us, you are excited by the prospect of improving the state of
streaming SQL, please join us!&lt;/p&gt;

&lt;p&gt;In addition to SQL, new XML and JSON based declarative DSLs are also in PoC.&lt;/p&gt;

&lt;h2 id=&quot;continued-innovation&quot;&gt;Continued innovation&lt;/h2&gt;

&lt;p&gt;Innovation is important to the success on any open source project, and Beam has
a rich history of bringing innovative new ideas to the open source community.
Apache Beam was the first to introduce some seminal concepts in the world of
big-data processing:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Unified batch and streaming SDK that enables users to author big-data jobs
without having to learn multiple disparate SDKs/APIs.&lt;/li&gt;
  &lt;li&gt;Cross-Engine Portability: Giving enterprises the confidence that workloads
authored today will not have to be re-written when open source engines become
outdated and are supplanted by newer ones.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.oreilly.com/ideas/the-world-beyond-batch-streaming-101&quot;&gt;Semantics&lt;/a&gt;
essential for reasoning about unbounded unordered data, and achieving
consistent and correct output from a streaming job.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In 2017, the pace of innovation continued. The following capabilities were
introduced:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Cross-Language Portability framework, and a &lt;a href=&quot;https://golang.org/&quot;&gt;Go&lt;/a&gt; SDK
developed with it.&lt;/li&gt;
  &lt;li&gt;Dynamically Shardable IO (SplittableDoFn)&lt;/li&gt;
  &lt;li&gt;Support for schemas in PCollection, allowing us to extend the runner
capabilities.&lt;/li&gt;
  &lt;li&gt;Extensions addressing new use cases such as machine learning, and new data
formats.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;areas-of-improvement&quot;&gt;Areas of improvement&lt;/h2&gt;

&lt;p&gt;Any retrospective view of a project is incomplete without an honest assessment
of areas of improvement. Two aspects stand out:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Helping runners showcase their individual strengths. After all, portability
does not imply homogeneity. Different runners have different areas in which
they excel, and we need to do a better job of helping them highlight their
strengths.&lt;/li&gt;
  &lt;li&gt;Based on the previous point, helping customers make a more informed decision
when they select a runner or migrate from one to another.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In 2018, we aim to take proactive steps to improve the above aspects.&lt;/p&gt;

&lt;h2 id=&quot;ethos-of-the-project-and-its-community&quot;&gt;Ethos of the project and its community&lt;/h2&gt;

&lt;p&gt;The world of batch and stream big-data processing today is reminiscent of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Tower_of_Babel&quot;&gt;Tower of Babel&lt;/a&gt; parable: a
slowdown of progress because different communities spoke different languages.
Similarly, today there are multiple disparate big-data SDKs/APIs, each with
their own distinct terminology to describe similar concepts. The side effect is
user confusion and slower adoption.&lt;/p&gt;

&lt;p&gt;The Apache Beam project aims to provide an industry standard portable SDK that
will:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Benefit users by providing &lt;strong&gt;&lt;em&gt;innovation with stability&lt;/em&gt;&lt;/strong&gt;: The separation of
SDK and engine enables healthy competition between runners, without requiring
users to constantly learn new SDKs/APIs and rewrite their workloads to
benefit from new innovation.&lt;/li&gt;
  &lt;li&gt;Benefit big-data engines by &lt;strong&gt;&lt;em&gt;growing the pie for everyone&lt;/em&gt;&lt;/strong&gt;: Making it
easier for users to author, maintain, upgrade and migrate their big-data
workloads will lead to significant growth in the number of production
big-data deployments.&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Tue, 09 Jan 2018 00:00:01 -0800</pubDate>
        <link>https://beam.apache.org/blog/2018/01/09/beam-a-look-back.html</link>
        <guid isPermaLink="true">https://beam.apache.org/blog/2018/01/09/beam-a-look-back.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Timely (and Stateful) Processing with Apache Beam</title>
        <description>&lt;p&gt;In a &lt;a href=&quot;/blog/2017/02/13/stateful-processing.html&quot;&gt;prior blog
post&lt;/a&gt;, I
introduced the basics of stateful processing in Apache Beam, focusing on the
addition of state to per-element processing. So-called &lt;em&gt;timely&lt;/em&gt; processing
complements stateful processing in Beam by letting you set timers to request a
(stateful) callback at some point in the future.&lt;/p&gt;

&lt;p&gt;What can you do with timers in Beam? Here are some examples:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You can output data buffered in state after some amount of processing time.&lt;/li&gt;
  &lt;li&gt;You can take special action when the watermark estimates that you have
received all data up to a specified point in event time.&lt;/li&gt;
  &lt;li&gt;You can author workflows with timeouts that alter state and emit output in
response to the absence of additional input for some period of time.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These are just a few possibilities. State and timers together form a powerful
programming paradigm for fine-grained control to express a huge variety of
workflows.  Stateful and timely processing in Beam is portable across data
processing engines and integrated with Beam’s unified model of event time
windowing in both streaming and batch processing.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;what-is-stateful-and-timely-processing&quot;&gt;What is stateful and timely processing?&lt;/h2&gt;

&lt;p&gt;In my prior post, I developed an understanding of stateful processing largely
by contrast with associative, commutative combiners. In this post, I’ll
emphasize a perspective that I had mentioned only briefly: that elementwise
processing with access to per-key-and-window state and timers represents a
fundamental pattern for “embarrassingly parallel” computation, distinct from
the others in Beam.&lt;/p&gt;

&lt;p&gt;In fact, stateful and timely computation is the low-level computational pattern
that underlies the others. Precisely because it is lower level, it allows you
to really micromanage your computations to unlock new use cases and new
efficiencies. This incurs the complexity of manually managing your state and
timers - it isn’t magic! Let’s first look again at the two primary
computational patterns in Beam.&lt;/p&gt;

&lt;h3 id=&quot;element-wise-processing-pardo-map-etc&quot;&gt;Element-wise processing (ParDo, Map, etc)&lt;/h3&gt;

&lt;p&gt;The most elementary embarrassingly parallel pattern is just using a bunch of
computers to apply the same function to every input element of a massive
collection. In Beam, per-element processing like this is expressed as a basic
&lt;code class=&quot;highlighter-rouge&quot;&gt;ParDo&lt;/code&gt; - analogous to “Map” from MapReduce - which is like an enhanced “map”,
“flatMap”, etc, from functional programming.&lt;/p&gt;

&lt;p&gt;The following diagram illustrates per-element processing. Input elements are
squares, output elements are triangles. The colors of the elements represent
their key, which will matter later. Each input element maps to the
corresponding output element(s) completely independently. Processing may be
distributed across computers in any way, yielding essentially limitless
parallelism.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center-block&quot; src=&quot;/images/blog/timely-processing/ParDo.png&quot; alt=&quot;ParDo offers limitless parallelism&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This pattern is obvious, exists in all data-parallel paradigms, and has
a simple stateless implementation. Every input element can be processed
independently or in arbitrary bundles. Balancing the work between computers is
actually the hard part, and can be addressed by splitting, progress estimation,
work-stealing, etc.&lt;/p&gt;

&lt;h3 id=&quot;per-key-and-window-aggregation-combine-reduce-groupbykey-etc&quot;&gt;Per-key (and window) aggregation (Combine, Reduce, GroupByKey, etc.)&lt;/h3&gt;

&lt;p&gt;The other embarassingly parallel design pattern at the heart of Beam is per-key
(and window) aggregation. Elements sharing a key are colocated and then
combined using some associative and commutative operator. In Beam this is
expressed as a &lt;code class=&quot;highlighter-rouge&quot;&gt;GroupByKey&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;Combine.perKey&lt;/code&gt;, and corresponds to the shuffle
and “Reduce” from MapReduce.  It is sometimes helpful to think of per-key
&lt;code class=&quot;highlighter-rouge&quot;&gt;Combine&lt;/code&gt; as the fundamental operation, and raw &lt;code class=&quot;highlighter-rouge&quot;&gt;GroupByKey&lt;/code&gt; as a combiner that
just concatenates input elements. The communication pattern for the input
elements is the same, modulo some optimizations possible for &lt;code class=&quot;highlighter-rouge&quot;&gt;Combine&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In the illustration here, recall that the color of each element represents the
key. So all of the red squares are routed to the same location where they are
aggregated and the red triangle is the output.  Likewise for the yellow and
green squares, etc. In a real application, you may have millions of keys, so
the parallelism is still massive.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center-block&quot; src=&quot;/images/blog/timely-processing/CombinePerKey.png&quot; alt=&quot;Gathering elements per key then combining them&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The underlying data processing engine will, at some level of abstraction, use
state to perform this aggregation across all the elements arriving for a key.
In particular, in a streaming execution, the aggregation process may need to
wait for more data to arrive or for the watermark to estimate that all input
for an event time window is complete. This requires some way to store the
intermediate aggregation between input elements as well a way to a receive a
callback when it is time to emit the result. As a result, the &lt;em&gt;execution&lt;/em&gt; of
per key aggregation by a stream processing engine fundamentally involves state
and timers.&lt;/p&gt;

&lt;p&gt;However, &lt;em&gt;your&lt;/em&gt; code is just a declarative expression of the aggregation
operator.  The runner can choose a variety of ways to execute your operator. 
I went over this in detail in &lt;a href=&quot;/blog/2017/02/13/stateful-processing.html&quot;&gt;my prior post focused on state alone&lt;/a&gt;. Since you do not
observe elements in any defined order, nor manipulate mutable state or timers
directly, I call this neither stateful nor timely processing.&lt;/p&gt;

&lt;h3 id=&quot;per-key-and-window-stateful-timely-processing&quot;&gt;Per-key-and-window stateful, timely processing&lt;/h3&gt;

&lt;p&gt;Both &lt;code class=&quot;highlighter-rouge&quot;&gt;ParDo&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Combine.perKey&lt;/code&gt; are standard patterns for parallelism that go
back decades. When implementing these in a massive-scale distributed data
processing engine, we can highlight a few characteristics that are particularly
important.&lt;/p&gt;

&lt;p&gt;Let us consider these characteristics of &lt;code class=&quot;highlighter-rouge&quot;&gt;ParDo&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You write single-threaded code to process one element.&lt;/li&gt;
  &lt;li&gt;Elements are processed in arbitrary order with no dependencies
or interaction between processing of elements.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And these characteristics for &lt;code class=&quot;highlighter-rouge&quot;&gt;Combine.perKey&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Elements for a common key and window are gathered together.&lt;/li&gt;
  &lt;li&gt;A user-defined operator is applied to those elements.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Combining some of the characteristics of unrestricted parallel mapping and
per-key-and-window combination, we can discern a megaprimitive from which we
build stateful and timely processing:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Elements for a common key and window are gathered together.&lt;/li&gt;
  &lt;li&gt;Elements are processed in arbitrary order.&lt;/li&gt;
  &lt;li&gt;You write single-threaded code to process one element or timer, possibly
accessing state or setting timers.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the illustration below, the red squares are gathered and fed one by one to
the stateful, timely, &lt;code class=&quot;highlighter-rouge&quot;&gt;DoFn&lt;/code&gt;. As each element is processed, the &lt;code class=&quot;highlighter-rouge&quot;&gt;DoFn&lt;/code&gt; has
access to state (the color-partitioned cylinder on the right) and can set
timers to receive callbacks (the colorful clocks on the left).&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center-block&quot; src=&quot;/images/blog/timely-processing/StateAndTimers.png&quot; alt=&quot;Gathering elements per key then timely, stateful processing&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So that is the abstract notion of per-key-and-window stateful, timely
processing in Apache Beam. Now let’s see what it looks like to write code that
accesses state, sets timers, and receives callbacks.&lt;/p&gt;

&lt;h2 id=&quot;example-batched-rpc&quot;&gt;Example: Batched RPC&lt;/h2&gt;

&lt;p&gt;To demonstrate stateful and timely processing, let’s work through a concrete
example, with code.&lt;/p&gt;

&lt;p&gt;Suppose you are writing a system to analyze events.  You have a ton of data
coming in and you need to enrich each event by RPC to an external system. You
can’t just issue an RPC per event.  Not only would this be terrible for
performance, but it would also likely blow your quota with the external system.
So you’d like to gather a number of events, make one RPC for them all, and then
output all the enriched events.&lt;/p&gt;

&lt;h3 id=&quot;state&quot;&gt;State&lt;/h3&gt;

&lt;p&gt;Let’s set up the state we need to track batches of elements. As each element
comes in, we will write the element to a buffer while tracking the number of
elements we have buffered. Here are the state cells in code:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DoFn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EnrichedEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@StateId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;buffer&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StateSpec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BagState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bufferedEvents&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StateSpecs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;bag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@StateId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;count&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StateSpec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ValueState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;countState&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StateSpecs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

  &lt;span class=&quot;err&quot;&gt;…&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TBD&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;…&lt;/span&gt; 
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-py highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# State and timers are not yet supported in Beam's Python SDK.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Follow https://issues.apache.org/jira/browse/BEAM-2687 for updates.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Walking through the code, we have:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The state cell &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;buffer&quot;&lt;/code&gt; is an unordered bag of buffered events.&lt;/li&gt;
  &lt;li&gt;The state cell &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;count&quot;&lt;/code&gt; tracks how many events have been buffered.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next, as a recap of reading and writing state, let’s write our &lt;code class=&quot;highlighter-rouge&quot;&gt;@ProcessElement&lt;/code&gt;
method. We will choose a limit on the size of the buffer, &lt;code class=&quot;highlighter-rouge&quot;&gt;MAX_BUFFER_SIZE&lt;/code&gt;. If
our buffer reaches this size, we will perform a single RPC to enrich all the
events, and output.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DoFn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EnrichedEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MAX_BUFFER_SIZE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@StateId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;buffer&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StateSpec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BagState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bufferedEvents&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StateSpecs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;bag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@StateId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;count&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StateSpec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ValueState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;countState&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StateSpecs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@ProcessElement&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;ProcessContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nd&quot;&gt;@StateId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;buffer&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BagState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bufferState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nd&quot;&gt;@StateId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;count&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ValueState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;countState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;firstNonNull&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;countState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;countState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;bufferState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MAX_BUFFER_SIZE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EnrichedEvent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;enrichedEvent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;enrichEvents&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bufferState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;enrichedEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;bufferState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;countState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;err&quot;&gt;…&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TBD&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;…&lt;/span&gt; 
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-py highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# State and timers are not yet supported in Beam's Python SDK.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Follow https://issues.apache.org/jira/browse/BEAM-2687 for updates.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Here is an illustration to accompany the code:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center-block&quot; src=&quot;/images/blog/timely-processing/BatchedRpcState.png&quot; alt=&quot;Batching elements in state, then performing RPCs&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The blue box is the &lt;code class=&quot;highlighter-rouge&quot;&gt;DoFn&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;The yellow box within it is the &lt;code class=&quot;highlighter-rouge&quot;&gt;@ProcessElement&lt;/code&gt; method.&lt;/li&gt;
  &lt;li&gt;Each input event is a red square - this diagram just shows the activity for
a single key, represented by the color red. Your &lt;code class=&quot;highlighter-rouge&quot;&gt;DoFn&lt;/code&gt; will run the same
workflow in parallel for all keys which are perhaps user IDs.&lt;/li&gt;
  &lt;li&gt;Each input event is written to the buffer as a red triangle, representing
the fact that you might actually buffer more than just the raw input, even
though this code doesn’t.&lt;/li&gt;
  &lt;li&gt;The external service is drawn as a cloud. When there are enough buffered
events, the &lt;code class=&quot;highlighter-rouge&quot;&gt;@ProcessElement&lt;/code&gt; method reads the events from state and issues
a single RPC.&lt;/li&gt;
  &lt;li&gt;Each output enriched event is drawn as a red circle. To consumers of this
output, it looks just like an element-wise operation.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So far, we have only used state, but not timers. You may have noticed that
there is a problem - there will usually be data left in the buffer. If no more
input arrives, that data will never be processed. In Beam, every window has
some point in event time when any further input for the window is considered
too late and is discarded. At this point, we say that the window has “expired”.
Since no further input can arrive to access the state for that window, the
state is also discarded. For our example, we need to ensure that all leftover
events are output when the window expires.&lt;/p&gt;

&lt;h3 id=&quot;event-time-timers&quot;&gt;Event Time Timers&lt;/h3&gt;

&lt;p&gt;An event time timer requests a call back when the watermark for an input
&lt;code class=&quot;highlighter-rouge&quot;&gt;PCollection&lt;/code&gt; reaches some threshold. In other words, you can use an event time
timer to take action at a specific moment in event time - a particular point of
completeness for a &lt;code class=&quot;highlighter-rouge&quot;&gt;PCollection&lt;/code&gt; - such as when a window expires.&lt;/p&gt;

&lt;p&gt;For our example, let us add an event time timer so that when the window expires,
any events remaining in the buffer are processed.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DoFn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EnrichedEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;…&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@TimerId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;expiry&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TimerSpec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expirySpec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TimerSpecs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;timer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TimeDomain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;EVENT_TIME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@ProcessElement&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;ProcessContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;BoundedWindow&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nd&quot;&gt;@StateId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;buffer&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BagState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bufferState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nd&quot;&gt;@StateId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;count&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ValueState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;countState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nd&quot;&gt;@TimerId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;expiry&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Timer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expiryTimer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;expiryTimer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;maxTimestamp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;plus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;allowedLateness&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

    &lt;span class=&quot;err&quot;&gt;…&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;same&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logic&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;above&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;…&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@OnTimer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;expiry&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onExpiry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;OnTimerContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nd&quot;&gt;@StateId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;buffer&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BagState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bufferState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bufferState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EnrichedEvent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;enrichedEvent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;enrichEvents&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bufferState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;enrichedEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-py highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# State and timers are not yet supported in Beam's Python SDK.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Follow https://issues.apache.org/jira/browse/BEAM-2687 for updates.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Let’s unpack the pieces of this snippet:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;We declare an event time timer with &lt;code class=&quot;highlighter-rouge&quot;&gt;@TimerId(&quot;expiry&quot;)&lt;/code&gt;. We will use the
identifier &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;expiry&quot;&lt;/code&gt; to identify the timer for setting the callback time as
well as receiving the callback.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The variable &lt;code class=&quot;highlighter-rouge&quot;&gt;expiryTimer&lt;/code&gt;, annotated with &lt;code class=&quot;highlighter-rouge&quot;&gt;@TimerId&lt;/code&gt;, is set to the value
&lt;code class=&quot;highlighter-rouge&quot;&gt;TimerSpecs.timer(TimeDomain.EVENT_TIME)&lt;/code&gt;, indicating that we want a
callback according to the event time watermark of the input elements.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In the &lt;code class=&quot;highlighter-rouge&quot;&gt;@ProcessElement&lt;/code&gt; element we annotate a parameter &lt;code class=&quot;highlighter-rouge&quot;&gt;@TimerId(&quot;expiry&quot;)
Timer&lt;/code&gt;. The Beam runner automatically provides this &lt;code class=&quot;highlighter-rouge&quot;&gt;Timer&lt;/code&gt; parameter by which
we can set (and reset) the timer. It is inexpensive to reset a timer
repeatedly, so we simply set it on every element.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;We define the &lt;code class=&quot;highlighter-rouge&quot;&gt;onExpiry&lt;/code&gt; method, annotated with &lt;code class=&quot;highlighter-rouge&quot;&gt;@OnTimer(&quot;expiry&quot;)&lt;/code&gt;, that
performs a final event enrichment RPC and outputs the result. The Beam runner
delivers the callback to this method by matching its identifier.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Illustrating this logic, we have the diagram below:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center-block&quot; src=&quot;/images/blog/timely-processing/BatchedRpcExpiry.png&quot; alt=&quot;Batched RPCs with window expiration&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Both the &lt;code class=&quot;highlighter-rouge&quot;&gt;@ProcessElement&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;@OnTimer(&quot;expiry&quot;)&lt;/code&gt; methods perform the same
access to buffered state, perform the same batched RPC, and output enriched
elements.&lt;/p&gt;

&lt;p&gt;Now, if we are executing this in a streaming real-time manner, we might still
have unbounded latency for particular buffered data. If the watermark is advancing
very slowly, or event time windows are chosen to be quite large, then a lot of
time might pass before output is emitted based either on enough elements or
window expiration. We can also use timers to limit the amount of wall-clock
time, aka processing time, before we process buffered elements. We can choose
some reasonable amount of time so that even though we are issuing RPCs that are
not as large as they might be, it is still few enough RPCs to avoid blowing our
quota with the external service.&lt;/p&gt;

&lt;h3 id=&quot;processing-time-timers&quot;&gt;Processing Time Timers&lt;/h3&gt;

&lt;p&gt;A timer in processing time (time as it passes while your pipeline is executing)
is intuitively simple: you want to wait a certain amount of time and then
receive a call back.&lt;/p&gt;

&lt;p&gt;To put the finishing touches on our example, we will set a processing time
timer as soon as any data is buffered. We track whether or not the timer has
been set so we don’t continually reset it. When an element arrives, if the
timer has not been set, then we set it for the current moment plus
&lt;code class=&quot;highlighter-rouge&quot;&gt;MAX_BUFFER_DURATION&lt;/code&gt;. After the allotted processing time has passed, a
callback will fire and enrich and emit any buffered elements.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DoFn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EnrichedEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;…&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Duration&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MAX_BUFFER_DURATION&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Duration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;standardSeconds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@TimerId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stale&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TimerSpec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;staleSpec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TimerSpecs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;timer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TimeDomain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;PROCESSING_TIME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@ProcessElement&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;ProcessContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;BoundedWindow&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nd&quot;&gt;@StateId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;count&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ValueState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;countState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nd&quot;&gt;@StateId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;buffer&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BagState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bufferState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nd&quot;&gt;@TimerId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stale&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Timer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;staleTimer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nd&quot;&gt;@TimerId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;expiry&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Timer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expiryTimer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;staleTimerSet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;firstNonNull&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;staleSetState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;firstNonNull&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;countState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;staleTimer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MAX_BUFFER_DURATION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setRelative&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;err&quot;&gt;…&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;same&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;processing&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logic&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;above&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;…&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@OnTimer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stale&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onStale&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;OnTimerContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nd&quot;&gt;@StateId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;buffer&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BagState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bufferState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nd&quot;&gt;@StateId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;count&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ValueState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;countState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bufferState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EnrichedEvent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;enrichedEvent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;enrichEvents&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bufferState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;enrichedEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;bufferState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;countState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;err&quot;&gt;…&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;same&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expiry&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;above&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;…&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-py highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# State and timers are not yet supported in Beam's Python SDK.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Follow https://issues.apache.org/jira/browse/BEAM-2687 for updates.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Here is an illustration of the final code:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center-block&quot; src=&quot;/images/blog/timely-processing/BatchedRpcStale.png&quot; alt=&quot;Batching elements in state, then performing RPCs&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Recapping the entirety of the logic:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;As events arrive at &lt;code class=&quot;highlighter-rouge&quot;&gt;@ProcessElement&lt;/code&gt; they are buffered in state.&lt;/li&gt;
  &lt;li&gt;If the size of the buffer exceeds a maximum, the events are enriched and output.&lt;/li&gt;
  &lt;li&gt;If the buffer fills too slowly and the events get stale before the maximum is reached,
a timer causes a callback which enriches the buffered events and outputs.&lt;/li&gt;
  &lt;li&gt;Finally, as any window is expiring, any events buffered in that window are
processed and output prior to the state for that window being discarded.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the end, we have a full example that uses state and timers to explicitly
manage the low-level details of a performance-sensitive transform in Beam. As
we added more and more features, our &lt;code class=&quot;highlighter-rouge&quot;&gt;DoFn&lt;/code&gt; actually became pretty large. That
is a normal characteristic of stateful, timely processing. You are really
digging in and managing a lot of details that are handled automatically when
you express your logic using Beam’s higher-level APIs. What you gain from this
extra effort is an ability to tackle use cases and achieve efficiencies that
may not have been possible otherwise.&lt;/p&gt;

&lt;h2 id=&quot;state-and-timers-in-beams-unified-model&quot;&gt;State and Timers in Beam’s Unified Model&lt;/h2&gt;

&lt;p&gt;Beam’s unified model for event time across streaming and batch processing has
novel implications for state and timers. Usually, you don’t need to do anything
for your stateful and timely &lt;code class=&quot;highlighter-rouge&quot;&gt;DoFn&lt;/code&gt; to work well in the Beam model. But it will
help to be aware of the considerations below, especially if you have used
similar features before outside of Beam.&lt;/p&gt;

&lt;h3 id=&quot;event-time-windowing-just-works&quot;&gt;Event Time Windowing “Just Works”&lt;/h3&gt;

&lt;p&gt;One of the raisons d’etre for Beam is correct processing of out-of-order event
data, which is almost all event data. Beam’s solution to out-of-order data is
event time windowing, where windows in event time yield correct results no
matter what windowing a user chooses or what order the events come in.&lt;/p&gt;

&lt;p&gt;If you write a stateful, timely transform, it should work no matter how the
surrounding pipeline chooses to window event time. If the pipeline chooses
fixed windows of one hour (sometimes called tumbling windows) or windows of 30
minutes sliding by 10 minutes, the stateful, timely transform should
transparently work correctly.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center-block&quot; src=&quot;/images/blog/timely-processing/WindowingChoices.png&quot; alt=&quot;Two windowing strategies for the same stateful and timely transform&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This works in Beam automatically, because state and timers are partitioned per
key and window. Within each key and window, the stateful, timely processing is
essentially independent.  As an added benefit, the passing of event time (aka
advancement of the watermark) allows automatic release of unreachable state
when a window expires, so you often don’t have to worry about evicting old
state.&lt;/p&gt;

&lt;h3 id=&quot;unified-real-time-and-historical-processing&quot;&gt;Unified real-time and historical processing&lt;/h3&gt;

&lt;p&gt;A second tenet of Beam’s semantic model is that processing must be unified
between batch and streaming. One important use case for this unification
is the ability to apply the same logic to a stream of events in real time and
to archived storage of the same events.&lt;/p&gt;

&lt;p&gt;A common characteristic of archived data is that it may arrive radically out of
order. The sharding of archived files often results in a totally different
ordering for processing than events coming in near-real-time. The data will
also all be all available and hence delivered instantaneously from the point of
view of your pipeline. Whether running experiments on past data or reprocessing
past results to fix a data processing bug, it is critically important that your
processing logic be applicable to archived events just as easily as incoming
near-real-time data.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center-block&quot; src=&quot;/images/blog/timely-processing/UnifiedModel.png&quot; alt=&quot;Unified stateful processing over streams and file archives&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It is (deliberately) possible to write a stateful and timely DoFn that delivers
results that depend on ordering or delivery timing, so in this sense there is
additional burden on you, the &lt;code class=&quot;highlighter-rouge&quot;&gt;DoFn&lt;/code&gt; author, to ensure that this nondeterminism
falls within documented allowances.&lt;/p&gt;

&lt;h2 id=&quot;go-use-it&quot;&gt;Go use it!&lt;/h2&gt;

&lt;p&gt;I’ll end this post in the same way I ended the last. I hope you will go try out
Beam with stateful, timely processing. If it opens up new possibilities for
you, then great! If not, we want to hear about it. Since this is a new feature,
please check the &lt;a href=&quot;/documentation/runners/capability-matrix/&quot;&gt;capability matrix&lt;/a&gt; to see the level of support for
your preferred Beam backend(s).&lt;/p&gt;

&lt;p&gt;And please do join the Beam community at
&lt;a href=&quot;/get-started/support&quot;&gt;user@beam.apache.org&lt;/a&gt; and follow
&lt;a href=&quot;https://twitter.com/ApacheBeam&quot;&gt;@ApacheBeam&lt;/a&gt; on Twitter.&lt;/p&gt;
</description>
        <pubDate>Mon, 28 Aug 2017 01:00:01 -0700</pubDate>
        <link>https://beam.apache.org/blog/2017/08/28/timely-processing.html</link>
        <guid isPermaLink="true">https://beam.apache.org/blog/2017/08/28/timely-processing.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Powerful and modular IO connectors with Splittable DoFn in Apache Beam</title>
        <description>&lt;p&gt;One of the most important parts of the Apache Beam ecosystem is its quickly
growing set of connectors that allow Beam pipelines to read and write data to
various data storage systems (“IOs”). Currently, Beam ships &lt;a href=&quot;/documentation/io/built-in/&quot;&gt;over 20 IO
connectors&lt;/a&gt; with many more in
active development. As user demands for IO connectors grew, our work on
improving the related Beam APIs (in particular, the Source API) produced an
unexpected result: a generalization of Beam’s most basic primitive, &lt;code class=&quot;highlighter-rouge&quot;&gt;DoFn&lt;/code&gt;.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;connectors-as-mini-pipelines&quot;&gt;Connectors as mini-pipelines&lt;/h2&gt;

&lt;p&gt;One of the main reasons for this vibrant IO connector ecosystem is that
developing a basic IO is relatively straightforward: many connector
implementations are simply mini-pipelines (composite &lt;code class=&quot;highlighter-rouge&quot;&gt;PTransform&lt;/code&gt;s) made of the
basic Beam &lt;code class=&quot;highlighter-rouge&quot;&gt;ParDo&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;GroupByKey&lt;/code&gt; primitives. For example,
&lt;code class=&quot;highlighter-rouge&quot;&gt;ElasticsearchIO.write()&lt;/code&gt;
&lt;a href=&quot;https://github.com/apache/beam/blob/f7e8f886c91ea9d0b51e00331eeb4484e2f6e000/sdks/java/io/elasticsearch/src/main/java/org/apache/beam/sdk/io/elasticsearch/ElasticsearchIO.java#L783&quot;&gt;expands&lt;/a&gt;
into a single &lt;code class=&quot;highlighter-rouge&quot;&gt;ParDo&lt;/code&gt; with some batching for performance; &lt;code class=&quot;highlighter-rouge&quot;&gt;JdcbIO.read()&lt;/code&gt;
&lt;a href=&quot;https://github.com/apache/beam/blob/f7e8f886c91ea9d0b51e00331eeb4484e2f6e000/sdks/java/io/jdbc/src/main/java/org/apache/beam/sdk/io/jdbc/JdbcIO.java#L329&quot;&gt;expands&lt;/a&gt;
into &lt;code class=&quot;highlighter-rouge&quot;&gt;Create.of(query)&lt;/code&gt;, a reshuffle to &lt;a href=&quot;https://cloud.google.com/dataflow/service/dataflow-service-desc#preventing-fusion&quot;&gt;prevent
fusion&lt;/a&gt;,
and &lt;code class=&quot;highlighter-rouge&quot;&gt;ParDo(execute sub-query)&lt;/code&gt;.  Some IOs
&lt;a href=&quot;https://github.com/apache/beam/blob/8503adbbc3a590cd0dc2939f6a45d335682a9442/sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryIO.java#L1139&quot;&gt;construct&lt;/a&gt;
considerably more complicated pipelines.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center-block&quot; src=&quot;/images/blog/splittable-do-fn/jdbcio-expansion.png&quot; alt=&quot;Expansion of the JdbcIO.read() composite transform&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This “mini-pipeline” approach is flexible, modular, and generalizes to data
sources that read from a dynamically computed &lt;code class=&quot;highlighter-rouge&quot;&gt;PCollection&lt;/code&gt; of locations, such
as
&lt;a href=&quot;https://github.com/apache/beam/blob/f7e8f886c91ea9d0b51e00331eeb4484e2f6e000/sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/spanner/SpannerIO.java#L222&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SpannerIO.readAll()&lt;/code&gt;&lt;/a&gt;
which reads the results of a &lt;code class=&quot;highlighter-rouge&quot;&gt;PCollection&lt;/code&gt; of queries from Cloud Spanner,
compared to
&lt;a href=&quot;https://github.com/apache/beam/blob/f7e8f886c91ea9d0b51e00331eeb4484e2f6e000/sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/spanner/SpannerIO.java#L318&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SpannerIO.read()&lt;/code&gt;&lt;/a&gt;
which executes a single query. We believe such dynamic data sources are a very
useful capability, often overlooked by other data processing frameworks.&lt;/p&gt;

&lt;h2 id=&quot;when-pardo-and-groupbykey-are-not-enough&quot;&gt;When ParDo and GroupByKey are not enough&lt;/h2&gt;

&lt;p&gt;Despite the flexibility of &lt;code class=&quot;highlighter-rouge&quot;&gt;ParDo&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;GroupByKey&lt;/code&gt; and their derivatives, in some
cases building an efficient IO connector requires extra capabilities.&lt;/p&gt;

&lt;p&gt;For example, imagine reading files using the sequence &lt;code class=&quot;highlighter-rouge&quot;&gt;ParDo(filepattern →
expand into files)&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;ParDo(filename → read records)&lt;/code&gt;, or reading a Kafka topic
using &lt;code class=&quot;highlighter-rouge&quot;&gt;ParDo(topic → list partitions)&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;ParDo(topic, partition → read
records)&lt;/code&gt;. This approach has two big issues:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;In the file example, some files might be much larger than others, so the
second &lt;code class=&quot;highlighter-rouge&quot;&gt;ParDo&lt;/code&gt; may have very long individual &lt;code class=&quot;highlighter-rouge&quot;&gt;@ProcessElement&lt;/code&gt; calls. As a
result, the pipeline can suffer from poor performance due to stragglers.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In the Kafka example, implementing the second &lt;code class=&quot;highlighter-rouge&quot;&gt;ParDo&lt;/code&gt; is &lt;em&gt;simply impossible&lt;/em&gt;
with a regular &lt;code class=&quot;highlighter-rouge&quot;&gt;DoFn&lt;/code&gt;, because it would need to output an infinite number of
records per each input element &lt;code class=&quot;highlighter-rouge&quot;&gt;topic, partition&lt;/code&gt; &lt;em&gt;(&lt;a href=&quot;/blog/2017/02/13/stateful-processing.html&quot;&gt;stateful processing&lt;/a&gt; comes close, but it
has other limitations that make it insufficient for this task&lt;/em&gt;).&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;beam-source-api&quot;&gt;Beam Source API&lt;/h2&gt;

&lt;p&gt;Apache Beam historically provides a Source API
(&lt;a href=&quot;/documentation/sdks/javadoc/2.4.0/org/apache/beam/sdk/io/BoundedSource.html&quot;&gt;BoundedSource&lt;/a&gt;
and
&lt;a href=&quot;/documentation/sdks/javadoc/2.4.0/org/apache/beam/sdk/io/UnboundedSource.html&quot;&gt;UnboundedSource&lt;/a&gt;) which does
not have these limitations and allows development of efficient data sources for
batch and streaming systems. Pipelines use this API via the
&lt;a href=&quot;/documentation/sdks/javadoc/2.4.0/org/apache/beam/sdk/io/Read.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Read.from(Source)&lt;/code&gt;&lt;/a&gt; built-in &lt;code class=&quot;highlighter-rouge&quot;&gt;PTransform&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The Source API is largely similar to that of most other data processing
frameworks, and allows the system to read data in parallel using multiple
workers, as well as checkpoint and resume reading from an unbounded data source.
Additionally, the Beam
&lt;a href=&quot;/documentation/sdks/javadoc/2.4.0/org/apache/beam/sdk/io/BoundedSource.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;BoundedSource&lt;/code&gt;&lt;/a&gt;
API provides advanced features such as progress reporting and &lt;a href=&quot;/blog/2016/05/18/splitAtFraction-method.html&quot;&gt;dynamic
rebalancing&lt;/a&gt;
(which together enable autoscaling), and
&lt;a href=&quot;/documentation/sdks/javadoc/2.4.0/org/apache/beam/sdk/io/UnboundedSource.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UnboundedSource&lt;/code&gt;&lt;/a&gt; supports
reporting the source’s watermark and backlog &lt;em&gt;(until SDF, we believed that
“batch” and “streaming” data sources are fundamentally different and thus
require fundamentally different APIs)&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Unfortunately, these features come at a price. Coding against the Source API
involves a lot of boilerplate and is error-prone, and it does not compose well
with the rest of the Beam model because a &lt;code class=&quot;highlighter-rouge&quot;&gt;Source&lt;/code&gt; can appear only at the root
of a pipeline. For example:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Using the Source API, it is not possible to read a &lt;code class=&quot;highlighter-rouge&quot;&gt;PCollection&lt;/code&gt; of
filepatterns.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A &lt;code class=&quot;highlighter-rouge&quot;&gt;Source&lt;/code&gt; can not read a side input, or wait on another pipeline step to
produce the data.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A &lt;code class=&quot;highlighter-rouge&quot;&gt;Source&lt;/code&gt; can not emit an additional output (for example, records that failed to
parse) and so on.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The Source API is not composable even with itself. For example, suppose Alice
implements an unbounded &lt;code class=&quot;highlighter-rouge&quot;&gt;Source&lt;/code&gt; that watches a directory for new matching
files, and Bob implements an unbounded &lt;code class=&quot;highlighter-rouge&quot;&gt;Source&lt;/code&gt; that tails a file. The Source
API does not let them simply chain the sources together and obtain a &lt;code class=&quot;highlighter-rouge&quot;&gt;Source&lt;/code&gt;
that returns new records in new log files in a directory (a very common user
request). Instead, such a source would have to be developed mostly from
scratch, and our experience shows that a full-featured monolithic
implementation of such a &lt;code class=&quot;highlighter-rouge&quot;&gt;Source&lt;/code&gt; is incredibly difficult and error-prone.&lt;/p&gt;

&lt;p&gt;Another class of issues with the &lt;code class=&quot;highlighter-rouge&quot;&gt;Source&lt;/code&gt; API comes from its strict
bounded/unbounded dichotomy:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;It is difficult or impossible to reuse code between seemingly very similar
bounded and unbounded sources, for example, the &lt;code class=&quot;highlighter-rouge&quot;&gt;BoundedSource&lt;/code&gt; that generates
a sequence &lt;code class=&quot;highlighter-rouge&quot;&gt;[a, b)&lt;/code&gt; and the &lt;code class=&quot;highlighter-rouge&quot;&gt;UnboundedSource&lt;/code&gt; that generates a sequence &lt;code class=&quot;highlighter-rouge&quot;&gt;[a,
inf)&lt;/code&gt; &lt;a href=&quot;https://github.com/apache/beam/blob/master/sdks/java/core/src/main/java/org/apache/beam/sdk/io/CountingSource.java&quot;&gt;don’t share any
code&lt;/a&gt;
in the Beam Java SDK.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;It is not clear how to classify the ingestion of a very large and
continuously growing dataset. Ingesting its “already available” part seems to
require a &lt;code class=&quot;highlighter-rouge&quot;&gt;BoundedSource&lt;/code&gt;: the runner could benefit from knowing its size, and
could perform dynamic rebalancing. However, ingesting the continuously arriving
new data seems to require an &lt;code class=&quot;highlighter-rouge&quot;&gt;UnboundedSource&lt;/code&gt; for providing watermarks. From
this angle, the &lt;code class=&quot;highlighter-rouge&quot;&gt;Source&lt;/code&gt; API has &lt;a href=&quot;https://www.oreilly.com/ideas/the-world-beyond-batch-streaming-101&quot;&gt;the same issues as Lambda
Architecture&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;About two years ago we began thinking about how to address the limitations of
the Source API, and ended up, surprisingly, addressing the limitations of
&lt;code class=&quot;highlighter-rouge&quot;&gt;DoFn&lt;/code&gt; instead.&lt;/p&gt;

&lt;h2 id=&quot;enter-splittable-dofn&quot;&gt;Enter Splittable DoFn&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://s.apache.org/splittable-do-fn&quot;&gt;Splittable DoFn&lt;/a&gt; (SDF) is a
generalization of &lt;code class=&quot;highlighter-rouge&quot;&gt;DoFn&lt;/code&gt; that gives it the core capabilities of &lt;code class=&quot;highlighter-rouge&quot;&gt;Source&lt;/code&gt; while
retaining &lt;code class=&quot;highlighter-rouge&quot;&gt;DoFn&lt;/code&gt;’s syntax, flexibility, modularity, and ease of coding.  As a
result, it becomes possible to develop more powerful IO connectors than before,
with shorter, simpler, more reusable code.&lt;/p&gt;

&lt;p&gt;Note that, unlike &lt;code class=&quot;highlighter-rouge&quot;&gt;Source&lt;/code&gt;, SDF &lt;em&gt;does not&lt;/em&gt; have distinct bounded/unbounded APIs,
just as regular &lt;code class=&quot;highlighter-rouge&quot;&gt;DoFn&lt;/code&gt;s don’t: there is only one API, which covers both of these
use cases and anything in between. Thus, SDF closes the final gap in the unified
batch/streaming programming model of Apache Beam.&lt;/p&gt;

&lt;p&gt;When reading the explanation of SDF below, keep in mind the running example of a
&lt;code class=&quot;highlighter-rouge&quot;&gt;DoFn&lt;/code&gt; that takes a filename as input and outputs the records in that file.
People familiar with the &lt;code class=&quot;highlighter-rouge&quot;&gt;Source&lt;/code&gt; API may find it useful to think of SDF as a
way to read a &lt;code class=&quot;highlighter-rouge&quot;&gt;PCollection&lt;/code&gt; of sources, treating the source itself as just
another piece of data in the pipeline &lt;em&gt;(this, in fact, was one of the early
design iterations among the work that led to creation of SDF)&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The two aspects where &lt;code class=&quot;highlighter-rouge&quot;&gt;Source&lt;/code&gt; has an advantage over a regular &lt;code class=&quot;highlighter-rouge&quot;&gt;DoFn&lt;/code&gt; are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Splittability:&lt;/strong&gt; applying a &lt;code class=&quot;highlighter-rouge&quot;&gt;DoFn&lt;/code&gt; to a single element is &lt;em&gt;monolithic&lt;/em&gt;, but
reading from a &lt;code class=&quot;highlighter-rouge&quot;&gt;Source&lt;/code&gt; is &lt;em&gt;non-monolithic&lt;/em&gt;. The whole &lt;code class=&quot;highlighter-rouge&quot;&gt;Source&lt;/code&gt; doesn’t have to
be read at once; rather, it is read in parts, called &lt;em&gt;bundles&lt;/em&gt;. For example, a
large file is usually read in several bundles, each reading some sub-range of
offsets within the file. Likewise, a Kafka topic (which, of course, can never
be read “fully”) is read over an infinite number of bundles, each reading some
finite number of elements.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Interaction with the runner:&lt;/strong&gt; runners apply a &lt;code class=&quot;highlighter-rouge&quot;&gt;DoFn&lt;/code&gt; to a single element as
a “black box”, but interact quite richly with &lt;code class=&quot;highlighter-rouge&quot;&gt;Source&lt;/code&gt;. &lt;code class=&quot;highlighter-rouge&quot;&gt;Source&lt;/code&gt; provides the
runner with information such as its estimated size (or its generalization,
“backlog”), progress through reading the bundle, watermarks etc. The runner
uses this information to tune the execution and control the breakdown of the
&lt;code class=&quot;highlighter-rouge&quot;&gt;Source&lt;/code&gt; into bundles. For example, a slowly progressing large bundle of a file
may be &lt;a href=&quot;https://cloud.google.com/blog/big-data/2016/05/no-shard-left-behind-dynamic-work-rebalancing-in-google-cloud-dataflow&quot;&gt;dynamically
split&lt;/a&gt;
by a batch-focused runner before it becomes a straggler, and a latency-focused
streaming runner may control how many elements it reads from a source in each
bundle to optimize for latency vs. per-bundle overhead.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;non-monolithic-element-processing-with-restrictions&quot;&gt;Non-monolithic element processing with restrictions&lt;/h3&gt;

&lt;p&gt;Splittable &lt;code class=&quot;highlighter-rouge&quot;&gt;DoFn&lt;/code&gt; supports &lt;code class=&quot;highlighter-rouge&quot;&gt;Source&lt;/code&gt;-like features by allowing the processing of
a single element to be non-monolithic.&lt;/p&gt;

&lt;p&gt;The processing of one element by an SDF is decomposed into a (potentially
infinite) number of &lt;em&gt;restrictions&lt;/em&gt;, each describing some part of the work to be
done for the whole element. The input to an SDF’s &lt;code class=&quot;highlighter-rouge&quot;&gt;@ProcessElement&lt;/code&gt; call is a
pair of an element and a restriction (compared to a regular &lt;code class=&quot;highlighter-rouge&quot;&gt;DoFn&lt;/code&gt;, which takes
just the element).&lt;/p&gt;

&lt;p&gt;Processing of every element starts by creating an &lt;em&gt;initial restriction&lt;/em&gt; that
describes the entire work, and the initial restriction is then split further
into sub-restrictions which must logically add up to the original. For example,
for a splittable &lt;code class=&quot;highlighter-rouge&quot;&gt;DoFn&lt;/code&gt; called &lt;code class=&quot;highlighter-rouge&quot;&gt;ReadFn&lt;/code&gt; that takes a filename and outputs
records in the file, the restriction may be a pair of starting and ending byte
offset, and &lt;code class=&quot;highlighter-rouge&quot;&gt;ReadFn&lt;/code&gt; may interpret it as &lt;em&gt;read records whose starting offsets
are in the given range&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center-block&quot; src=&quot;/images/blog/splittable-do-fn/restrictions.png&quot; alt=&quot;Specifying parts of work for an element using restrictions&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The idea of restrictions provides non-monolithic execution - the first
ingredient for parity with &lt;code class=&quot;highlighter-rouge&quot;&gt;Source&lt;/code&gt;. The other ingredient is &lt;em&gt;interaction with
the runner&lt;/em&gt;: the runner has access to the restriction of each active
&lt;code class=&quot;highlighter-rouge&quot;&gt;@ProcessElement&lt;/code&gt; call of an SDF, can inquire about the progress of the call,
and most importantly, can &lt;em&gt;split&lt;/em&gt; the restriction while it is being processed
(hence the name &lt;em&gt;Splittable DoFn&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;Splitting produces a &lt;em&gt;primary&lt;/em&gt; and &lt;em&gt;residual&lt;/em&gt; restriction that add up to the
original restriction being split: the current &lt;code class=&quot;highlighter-rouge&quot;&gt;@ProcessElement&lt;/code&gt; call keeps
processing the primary, and the residual will be processed by another
&lt;code class=&quot;highlighter-rouge&quot;&gt;@ProcessElement&lt;/code&gt; call. For example, a runner may schedule the residual to be
processed in parallel on another worker.&lt;/p&gt;

&lt;p&gt;Splitting of a running &lt;code class=&quot;highlighter-rouge&quot;&gt;@ProcessElement&lt;/code&gt; call has two critically important uses:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Supporting infinite work per element.&lt;/strong&gt; A restriction is, in general, not
required to describe a finite amount of work. For example, reading from a Kafka
topic starting from offset &lt;em&gt;100&lt;/em&gt; can be represented by the
restriction &lt;em&gt;[100, inf)&lt;/em&gt;. A &lt;code class=&quot;highlighter-rouge&quot;&gt;@ProcessElement&lt;/code&gt; call processing this
entire restriction would, of course, never complete. However, while such a call
runs, a runner can split the restriction into a &lt;em&gt;finite&lt;/em&gt; primary &lt;em&gt;[100, 150)&lt;/em&gt;
(letting the current call complete this part) and an &lt;em&gt;infinite&lt;/em&gt; residual &lt;em&gt;[150,
inf)&lt;/em&gt; to be processed later, effectively checkpointing and resuming the call;
this can be repeated forever.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img class=&quot;center-block&quot; src=&quot;/images/blog/splittable-do-fn/kafka-splitting.png&quot; alt=&quot;Splitting an infinite restriction into a finite primary and infinite residual&quot; width=&quot;400&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Dynamic rebalancing.&lt;/strong&gt; When a (typically batch-focused) runner detects that
a &lt;code class=&quot;highlighter-rouge&quot;&gt;@ProcessElement&lt;/code&gt; call is going to take too long and become a straggler, it
can split the restriction in some proportion so that the primary is short enough
to not be a straggler, and can schedule the residual in parallel on another
worker. For details, see &lt;a href=&quot;https://cloud.google.com/blog/big-data/2016/05/no-shard-left-behind-dynamic-work-rebalancing-in-google-cloud-dataflow&quot;&gt;No Shard Left
Behind&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Logically, the execution of an SDF on an element works according to the
following diagram, where “magic” stands for the runner-specific ability to split
the restrictions and schedule processing of residuals.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center-block&quot; src=&quot;/images/blog/splittable-do-fn/transform-expansion.png&quot; alt=&quot;Execution of an SDF - pairing with a restriction, splitting     restrictions, processing element/restriction pairs&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This diagram emphasizes that splittability is an implementation detail of the
particular &lt;code class=&quot;highlighter-rouge&quot;&gt;DoFn&lt;/code&gt;: a splittable &lt;code class=&quot;highlighter-rouge&quot;&gt;DoFn&lt;/code&gt; still looks like a &lt;code class=&quot;highlighter-rouge&quot;&gt;DoFn&amp;lt;A, B&amp;gt;&lt;/code&gt; to its
user, and can be applied via a &lt;code class=&quot;highlighter-rouge&quot;&gt;ParDo&lt;/code&gt; to a &lt;code class=&quot;highlighter-rouge&quot;&gt;PCollection&amp;lt;A&amp;gt;&lt;/code&gt; producing a
&lt;code class=&quot;highlighter-rouge&quot;&gt;PCollection&amp;lt;B&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;which-dofns-need-to-be-splittable&quot;&gt;Which DoFns need to be splittable&lt;/h3&gt;

&lt;p&gt;Note that decomposition of an element into element/restriction pairs is not
automatic or “magical”: SDF is a new API for &lt;em&gt;authoring&lt;/em&gt; a &lt;code class=&quot;highlighter-rouge&quot;&gt;DoFn&lt;/code&gt;, rather than a
new way to &lt;em&gt;execute&lt;/em&gt; an existing &lt;code class=&quot;highlighter-rouge&quot;&gt;DoFn&lt;/code&gt;. When making a &lt;code class=&quot;highlighter-rouge&quot;&gt;DoFn&lt;/code&gt; splittable, the
author needs to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Consider the structure of the work it does for every element.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Come up with a scheme for describing parts of this work using restrictions.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Write code for creating the initial restriction, splitting it, and executing
an element/restriction pair.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;An overwhelming majority of &lt;code class=&quot;highlighter-rouge&quot;&gt;DoFn&lt;/code&gt;s found in user pipelines do not need to be
made splittable: SDF is an advanced, powerful API, primarily targeting authors
of new IO connectors &lt;em&gt;(though it has interesting non-IO applications as well:
see &lt;a href=&quot;http://s.apache.org/splittable-do-fn#heading=h.5cep9s8k4fxv&quot;&gt;Non-IO examples&lt;/a&gt;)&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&quot;execution-of-a-restriction-and-data-consistency&quot;&gt;Execution of a restriction and data consistency&lt;/h3&gt;

&lt;p&gt;One of the most important parts of the Splittable &lt;code class=&quot;highlighter-rouge&quot;&gt;DoFn&lt;/code&gt; design is related to
how it achieves data consistency while splitting. For example, while the runner
is preparing to split the restriction of an active &lt;code class=&quot;highlighter-rouge&quot;&gt;@ProcessElement&lt;/code&gt; call, how
can it be sure that the call has not concurrently progressed past the point of
splitting?&lt;/p&gt;

&lt;p&gt;This is achieved by requiring the processing of a restriction to follow a
certain pattern. We think of a restriction as a sequence of &lt;em&gt;blocks&lt;/em&gt; -
elementary indivisible units of work, identified by a &lt;em&gt;position&lt;/em&gt;. A
&lt;code class=&quot;highlighter-rouge&quot;&gt;@ProcessElement&lt;/code&gt; call processes the blocks one by one, first &lt;em&gt;claiming&lt;/em&gt; the
block’s position to atomically check if it’s still within the range of the
restriction, until the whole restriction is processed.&lt;/p&gt;

&lt;p&gt;The diagram below illustrates this for &lt;code class=&quot;highlighter-rouge&quot;&gt;ReadFn&lt;/code&gt; (a splittable &lt;code class=&quot;highlighter-rouge&quot;&gt;DoFn&lt;/code&gt; that reads
Avro files) processing the element &lt;code class=&quot;highlighter-rouge&quot;&gt;foo.avro&lt;/code&gt; with restriction &lt;code class=&quot;highlighter-rouge&quot;&gt;[30, 70)&lt;/code&gt;. This
&lt;code class=&quot;highlighter-rouge&quot;&gt;@ProcessElement&lt;/code&gt; call scans the Avro file for &lt;a href=&quot;https://avro.apache.org/docs/current/spec.html#Object+Container+Files&quot;&gt;data
blocks&lt;/a&gt;
starting from offset &lt;code class=&quot;highlighter-rouge&quot;&gt;30&lt;/code&gt; and claims the position of each block in this range.
If a block is claimed successfully, then the call outputs all records in this
data block, otherwise, it terminates.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center-block&quot; src=&quot;/images/blog/splittable-do-fn/blocks.png&quot; alt=&quot;Processing a restriction by claiming blocks inside it&quot; width=&quot;400&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For more details, see &lt;a href=&quot;http://s.apache.org/splittable-do-fn#heading=h.vjs7pzbb7kw&quot;&gt;Restrictions, blocks and
positions&lt;/a&gt; in the
design proposal document.&lt;/p&gt;

&lt;h3 id=&quot;code-example&quot;&gt;Code example&lt;/h3&gt;

&lt;p&gt;Let us look at some examples of SDF code. The examples use the Beam Java SDK,
which &lt;a href=&quot;https://github.com/apache/beam/blob/f7e8f886c91ea9d0b51e00331eeb4484e2f6e000/sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/DoFn.java#L527&quot;&gt;represents splittable
&lt;code class=&quot;highlighter-rouge&quot;&gt;DoFn&lt;/code&gt;s&lt;/a&gt;
as part of the flexible &lt;a href=&quot;http://s.apache.org/a-new-dofn&quot;&gt;annotation-based
&lt;code class=&quot;highlighter-rouge&quot;&gt;DoFn&lt;/code&gt;&lt;/a&gt; machinery, and the &lt;a href=&quot;https://s.apache.org/splittable-do-fn-python&quot;&gt;proposed SDF syntax
for Python&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;A splittable &lt;code class=&quot;highlighter-rouge&quot;&gt;DoFn&lt;/code&gt; is a &lt;code class=&quot;highlighter-rouge&quot;&gt;DoFn&lt;/code&gt; - no new base class needed. Any SDF derives
from the &lt;code class=&quot;highlighter-rouge&quot;&gt;DoFn&lt;/code&gt; class and has a &lt;code class=&quot;highlighter-rouge&quot;&gt;@ProcessElement&lt;/code&gt; method.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;@ProcessElement&lt;/code&gt; method takes an additional
&lt;a href=&quot;https://github.com/apache/beam/blob/f7e8f886c91ea9d0b51e00331eeb4484e2f6e000/sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/splittabledofn/RestrictionTracker.java&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;RestrictionTracker&lt;/code&gt;&lt;/a&gt;
parameter that gives access to the current restriction in addition to the
current element.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;An SDF needs to define a &lt;code class=&quot;highlighter-rouge&quot;&gt;@GetInitialRestriction&lt;/code&gt; method that can create a
restriction describing the complete work for a given element.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;There are several less important optional methods, such as
&lt;code class=&quot;highlighter-rouge&quot;&gt;@SplitRestriction&lt;/code&gt; for pre-splitting the initial restriction into several
smaller restrictions, and a few others.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The “Hello World” of SDF is a counter, which takes pairs &lt;em&gt;(x, N)&lt;/em&gt; as input and
produces pairs &lt;em&gt;(x, 0), (x, 1), …, (x, N-1)&lt;/em&gt; as output.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CountFn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DoFn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Long&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Long&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@ProcessElement&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ProcessContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OffsetRangeTracker&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tracker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tracker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;currentRestriction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getFrom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tracker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;tryClaim&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@GetInitialRestriction&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OffsetRange&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getInitialRange&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Long&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;OffsetRange&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;PCollection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Long&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;…&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;PCollection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Long&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ParDo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CountFn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-py highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CountFn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DoFn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tracker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DoFn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RestrictionTrackerParam&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;xrange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tracker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current_restriction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()):&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tracker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;try_claim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;
        
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_initial_restriction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This short &lt;code class=&quot;highlighter-rouge&quot;&gt;DoFn&lt;/code&gt; subsumes the functionality of
&lt;a href=&quot;https://github.com/apache/beam/blob/master/sdks/java/core/src/main/java/org/apache/beam/sdk/io/CountingSource.java&quot;&gt;CountingSource&lt;/a&gt;,
but is more flexible: &lt;code class=&quot;highlighter-rouge&quot;&gt;CountingSource&lt;/code&gt; generates only one sequence specified at
pipeline construction time, while this &lt;code class=&quot;highlighter-rouge&quot;&gt;DoFn&lt;/code&gt; can generate a dynamic family of
sequences, one per element in the input collection (it does not matter whether
the input collection is bounded or unbounded).&lt;/p&gt;

&lt;p&gt;However, the &lt;code class=&quot;highlighter-rouge&quot;&gt;Source&lt;/code&gt;-specific capabilities of &lt;code class=&quot;highlighter-rouge&quot;&gt;CountingSource&lt;/code&gt; are still
available in &lt;code class=&quot;highlighter-rouge&quot;&gt;CountFn&lt;/code&gt;. For example, if a sequence has a lot of elements, a
batch-focused runner can still apply dynamic rebalancing to it and generate
different subranges of the sequence in parallel by splitting the &lt;code class=&quot;highlighter-rouge&quot;&gt;OffsetRange&lt;/code&gt;.
Likewise, a streaming-focused runner can use the same splitting logic to
checkpoint and resume the generation of the sequence even if it is, for
practical purposes, infinite (for example, when applied to a &lt;code class=&quot;highlighter-rouge&quot;&gt;KV(...,
Long.MAX_VALUE)&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;A slightly more complex example is the &lt;code class=&quot;highlighter-rouge&quot;&gt;ReadFn&lt;/code&gt; considered above, which reads
data from Avro files and illustrates the idea of &lt;em&gt;blocks&lt;/em&gt;: we provide pseudocode
to illustrate the approach.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ReadFn&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DoFn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AvroRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@ProcessElement&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ProcessContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OffsetRangeTracker&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tracker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AvroReader&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reader&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Avro&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// Seek to the first block starting at or after the start offset.&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;reader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;seek&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tracker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;currentRestriction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getFrom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;readNextBlock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Claim the position of the current Avro block&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tracker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;tryClaim&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;currentBlockOffset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;c1&quot;&gt;// Out of range of the current restriction - we're done.&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Emit all records in this block&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AvroRecord&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;record&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;currentBlock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;record&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@GetInitialRestriction&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;OffsetRange&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getInitialRestriction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;OffsetRange&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-py highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AvroReader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DoFn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tracker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DoFn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RestrictionTrackerParam&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fileio&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ChannelFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tracker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current_restriction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
      &lt;span class=&quot;c&quot;&gt;# Seek to the first block starting at or after the start offset.&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;seek&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;block&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AvroUtils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_next_block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# Claim the position of the current Avro block&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tracker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;try_claim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()):&lt;/span&gt;
          &lt;span class=&quot;c&quot;&gt;# Out of range of the current restriction - we're done.&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# Emit all records in this block&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;record&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;records&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;record&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;block&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AvroUtils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_next_block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_initial_restriction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fileio&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ChannelFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size_in_bytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This hypothetical &lt;code class=&quot;highlighter-rouge&quot;&gt;DoFn&lt;/code&gt; reads records from a single Avro file. Notably missing
is the code for expanding a filepattern: it no longer needs to be part of this
&lt;code class=&quot;highlighter-rouge&quot;&gt;DoFn&lt;/code&gt;! Instead, the SDK includes a
&lt;a href=&quot;https://github.com/apache/beam/blob/master/sdks/java/core/src/main/java/org/apache/beam/sdk/io/FileIO.java&quot;&gt;FileIO.matchAll()&lt;/a&gt;
transform for expanding a filepattern into a &lt;code class=&quot;highlighter-rouge&quot;&gt;PCollection&lt;/code&gt; of filenames, and
different file format IOs can reuse the same transform, reading the files with
different &lt;code class=&quot;highlighter-rouge&quot;&gt;DoFn&lt;/code&gt;s.&lt;/p&gt;

&lt;p&gt;This example demonstrates the benefits of increased modularity allowed by SDF:
&lt;code class=&quot;highlighter-rouge&quot;&gt;FileIO.matchAll()&lt;/code&gt; supports continuous ingestion of new files in streaming
pipelines using &lt;code class=&quot;highlighter-rouge&quot;&gt;.continuously()&lt;/code&gt;, and this functionality becomes automatically
available to various file format IOs. For example,
&lt;code class=&quot;highlighter-rouge&quot;&gt;TextIO.read().watchForNewFiles()&lt;/code&gt; &lt;a href=&quot;https://github.com/apache/beam/blob/3bd68ecfd7d576d78e02deb0476e549f11e1b5ef/sdks/java/core/src/main/java/org/apache/beam/sdk/io/TextIO.java#L486&quot;&gt;uses &lt;code class=&quot;highlighter-rouge&quot;&gt;FileIO.matchAll()&lt;/code&gt; under the
hood)&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;current-status&quot;&gt;Current status&lt;/h2&gt;

&lt;p&gt;Splittable &lt;code class=&quot;highlighter-rouge&quot;&gt;DoFn&lt;/code&gt; is a major new API, and its delivery and widespread adoption
involves a lot of work in different parts of the Apache Beam ecosystem.  Some
of that work is already complete and provides direct benefit to users via new
IO connectors. However, a large amount of work is in progress or planned.&lt;/p&gt;

&lt;p&gt;As of August 2017, SDF is available for use in the Beam Java Direct runner and
Dataflow Streaming runner, and implementation is in progress in the Flink and
Apex runners; see &lt;a href=&quot;/documentation/runners/capability-matrix/&quot;&gt;capability matrix&lt;/a&gt; for the current status. Support
for SDF in the Python SDK is &lt;a href=&quot;https://s.apache.org/splittable-do-fn-python&quot;&gt;in active
development&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Several SDF-based transforms and IO connectors are available for Beam users at
HEAD and will be included in Beam 2.2.0. &lt;code class=&quot;highlighter-rouge&quot;&gt;TextIO&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;AvroIO&lt;/code&gt; finally provide
continuous ingestion of files (one of the most frequently requested features)
via &lt;code class=&quot;highlighter-rouge&quot;&gt;.watchForNewFiles()&lt;/code&gt; which is backed by the utility transforms
&lt;code class=&quot;highlighter-rouge&quot;&gt;FileIO.matchAll().continuously()&lt;/code&gt; and the more general
&lt;a href=&quot;https://github.com/apache/beam/blob/f7e8f886c91ea9d0b51e00331eeb4484e2f6e000/sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/Watch.java&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Watch.growthOf()&lt;/code&gt;&lt;/a&gt;.
These utility transforms are also independently useful for “power user” use
cases.&lt;/p&gt;

&lt;p&gt;To enable more flexible use cases for IOs currently based on the Source API, we
will change them to use SDF. This transition is &lt;a href=&quot;http://s.apache.org/textio-sdf&quot;&gt;pioneered by
TextIO&lt;/a&gt; and involves temporarily &lt;a href=&quot;http://s.apache.org/sdf-via-source&quot;&gt;executing SDF
via the Source API&lt;/a&gt; to support runners
lacking the ability to run SDF directly.&lt;/p&gt;

&lt;p&gt;In addition to enabling new IOs, work on SDF has influenced our thinking about
other parts of the Beam programming model:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;SDF unified the final remaining part of the Beam programming model that was
not batch/streaming agnostic (the &lt;code class=&quot;highlighter-rouge&quot;&gt;Source&lt;/code&gt; API). This led us to consider use
cases that cannot be described as purely batch or streaming (for example,
ingesting a large amount of historical data and carrying on with more data
arriving in real time) and to develop a &lt;a href=&quot;http://s.apache.org/beam-fn-api-progress-reporting&quot;&gt;unified notion of “progress” and
“backlog”&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The &lt;a href=&quot;http://s.apache.org/beam-fn-api&quot;&gt;Fn API&lt;/a&gt; - the foundation of Beam’s
future support for cross-language pipelines - uses SDF as &lt;em&gt;the only&lt;/em&gt; concept
representing data ingestion.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Implementation of SDF has lead to &lt;a href=&quot;https://lists.apache.org/thread.html/86831496a08fe148e3b982cdb904f828f262c0b571543a9fed7b915d@%3Cdev.beam.apache.org%3E&quot;&gt;formalizing pipeline termination
semantics&lt;/a&gt;
and making it consistent between runners.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;SDF set a new standard for how modular IO connectors can be, inspiring
creation of similar APIs for some non-SDF-based connectors (for example,
&lt;code class=&quot;highlighter-rouge&quot;&gt;SpannerIO.readAll()&lt;/code&gt; and the
&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-2706&quot;&gt;planned&lt;/a&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;JdbcIO.readAll()&lt;/code&gt;).&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;call-to-action&quot;&gt;Call to action&lt;/h2&gt;

&lt;p&gt;Apache Beam thrives on having a large community of contributors. Here are some
ways you can get involved in the SDF effort and help make the Beam IO connector
ecosystem more modular:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Use the currently available SDF-based IO connectors, provide feedback, file
bugs, and suggest or implement improvements.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Propose or develop a new IO connector based on SDF.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Implement or improve support for SDF in your favorite runner.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Subscribe and contribute to the occasional SDF-related discussions on
&lt;a href=&quot;mailto:user@beam.apache.org&quot;&gt;user@beam.apache.org&lt;/a&gt; (mailing list for Beam
users) and &lt;a href=&quot;mailto:dev@beam.apache.org&quot;&gt;dev@beam.apache.org&lt;/a&gt; (mailing list for
Beam developers)!&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 16 Aug 2017 01:00:01 -0700</pubDate>
        <link>https://beam.apache.org/blog/2017/08/16/splittable-do-fn.html</link>
        <guid isPermaLink="true">https://beam.apache.org/blog/2017/08/16/splittable-do-fn.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Apache Beam publishes the first stable release</title>
        <description>&lt;p&gt;The Apache Beam community is pleased to &lt;a href=&quot;https://blogs.apache.org/foundation/entry/the-apache-software-foundation-announces12&quot;&gt;announce the availability of version 2.0.0&lt;/a&gt;. This is the first stable release of Apache Beam, signifying a statement from the community that it intends to maintain API stability with all releases for the foreseeable future, and making Beam suitable for enterprise deployment.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;This first stable release is the third important milestone for the Apache Beam community. Beam joined the Apache Incubator in February 2016 and graduated as a top-level project of The Apache Software Foundation in December. Through these fifteen months of concentrated effort, a slightly chaotic codebase, merged from multiple organizations, has been developed into a generalized framework for data processing that is truly engine- and environment-independent. Apache Beam has evolved and improved through three incubating and three post-incubation releases, culminating in the stable release announced today as version 2.0.0.&lt;/p&gt;

&lt;p&gt;In the five months since graduation, Apache Beam has seen a significant growth, both in terms of adoption and community contribution. Apache Beam is &lt;a href=&quot;https://blogs.apache.org/foundation/entry/the-apache-software-foundation-announces12&quot;&gt;in use&lt;/a&gt; at Google Cloud, PayPal, and Talend, among others.&lt;/p&gt;

&lt;p&gt;Apache Beam, version 2.0.0 improves user experience across the project, focusing on seamless portability across execution environments, including engines, operating systems, on-premise clusters, cloud providers, and data storage systems. Other highlights include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;API stability and future compatibility within this major version.&lt;/li&gt;
  &lt;li&gt;Stateful data processing paradigms that unlock efficient, data-dependent computations.&lt;/li&gt;
  &lt;li&gt;Support for user-extensible file systems, with built-in support for Hadoop Distributed File System, among others.&lt;/li&gt;
  &lt;li&gt;A metrics subsystem for deeper insight into pipeline execution.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Many contributors made this release possible, by participating in different roles: contributing code, writing documentation, testing release candidates, supporting users, or helping in some other way. The following is a partial list of contributors – 76 individuals contributed code to the project since the previous release, assembled from source history:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Ahmet Altay&lt;/li&gt;
  &lt;li&gt;Eric Anderson&lt;/li&gt;
  &lt;li&gt;Raghu Angadi&lt;/li&gt;
  &lt;li&gt;Sourabh Bajaj&lt;/li&gt;
  &lt;li&gt;Péter Gergő Barna&lt;/li&gt;
  &lt;li&gt;Chen Bin&lt;/li&gt;
  &lt;li&gt;Davor Bonaci&lt;/li&gt;
  &lt;li&gt;Robert Bradshaw&lt;/li&gt;
  &lt;li&gt;Ben Chambers&lt;/li&gt;
  &lt;li&gt;Etienne Chauchot&lt;/li&gt;
  &lt;li&gt;Chang Chen&lt;/li&gt;
  &lt;li&gt;Charles Chen&lt;/li&gt;
  &lt;li&gt;Craig Citro&lt;/li&gt;
  &lt;li&gt;Lukasz Cwik&lt;/li&gt;
  &lt;li&gt;Márton Elek&lt;/li&gt;
  &lt;li&gt;Pablo Estrada&lt;/li&gt;
  &lt;li&gt;Josh Forman-Gornall&lt;/li&gt;
  &lt;li&gt;Maria García Herrero&lt;/li&gt;
  &lt;li&gt;Jins George&lt;/li&gt;
  &lt;li&gt;Damien Gouyette&lt;/li&gt;
  &lt;li&gt;Thomas Groh&lt;/li&gt;
  &lt;li&gt;Dan Halperin&lt;/li&gt;
  &lt;li&gt;Pei He&lt;/li&gt;
  &lt;li&gt;Hadar Hod&lt;/li&gt;
  &lt;li&gt;Chamikara Jayalath&lt;/li&gt;
  &lt;li&gt;Rekha Joshi&lt;/li&gt;
  &lt;li&gt;Uwe Jugel&lt;/li&gt;
  &lt;li&gt;Sung Junyoung&lt;/li&gt;
  &lt;li&gt;Holden Karau&lt;/li&gt;
  &lt;li&gt;Vikas Kedigehalli&lt;/li&gt;
  &lt;li&gt;Eugene Kirpichov&lt;/li&gt;
  &lt;li&gt;Tibor Kiss&lt;/li&gt;
  &lt;li&gt;Kenneth Knowles&lt;/li&gt;
  &lt;li&gt;Vassil Kolarov&lt;/li&gt;
  &lt;li&gt;Chinmay Kolhatkar&lt;/li&gt;
  &lt;li&gt;Aljoscha Krettek&lt;/li&gt;
  &lt;li&gt;Dipti Kulkarni&lt;/li&gt;
  &lt;li&gt;Radhika Kulkarni&lt;/li&gt;
  &lt;li&gt;Jason Kuster&lt;/li&gt;
  &lt;li&gt;Reuven Lax&lt;/li&gt;
  &lt;li&gt;Stas Levin&lt;/li&gt;
  &lt;li&gt;Julien Lhermitte&lt;/li&gt;
  &lt;li&gt;Jingsong Li&lt;/li&gt;
  &lt;li&gt;Neville Li&lt;/li&gt;
  &lt;li&gt;Mark Liu&lt;/li&gt;
  &lt;li&gt;Michael Luckey&lt;/li&gt;
  &lt;li&gt;Andrew Martin&lt;/li&gt;
  &lt;li&gt;Ismaël Mejía&lt;/li&gt;
  &lt;li&gt;Devon Meunier&lt;/li&gt;
  &lt;li&gt;Neda Mirian&lt;/li&gt;
  &lt;li&gt;Anil Muppalla&lt;/li&gt;
  &lt;li&gt;Gergely Novak&lt;/li&gt;
  &lt;li&gt;Jean-Baptiste Onofré&lt;/li&gt;
  &lt;li&gt;Melissa Pashniak&lt;/li&gt;
  &lt;li&gt;peay&lt;/li&gt;
  &lt;li&gt;David Rieber&lt;/li&gt;
  &lt;li&gt;Rahul Sabbineni&lt;/li&gt;
  &lt;li&gt;Kobi Salant&lt;/li&gt;
  &lt;li&gt;Amit Sela&lt;/li&gt;
  &lt;li&gt;Mark Shalda&lt;/li&gt;
  &lt;li&gt;Stephen Sisk&lt;/li&gt;
  &lt;li&gt;Yuya Tajima&lt;/li&gt;
  &lt;li&gt;Wesley Tanaka&lt;/li&gt;
  &lt;li&gt;JiJun Tang&lt;/li&gt;
  &lt;li&gt;Valentyn Tymofieiev&lt;/li&gt;
  &lt;li&gt;David Volquartz&lt;/li&gt;
  &lt;li&gt;Huafeng Wang&lt;/li&gt;
  &lt;li&gt;Thomas Weise&lt;/li&gt;
  &lt;li&gt;Rafal Wojdyla&lt;/li&gt;
  &lt;li&gt;Yangping Wu&lt;/li&gt;
  &lt;li&gt;wyp&lt;/li&gt;
  &lt;li&gt;James Xu&lt;/li&gt;
  &lt;li&gt;Mingmin Xu&lt;/li&gt;
  &lt;li&gt;Ted Yu&lt;/li&gt;
  &lt;li&gt;Borisa Zivkovic&lt;/li&gt;
  &lt;li&gt;Aviem Zur&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Apache Beam, version 2.0.0, is making its debut at Apache: Big Data, taking place this week in Miami, FL, with four sessions featuring Apache Beam. Apache Beam will also be highlighted at numerous face-to-face meetups and conferences, including the Future of Data San Jose meetup, Strata Data Conference London, Berlin Buzzwords, and DataWorks Summit San Jose.&lt;/p&gt;

&lt;p&gt;We’d like to invite everyone to try out Apache Beam today and consider joining our vibrant community. We welcome feedback, contribution and participation through our mailing lists, issue tracker, pull requests, and events.&lt;/p&gt;
</description>
        <pubDate>Wed, 17 May 2017 01:00:01 -0700</pubDate>
        <link>https://beam.apache.org/blog/2017/05/17/beam-first-stable-release.html</link>
        <guid isPermaLink="true">https://beam.apache.org/blog/2017/05/17/beam-first-stable-release.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Python SDK released in Apache Beam 0.6.0</title>
        <description>&lt;p&gt;Apache Beam’s latest release, version &lt;a href=&quot;/get-started/downloads/&quot;&gt;0.6.0&lt;/a&gt;, introduces a new SDK – this time, for the Python programming language. The Python SDK joins the Java SDK as the second implementation of the Beam programming model.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;The Python SDK incorporates all of the main concepts of the Beam model, including ParDo, GroupByKey, Windowing, and others. It features extensible IO APIs for writing bounded sources and sinks, and provides built-in implementation for reading and writing Text, Avro, and TensorFlow record files, as well as connectors to Google BigQuery and Google Cloud Datastore.&lt;/p&gt;

&lt;p&gt;There are two runners capable of executing pipelines written with the Python SDK today: &lt;a href=&quot;/documentation/runners/direct/&quot;&gt;Direct Runner&lt;/a&gt; and &lt;a href=&quot;/documentation/runners/dataflow/&quot;&gt;Dataflow Runner&lt;/a&gt;, both of which are currently limited to batch execution only. Upcoming features will shortly bring the benefits of the Python SDK to additional runners.&lt;/p&gt;

&lt;h4 id=&quot;try-the-apache-beam-python-sdk&quot;&gt;Try the Apache Beam Python SDK&lt;/h4&gt;

&lt;p&gt;If you would like to try out the Python SDK, a good place to start is the &lt;a href=&quot;/get-started/quickstart-py/&quot;&gt;Quickstart&lt;/a&gt;. After that, you can take a look at additional &lt;a href=&quot;https://github.com/apache/beam/tree/v0.6.0/sdks/python/apache_beam/examples&quot;&gt;examples&lt;/a&gt;, and deep dive into the &lt;a href=&quot;/documentation/sdks/pydoc/&quot;&gt;API reference&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let’s take a look at a quick example together. First, install the &lt;code class=&quot;highlighter-rouge&quot;&gt;apache-beam&lt;/code&gt; package from PyPI and start your Python interpreter.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ pip install apache-beam
$ python
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We will harness the power of Apache Beam to estimate Pi in honor of the recently passed Pi Day.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import random
import apache_beam as beam

def run_trials(count):
  &quot;&quot;&quot;Throw darts into unit square and count how many fall into unit circle.&quot;&quot;&quot;
  inside = 0
  for _ in xrange(count):
    x, y = random.uniform(0, 1), random.uniform(0, 1)
    inside += 1 if x*x + y*y &amp;lt;= 1.0 else 0
  return count, inside

def combine_results(results):
  &quot;&quot;&quot;Given all the trial results, estimate pi.&quot;&quot;&quot;
  total, inside = sum(r[0] for r in results), sum(r[1] for r in results)
  return total, inside, 4 * float(inside) / total if total &amp;gt; 0 else 0

p = beam.Pipeline()
(p | beam.Create([500] * 10)  # Create 10 experiments with 500 samples each.
   | beam.Map(run_trials)     # Run experiments in parallel.
   | beam.CombineGlobally(combine_results)      # Combine the results.
   | beam.io.WriteToText('./pi_estimate.txt'))  # Write PI estimate to a file.

p.run()
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This example estimates Pi by throwing random darts into the unit square and keeping track of the fraction of those darts that fell into the unit circle (see the full &lt;a href=&quot;https://github.com/apache/beam/blob/v0.6.0/sdks/python/apache_beam/examples/complete/estimate_pi.py&quot;&gt;example&lt;/a&gt; for details). If you are curious, you can check the result of our estimation by looking at the output file.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cat pi_estimate.txt*
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;roadmap&quot;&gt;Roadmap&lt;/h4&gt;

&lt;p&gt;The first thing on the Python SDK’s roadmap is to address two of its limitations. First, the existing runners are currently limited to bounded PCollections, and we are looking forward to extending the SDK to support unbounded PCollections (“streaming”). Additionally, we are working on extending support to more Apache Beam runners, and the upcoming Fn API will do the heavy lifting.&lt;/p&gt;

&lt;p&gt;Both of these improvements will enable the Python SDK to fulfill the mission of Apache Beam: a unified programming model for batch and streaming data processing that can run on any execution engine.&lt;/p&gt;

&lt;h4 id=&quot;join-us&quot;&gt;Join us!&lt;/h4&gt;

&lt;p&gt;Please consider joining us, whether as a user or a contributor, as we work towards our first release with API stability. If you’d like to try out Apache Beam today, check out the latest &lt;a href=&quot;/get-started/downloads/&quot;&gt;0.6.0&lt;/a&gt; release. We welcome contributions and participation from anyone through our mailing lists, issue tracker, pull requests, and events.&lt;/p&gt;
</description>
        <pubDate>Thu, 16 Mar 2017 01:00:01 -0700</pubDate>
        <link>https://beam.apache.org/blog/2017/03/16/python-sdk-release.html</link>
        <guid isPermaLink="true">https://beam.apache.org/blog/2017/03/16/python-sdk-release.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Stateful processing with Apache Beam</title>
        <description>&lt;p&gt;Beam lets you process unbounded, out-of-order, global-scale data with portable
high-level pipelines. Stateful processing is a new feature of the Beam model
that expands the capabilities of Beam, unlocking new use cases and new
efficiencies. In this post, I will guide you through stateful processing in
Beam: how it works, how it fits in with the other features of the Beam model,
what you might use it for, and what it looks like in code.&lt;/p&gt;

&lt;!--more--&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Warning: new features ahead!&lt;/strong&gt;: This is a very new aspect of the Beam
model. Runners are still adding support. You can try it out today on multiple
runners, but do check the &lt;a href=&quot;/documentation/runners/capability-matrix/&quot;&gt;runner capability
matrix&lt;/a&gt; for
the current status in each runner.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;First, a quick recap: In Beam, a big data processing &lt;em&gt;pipeline&lt;/em&gt; is a directed,
acyclic graph of parallel operations called &lt;em&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;PTransforms&lt;/code&gt;&lt;/em&gt; processing data
from &lt;em&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;PCollections&lt;/code&gt;&lt;/em&gt;. I’ll expand on that by walking through this illustration:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center-block&quot; src=&quot;/images/blog/stateful-processing/pipeline.png&quot; alt=&quot;A Beam Pipeline - PTransforms are boxes - PCollections are arrows&quot; width=&quot;300&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The boxes are &lt;code class=&quot;highlighter-rouge&quot;&gt;PTransforms&lt;/code&gt; and the edges represent the data in &lt;code class=&quot;highlighter-rouge&quot;&gt;PCollections&lt;/code&gt;
flowing from one &lt;code class=&quot;highlighter-rouge&quot;&gt;PTransform&lt;/code&gt; to the next. A &lt;code class=&quot;highlighter-rouge&quot;&gt;PCollection&lt;/code&gt; may be &lt;em&gt;bounded&lt;/em&gt; (which
means it is finite and you know it) or &lt;em&gt;unbounded&lt;/em&gt; (which means you don’t know if
it is finite or not - basically, it is like an incoming stream of data that may
or may not ever terminate). The cylinders are the data sources and sinks at the
edges of your pipeline, such as bounded collections of log files or unbounded
data streaming over a Kafka topic. This blog post isn’t about sources or sinks,
but about what happens in between - your data processing.&lt;/p&gt;

&lt;p&gt;There are two main building blocks for processing your data in Beam: &lt;em&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ParDo&lt;/code&gt;&lt;/em&gt;,
for performing an operation in parallel across all elements, and &lt;em&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GroupByKey&lt;/code&gt;&lt;/em&gt;
(and the closely related &lt;code class=&quot;highlighter-rouge&quot;&gt;CombinePerKey&lt;/code&gt; that I will talk about quite soon)
for aggregating elements to which you have assigned the same key. In the
picture below (featured in many of our presentations) the color indicates the
key of the element. Thus the &lt;code class=&quot;highlighter-rouge&quot;&gt;GroupByKey&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;CombinePerKey&lt;/code&gt; transform gathers all the
green squares to produce a single output element.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center-block&quot; src=&quot;/images/blog/stateful-processing/pardo-and-gbk.png&quot; alt=&quot;ParDo and GroupByKey/CombinePerKey:          Elementwise versus aggregating computations&quot; width=&quot;400&quot; /&gt;&lt;/p&gt;

&lt;p&gt;But not all use cases are easily expressed as pipelines of simple &lt;code class=&quot;highlighter-rouge&quot;&gt;ParDo&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;Map&lt;/code&gt; and
&lt;code class=&quot;highlighter-rouge&quot;&gt;GroupByKey&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;CombinePerKey&lt;/code&gt; transforms. The topic of this blog post is a new
extension to the Beam programming model: &lt;strong&gt;per-element operation augmented with
mutable state&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center-block&quot; src=&quot;/images/blog/stateful-processing/stateful-pardo.png&quot; alt=&quot;Stateful ParDo - sequential per-key processing with persistent state&quot; width=&quot;300&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In the illustration above, ParDo now has a bit of durable, consistent state on
the side, which can be read and written during the processing of each element.
The state is partitioned by key, so it is drawn as having disjoint sections for
each color. It is also partitioned per window, but I thought plaid 
&lt;img src=&quot;/images/blog/stateful-processing/plaid.png&quot; alt=&quot;A plaid storage cylinder&quot; width=&quot;20&quot; /&gt; 
would be a bit much  :-). I’ll talk about
why state is partitioned this way a bit later, via my first example.&lt;/p&gt;

&lt;p&gt;For the rest of this post, I will describe this new feature of Beam in detail -
how it works at a high level, how it differs from existing features, how to
make sure it is still massively scalable. After that introduction at the model
level, I’ll walk through a simple example of how you use it in the Beam Java
SDK.&lt;/p&gt;

&lt;h2 id=&quot;how-does-stateful-processing-in-beam-work&quot;&gt;How does stateful processing in Beam work?&lt;/h2&gt;

&lt;p&gt;The processing logic of your &lt;code class=&quot;highlighter-rouge&quot;&gt;ParDo&lt;/code&gt; transform is expressed through the &lt;code class=&quot;highlighter-rouge&quot;&gt;DoFn&lt;/code&gt;
that it applies to each element.  Without stateful augmentations, a &lt;code class=&quot;highlighter-rouge&quot;&gt;DoFn&lt;/code&gt; is a
mostly-pure function from inputs to one or more outputs, corresponding to the
Mapper in a MapReduce.  With state, a &lt;code class=&quot;highlighter-rouge&quot;&gt;DoFn&lt;/code&gt; has the ability to access
persistent mutable state while processing each input element. Consider this
illustration:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center-block&quot; src=&quot;/images/blog/stateful-processing/stateful-dofn.png&quot; alt=&quot;Stateful DoFn -          the runner controls input but the DoFn controls storage and output&quot; width=&quot;300&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The first thing to note is that all the data - the little squares, circles, and
triangles - are red. This is to illustrate that stateful processing occurs in
the context of a single key - all of the elements are key-value pairs with the
same key. Calls from your chosen Beam runner to the &lt;code class=&quot;highlighter-rouge&quot;&gt;DoFn&lt;/code&gt; are colored in
yellow, while calls from the &lt;code class=&quot;highlighter-rouge&quot;&gt;DoFn&lt;/code&gt; to the runner are in purple:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The runner invokes the &lt;code class=&quot;highlighter-rouge&quot;&gt;DoFn&lt;/code&gt;’s &lt;code class=&quot;highlighter-rouge&quot;&gt;@ProcessElement&lt;/code&gt; method on each element for a
key+window.&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;DoFn&lt;/code&gt; reads and writes state - the curved arrows to/from the storage on
the side.&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;DoFn&lt;/code&gt; emits output (or side output) to the runner as usual via
&lt;code class=&quot;highlighter-rouge&quot;&gt;ProcessContext.output&lt;/code&gt; (resp. &lt;code class=&quot;highlighter-rouge&quot;&gt;ProcessContext.sideOutput&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At this very high level, it is pretty intuitive: In your programming
experience, you have probably at some point written a loop over elements that
updates some mutable variables while performing other actions. The interesting
question is how does this fit into the Beam model: how does it relate with
other features? How does it scale, since state implies some synchronization?
When should it be used versus other features?&lt;/p&gt;

&lt;h2 id=&quot;how-does-stateful-processing-fit-into-the-beam-model&quot;&gt;How does stateful processing fit into the Beam model?&lt;/h2&gt;

&lt;p&gt;To see where stateful processing fits in the Beam model, consider another
way that you can keep some “state” while processing many elements: CombineFn. In
Beam, you can write &lt;code class=&quot;highlighter-rouge&quot;&gt;Combine.perKey(CombineFn)&lt;/code&gt; in Java or Python to apply an
associative, commutative accumulating operation across all the elements with a
common key (and window).&lt;/p&gt;

&lt;p&gt;Here is a diagram illustrating the basics of a &lt;code class=&quot;highlighter-rouge&quot;&gt;CombineFn&lt;/code&gt;, the simplest way
that a runner might invoke it on a per-key basis to build an accumulator and
extract an output from the final accumulator:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center-block&quot; src=&quot;/images/blog/stateful-processing/combinefn.png&quot; alt=&quot;CombineFn - the runner controls input, storage, and output&quot; width=&quot;300&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As with the illustration of stateful &lt;code class=&quot;highlighter-rouge&quot;&gt;DoFn&lt;/code&gt;, all the data is colored red, since
this is the processing of Combine for a single key. The illustrated method
calls are colored yellow, since they are all controlled by the runner: The
runner invokes &lt;code class=&quot;highlighter-rouge&quot;&gt;addInput&lt;/code&gt; on each method to add it to the current accumulator.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The runner persists the accumulator when it chooses.&lt;/li&gt;
  &lt;li&gt;The runner calls &lt;code class=&quot;highlighter-rouge&quot;&gt;extractOutput&lt;/code&gt; when ready to emit an output element.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At this point, the diagram for &lt;code class=&quot;highlighter-rouge&quot;&gt;CombineFn&lt;/code&gt; looks a whole lot like the diagram
for stateful &lt;code class=&quot;highlighter-rouge&quot;&gt;DoFn&lt;/code&gt;. In practice, the flow of data is, indeed, quite similar.
But there are important differences, even so:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The runner controls all invocations and storage here. You do not decide when
or how state is persisted, when an accumulator is discarded (based on
triggering) or when output is extracted from an accumulator.&lt;/li&gt;
  &lt;li&gt;You can only have one piece of state - the accumulator. In a stateful DoFn
you can read only what you need to know and write only what has changed.&lt;/li&gt;
  &lt;li&gt;You don’t have the extended features of &lt;code class=&quot;highlighter-rouge&quot;&gt;DoFn&lt;/code&gt;, such as multiple outputs per
input or side outputs. (These could be simulated by a sufficient complex
accumulator, but it would not be natural or efficient. Some other features of
&lt;code class=&quot;highlighter-rouge&quot;&gt;DoFn&lt;/code&gt; such as side inputs and access to the window make perfect sense for
&lt;code class=&quot;highlighter-rouge&quot;&gt;CombineFn&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But the main thing that &lt;code class=&quot;highlighter-rouge&quot;&gt;CombineFn&lt;/code&gt; allows a runner to do is to
&lt;code class=&quot;highlighter-rouge&quot;&gt;mergeAccumulators&lt;/code&gt;, the concrete expression of the &lt;code class=&quot;highlighter-rouge&quot;&gt;CombineFn&lt;/code&gt;’s associativity.
This unlocks some huge optimizations: the runner can invoke multiple instances
of a &lt;code class=&quot;highlighter-rouge&quot;&gt;CombineFn&lt;/code&gt; on a number of inputs and later combine them in a classic
divide-and-conquer architecture, as in this picture:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center-block&quot; src=&quot;/images/blog/stateful-processing/combiner-lifting.png&quot; alt=&quot;Divide-and-conquer aggregation with a CombineFn&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The contract of a &lt;code class=&quot;highlighter-rouge&quot;&gt;CombineFn&lt;/code&gt; is that the result should be exactly the same,
whether or not the runner decides to actually do such a thing, or even more
complex trees with hot-key fanout, etc.&lt;/p&gt;

&lt;p&gt;This merge operation is not (necessarily) provided by a stateful &lt;code class=&quot;highlighter-rouge&quot;&gt;DoFn&lt;/code&gt;: the
runner cannot freely branch its execution and recombine the states. Note that
the input elements are still received in an arbitrary order, so the &lt;code class=&quot;highlighter-rouge&quot;&gt;DoFn&lt;/code&gt; should
be insensitive to ordering and bundling but it doesn’t mean the output must be
exactly equal. (fun and easy fact: if the outputs are actually always equal,
then the &lt;code class=&quot;highlighter-rouge&quot;&gt;DoFn&lt;/code&gt; is an associative and commutative operator)&lt;/p&gt;

&lt;p&gt;So now you can see how a stateful &lt;code class=&quot;highlighter-rouge&quot;&gt;DoFn&lt;/code&gt; differs from &lt;code class=&quot;highlighter-rouge&quot;&gt;CombineFn&lt;/code&gt;, but I want to
step back and extrapolate this to a high level picture of how state in Beam
relates to using other features to achieve the same or similar goals: In a lot
of cases, what stateful processing represents is a chance to “get under the
hood” of the highly abstract mostly-deterministic functional paradigm of Beam
and do potentially-nondeterministic imperative-style programming that is hard
to express any other way.&lt;/p&gt;

&lt;h2 id=&quot;example-arbitrary-but-consistent-index-assignment&quot;&gt;Example: arbitrary-but-consistent index assignment&lt;/h2&gt;

&lt;p&gt;Suppose that you want to give an index to every incoming element for a
key-and-window. You don’t care what the indices are, just as long as they are
unique and consistent. Before diving into the code for how to do this in a Beam
SDK, I’ll go over this example from the level of the model. In pictures, you
want to write a transform that maps input to output like this:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center-block&quot; src=&quot;/images/blog/stateful-processing/assign-indices.png&quot; alt=&quot;Assigning arbitrary but unique indices to each element&quot; width=&quot;180&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The order of the elements A, B, C, D, E is arbitrary, hence their assigned
indices are arbitrary, but downstream transforms just need to be OK with this.
There is no associativity or commutativity as far as the actual values are
concerned. The order-insensitivity of this transform only extends to the point
of ensuring the necessary properties of the output: no duplicated indices, no
gaps, and every element gets an index.&lt;/p&gt;

&lt;p&gt;Conceptually expressing this as a stateful loop is as trivial as you can
imagine: The state you should store is the next index.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;As an element comes in, output it along with the next index.&lt;/li&gt;
  &lt;li&gt;Increment the index.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This presents a good opportunity to talk about big data and parallelism,
because the algorithm in those bullet points is not parallelizable at all! If
you wanted to apply this logic over an entire &lt;code class=&quot;highlighter-rouge&quot;&gt;PCollection&lt;/code&gt;, you would have to
process each element of the &lt;code class=&quot;highlighter-rouge&quot;&gt;PCollection&lt;/code&gt; one-at-a-time… this is obvious a
bad idea.  State in Beam is tightly scoped so that most of the time a stateful
&lt;code class=&quot;highlighter-rouge&quot;&gt;ParDo&lt;/code&gt; transform should still be possible for a runner to execute in parallel,
though you still have to be thoughtful about it.&lt;/p&gt;

&lt;p&gt;A state cell in Beam is scoped to a key+window pair. When your DoFn reads or
writes state by the name of &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;index&quot;&lt;/code&gt;, it is actually accessing a mutable cell
specified by &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;index&quot;&lt;/code&gt; &lt;em&gt;along with&lt;/em&gt; the key and window currently being
processed.  So, when thinking about a state cell, it may be helpful to consider
the full state of your transform as a table, where the rows are named according
to names you use in your program, like &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;index&quot;&lt;/code&gt;, and the columns are
key+window pairs, like this:&lt;/p&gt;

&lt;table class=&quot;table&quot;&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt;(key, window)&lt;sub&gt;1&lt;/sub&gt;&lt;/th&gt;
      &lt;th&gt;(key, window)&lt;sub&gt;2&lt;/sub&gt;&lt;/th&gt;
      &lt;th&gt;(key, window)&lt;sub&gt;3&lt;/sub&gt;&lt;/th&gt;
      &lt;th&gt;…&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;index&quot;&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;3&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;7&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;15&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;…&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;fizzOrBuzz?&quot;&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;fizz&quot;&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;7&quot;&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;fizzbuzz&quot;&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;…&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;…&lt;/td&gt;
      &lt;td&gt;…&lt;/td&gt;
      &lt;td&gt;…&lt;/td&gt;
      &lt;td&gt;…&lt;/td&gt;
      &lt;td&gt;…&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;(if you have a superb spatial sense, feel free to imagine this as a cube where
keys and windows are independent dimensions)&lt;/p&gt;

&lt;p&gt;You can provide the opportunity for parallelism by making sure that table has
enough columns. You might have many keys and many windows, or you might have
many of just one or the other:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Many keys in few windows, for example a globally windowed stateful computation
keyed by user ID.&lt;/li&gt;
  &lt;li&gt;Many windows over few keys, for example a fixed windowed stateful computation
over a global key.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Caveat: all Beam runners today parallelize only over the key.&lt;/p&gt;

&lt;p&gt;Most often your mental model of state can be focused on only a single column of
the table, a single key+window pair. Cross-column interactions do not occur
directly, by design.&lt;/p&gt;

&lt;h2 id=&quot;state-in-beams-java-sdk&quot;&gt;State in Beam’s Java SDK&lt;/h2&gt;

&lt;p&gt;Now that I have talked a bit about stateful processing in the Beam model and
worked through an abstract example, I’d like to show you what it looks like to
write stateful processing code using Beam’s Java SDK.  Here is the code for a
stateful &lt;code class=&quot;highlighter-rouge&quot;&gt;DoFn&lt;/code&gt; that assigns an arbitrary-but-consistent index to each element
on a per key-and-window basis:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DoFn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MyKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MyValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MyKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MyValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// A state cell holding a single Integer per key+window&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@StateId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;index&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StateSpec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ValueState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;indexSpec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
      &lt;span class=&quot;n&quot;&gt;StateSpecs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VarIntCoder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@ProcessElement&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;processElement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;ProcessContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nd&quot;&gt;@StateId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;index&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ValueState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;firstNonNull&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()));&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-py highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# State and timers are not yet supported in Beam's Python SDK.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Watch this space!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Let’s dissect this:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The first thing to look at is the presence of a couple of &lt;code class=&quot;highlighter-rouge&quot;&gt;@StateId(&quot;index&quot;)&lt;/code&gt;
annotations. This calls out that you are using a mutable state cell named
“index” in this &lt;code class=&quot;highlighter-rouge&quot;&gt;DoFn&lt;/code&gt;. The Beam Java SDK, and from there your chosen runner,
will also note these annotations and use them to wire up your DoFn correctly.&lt;/li&gt;
  &lt;li&gt;The first &lt;code class=&quot;highlighter-rouge&quot;&gt;@StateId(&quot;index&quot;)&lt;/code&gt; is annotated on a field of type &lt;code class=&quot;highlighter-rouge&quot;&gt;StateSpec&lt;/code&gt; (for
“state specification”). This declares and configures the state cell. The
type parameter &lt;code class=&quot;highlighter-rouge&quot;&gt;ValueState&lt;/code&gt; describes the kind of state you can get out of this
cell - &lt;code class=&quot;highlighter-rouge&quot;&gt;ValueState&lt;/code&gt; stores just a single value. Note that the spec itself is not
a usable state cell - you need the runner to provide that during pipeline
execution.&lt;/li&gt;
  &lt;li&gt;To fully specify a &lt;code class=&quot;highlighter-rouge&quot;&gt;ValueState&lt;/code&gt; cell, you need to provide the coder
that the runner will use (as necessary) to serialize the value
you will be storing. This is the invocation &lt;code class=&quot;highlighter-rouge&quot;&gt;StateSpecs.value(VarIntCoder.of())&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;The second &lt;code class=&quot;highlighter-rouge&quot;&gt;@StateId(&quot;index&quot;)&lt;/code&gt; annotation is on a parameter to your
&lt;code class=&quot;highlighter-rouge&quot;&gt;@ProcessElement&lt;/code&gt; method. This indicates access to the ValueState cell that
was specified earlier.&lt;/li&gt;
  &lt;li&gt;The state is accessed in the simplest way: &lt;code class=&quot;highlighter-rouge&quot;&gt;read()&lt;/code&gt; to read it, and
&lt;code class=&quot;highlighter-rouge&quot;&gt;write(newvalue)&lt;/code&gt; to write it.&lt;/li&gt;
  &lt;li&gt;The other features of &lt;code class=&quot;highlighter-rouge&quot;&gt;DoFn&lt;/code&gt; are available in the usual way - such as
&lt;code class=&quot;highlighter-rouge&quot;&gt;context.output(...)&lt;/code&gt;. You can also use side inputs, side outputs, gain access
to the window, etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A few notes on how the SDK and runners see this DoFn:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Your state cells are all explicitly declared so a Beam SDK or runner can
reason about them, for example to clear them out when a window expires.&lt;/li&gt;
  &lt;li&gt;If you declare a state cell and then use it with the wrong type, the Beam
Java SDK will catch that error for you.&lt;/li&gt;
  &lt;li&gt;If you declare two state cells with the same ID, the SDK will catch that,
too.&lt;/li&gt;
  &lt;li&gt;The runner knows that this is a stateful &lt;code class=&quot;highlighter-rouge&quot;&gt;DoFn&lt;/code&gt; and may run it quite
differently, for example by additional data shuffling and synchronization in
order to avoid concurrent access to state cells.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s look at one more example of how to use this API, this time a bit more real-world.&lt;/p&gt;

&lt;h2 id=&quot;example-anomaly-detection&quot;&gt;Example: anomaly detection&lt;/h2&gt;

&lt;p&gt;Suppose you are feeding a stream of actions by your user into some complex
model to predict some quantitative expression of the sorts of actions they
take, for example to detect fraudulent activity. You will build up the model
from events, and also compare incoming events against the latest model to
determine if something has changed.&lt;/p&gt;

&lt;p&gt;If you try to express the building of your model as a &lt;code class=&quot;highlighter-rouge&quot;&gt;CombineFn&lt;/code&gt;, you may have
trouble with &lt;code class=&quot;highlighter-rouge&quot;&gt;mergeAccumulators&lt;/code&gt;. Assuming you could express that, it might
look something like this:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ModelFromEventsFn&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CombineFn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Model&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createAccumulator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Model&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addInput&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Model&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;accumulator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Event&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;accumulator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// this is encouraged to mutate, for efficiency&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Model&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mergeAccumulators&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Iterable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;accumulators&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// ?? can you write this ??&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Model&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;extractOutput&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Model&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;accumulator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;accumulator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-py highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# State and timers are not yet supported in Beam's Python SDK.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Watch this space!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now you have a way to compute the model of a particular user for a window as
&lt;code class=&quot;highlighter-rouge&quot;&gt;Combine.perKey(new ModelFromEventsFn())&lt;/code&gt;. How would you apply this model to
the same stream of events from which it is calculated? A standard way to do
take the result of a &lt;code class=&quot;highlighter-rouge&quot;&gt;Combine&lt;/code&gt; transform and use it while processing the
elements of a &lt;code class=&quot;highlighter-rouge&quot;&gt;PCollection&lt;/code&gt; is to read it as a side input to a &lt;code class=&quot;highlighter-rouge&quot;&gt;ParDo&lt;/code&gt;
transform. So you could side input the model and check the stream of events
against it, outputting the prediction, like so:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;PCollection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UserId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;events&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PCollectionView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UserId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userModels&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;events&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Combine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;perKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ModelFromEventsFn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()))&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;asMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;PCollection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UserId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Prediction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;predictions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;events&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ParDo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DoFn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UserId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

      &lt;span class=&quot;nd&quot;&gt;@ProcessElement&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;processElement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ProcessContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;UserId&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Event&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;Model&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sideinput&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userModels&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// Perhaps some logic around when to output a new prediction&lt;/span&gt;
        &lt;span class=&quot;err&quot;&gt;…&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;prediction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)))&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;…&lt;/span&gt; 
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-py highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# State and timers are not yet supported in Beam's Python SDK.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Watch this space!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;In this pipeline, there is just one model emitted by the &lt;code class=&quot;highlighter-rouge&quot;&gt;Combine.perKey(...)&lt;/code&gt;
per user, per window, which is then prepared for side input by the &lt;code class=&quot;highlighter-rouge&quot;&gt;View.asMap()&lt;/code&gt;
transform. The processing of the &lt;code class=&quot;highlighter-rouge&quot;&gt;ParDo&lt;/code&gt; over events will block until that side
input is ready, buffering events, and will then check each event against the
model. This is a high latency, high completeness solution: The model takes into
account all user behavior in the window, but there can be no output until the
window is complete.&lt;/p&gt;

&lt;p&gt;Suppose you want to get some results earlier, or don’t even have any
natural windowing, but just want continuous analysis with the “model so far”,
even though your model may not be as complete. How can you control the updates
to the model against which you are checking your events? Triggers are the
generic Beam feature for managing completeness versus latency tradeoffs. So here
is the same pipeline with an added trigger that outputs a new model one second
after input arrives:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;PCollection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UserId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;events&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;PCollectionView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UserId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userModels&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;events&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// A tradeoff between latency and cost&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Window&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;triggering&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;AfterProcessingTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pastFirstElementInPane&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Duration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;standardSeconds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)))&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Combine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;perKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ModelFromEventsFn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()))&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;asMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-py highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# State and timers are not yet supported in Beam's Python SDK.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Watch this space!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This is often a pretty nice tradeoff between latency and cost: If a huge flood
of events comes in a second, then you will only emit one new model, so you
won’t be flooded with model outputs that you cannot even use before they are
obsolete. In practice, the new model may not be present on the side input
channel until many more seconds have passed, due to caches and processing
delays preparing the side input. Many events (maybe an entire batch of
activity) will have passed through the &lt;code class=&quot;highlighter-rouge&quot;&gt;ParDo&lt;/code&gt; and had their predictions
calculated according to the prior model. If the runner gave a tight enough
bound on cache expirations and you used a more aggressive trigger, you might be
able to improve latency at additional cost.&lt;/p&gt;

&lt;p&gt;But there is another cost to consider: you are outputting many uninteresting
outputs from the &lt;code class=&quot;highlighter-rouge&quot;&gt;ParDo&lt;/code&gt; that will be processed downstream. If the
“interestingness” of the output is only well-defined relative to the prior
output, then you cannot use a &lt;code class=&quot;highlighter-rouge&quot;&gt;Filter&lt;/code&gt; transform to reduce data volume downstream.&lt;/p&gt;

&lt;p&gt;Stateful processing lets you address both the latency problem of side inputs
and the cost problem of excessive uninteresting output. Here is the code, using
only features I have already introduced:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DoFn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UserId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UserId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Prediction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@StateId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;model&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StateSpec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ValueState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;modelSpec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;StateSpecs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;coder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@StateId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;previousPrediction&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StateSpec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ValueState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Prediction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;previousPredictionSpec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;StateSpecs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Prediction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;coder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@ProcessElement&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;processElement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;ProcessContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nd&quot;&gt;@StateId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;previousPrediction&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ValueState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Prediction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;previousPredictionState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nd&quot;&gt;@StateId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;model&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ValueState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;modelState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;UserId&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Event&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;Model&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;modelState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Prediction&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;previousPrediction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;previousPredictionState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Prediction&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newPrediction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;prediction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;modelState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;previousPrediction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; 
        &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shouldOutputNewPrediction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;previousPrediction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newPrediction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newPrediction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;previousPredictionState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newPrediction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-py highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# State and timers are not yet supported in Beam's Python SDK.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Watch this space!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Let’s walk through it,&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You have two state cells declared, &lt;code class=&quot;highlighter-rouge&quot;&gt;@StateId(&quot;model&quot;)&lt;/code&gt; to hold the current
state of the model for a user and &lt;code class=&quot;highlighter-rouge&quot;&gt;@StateId(&quot;previousPrediction&quot;)&lt;/code&gt; to hold
the prediction output previously.&lt;/li&gt;
  &lt;li&gt;Access to the two state cells by annotation in the &lt;code class=&quot;highlighter-rouge&quot;&gt;@ProcessElement&lt;/code&gt; method
is as before.&lt;/li&gt;
  &lt;li&gt;You read the current model via &lt;code class=&quot;highlighter-rouge&quot;&gt;modelState.read()&lt;/code&gt;. Because state is also
per-key-and-window, this is a model just for the UserId of the Event
currently being processed.&lt;/li&gt;
  &lt;li&gt;You derive a new prediction &lt;code class=&quot;highlighter-rouge&quot;&gt;model.prediction(event)&lt;/code&gt; and compare it against
the last one you output, accessed via &lt;code class=&quot;highlighter-rouge&quot;&gt;previousPredicationState.read()&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;You then update the model &lt;code class=&quot;highlighter-rouge&quot;&gt;model.update()&lt;/code&gt; and write it via
&lt;code class=&quot;highlighter-rouge&quot;&gt;modelState.write(...)&lt;/code&gt;. It is perfectly fine to mutate the value you pulled
out of state as long as you also remember to write the mutated value, in the
same way you are encouraged to mutate &lt;code class=&quot;highlighter-rouge&quot;&gt;CombineFn&lt;/code&gt; accumulators.&lt;/li&gt;
  &lt;li&gt;If the prediction has changed a significant amount since the last time you
output, you emit it via &lt;code class=&quot;highlighter-rouge&quot;&gt;context.output(...)&lt;/code&gt; and save the prediction using
&lt;code class=&quot;highlighter-rouge&quot;&gt;previousPredictionState.write(...)&lt;/code&gt;. Here the decision is relative to the
prior prediction output, not the last one computed - realistically you might
have some complex conditions here.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Most of the above is just talking through Java! But before you go out and
convert all of your pipelines to use stateful processing, I want to go over
some considerations as to whether it is a good fit for your use case.&lt;/p&gt;

&lt;h2 id=&quot;performance-considerations&quot;&gt;Performance considerations&lt;/h2&gt;

&lt;p&gt;To decide whether to use per-key-and-window state, you need to consider how it
executes. You can dig into how a particular runner manages state, but there are
some general things to keep in mind:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Partitioning per-key-and-window: perhaps the most important thing to
consider is that the runner may have to shuffle your data to colocate all
the data for a particular key+window. If the data is already shuffled
correctly, the runner may take advantage of this.&lt;/li&gt;
  &lt;li&gt;Synchronization overhead: the API is designed so the runner takes care of
concurrency control, but this means that the runner cannot parallelize
processing of elements for a particular key+window even when it would otherwise
be advantageous.&lt;/li&gt;
  &lt;li&gt;Storage and fault tolerance of state: since state is per-key-and-window, the
more keys and windows you expect to process simultaneously, the more storage
you will incur. Because state benefits from all the fault tolerance /
consistency properties of your other data in Beam, it also adds to the cost of
committing the results of processing.&lt;/li&gt;
  &lt;li&gt;Expiration of state: also since state is per-window, the runner can reclaim
the resources when a window expires (when the watermark exceeds its allowed
lateness) but this could mean that the runner is tracking an additional timer
per key and window to cause reclamation code to execute.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;go-use-it&quot;&gt;Go use it!&lt;/h2&gt;

&lt;p&gt;If you are new to Beam, I hope you are now interested in seeing if Beam with
stateful processing addresses your use case.  If you are already using Beam, I
hope this new addition to the model unlocks new use cases for you.  Do check
the &lt;a href=&quot;/documentation/runners/capability-matrix/&quot;&gt;capability
matrix&lt;/a&gt; to
see the level of support for this new model feature on your favorite
backend(s).&lt;/p&gt;

&lt;p&gt;And please do join the community at
&lt;a href=&quot;/get-started/support&quot;&gt;user@beam.apache.org&lt;/a&gt;. We’d love to
hear from you.&lt;/p&gt;
</description>
        <pubDate>Mon, 13 Feb 2017 00:00:01 -0800</pubDate>
        <link>https://beam.apache.org/blog/2017/02/13/stateful-processing.html</link>
        <guid isPermaLink="true">https://beam.apache.org/blog/2017/02/13/stateful-processing.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Media recap of the Apache Beam graduation</title>
        <description>&lt;p&gt;One year ago today Apache Beam was accepted into incubation at the Apache
Software Foundation. The community’s work over the past year culminated, just
over three weeks ago, with an &lt;a href=&quot;/blog/2017/01/10/beam-graduates.html&quot;&gt;announcement&lt;/a&gt;
that Apache Beam has successfully graduated as a new Top-Level Project at the
foundation. Graduation sparked an additional interest in the project, from
corporate endorsements, news articles, interviews, to the volume of traffic to
our website and mailing lists.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Corporate endorsements include Google, PayPal, Talend, data Artisans, and
others. You can read more in the following blog posts:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Google: “&lt;a href=&quot;https://opensource.googleblog.com/2017/01/apache-beam-graduates.html&quot;&gt;Apache Beam graduates to a top-level project&lt;/a&gt;” by Tyler Akidau.&lt;/li&gt;
  &lt;li&gt;Talend: “&lt;a href=&quot;https://www.talend.com/blog/2017/01/13/future-apache-beam-now-top-level-apache-software-foundation-project/&quot;&gt;The Future of Apache Beam, Now a Top-Level Apache Software Foundation Project&lt;/a&gt;” by Jean-Baptiste Onofré.&lt;/li&gt;
  &lt;li&gt;Talend: “&lt;a href=&quot;https://www.talend.com/blog/2017/01/23/apache-beam-way-greater-data-agility/?utm_medium=socialpost&amp;amp;utm_source=twitter&amp;amp;utm_campaign=blog&quot;&gt;Apache Beam Your Way to Greater Data Agility&lt;/a&gt;” by Shane Kent.&lt;/li&gt;
  &lt;li&gt;Google: “&lt;a href=&quot;https://cloud.google.com/blog/big-data/2017/01/apache-beam-graduates-from-incubation-try-it-today-on-google-cloud-dataflow&quot;&gt;Apache Beam graduates from incubation: Try it today on Google Cloud Dataflow&lt;/a&gt;” by Frances Perry.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;News coverage started with the Apache Software Foundation’s press release in
&lt;a href=&quot;https://globenewswire.com/news-release/2017/01/10/904692/0/en/The-Apache-Software-Foundation-Announces-Apache-Beam-as-a-Top-Level-Project.html&quot;&gt;Nasdaq GlobeNewswire&lt;/a&gt;,
and followed by coverage in many independent outlets. Some of those in English
include:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;ZDNet: “&lt;a href=&quot;http://www.zdnet.com/article/apache-beam-and-spark-new-coopetition-for-squashing-the-lambda-architecture/&quot;&gt;Apache Beam and Spark: New coopetition for squashing the Lambda Architecture?&lt;/a&gt;” by Tony Baer.&lt;/li&gt;
  &lt;li&gt;Datanami: “&lt;a href=&quot;https://www.datanami.com/2017/01/10/google-lauds-outside-influence-apache-beam/&quot;&gt;Google Lauds Outside Influence on Apache Beam&lt;/a&gt;” by Alex Woodie.&lt;/li&gt;
  &lt;li&gt;InfoWorld / JavaWorld: “&lt;a href=&quot;http://www.infoworld.com/article/3156598/big-data/apache-beam-unifies-batch-and-streaming-for-big-data.html&quot;&gt;Apache Beam unifies batch and streaming for big data&lt;/a&gt;” by Serdar Yegulalp, and republished in &lt;a href=&quot;http://www.javaworld.com/article/3156598/big-data/apache-beam-unifies-batch-and-streaming-for-big-data.html&quot;&gt;JavaWorld&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;JAXenter: “&lt;a href=&quot;https://jaxenter.com/apache-beam-interview-131314.html&quot;&gt;In a way, Apache Beam is the glue that connects many big data systems together&lt;/a&gt;” by Kypriani Sinaris.&lt;/li&gt;
  &lt;li&gt;OStatic: “Apache Beam Unifies Batch and Streaming Data Processing” by Sam Dean. &lt;!-- http://ostatic.com/blog/apache-beam-unifies-batch-and-streaming-data-processing --&gt;&lt;/li&gt;
  &lt;li&gt;Enterprise Apps Today: “&lt;a href=&quot;http://www.enterpriseappstoday.com/business-intelligence/data-analytics/apache-beam-graduates-to-help-define-streaming-data-processing.html&quot;&gt;Apache Beam Graduates to Help Define Streaming Data Processing&lt;/a&gt;” by Sean Michael Kerner.&lt;/li&gt;
  &lt;li&gt;The Register: “&lt;a href=&quot;http://www.theregister.co.uk/2017/01/10/google_must_be_ibeamiing_as_apache_announces_its_new_top_level_projects/&quot;&gt;Google must be Beaming as Apache announces its new top-level projects&lt;/a&gt;” by Alexander J. Martin.&lt;/li&gt;
  &lt;li&gt;SiliconANGLE: “&lt;a href=&quot;http://siliconangle.com/blog/2017/01/11/apache-software-foundation-announces-2-top-level-projects/&quot;&gt;Apache Software Foundation announces two more top-level open source projects&lt;/a&gt;” by Mike Wheatley.&lt;/li&gt;
  &lt;li&gt;SD Times: “&lt;a href=&quot;http://sdtimes.com/apache-beam-goes-top-level/&quot;&gt;Apache Beam goes top level&lt;/a&gt;” by Alex Handy.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Graduation and media coverage helped push Beam website traffic to record levels.
The website traffic, measured in unique sessions per hour, peaked at more than
15 times above the previous week’s numbers. In a steady state, the traffic is
several times larger than before graduation.&lt;/p&gt;

&lt;p&gt;Hopefully these perspectives entice you to join us on this exciting ride, either
as a user or a contributor, as we work towards our first release with API
stability. If you’d like to try out Apache Beam today, check out the latest
&lt;a href=&quot;/get-started/downloads/&quot;&gt;0.4.0 release&lt;/a&gt;. We welcome
contribution and participation from anyone through our mailing lists, issue
tracker, pull requests, and events.&lt;/p&gt;
</description>
        <pubDate>Wed, 01 Feb 2017 00:00:01 -0800</pubDate>
        <link>https://beam.apache.org/blog/2017/02/01/graduation-media-recap.html</link>
        <guid isPermaLink="true">https://beam.apache.org/blog/2017/02/01/graduation-media-recap.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Apache Beam established as a new top-level project</title>
        <description>&lt;p&gt;Today, the Apache Software Foundation &lt;a href=&quot;https://blogs.apache.org/foundation/entry/the-apache-software-foundation-announces&quot;&gt;announced&lt;/a&gt;
that Apache Beam has successfully graduated from incubation, becoming a new
Top-Level Project at the foundation and signifying that its “community and
products have been well-governed under the foundation’s meritocratic process
and principles”.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Graduation is an exciting milestone for Apache Beam. Becoming a top-level
project is a recognition of the amazing growth of the Apache Beam community,
both in terms of size and diversity. It is fantastic to see ever-increasing
participation on our development and user mailing lists, in pull requests,
and at conferences and meetups. Contributions of additional runners and IO
connectors further show the significant interest from other projects and
organizations in being part of our growing community.&lt;/p&gt;

&lt;p&gt;Although graduation is a statement about community, our technical progress has
also been impressive. We started with code donations from several companies
that were tailored with a specific vendor and scenario in mind and had fragile
component boundaries. The whole community worked extremely hard over the past
year to refactor the codebase and documentation into a truly vendor-neutral and
extensible framework. We have established an impressive engineering system and
processes that promote test-driven development. This concerted focus on quality
and execution excellence enabled us to publish four releases, each significantly
better than the previous.&lt;/p&gt;

&lt;p&gt;Going forward, we will continue to extend the core abstractions to distill
additional complex data processing patterns into intuitive APIs, and, at the
same time, enhance the ability to interconnect additional storage/messaging
systems and execution engines. Together, we are excited to push forward the
state of the art in distributed data processing.&lt;/p&gt;

&lt;p&gt;This is also an opportunity to thank those who helped and supported us reaching
this milestone. None of this would be possible without the Apache Software
Foundation and its amazing volunteers who have wholeheartedly welcomed us into
the family. In particular, we’d like to thank the Apache Incubator community
for their guidance producing releases and following processes. We are especially
thankful to the Apache Infra team for their assistance establishing Beam’s
engineering system, particularly in the areas of testing infrastructure and
development productivity.&lt;/p&gt;

&lt;p&gt;On behalf of the whole Apache Beam community, thank you to our incubation
mentors Ted Dunning, Venkatesh Seetharam, and, previously, Bertrand Delacretaz
and Jim Jagielski, for teaching us the Apache Way and guiding us through
incubation. In particular, special thanks goes to our incubation champion and
mentor Jean-Baptiste Onofré, whose extraordinary help, day after day, was
instrumental in getting us here, and who continues as an active code contributor
and a member of the project management committee.&lt;/p&gt;

&lt;p&gt;Please consider joining us, whether as a user or a contributor, as we work
towards our first release with API stability. If you’d like to try out Apache
Beam today, check out the latest
&lt;a href=&quot;/get-started/downloads/&quot;&gt;0.4.0 release&lt;/a&gt;. We welcome
contribution and participation from anyone through our mailing lists, issue
tracker, pull requests, and events.&lt;/p&gt;
</description>
        <pubDate>Tue, 10 Jan 2017 00:00:01 -0800</pubDate>
        <link>https://beam.apache.org/blog/2017/01/10/beam-graduates.html</link>
        <guid isPermaLink="true">https://beam.apache.org/blog/2017/01/10/beam-graduates.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Release 0.4.0 adds a runner for Apache Apex</title>
        <description>&lt;p&gt;The latest release 0.4.0 of &lt;a href=&quot;/&quot;&gt;Apache Beam&lt;/a&gt; adds a new runner for &lt;a href=&quot;http://apex.apache.org/&quot;&gt;Apache Apex&lt;/a&gt;. We are excited to reach this initial milestone and are looking forward to continued collaboration between the Beam and Apex communities to advance the runner.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Beam evolved from the Google Dataflow SDK and as incubator project has quickly adapted the Apache way, grown the community and attracts increasing interest from users that hope to benefit from a conceptual strong unified programming model that is portable between different big data processing frameworks (see &lt;a href=&quot;https://www.oreilly.com/ideas/the-world-beyond-batch-streaming-101&quot;&gt;Streaming-101&lt;/a&gt; and &lt;a href=&quot;https://www.oreilly.com/ideas/the-world-beyond-batch-streaming-102&quot;&gt;Streaming-102&lt;/a&gt;). Multiple Apache projects already provide runners for Beam (see &lt;a href=&quot;/documentation/runners/capability-matrix/&quot;&gt;runners and capabilities matrix&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Apex is a stream processing framework for low-latency, high-throughput, stateful and reliable processing of complex analytics pipelines on clusters. Apex was developed since 2012 and is used in production by large companies for real-time and batch processing at scale.&lt;/p&gt;

&lt;p&gt;The initial revision of the runner was focussed on broad coverage of the Beam model on a functional level. That means, there will be follow up work in several areas to take the runner from functional to scalable and high performance to match the capabilities of Apex and its native API. The runner capabilities matrix shows that the Apex capabilities are well aligned with the Beam model. Specifically, the ability to track computational state in a fault tolerant and efficient manner is needed to broadly support the windowing concepts, including event time based processing.&lt;/p&gt;

&lt;h2 id=&quot;stateful-stream-processor&quot;&gt;Stateful Stream Processor&lt;/h2&gt;

&lt;p&gt;Apex was built as stateful stream processor from the ground up. Operators &lt;a href=&quot;https://www.datatorrent.com/blog/blog-introduction-to-checkpoint/&quot;&gt;checkpoint&lt;/a&gt; state in a distributed and asynchronous manner that produces a consistent snapshot for the entire processing graph, which can be used for recovery. Apex also supports such recovery in an incremental, or fine grained, manner. This means only the portion of the DAG that is actually affected by a failure will be recovered while the remaining pipeline continues processing (this can be leveraged to implement use cases with special needs, such as speculative execution to achieve SLA on the processing latency). The state checkpointing along with idempotent processing guarantee is the basis for &lt;a href=&quot;https://www.datatorrent.com/blog/end-to-end-exactly-once-with-apache-apex/&quot;&gt;exactly-once results&lt;/a&gt; support in Apex.&lt;/p&gt;

&lt;h2 id=&quot;translation-to-apex-dag&quot;&gt;Translation to Apex DAG&lt;/h2&gt;

&lt;p&gt;A Beam runner needs to implement the translation from the Beam model to the underlying frameworks execution model. In the case of Apex, the runner will translate the pipeline into the &lt;a href=&quot;https://www.datatorrent.com/blog/tracing-dags-from-specification-to-execution/&quot;&gt;native (compositional, low level) DAG API&lt;/a&gt; (which is also the base for a number of other API that are available to specify applications that run on Apex). The DAG consists of operators (functional building blocks that are connected with streams. The runner provides the execution layer. In the case of Apex it is distributed stream processing, operators process data event by event. The minimum set of operators covers Beam’s primitive transforms: &lt;code class=&quot;highlighter-rouge&quot;&gt;ParDo.Bound&lt;/code&gt;,  &lt;code class=&quot;highlighter-rouge&quot;&gt;ParDo.BoundMulti&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Read.Unbounded&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Read.Bounded&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;GroupByKey&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Flatten.FlattenPCollectionList&lt;/code&gt; etc.&lt;/p&gt;

&lt;h2 id=&quot;execution-and-testing&quot;&gt;Execution and Testing&lt;/h2&gt;

&lt;p&gt;In this release, the Apex runner executes the pipelines in embedded mode, where, similar to the direct runner, everything is executed in a single JVM. See &lt;a href=&quot;/get-started/quickstart/&quot;&gt;quickstart&lt;/a&gt; on how to run the Beam examples with the Apex runner.&lt;/p&gt;

&lt;p&gt;Embedded mode is useful for development and debugging. Apex in production runs distributed on Apache Hadoop YARN clusters. An example how a Beam pipeline can be embedded into an Apex application package to run on YARN can be found &lt;a href=&quot;https://github.com/tweise/apex-samples/tree/master/beam-apex-wordcount&quot;&gt;here&lt;/a&gt; and support for direct launch in the runner is currently being worked on.&lt;/p&gt;

&lt;p&gt;The Beam project has a strong focus on development process and tooling, including testing. For the runners, there is a comprehensive test suite with more than 200 integration tests that are executed against each runner to ensure they don’t break as changes are made. The tests cover the capabilities of the matrix and thus are a measure of completeness and correctness of the runner implementations. The suite was very helpful when developing the Apex runner.&lt;/p&gt;

&lt;h2 id=&quot;outlook&quot;&gt;Outlook&lt;/h2&gt;

&lt;p&gt;The next step is to take the Apex runner from functional to ready for real applications that run distributed, leveraging the scalability and performance features of Apex, similar to its native API. This includes chaining of ParDos, partitioning, optimizing combine operations etc. To get involved, please see &lt;a href=&quot;https://issues.apache.org/jira/issues/?jql=project%20%3D%20BEAM%20and%20component%20%3D%20runner-apex%20and%20resolution%20%3D%20unresolved&quot;&gt;JIRA&lt;/a&gt; and join the Beam community.&lt;/p&gt;
</description>
        <pubDate>Mon, 09 Jan 2017 09:00:01 -0800</pubDate>
        <link>https://beam.apache.org/blog/2017/01/09/added-apex-runner.html</link>
        <guid isPermaLink="true">https://beam.apache.org/blog/2017/01/09/added-apex-runner.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
  </channel>
</rss>
