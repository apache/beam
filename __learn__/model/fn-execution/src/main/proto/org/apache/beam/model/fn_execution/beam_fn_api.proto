/**
 * Fn API and bootstrapping protobuf definitions
 *
 * TODO: improve plural names in lists (look weird in Java)
 * e.g. getOutputsMap, addCodersBuilder
 *
 * @todo: gRPC/proto field names collide with Java/Python syntax e.g. "class" (Java), "output" (Python)
 */
syntax = "proto3";
/**
 * @todo: think about unifying common components in another package plus language namespaces for re-use with Runner API
 */

package org.apache.beam.model.fn_execution.v1;

option go_package = "github.com/apache/beam/sdks/v2/go/pkg/beam/model/fnexecution_v1;fnexecution_v1";
option java_package = "org.apache.beam.model.fnexecution.v1";
option java_outer_classname = "BeamFnApi";

import "org/apache/beam/model/pipeline/v1/beam_runner_api.proto";
import "org/apache/beam/model/pipeline/v1/endpoints.proto";
import "org/apache/beam/model/pipeline/v1/metrics.proto";
import "google/protobuf/descriptor.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";

// A descriptor, via the Beam Fn Data API, for connecting to a remote port
// Enables communication between two environments (e.g. between SDK and the runner)
// this is a Stable API
message RemoteGrpcPort {
  // A compulsory API descriptor that describes where to connect to including any authentication required
  org.apache.beam.model.pipeline.v1.ApiServiceDescriptor
    api_service_descriptor = 1;

  // compulsory Coder (for encoding/decoding data sent over this port) ID
  string coder_id = 2;
}

/**
 * API - Control Plane
 *
 * Further investigation needed for progress reporting and splitting.
 * As we have new metrics-related instructions/responses this may change
 */
// API describing the work of a SDK harness - stable
service BeamFnControl {
  // SDK receives instructions from runner about different work types
  rpc Control(
    // stream of responses from SDK
    stream InstructionResponse
  ) returns (
    // stream of requests to the SDK
    stream InstructionRequest 
  ) {}

  // This obtains all the process bundle descriptors for the bundle in question
  rpc GetProcessBundleDescriptor(GetProcessBundleDescriptorRequest) 
    returns (ProcessBundleDescriptor) {}
}

// The ProcessBundleDescriptor with a given id is requested
message GetProcessBundleDescriptorRequest {
  string process_bundle_descriptor_id = 1;
}



