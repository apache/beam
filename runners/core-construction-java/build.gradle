/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * License); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins { id 'org.apache.beam.module' }
applyJavaNature()

description = "Apache Beam :: Runners :: Core Construction Java"
ext.summary = """Beam Runners Core provides utilities to aid runner authors interact with a Pipeline
prior to execution."""


// Exclude tests that need a runner
test {
  systemProperty "beamUseDummyRunner", "true"
  useJUnit {
    excludeCategories "org.apache.beam.sdk.testing.NeedsRunner"
  }
}

dependencies {
  shadow project(path: ":beam-model-pipeline", configuration: "shadow")
  shadow project(path: ":beam-model-job-management", configuration: "shadow")
  shadow project(path: ":beam-sdks-java-core", configuration: "shadow")
  shadow library.java.vendored_grpc_1_13_1
  shadow library.java.vendored_guava_20_0
  shadow library.java.jackson_core
  shadow library.java.jackson_databind
  shadow library.java.joda_time
  shadow library.java.slf4j_api
  shadowTest library.java.hamcrest_core
  shadowTest library.java.hamcrest_library
  shadowTest library.java.junit
  shadowTest library.java.mockito_core
  shadowTest library.java.jackson_annotations
  shadowTest library.java.jackson_dataformat_yaml
  shadowTest project(path: ":beam-model-fn-execution", configuration: "shadow")
}

task runExpansionService (type: JavaExec) {
  main = "org.apache.beam.runners.core.construction.expansion.ExpansionService"
  classpath = sourceSets.main.runtimeClasspath
  args = [project.findProperty("constructionService.port") ?: "8097"]
}

task runTestExpansionService (type: JavaExec) {
  main = "org.apache.beam.runners.core.construction.expansion.TestExpansionService"
  classpath = sourceSets.test.runtimeClasspath
  args = [project.findProperty("constructionService.port") ?: "8097"]
}

task buildTestExpansionServiceJar(type: Jar) {
  dependsOn = [shadowJar, shadowTestJar]
  appendix = "testExpansionService"
  // Use zip64 mode to avoid "Archive contains more than 65535 entries".
  zip64 = true
  manifest {
    attributes(
            'Main-Class': 'org.apache.beam.runners.core.construction.expansion.TestExpansionService'
    )
  }
  from { configurations.testRuntime.collect { it.isDirectory() ? it : zipTree(it) }}
  from sourceSets.main.output
  from sourceSets.test.output
}
