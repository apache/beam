/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// There is no actual src dir under legacy-worker/ since legacy-worker is built against the
// same sourceSet as fn-api-worker. The reason why legacy-worker has a separated dir is:
// 1. Have one location for editing worker code which is built and tested in two
//    different ways.
// 2. Not have artifacts such as test results and jars write over each other.
// 3. Better compatibility with Intellij since Intellij requires separate content roots.

apply plugin: org.apache.beam.gradle.BeamModulePlugin

// Set a specific version of 'com.google.apis:google-api-services-dataflow'
// by adding -Pdataflow.version=<version> in Gradle command. Otherwise,
// 'google_clients_version' defined in BeamModulePlugin will be used as default.
def DATAFLOW_VERSION = "dataflow.version"

// Get full dependency of 'com.google.apis:google-api-services-dataflow'
def google_api_services_dataflow = project.hasProperty(DATAFLOW_VERSION) ? "com.google.apis:google-api-services-dataflow:" + getProperty(DATAFLOW_VERSION) : library.java.google_api_services_dataflow

// Returns a string representing the relocated path to be used with the shadow
// plugin when given a suffix such as "com.".
def getWorkerRelocatedPath = { String suffix ->
    return ("org.apache.beam.runners.dataflow.worker.repackaged."
            + suffix)
}

// Following listed dependencies will be shaded only in fnapi worker, not legacy
// worker
def sdk_provided_dependencies = [
        google_api_services_dataflow,
        library.java.avro,
        library.java.google_api_client,
        library.java.google_http_client,
        library.java.google_http_client_jackson,
        library.java.jackson_annotations,
        library.java.jackson_core,
        library.java.jackson_databind,
        library.java.joda_time,
        library.java.slf4j_api,
        library.java.vendored_grpc_1_13_1,
]

def sdk_provided_project_dependencies = [
        ":beam-model-pipeline",
        ":beam-runners-google-cloud-dataflow-java",
        ":beam-sdks-java-core",
        ":beam-sdks-java-extensions-google-cloud-platform-core",
        ":beam-sdks-java-io-google-cloud-platform",
]

// Exclude unneeded dependencies when building jar
def excluded_dependencies = [
        "com.google.auto.service:auto-service",      // Provided scope added from applyJavaNature
        "com.google.auto.value:auto-value",          // Provided scope added from applyJavaNature
        "org.codehaus.jackson:jackson-core-asl",     // Exclude an old version of jackson-core-asl introduced by google-http-client-jackson
        "org.objenesis:objenesis",                   // Transitive dependency introduced from Beam
        "org.tukaani:xz",                            // Transitive dependency introduced from Beam
        library.java.commons_compress,               // Transitive dependency introduced from Beam
        library.java.error_prone_annotations,        // Provided scope added in worker
        library.java.hamcrest_core,                  // Test only
        library.java.hamcrest_library,               // Test only
        library.java.junit,                          // Test only
]

applyJavaNature(publish: false, enableFindbugs: false /* TODO(BEAM-5658): enable findbugs */, validateShadowJar: false, shadowClosure: DEFAULT_SHADOW_CLOSURE << {
    dependencies {
        include(project(path: ":beam-runners-google-cloud-dataflow-java-windmill", configuration: "shadow"))
        include(dependency(".*:.*"))

        sdk_provided_dependencies.each {
            exclude(dependency(it))
        }
        sdk_provided_project_dependencies.each {
            exclude(project(path: it, configuration: "shadow"))
        }
        excluded_dependencies.each {
            exclude(dependency(it))
        }
    }

    // Include original source files extracted under
    // '$buildDir/original_sources_to_package' to jar
    from "$buildDir/original_sources_to_package"

    exclude "META-INF/LICENSE.txt"
    exclude "about.html"

    relocate("com.", getWorkerRelocatedPath("com.")) {
        exclude "com.fasterxml.jackson.**"
        exclude "com.google.api.client.**"
        exclude "com.google.api.services.bigquery.**"
        exclude "com.google.api.services.clouddebugger.**"
        exclude "com.google.api.services.dataflow.**"
        exclude "com.google.api.services.datastore.**"
        exclude "com.google.api.services.pubsub.**"
        exclude "com.google.api.services.storage.**"
        exclude "com.google.auth.**"
        exclude "com.google.cloud.dataflow.**"
        exclude "com.sun.management*"
        exclude "com.sun.management.**"
    }
    relocate("javax.servlet", getWorkerRelocatedPath("javax.servlet"))
    relocate("io.", getWorkerRelocatedPath("io."))
    relocate("okio.", getWorkerRelocatedPath("okio."))
    relocate("org.", getWorkerRelocatedPath("org.")) {
        // Exclude netty-tcnative from shading since gRPC relies on Netty to be able
        // to load org.apache.tomcat.jni.SSL to provide an SSL context.
        exclude "org.apache.avro.**"
        exclude "org.apache.beam.**"
        exclude "org.apache.tomcat.jni.**"
        exclude "org.conscrypt.**"
        exclude "org.eclipse.jetty.alpn.**"
        exclude "org.eclipse.jetty.npn.**"
        exclude "org.hamcrest.**"
        exclude "org.joda.time.**"
        exclude "org.junit.**"
        exclude "org.slf4j.**"
        exclude "org.w3c.dom.**"
    }
    relocate("org.apache.beam.runners.core.construction.",
            getWorkerRelocatedPath("org."))

})

/******************************************************************************/
// Configure the worker root project

configurations {
    sourceFile

    // Ban these dependencies from all configurations
    all {
        // Ban the usage of AppleJavaExtensions in findbugs.
        exclude group: "com.apple", module: "AppleJavaExtensions"
    }
}

evaluationDependsOn(":beam-runners-google-cloud-dataflow-java-fn-api-worker")

compileJava {
    source project(":beam-runners-google-cloud-dataflow-java-fn-api-worker").sourceSets.main.java.srcDirs
}

compileTestJava {
    source project(":beam-runners-google-cloud-dataflow-java-fn-api-worker").sourceSets.test.java.srcDirs
}

dependencies {
    // Note that any dependency that is modified here should also be modified within
    // runners/google-cloud-dataflow-java/worker/build.gradle using the rules provided
    // there.
    sdk_provided_dependencies.each {
        provided(it)
    }
    sdk_provided_project_dependencies.each {
        provided project(path: it, configuration: "shadow")
    }

    compile project(path: ":beam-model-fn-execution", configuration: "shadow")
    compile project(path: ":beam-runners-core-construction-java", configuration: "shadow")
    compile project(path: ":beam-runners-core-java", configuration: "shadow")
    compile project(path: ":beam-runners-java-fn-execution", configuration: "shadow")
    compile project(path: ":beam-sdks-java-fn-execution", configuration: "shadow")
    compile project(path: ":beam-runners-google-cloud-dataflow-java-windmill", configuration: "shadow")
    compile library.java.guava
    compile "javax.servlet:javax.servlet-api:3.1.0"
    compile "org.conscrypt:conscrypt-openjdk:1.1.3:linux-x86_64"
    compile "org.eclipse.jetty:jetty-server:9.2.10.v20150310"
    compile "org.eclipse.jetty:jetty-servlet:9.2.10.v20150310"
    provided library.java.error_prone_annotations
    runtime library.java.slf4j_jdk14

    // Any test dependency which intersects with our relocation rules above needs to be relocated
    // as well and placed within the testCompile configuration. Otherwise we can place it within
    // the shadowTest configuration.
    testCompile project(path: ":beam-runners-core-java", configuration: "shadowTest")
    shadowTest library.java.guava_testlib
    shadowTest project(path: ":beam-sdks-java-extensions-google-cloud-platform-core", configuration: "shadowTest")
    shadowTest project(path: ":beam-runners-direct-java", configuration: "shadow")
    shadowTest project(path: ":beam-sdks-java-core", configuration: "shadowTest")
    shadowTest library.java.hamcrest_core
    shadowTest library.java.hamcrest_library
    shadowTest library.java.junit
    shadowTest library.java.mockito_core
}

//TODO(BEAM-5657): checktyle task should be enabled in the future.
checkstyleMain.enabled = false
checkstyleTest.enabled = false
//TODO(BEAM-5659): javadoc task should be enabled in the future.
javadoc.enabled = false
