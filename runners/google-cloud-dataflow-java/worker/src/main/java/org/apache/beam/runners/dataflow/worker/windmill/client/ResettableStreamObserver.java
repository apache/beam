/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.beam.runners.dataflow.worker.windmill.client;

import java.util.function.Supplier;
import javax.annotation.Nullable;
import javax.annotation.concurrent.GuardedBy;
import javax.annotation.concurrent.ThreadSafe;
import org.apache.beam.sdk.annotations.Internal;
import org.apache.beam.vendor.grpc.v1p60p1.io.grpc.stub.StreamObserver;
import org.apache.beam.vendor.guava.v32_1_2_jre.com.google.common.base.Preconditions;

/**
 * Request observer that allows resetting its internal delegate using the given {@link
 * #streamObserverFactory}.
 *
 * @implNote {@link StreamObserver}s generated by {@link #streamObserverFactory} are expected to be
 *     {@link ThreadSafe}.
 */
@ThreadSafe
@Internal
final class ResettableStreamObserver<T> implements StreamObserver<T> {
  private final Supplier<StreamObserver<T>> streamObserverFactory;

  @GuardedBy("this")
  private @Nullable StreamObserver<T> delegateStreamObserver;

  /**
   * Indicates that the request observer should no longer be used. Attempts to perform operations on
   * the request observer will throw an {@link WindmillStreamShutdownException}.
   */
  @GuardedBy("this")
  private boolean isPoisoned;

  ResettableStreamObserver(Supplier<StreamObserver<T>> streamObserverFactory) {
    this.streamObserverFactory = streamObserverFactory;
    this.delegateStreamObserver = null;
    this.isPoisoned = false;
  }

  private synchronized StreamObserver<T> delegate() {
    if (isPoisoned) {
      throw new WindmillStreamShutdownException("Explicit call to shutdown stream.");
    }

    return Preconditions.checkNotNull(
        delegateStreamObserver,
        "requestObserver cannot be null. Missing a call to startStream() to initialize.");
  }

  synchronized void reset() {
    if (isPoisoned) {
      throw new WindmillStreamShutdownException("Explicit call to shutdown stream.");
    }

    delegateStreamObserver = streamObserverFactory.get();
  }

  synchronized void poison() {
    if (!isPoisoned) {
      isPoisoned = true;
      if (delegateStreamObserver != null) {
        delegateStreamObserver.onError(
            new WindmillStreamShutdownException("Explicit call to shutdown stream."));
      }
    }
  }

  @Override
  public void onNext(T t) {
    delegate().onNext(t);
  }

  @Override
  public void onError(Throwable throwable) {
    delegate().onError(throwable);
  }

  @Override
  public void onCompleted() {
    delegate().onCompleted();
  }
}
