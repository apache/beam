/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto2";

import "windmill.proto";

option java_package = "org.apache.beam.runners.dataflow.worker.windmill";
package google.dataflow.windmillservice.v1alpha1;

// The Cloud Windmill Service API used by GCE to acquire and process streaming
// Dataflow work.
service CloudWindmillServiceV1Alpha1 {
  // Gets streaming Dataflow work.
  rpc GetWork(.windmill.GetWorkRequest) returns(.windmill.GetWorkResponse);

  // Gets streaming dataflow work. Response is a stream.
  rpc GetWorkStream(stream .windmill.StreamingGetWorkRequest)
    returns (stream .windmill.StreamingGetWorkResponseChunk);

  // Gets data from Windmill.
  rpc GetData(.windmill.GetDataRequest) returns(.windmill.GetDataResponse);

  // Gets data from windmill. Response is a stream.
  rpc GetDataStream(stream.windmill.StreamingGetDataRequest)
      returns (stream.windmill.StreamingGetDataResponse);

  // Commits previously acquired work.
  rpc CommitWork(.windmill.CommitWorkRequest)
      returns(.windmill.CommitWorkResponse);

  // Streams commit of previously acquired work.
  rpc CommitWorkStream(stream .windmill.StreamingCommitWorkRequest)
    returns (stream .windmill.StreamingCommitResponse);
}
