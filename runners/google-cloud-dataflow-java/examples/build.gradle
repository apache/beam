/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * License); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import groovy.json.JsonOutput

plugins { id 'org.apache.beam.module' }
applyJavaNature(publish: false, exportJavadoc: false)
// Evaluate the given project before this one, to allow referencing
// its sourceSets.test.output directly.
evaluationDependsOn(":beam-examples-java")
evaluationDependsOn(":beam-runners-google-cloud-dataflow-java")
evaluationDependsOn(":beam-runners-google-cloud-dataflow-java-legacy-worker")
evaluationDependsOn(":beam-runners-google-cloud-dataflow-java-fn-api-worker")
evaluationDependsOn(":beam-sdks-java-container")

configurations { dataflowRunnerPreCommit }

dependencies {
  testRuntimeOnly project(path: ":beam-examples-java", configuration: "shadow")
  testRuntimeOnly project(path: ":beam-examples-java", configuration: "shadowTest")
  testRuntimeOnly project(path: ":beam-runners-google-cloud-dataflow-java", configuration: "shadow")
}

def gcpProject = project.findProperty('gcpProject') ?: 'apache-beam-testing'
def gcsTempRoot = project.findProperty('gcsTempRoot') ?: 'gs://temp-storage-for-end-to-end-tests/'
def dockerImageName = project(':beam-runners-google-cloud-dataflow-java').ext.dockerImageName
// If -PuseExecutableStage is set, the use_executable_stage_bundle_execution wil be enabled.
def fnapiExperiments = project.hasProperty('useExecutableStage') ? 'beam_fn_api,use_executable_stage_bundle_execution' : "beam_fn_api"

task preCommitLegacyWorker(type: Test) {
  dependsOn ":beam-runners-google-cloud-dataflow-java-legacy-worker:shadowJar"
  def dataflowWorkerJar = project.findProperty('dataflowWorkerJar') ?: project(":beam-runners-google-cloud-dataflow-java-legacy-worker").shadowJar.archivePath

  //Set workerHarnessContainerImage to empty to make Dataflow pick up the non-versioned container
  //image, which handles a staged worker jar.
  def preCommitBeamTestPipelineOptions = [
     "--project=${gcpProject}",
     "--tempRoot=${gcsTempRoot}",
     "--runner=TestDataflowRunner",
     "--dataflowWorkerJar=${dataflowWorkerJar}",
     "--workerHarnessContainerImage=",
  ]
  testClassesDirs = files(project(":beam-examples-java").sourceSets.test.output.classesDirs)
  include "**/WordCountIT.class"
  include "**/WindowedWordCountIT.class"
  forkEvery 1
  maxParallelForks 4
  systemProperty "beamTestPipelineOptions", JsonOutput.toJson(preCommitBeamTestPipelineOptions)
}

task preCommitFnApiWorker(type: Test) {
  dependsOn ":beam-runners-google-cloud-dataflow-java-fn-api-worker:shadowJar"
  dependsOn ":beam-runners-google-cloud-dataflow-java:buildAndPushDockerContainer"

  def dataflowWorkerJar = project.findProperty('dataflowWorkerJar') ?: project(":beam-runners-google-cloud-dataflow-java-fn-api-worker").shadowJar.archivePath
  def preCommitBeamTestPipelineOptions = [
          "--project=${gcpProject}",
          "--tempRoot=${gcsTempRoot}",
          "--runner=TestDataflowRunner",
          "--dataflowWorkerJar=${dataflowWorkerJar}",
          "--workerHarnessContainerImage=${dockerImageName}",
          "--experiments=${fnapiExperiments}",
  ]
  testClassesDirs = files(project(":beam-examples-java").sourceSets.test.output.classesDirs)
  include "**/WordCountIT.class"
  include "**/WindowedWordCountIT.class"
  forkEvery 1
  maxParallelForks 4
  systemProperty "beamTestPipelineOptions", JsonOutput.toJson(preCommitBeamTestPipelineOptions)
  useJUnit {
    excludeCategories 'org.apache.beam.sdk.testing.StreamingIT'
  }
}

task preCommit() {
  dependsOn preCommitLegacyWorker
}

task preCommitPortabilityApi() {
  dependsOn preCommitFnApiWorker
}

afterEvaluate {
  // Ensure all tasks which use published docker images run before they are cleaned up
  tasks.each { t ->
    if (t.dependsOn.contains(":beam-runners-google-cloud-dataflow-java:buildAndPushDockerContainer")) {
      project(':beam-runners-google-cloud-dataflow-java').cleanUpDockerImages.mustRunAfter t
    }
  }
}
