/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * Protocol Buffers describing a service that can be used in conjunction with
 * the TestStream class in order to control a pipeline remotely.
 */

syntax = "proto3";

package org.apache.beam.model.interactive.v1;

option go_package = "interactive_v1";
option java_package = "org.apache.beam.model.interactive.v1";
option java_outer_classname = "BeamInteractiveApi";

import "beam_runner_api.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";


service InteractiveService {
  // A TestStream will request for events using this RPC.
  rpc Events(EventsRequest) returns (stream EventsResponse) {}

  // Starts the stream of events to the EventsRequest. It is also allowed for
  // setting the playback_speed while RUNNING. If the stream is paused, this
  // will unpause the stream at the specified playback speed.
  //
  // Allows state transitions from (sets state to RUNNING):
  //   STOPPED
  //   RUNNING
  //   PAUSED
  //
  // Service transitions state when (new state, condition)
  //   STOPPED -> When stream ends.
  rpc Start(StartRequest) returns (StartResponse) {}

  // Advances the stream to the specified offset then pauses the stream. This
  // starts the stream if it is not RUNNING then pauses the stream when the
  // offset is reached.
  //
  // Allows state transitions from (sets state to ADVANCING):
  //   STOPPED
  //   RUNNING
  //   PAUSED
  //   ADVANCING
  //
  // Service transitions state when (new state, condition)
  //   PAUSED -> When stream reaches specified offset.
  rpc Advance(AdvanceRequest) returns (AdvanceResponse) {}

  // Stops and resets the stream to the beginning.
  //
  // Allows state transitions from (sets state to STOPPED):
  //   *
  rpc Stop(StopRequest) returns (StopResponse) {}

  // Pauses the stream of events to the EventsRequest. If there is already an
  // outstanding EventsRequest streaming events, then the stream will pause
  // after the EventsResponse is completed.
  // To un-pause, send either a Start or Advance request.
  //
  // Allows state transitions from (sets state to PAUSED):
  //   RUNNING
  //   PAUSED
  //   ADVANCING
  rpc Pause(PauseRequest) returns (PauseResponse) {}

  // Sends a single element to the EventsRequest then pauses the stream after
  // quiescence.
  //
  // Allows state transitions from (sets state to STEPPING):
  //   STOPPED
  //   RUNNING
  //   PAUSED
  //
  // Service transitions state when (new state, condition)
  //   STOPPED -> When stream ends (user sends StepRequest at end of stream).
  //   PAUSED -> After quiescence.
  rpc Step(StepRequest) returns (StepResponse) {}

  // Responds with debugging and other cache-specific metadata.
  rpc Status(StatusRequest) returns (StatusResponse) {}
}

// The state of the InteractiveService. The default state is STOPPED.
enum State {
  // The InteractiveService is not replaying.
  STOPPED = 0;

  // The InteractiveService is replaying events.
  RUNNING = 1;

  // The InteractiveService is paused from replaying events.
  PAUSED = 2;

  // The InteractiveService is stepping through a single event.
  STEPPING = 3;

  // The InteractiveService is advancing until a specified duration is reached.
  ADVANCING = 4;
}

message StartRequest {
  // (Optional) How quickly the stream will be played back, e.g. if
  // playback_speed == 2, then the stream will replay events twice as fast as
  // they were recorded. If unspecified, this will default to 1.
  double playback_speed = 1;
}
message StartResponse { }

message AdvanceRequest {
  // (Required) Will advance the stream by replaying events as quickly as
  // possible until the stream timestamp has advanced by the specified amount.
  google.protobuf.Duration advance_by = 1;
}
message AdvanceResponse {}

message StopRequest { }
message StopResponse {
  // The final timestamp of the replay stream.
  google.protobuf.Timestamp stream_time = 1;

  // The final minimum watermark across all of the faked replayable unbounded
  // sources.
  google.protobuf.Timestamp watermark = 2;
}

message PauseRequest { }
message PauseResponse {
  // The current timestamp of the replay stream.
  google.protobuf.Timestamp stream_time = 1;

  // The minimum watermark across all of the faked replayable unbounded sources.
  google.protobuf.Timestamp watermark = 2;
}

message StatusRequest { }
message StatusResponse {
  // The current timestamp of the replay stream. Is MIN_TIMESTAMP when state
  // is STOPPED.
  google.protobuf.Timestamp stream_time = 1;

  // The minimum watermark across all of the faked replayable unbounded sources.
  // Is MIN_TIMESTAMP when state is STOPPED.
  google.protobuf.Timestamp watermark = 2;

  // The latest timestamp of the recording stream. Is MIN_TIMESTAMP if there is
  // no recording.
  google.protobuf.Timestamp recording_time = 3;

  // The set playback_speed from the StartRequest. Playback speed is set by
  // StartRequest, or if the stream_time is the current time and the recording
  // is still happening, the playback speed is 1, else 0.
  double playback_speed = 4;

  // The state of the InteractiveService. The default state is STOPPED.
  State state = 5;
}

message StepRequest {
  // (Optional) The count of events to stream. If unspecified, the default is
  // 1, i.e. only read a single element from any source and send it through
  // the pipeline.
  int64 count = 1;
}
message StepResponse {
  // The current timestamp of the replay stream.
  google.protobuf.Timestamp stream_time = 1;

  // The minimum watermark across all of the faked replayable unbounded sources.
  google.protobuf.Timestamp watermark = 2;
}

message EventsRequest { }
message EventsResponse {
  // The TestStreamPayloads that will be sent to the TestStream.
  repeated org.apache.beam.model.pipeline.v1.TestStreamPayload.Event events = 1;

  // Is true when there are no more events to read.
  bool end_of_stream = 2;
}

// The first record to be read in an interactive stream. This contains metadata
// about the stream and how to properly process it.
message InteractiveStreamHeader {
  // The PCollection tag this stream is associated with.
  string tag = 1;
}

// A record is a recorded element that sound source produced. Its function is
// to give enough information to the InteractiveService to create a faithful
// recreation of the original source of data.
message InteractiveStreamRecord {
  // The recorded element with its event timestamp (when it was produced).
  org.apache.beam.model.pipeline.v1.TestStreamPayload.TimestampedElement element = 1;

  // The timestamp of when this element was ingested into the pipeline.
  google.protobuf.Timestamp processing_time = 2;

  // The output watermark of the source producing this element.
  google.protobuf.Timestamp watermark = 3;
}
