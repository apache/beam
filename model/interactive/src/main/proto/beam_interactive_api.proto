/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * Protocol Buffers describing a service that can be used in conjunction with
 * the TestStream class in order to control a pipeline remotely.
 */

syntax = "proto3";

package org.apache.beam.model.interactive.v1;

option go_package = "interactive_v1";
option java_package = "org.apache.beam.model.interactive.v1";
option java_outer_classname = "BeamInteractiveApi";

import "beam_runner_api.proto";
import "google/protobuf/timestamp.proto";


service InteractiveService {
  // A TestStream will request for events using this RPC.
  rpc Events(EventsRequest) returns (stream EventsResponse) {}
}

message EventsRequest { }
message EventsResponse {
  // The TestStreamPayloads that will be sent to the TestStream.
  repeated org.apache.beam.model.pipeline.v1.TestStreamPayload.Event events = 1;

  // Is true when there are no more events to read.
  bool end_of_stream = 2;
}

// The first record to be read in an interactive stream. This contains metadata
// about the stream and how to properly process it.
message InteractiveStreamHeader {
  // The PCollection tag this stream is associated with.
  string tag = 1;
}

// A record is a recorded element that sound source produced. Its function is
// to give enough information to the InteractiveService to create a faithful
// recreation of the original source of data.
message InteractiveStreamRecord {
  // The recorded element with its event timestamp (when it was produced).
  org.apache.beam.model.pipeline.v1.TestStreamPayload.TimestampedElement element = 1;

  // The timestamp of when this element was ingested into the pipeline.
  google.protobuf.Timestamp processing_time = 2;

  // The output watermark of the source producing this element.
  google.protobuf.Timestamp watermark = 3;
}
