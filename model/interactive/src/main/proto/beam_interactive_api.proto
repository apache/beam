/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * Protocol Buffers describing a service that can be used in conjunction with
 * the TestStream class in order to control a pipeline remotely.
 */

syntax = "proto3";

package org.apache.beam.model.interactive.v1;

option go_package = "interactive_v1";
option java_package = "org.apache.beam.model.interactive.v1";
option java_outer_classname = "BeamInteractiveApi";

import "beam_runner_api.proto";
import "google/protobuf/timestamp.proto";


service InteractiveService {
  rpc Connect(ConnectRequest) returns (ConnectResponse) {}
  // A TestStream will request for events using this RPC.
  rpc Events(EventsRequest) returns (EventsResponse) {}
}

message ConnectRequest {}
message ConnectResponse {
  string session_id = 1;
}

message EventsRequest {
  string session_id = 1;
  string token = 2;
}

message EventsResponse {
  // The TestStreamPayloads that will be sent to the TestStream.
  org.apache.beam.model.pipeline.v1.TestStreamPayload.Event event = 1;

  // The continuation token to send back in the next request.
  string token = 2;
}

// The first record to be read in an interactive stream. This contains metadata
// about the stream and how to properly process it.
message InteractiveStreamHeader {
  // The PCollection tag this stream is associated with.
  string tag = 1;
}

// A record is a recorded element that the source produced. Its function is to
// give enough information to the InteractiveService to create a faithful
// recreation of the original source of data.
message InteractiveStreamRecord {
  oneof recorded_event {
    // The recorded element with its event timestamp (when it was produced).
    org.apache.beam.model.pipeline.v1.TestStreamPayload.TimestampedElement element = 1;

    // Indicating the output watermark of the source changed.
    google.protobuf.Timestamp watermark = 2;
  }

  // The timestamp of either the new element or watermark change.
  google.protobuf.Timestamp processing_time = 3;
}
