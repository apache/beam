/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * Protocol Buffers describing the Runner API, which is the runner-independent,
 * SDK-independent definition of the Beam model.
 */

syntax = "proto3";

package org.apache.beam.model.pipeline.v1;

option go_package = "pipeline_v1";
option java_package = "org.apache.beam.model.pipeline.v1";
option java_outer_classname = "PipelineMetrics";

message MetricKey {
    string step = 1;
    MetricName metric_name = 2;
}

message MetricName {
    string namespace = 1;
    string name = 2;
}

message Metric {
    // (Required) The data for this metric.
    oneof data {
        CounterData counter_data = 1;
        DistributionData distribution_data = 2;
        ExtremaData extrema_data = 3;
    }
}

// Data associated with a Counter or Gauge metric.
// This is designed to be compatible with metric collection
// systems such as DropWizard.
message CounterData {
    oneof value {
        int64 int64_value = 1;
        double double_value = 2;
        string string_value = 3;
    }
}

// Extrema messages are used for calculating
// Top-N/Bottom-N metrics.
message ExtremaData {
    oneof extrema {
        IntExtremaData int_extrema_data = 1;
        DoubleExtremaData double_extrema_data = 2;
    }
}

message IntExtremaData {
    repeated int64 int_values = 1;
}

message DoubleExtremaData {
    repeated double double_values = 2;
}

// Data associated with a distribution metric.
// This is based off of the current DistributionData metric.
// This is not a stackdriver or dropwizard compatible
// style of distribution metric.
message DistributionData {
    oneof distribution {
        IntDistributionData int_distribution_data = 1;
        DoubleDistributionData double_distribution_data = 2;
    }
}

message IntDistributionData {
    int64 count = 1;
    int64 sum = 2;
    int64 min = 3;
    int64 max = 4;
}

message DoubleDistributionData {
    int64 count = 1;
    double sum = 2;
    double min = 3;
    double max = 4;
}

