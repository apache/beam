/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * License); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


apply plugin: 'org.apache.beam.module'
apply plugin: 'base'
applyDockerNature()

def playgroundBackendUrl = project.playgroundBackendUrl
def analyticsUA = project.analyticsUA
def playgroundBackendJavaRouteUrl = project.playgroundBackendJavaRouteUrl
def playgroundBackendGoRouteUrl = project.playgroundBackendGoRouteUrl
def playgroundBackendPythonRouteUrl = project.playgroundBackendPythonRouteUrl
def playgroundBackendScioRouteUrl = project.playgroundBackendScioRouteUrl

def playgroundJobServerProject = "${project.path.replace('-container', '')}"

description = project(playgroundJobServerProject).description + " :: Container"

configurations {
  dockerDependency
}

dependencies {
  dockerDependency project(path: playgroundJobServerProject, configuration: "shadow")
}

task removeBuild  {
  group = "verification"
  description = "remove build artifacts"
  doLast {
    exec {
      executable("rm")
      args("-r", "build")
    }
  }
}

task analyze  {
  dependsOn("pubGet")
  dependsOn("removeBuild")
  group = "verification"
  description = "Analyze dart code"
  doLast {
    exec {
      executable("dart")
      args("analyze", ".")
    }
  }
}

task pubGet {
  group = "build"
  description = "Get packages for the playground frontend project"
  doLast {
    exec {
      executable("flutter")
      args("pub", "get")
    }
  }
}

task format {
  group = "build"
  description = "Idiomatically format Dart source code"
  doLast {
    exec {
      executable("dart")
      args("format", ".")
    }
  }
}

task run {
  group = "application"
  description = "Run application on Google Chrome"
  doLast {
    exec {
      executable("flutter")
      args("run", "-d", "chrome")
    }
  }
}

task test {
  dependsOn("pubGet")
  group = "verification"
  description = "flutter test"
  doLast {
    exec {
      executable("flutter")
      args("test")
    }
  }
}

task precommit {
  dependsOn(":playground:frontend:removeBuild")
  dependsOn(":playground:frontend:pubGet")
  dependsOn(":playground:frontend:analyze")
  dependsOn(":playground:frontend:test")
}

task copyDockerfileDependencies(type: Copy) {
   group = "build"
   description = "Copy files that required to build docker container"
   copy {
      from '.'
      into 'build/'
      exclude 'build'
      exclude 'Dockerfile'
   }
   copy {
      from '../playground'
      into 'build/playground'
   }
}

docker {
  group = "build"
  description = "Build container for playground frontend application"
  name containerImageName(
          name: project.docker_image_default_repo_prefix + "playground-frontend",
          root: project.rootProject.hasProperty(["docker-repository-root"]) ?
                  project.rootProject["docker-repository-root"] :
                  project.docker_image_default_repo_root)
  files "./build/"
  tags containerImageTags()
  buildArgs(['FLUTTER_VERSION': project.rootProject.hasProperty(["flutter-version"]) ?
                                project.rootProject["flutter-version"] :
                                "2.5.2-stable" ])
}

// Ensure that we build the required resources and copy and file dependencies from related projects
dockerPrepare.dependsOn copyDockerfileDependencies

task("createConfig") {
  group = "build"
  description = "Generate config for the playground frontend project"
  doLast {
    def configFileName = "config.g.dart"
    def modulePath = project(":playground:frontend").projectDir.absolutePath
    def file = new File(modulePath + "/lib", configFileName)
    file.write("""/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

const String kApiClientURL =
    '${playgroundBackendUrl}';
const String kAnalyticsUA = '${analyticsUA}';
const String kApiJavaClientURL =
    '${playgroundBackendJavaRouteUrl}';
const String kApiGoClientURL =
    '${playgroundBackendGoRouteUrl}';
const String kApiPythonClientURL =
    '${playgroundBackendPythonRouteUrl}';
const String kApiScioClientURL =
    '${playgroundBackendScioRouteUrl}';
""")
  }
}
