/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Mocks generated by Mockito 5.2.0 from annotations
// in playground/test/pages/playground/states/playground_state_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;
import 'dart:ui' as _i11;

import 'package:mockito/mockito.dart' as _i1;
import 'package:playground/modules/examples/models/category_model.dart' as _i9;
import 'package:playground/modules/examples/models/example_loading_descriptors/examples_loading_descriptor.dart'
    as _i6;
import 'package:playground/modules/examples/models/example_model.dart' as _i2;
import 'package:playground/modules/examples/repositories/models/shared_file_model.dart'
    as _i10;
import 'package:playground/modules/sdk/models/sdk.dart' as _i8;
import 'package:playground/pages/playground/states/example_loaders/examples_loader.dart'
    as _i3;
import 'package:playground/pages/playground/states/examples_state.dart' as _i7;
import 'package:playground/pages/playground/states/playground_state.dart'
    as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeExampleModel_0 extends _i1.Fake implements _i2.ExampleModel {}

/// A class which mocks [ExamplesLoader].
///
/// See the documentation for Mockito's code generation for more information.
class MockExamplesLoader extends _i1.Mock implements _i3.ExamplesLoader {
  MockExamplesLoader() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void setPlaygroundState(_i4.PlaygroundState? value) =>
      super.noSuchMethod(Invocation.method(#setPlaygroundState, [value]),
          returnValueForMissingStub: null);
  @override
  _i5.Future<void> load(_i6.ExamplesLoadingDescriptor? descriptor) =>
      (super.noSuchMethod(Invocation.method(#load, [descriptor]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
}

/// A class which mocks [ExampleState].
///
/// See the documentation for Mockito's code generation for more information.
class MockExampleState extends _i1.Mock implements _i7.ExampleState {
  MockExampleState() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set sdkCategories(Map<_i8.SDK, List<_i9.CategoryModel>>? _sdkCategories) =>
      super.noSuchMethod(Invocation.setter(#sdkCategories, _sdkCategories),
          returnValueForMissingStub: null);
  @override
  Map<_i8.SDK, _i2.ExampleModel> get defaultExamplesMap =>
      (super.noSuchMethod(Invocation.getter(#defaultExamplesMap),
              returnValue: <_i8.SDK, _i2.ExampleModel>{})
          as Map<_i8.SDK, _i2.ExampleModel>);
  @override
  set defaultExamplesMap(Map<_i8.SDK, _i2.ExampleModel>? _defaultExamplesMap) =>
      super.noSuchMethod(
          Invocation.setter(#defaultExamplesMap, _defaultExamplesMap),
          returnValueForMissingStub: null);
  @override
  set defaultExample(_i2.ExampleModel? _defaultExample) =>
      super.noSuchMethod(Invocation.setter(#defaultExample, _defaultExample),
          returnValueForMissingStub: null);
  @override
  bool get isSelectorOpened =>
      (super.noSuchMethod(Invocation.getter(#isSelectorOpened),
          returnValue: false) as bool);
  @override
  set isSelectorOpened(bool? _isSelectorOpened) => super.noSuchMethod(
      Invocation.setter(#isSelectorOpened, _isSelectorOpened),
      returnValueForMissingStub: null);
  @override
  _i5.Future<void> get allExamplesFuture =>
      (super.noSuchMethod(Invocation.getter(#allExamplesFuture),
          returnValue: Future<void>.value()) as _i5.Future<void>);
  @override
  bool get hasExampleCatalog =>
      (super.noSuchMethod(Invocation.getter(#hasExampleCatalog),
          returnValue: false) as bool);
  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  _i5.Future<void> init() => (super.noSuchMethod(Invocation.method(#init, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  void setSdkCategories(Map<_i8.SDK, List<_i9.CategoryModel>>? map) =>
      super.noSuchMethod(Invocation.method(#setSdkCategories, [map]),
          returnValueForMissingStub: null);
  @override
  List<_i9.CategoryModel> getCategories(_i8.SDK? sdk) =>
      (super.noSuchMethod(Invocation.method(#getCategories, [sdk]),
          returnValue: <_i9.CategoryModel>[]) as List<_i9.CategoryModel>);
  @override
  _i5.Future<String> getExampleOutput(String? id, _i8.SDK? sdk) =>
      (super.noSuchMethod(Invocation.method(#getExampleOutput, [id, sdk]),
          returnValue: Future<String>.value('')) as _i5.Future<String>);
  @override
  _i5.Future<String> getExampleSource(String? id, _i8.SDK? sdk) =>
      (super.noSuchMethod(Invocation.method(#getExampleSource, [id, sdk]),
          returnValue: Future<String>.value('')) as _i5.Future<String>);
  @override
  _i5.Future<_i2.ExampleModel> getExample(String? path, _i8.SDK? sdk) =>
      (super.noSuchMethod(Invocation.method(#getExample, [path, sdk]),
              returnValue:
                  Future<_i2.ExampleModel>.value(_FakeExampleModel_0()))
          as _i5.Future<_i2.ExampleModel>);
  @override
  _i5.Future<String> getExampleLogs(String? id, _i8.SDK? sdk) =>
      (super.noSuchMethod(Invocation.method(#getExampleLogs, [id, sdk]),
          returnValue: Future<String>.value('')) as _i5.Future<String>);
  @override
  _i5.Future<String> getExampleGraph(String? id, _i8.SDK? sdk) =>
      (super.noSuchMethod(Invocation.method(#getExampleGraph, [id, sdk]),
          returnValue: Future<String>.value('')) as _i5.Future<String>);
  @override
  _i5.Future<_i2.ExampleModel> loadSharedExample(String? id) =>
      (super.noSuchMethod(Invocation.method(#loadSharedExample, [id]),
              returnValue:
                  Future<_i2.ExampleModel>.value(_FakeExampleModel_0()))
          as _i5.Future<_i2.ExampleModel>);
  @override
  _i5.Future<String> getSnippetId(
          {List<_i10.SharedFile>? files,
          _i8.SDK? sdk,
          String? pipelineOptions}) =>
      (super.noSuchMethod(
          Invocation.method(#getSnippetId, [],
              {#files: files, #sdk: sdk, #pipelineOptions: pipelineOptions}),
          returnValue: Future<String>.value('')) as _i5.Future<String>);
  @override
  _i5.Future<_i2.ExampleModel> loadExampleInfo(_i2.ExampleModel? example) =>
      (super.noSuchMethod(Invocation.method(#loadExampleInfo, [example]),
              returnValue:
                  Future<_i2.ExampleModel>.value(_FakeExampleModel_0()))
          as _i5.Future<_i2.ExampleModel>);
  @override
  void changeSelectorVisibility() =>
      super.noSuchMethod(Invocation.method(#changeSelectorVisibility, []),
          returnValueForMissingStub: null);
  @override
  _i5.Future<void> loadDefaultExamples() =>
      (super.noSuchMethod(Invocation.method(#loadDefaultExamples, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<void> loadDefaultExamplesIfNot() =>
      (super.noSuchMethod(Invocation.method(#loadDefaultExamplesIfNot, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<_i2.ExampleModel?> getCatalogExampleByPath(String? path) =>
      (super.noSuchMethod(Invocation.method(#getCatalogExampleByPath, [path]),
              returnValue: Future<_i2.ExampleModel?>.value())
          as _i5.Future<_i2.ExampleModel?>);
  @override
  void addListener(_i11.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i11.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []),
          returnValueForMissingStub: null);
}
