/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * License); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
  id 'org.apache.beam.module'
  // https://github.com/avast/gradle-docker-compose-plugin
  id 'com.avast.gradle.docker-compose'
  id 'org.ajoberstar.grgit'
}
applyGroovyNature()

repositories { mavenCentral() }

dependencies {
  testCompile library.groovy.groovy_all
  testCompile library.java.junit
}

task testMetricsStack {
  doLast {
    // TODO(BEAM-5837): Add some actual validation of the metrics stack
    println "Hello world!" }
}

// Create an empty file and set DOCKER_CONFIG to ignore bad config file on Jenkins nodes. BEAM-7405
task createEmptyConfig(type: Exec) {
  outputs.file("${project.rootProject.buildDir}/config.json")
  commandLine '/bin/sh', '-c', "echo '{}' > ${project.rootProject.buildDir}/config.json"
}
composeUp {
  dependsOn "createEmptyConfig"
}
dockerCompose {
  environment.put 'DOCKER_CONFIG', project.rootProject.buildDir
}

dockerCompose.isRequiredBy(testMetricsStack)

task validateConfiguration(type: Exec) {
  commandLine 'sh', '-c', 'kubectl apply --dry-run=true -Rf kubernetes'
}

task preCommit {
  dependsOn validateConfiguration
  dependsOn testMetricsStack
}

task buildAndPublishContainers(type: Exec) {
  commandLine './build_and_publish_containers.sh', 'true'
}

// Applies new configuration to all resources labeled with `app=beammetrics`
// and forces Kubernetes to re-pull images.
task applyConfiguration() {
  dependsOn buildAndPublishContainers

  doLast {
    assert grgit : 'Cannot use outside of git repository'

    def git = grgit.open()
    def commitedChanges = git.log(paths: ['.test-infra/metrics']).findAll {
      it.dateTime > ZonedDateTime.now().minusHours(6)
    }

    // Older version of kubectl does not offer `rollout restart` command, therefore we scale
    // deployments to 0 and then scale back to 1.
    if (!commitedChanges.isEmpty()) {
      exec {
        executable 'sh'
        args '-c', 'kubectl apply --selector=app=beammetrics --prune=true -Rf kubernetes && \
          kubectl wait --selector=app=beammetrics --for=condition=available --timeout=5m deployment && \
          kubectl get --selector=app=beammetrics -o name deployments \
          | xargs -r kubectl scale --replicas=0 && \
          kubectl get --selector=app=beammetrics -o name deployments \
          | xargs -r kubectl scale --replicas=1'
      }
    } else {
      println 'No changes committed since the last 6 hours.'
    }
  }
}

task deploy {
  dependsOn applyConfiguration
}

task checkProber(type: Test) {
  include "**/ProberTests.class"
}

project.test {
  exclude "**/ProberTests.class"
}
