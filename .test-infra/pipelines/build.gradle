/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * License); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

plugins {
    id 'org.apache.beam.module'
}

applyJavaNature(
        exportJavadoc: false,
        publish: false,
        // ShadowJar has a naming dependency with:
        // .test-infra/pipelines/infrastructure/04.template/dataflow-to-bigquery/template.tf
        validateShadowJar: false,
        shadowClosure: {
            // TODO: determine how to create separate shadowJar tasks for each pipeline
            manifest {
                attributes 'Main-Class': 'org.apache.beam.testinfra.pipelines.ReadDataflowApiWriteBigQuery'
            }
            mergeServiceFiles()
            archiveVersion = 'latest'
        }
)

description = "Apache Beam :: Test Infra :: Pipelines"
ext.summary = "Various Beam pipelines to support testing"

def googleCloudEventsVersion = "0.8.1"
def grpcDataflowProtoVersion = "0.17.0"
def ioGrpcApiVersion = "1.53.0"
def jupiterVersion = "5.9.3"
def nettyVersion = "1.53.0"

dependencies {
    implementation enforcedPlatform(library.java.google_cloud_platform_libraries_bom)
    implementation library.java.google_api_services_bigquery
    implementation library.java.jackson_annotations
    implementation library.java.jackson_core
    implementation library.java.jackson_databind
    implementation library.java.vendored_guava_26_0_jre
    implementation library.java.google_auth_library_credentials
    implementation library.java.grpc_auth
    implementation library.java.protobuf_java
    implementation library.java.protobuf_java_util
    implementation library.java.joda_time
    implementation library.java.slf4j_api
    implementation "com.google.api.grpc:proto-google-cloud-dataflow-v1beta3:${grpcDataflowProtoVersion}"
    implementation "io.grpc:grpc-api:${ioGrpcApiVersion}"
    implementation "io.grpc:grpc-netty:${nettyVersion}"
    implementation "com.google.cloud:google-cloudevent-types:${googleCloudEventsVersion}"
    implementation 'com.google.api.grpc:grpc-google-cloud-dataflow-v1beta3'
    implementation project(":sdks:java:io:google-cloud-platform")
    implementation project(":sdks:java:extensions:google-cloud-platform-core")
    implementation project(path: ":sdks:java:core", configuration: "shadow")
    runtimeOnly project(":runners:google-cloud-dataflow-java")
    runtimeOnly project(path: ":runners:direct-java", configuration: "shadow")

    testImplementation(platform("org.junit:junit-bom:${jupiterVersion}"))
    testImplementation('org.junit.jupiter:junit-jupiter')
    testImplementation project(":sdks:java:extensions:google-cloud-platform-core")
    testImplementation library.java.commons_lang3
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}
