#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from proto.echo.v1 import echo_pb2 as proto_dot_echo_dot_v1_dot_echo__pb2


class EchoServiceStub(object):
    """EchoService simulates a mock API that echos a request.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Echo = channel.unary_unary(
                '/proto.echo.v1.EchoService/Echo',
                request_serializer=proto_dot_echo_dot_v1_dot_echo__pb2.EchoRequest.SerializeToString,
                response_deserializer=proto_dot_echo_dot_v1_dot_echo__pb2.EchoResponse.FromString,
                )


class EchoServiceServicer(object):
    """EchoService simulates a mock API that echos a request.
    """

    def Echo(self, request, context):
        """Echo an EchoRequest payload in an EchoResponse.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_EchoServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Echo': grpc.unary_unary_rpc_method_handler(
                    servicer.Echo,
                    request_deserializer=proto_dot_echo_dot_v1_dot_echo__pb2.EchoRequest.FromString,
                    response_serializer=proto_dot_echo_dot_v1_dot_echo__pb2.EchoResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'proto.echo.v1.EchoService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class EchoService(object):
    """EchoService simulates a mock API that echos a request.
    """

    @staticmethod
    def Echo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proto.echo.v1.EchoService/Echo',
            proto_dot_echo_dot_v1_dot_echo__pb2.EchoRequest.SerializeToString,
            proto_dot_echo_dot_v1_dot_echo__pb2.EchoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
