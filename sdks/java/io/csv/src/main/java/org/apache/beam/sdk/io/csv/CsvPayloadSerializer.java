/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.beam.sdk.io.csv;

import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.List;
import org.apache.beam.sdk.schemas.Schema;
import org.apache.beam.sdk.schemas.io.payloads.PayloadSerializer;
import org.apache.beam.sdk.values.Row;
import org.apache.commons.csv.CSVFormat;
import org.checkerframework.checker.nullness.qual.Nullable;

/** Implementation of {@link PayloadSerializer} for a CSV format. */
public class CsvPayloadSerializer implements PayloadSerializer {

  private final CSVFormat csvFormat;
  private final List<String> schemaFields;

  /**
   * Instantiates a {@link PayloadSerializer} for a CSV format. {@param csvFormat} defaults to
   * {@link CSVFormat#DEFAULT} and {@param schemaFields} defaults to {@link Schema#sorted()} {@link
   * Schema#getFieldNames()}.
   */
  CsvPayloadSerializer(
      Schema schema, @Nullable CSVFormat csvFormat, @Nullable List<String> schemaFields) {
    CsvUtils.validateSchema(schema);
    CsvUtils.validateHeaderAgainstSchema(schemaFields, schema);
    if (csvFormat == null) {
      csvFormat = CSVFormat.DEFAULT;
    }
    this.csvFormat = csvFormat;

    if (schemaFields == null) {
      schemaFields = schema.sorted().getFieldNames();
    }
    this.schemaFields = schemaFields;
  }

  CSVFormat getCsvFormat() {
    return csvFormat;
  }

  List<String> getSchemaFields() {
    return schemaFields;
  }

  /**
   * Serializes a {@link Row} to a CSV byte[] record using a {@link CSVFormat}. The schemaFields
   * provided or generated by the constructor drive the subset and order of serialized {@link Row}
   * fields.
   */
  @Override
  public byte[] serialize(Row row) {
    StringBuilder builder = new StringBuilder();
    try {
      boolean newRecord = true;
      for (String name : schemaFields) {
        Object value = row.getValue(name);
        if (value == null) {
          value = "";
        }
        csvFormat.print(value, builder, newRecord);
        newRecord = false;
      }
    } catch (IOException e) {
      throw new IllegalStateException(e);
    }
    return builder.toString().getBytes(StandardCharsets.UTF_8);
  }

  /**
   * Converts {@param bytes} to a {@link Row} based on the {@link CSVFormat} and schemaFields
   * parameter in the constructor. Not yet implemented. See
   * https://github.com/apache/beam/issues/24552.
   */
  @Override
  public Row deserialize(byte[] bytes) {
    // TODO(https://github.com/apache/beam/issues/24552)
    throw new UnsupportedOperationException("not yet implemented");
  }
}
