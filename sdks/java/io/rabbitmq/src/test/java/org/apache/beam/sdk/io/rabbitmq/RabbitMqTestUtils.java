/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.beam.sdk.io.rabbitmq;

import com.rabbitmq.client.AMQP;
import com.rabbitmq.client.BuiltinExchangeType;
import com.rabbitmq.client.Channel;
import com.rabbitmq.client.DefaultConsumer;
import com.rabbitmq.client.Envelope;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.Date;
import java.util.List;
import java.util.UUID;
import java.util.regex.Pattern;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.Sets;
import org.joda.time.Duration;

public class RabbitMqTestUtils {
  private RabbitMqTestUtils() {
    throw new UnsupportedOperationException(
        "RabbitMqTestUtils is a non-instantiable utility class");
  }

  /**
   * Generates a rabbit message payload given a record number.
   *
   * @param recordNum Arbitrary message number, typically the index of a for loop, used to construct
   *     the message payload.
   * @return A rabbitmq message whose body is a byte array, generated by appending the record number
   *     to the string "Test " and converting to UTF-8 bytes.
   * @see #generateRecords(int) for use in a for loop
   * @see #bodyToString(byte[]) for reversing this payload back into a String
   */
  public static RabbitMqMessage generateRecord(int recordNum) {
    return RabbitMqMessage.builder()
        .setBody(("Test " + recordNum).getBytes(StandardCharsets.UTF_8))
        .setMessageId("" + recordNum)
        .setTimestamp(new Date())
        .build();
  }

  /**
   * Produces payloads for {@code numRecords} messages utilizing {@link #generateRecord(int)}.
   *
   * @param numRecords the number of messages to produce
   * @return a list of length {@code numRecords} of distinct message payloads
   */
  public static List<RabbitMqMessage> generateRecords(int numRecords) {
    return IntStream.range(0, numRecords)
        .mapToObj(RabbitMqTestUtils::generateRecord)
        .collect(Collectors.toList());
  }

  /**
   * @param record a byte array used as a rabbit message payload
   * @return the String representation produced by treating the payload as bytes of UTF-8 characters
   */
  public static String bodyToString(byte[] record) {
    return new String(record, StandardCharsets.UTF_8);
  }

  /**
   * @param message a message whose body was produced by taking raw bytes of a string in UTF-8
   * @return the string value of the body in UTF-8
   */
  public static String messageToString(RabbitMqMessage message) {
    return bodyToString(message.body());
  }

  /**
   * @return a random, unique string usable as an amqp identifier. A typical use case might be
   *     {@code String queueName = "queue" + mkUniqueSuffix()}.
   */
  public static String mkUniqueSuffix() {
    return UUID.randomUUID().toString().replaceAll(Pattern.quote("-"), "");
  }

  /**
   * Creates a Thread that will publish messages within a Thread.
   *
   * @param channelLeaser a means of obtaining a Channel.
   * @param testId a unique id for the test utilizing this Thread.
   * @param spec the RabbitMQIO.Read definition.
   * @param messages the messages to publish.
   * @param initialDelay how long to wait before publishing messages. used to ensure some pipeline
   *     has already declared a queue and is listening for these messages.
   */
  public static Thread publishMessagesThread(
      ChannelLeaser channelLeaser,
      final UUID testId,
      final RabbitMqIO.Read spec,
      final Iterable<RabbitMqMessage> messages,
      final Duration initialDelay) {
    return new Thread(
        () -> {
          try {
            channelLeaser.useChannel(testId, publishMessages(spec, messages, initialDelay));
          } catch (IOException e) {
            throw new RuntimeException(e);
          }
        });
  }

  /**
   * Function for publishing messages using an existing Channel.
   *
   * @param spec the RabbitMQIO.Read definition.
   * @param messages the messages to publish.
   * @param initialDelay how long to wait before publishing messages. used to ensure some pipeline
   *     has already declared a queue and is listening for these messages.
   */
  public static ChannelLeaser.UseChannelFunction<Void> publishMessages(
      final RabbitMqIO.Read spec,
      final Iterable<RabbitMqMessage> messages,
      final Duration initialDelay) {
    ReadParadigm paradigm = spec.readParadigm();

    // it should always work to directly publish to the queue name via the default exchange
    String exchange = "";
    BuiltinExchangeType exchangeType = BuiltinExchangeType.DIRECT;
    String routingKey = paradigm.queueName();

    if (paradigm instanceof ReadParadigm.NewQueue) {
      // ... however applying defined routing rules make for a more real-world test
      ReadParadigm.NewQueue newQueue = (ReadParadigm.NewQueue) paradigm;
      exchange = newQueue.getExchange();
      exchangeType = newQueue.getExchangeType();
      routingKey = newQueue.getRoutingKey();
    }

    final String finalExchange = exchange;
    final BuiltinExchangeType finalExchangeType = exchangeType;
    final String finalRoutingKey = routingKey;

    return channel -> {
      try {
        Thread.sleep(initialDelay.getMillis());
      } catch (InterruptedException e) {
        throw new RuntimeException(e);
      }
      messages.forEach(
          message -> {
            String messageRoutingKey = message.routingKey();
            if (Sets.immutableEnumSet(BuiltinExchangeType.DIRECT, BuiltinExchangeType.FANOUT)
                .contains(finalExchangeType)) {
              messageRoutingKey = finalRoutingKey;
            }

            try {
              channel.basicPublish(
                  finalExchange, messageRoutingKey, message.createProperties(), message.body());
            } catch (IOException e) {
              throw new RuntimeException(e);
            }
          });
      return null;
    };
  }

  /**
   * A simple RabbitMQ {@code Consumer} that stores all received messages in the
   * constructor-supplied List.
   */
  static class TestConsumer extends DefaultConsumer {

    private final List<String> received;

    public TestConsumer(Channel channel, List<String> received) {
      super(channel);
      this.received = received;
    }

    @Override
    public void handleDelivery(
        String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) {
      received.add(bodyToString(body));
    }
  }
}
