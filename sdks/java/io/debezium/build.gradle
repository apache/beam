/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * License); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import groovy.json.JsonOutput

plugins { id 'org.apache.beam.module' }
applyJavaNature(
        automaticModuleName: 'org.apache.beam.sdk.io.debezium',
        mavenRepositories: [
                [id: 'io.confluent', url: 'https://packages.confluent.io/maven/']
        ],
        enableSpotbugs: false,
)
provideIntegrationTestingDependencies()

description = "Apache Beam :: SDKs :: Java :: IO :: Debezium"
ext.summary = "Library to work with Debezium data."

// Set Java 17 compatibility for this module
java {

    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}
// Configure the compileJava and compileTestJava tasks directly
tasks.withType(JavaCompile).configureEach { task ->
    // Only configure for the current project's main and test compile tasks
    if (task.project == project && (task.name == 'compileJava' || task.name == 'compileTestJava')) {
        logger.lifecycle("[BUILD_GRADLE] Debezium IO: Attempting to configure ${task.path} for Java 17.")

        // Read the JDK 17 home path from the environment variable
        String jdk17HomePath = System.getenv("JAVA_HOME_17_X64")

        if (jdk17HomePath != null && !jdk17HomePath.trim().isEmpty() && project.file(jdk17HomePath.trim()).isDirectory()) {
            logger.lifecycle("[BUILD_GRADLE] Debezium IO: Using JAVA_HOME_17_X64='${jdk17HomePath}' for ${task.path}.")
            task.options.fork = true
            task.options.forkOptions.javaHome = project.file(jdk17HomePath.trim())

            // Explicitly set compiler arguments for Java 17 mode.
            // This overrides any defaults (like --release 11) potentially set by BeamModulePlugin.
            def newCompilerArgs = task.options.compilerArgs.findAll { arg ->
                !arg.startsWith('-source') && !arg.startsWith('-target') && !arg.startsWith('--release')
            }
            newCompilerArgs.addAll(['--release', '17'])
            task.options.compilerArgs = newCompilerArgs
            logger.lifecycle("[BUILD_GRADLE] Debezium IO: ${task.path} compilerArgs set to: ${task.options.compilerArgs.join(' ')}")

            // Handle ErrorProne specific arguments for Java 17 if errorprone is enabled for this task
            if (task.extensions.findByName("errorprone") != null && project.rootProject.ext.has('errorProneAddModuleOpts')) {
                def errorProneAddModuleOpts = project.rootProject.ext.errorProneAddModuleOpts
                task.options.forkOptions.jvmArgs += errorProneAddModuleOpts.collect { '-J' + it }
                // Potentially: task.options.errorprone.errorproneArgs.add("-XepDisableAllChecks")
                logger.lifecycle("[BUILD_GRADLE] Debezium IO: ${task.path} - Added ErrorProne JVM args for forked Java 17 compiler.")
            }
        } else {
            logger.warn("[BUILD_GRADLE] Debezium IO: Environment variable JAVA_HOME_17_X64 not found, empty, or not a valid directory. Value: '${jdk17HomePath ?: 'null'}'. ${task.path} will use default JDK. Java 17 is required for Debezium IO.")
            // If JAVA_HOME_17_X64 isn't found, we still try to make the default compiler (if it's 17) behave correctly.
            // Or if default is 11, this will likely lead to bad class file version if it finds Debezium JARs.
            def newCompilerArgs = task.options.compilerArgs.findAll { arg ->
                !arg.startsWith('-source') && !arg.startsWith('-target') && !arg.startsWith('--release')
            }
            newCompilerArgs.addAll(['--release', '17']) // Attempt to set for default JDK too
            task.options.compilerArgs = newCompilerArgs
        }
    }
}
// This block ensures that if 'java17Home' is passed as a Gradle property,
// the 'compileJava' task for this module will use it.
// project.afterEvaluate { // Use afterEvaluate to ensure 'compileJava' task exists and is configured by BeamModulePlugin
//     if (project.hasProperty("java17Home") && project.property("java17Home").toString().trim() != "") {
//         tasks.named('compileJava', JavaCompile) {
//             logger.lifecycle("Debezium IO: Configuring 'compileJava' to fork and use Java 17 from java17Home: ${project.property("java17Home")}")
//             options.fork = true // Essential for using a different javaHome
//             options.forkOptions.javaHome = project.file(project.property("java17Home"))

//             // Ensure compiler arguments are set for Java 17, overriding defaults.
//             // BeamModulePlugin might set '--release 8' or '--release 11' by default.
//             def newCompilerArgs = options.compilerArgs.findAll { arg ->
//                 !arg.startsWith('-source') && !arg.startsWith('-target') && !arg.startsWith('--release')
//             }
//             newCompilerArgs.addAll(['--release', '17']) // Use --release for better JDK compatibility.
//             options.compilerArgs = newCompilerArgs

//             // Handle ErrorProne arguments if necessary for Java 17 compilation,
//             // similar to how setJavaVerOptions does it in BeamModulePlugin.groovy
//             if (project.rootProject.ext.has('errorProneAddModuleOpts')) {
//                  def errorProneAddModuleOpts = project.rootProject.ext.errorProneAddModuleOpts
//                  // The -J prefix is needed to workaround https://github.com/gradle/gradle/issues/22747 when forking
//                  options.forkOptions.jvmArgs += errorProneAddModuleOpts.collect { '-J' + it }
//                  // May also need: options.errorprone.errorproneArgs.add("-XepDisableAllChecks")
//                  // if error prone is active and causes issues with Java 17. Check BeamModulePlugin for exact args.
//             }
//         }
//     } else {
//         logger.lifecycle("Debezium IO: 'java17Home' property not found or empty. Relying on Gradle toolchain detection for Java 17 for 'compileJava'.")
//     }

//     // If you also want compileTestJava to use this (good for consistency):
//     if (project.hasProperty("testJavaVersion") && project.property("testJavaVersion") == "17" &&
//         project.hasProperty("java17Home") && project.property("java17Home").toString().trim() != "") {
//         tasks.named('compileTestJava', JavaCompile) {
//             logger.lifecycle("Debezium IO: Configuring 'compileTestJava' to use Java 17 from java17Home via testJavaVersion=17 property.")
//             // The BeamModulePlugin's logic for testJavaVersion should automatically
//             // call setJavaVerOptions, which will use java17Home.
//             // You typically don't need to re-configure it here if -PtestJavaVersion=17 is passed.
//             // Just ensure source/target are aligned if not already.
//             sourceCompatibility = JavaVersion.VERSION_17
//             targetCompatibility = JavaVersion.VERSION_17
//         }
//     }
// }

dependencies {
    implementation library.java.vendored_guava_32_1_2_jre
    implementation library.java.vendored_grpc_1_69_0
    implementation project(path: ":sdks:java:core", configuration: "shadow")
    implementation library.java.slf4j_api
    implementation library.java.joda_time
    provided library.java.jackson_dataformat_csv
    permitUnusedDeclared library.java.jackson_dataformat_csv
    testImplementation project(path: ":sdks:java:core", configuration: "shadowTest")
    testImplementation project(path: ":sdks:java:io:common")

    // Test dependencies
    testImplementation library.java.junit
    testImplementation project(path: ":sdks:java:io:jdbc")
    testRuntimeOnly library.java.slf4j_jdk14
    testRuntimeOnly project(path: ":runners:direct-java", configuration: "shadow")
    testImplementation project(":runners:google-cloud-dataflow-java")
    testImplementation library.java.hamcrest
    testImplementation library.java.testcontainers_base
    testImplementation library.java.testcontainers_mysql
    testImplementation library.java.testcontainers_postgresql
    // TODO(https://github.com/apache/beam/issues/31678) HikariCP 5.x requires Java11+
    testImplementation 'com.zaxxer:HikariCP:4.0.3'

    // Kafka connect dependencies
    implementation "org.apache.kafka:connect-api:2.5.0"
    implementation "org.apache.kafka:connect-json:2.5.0"
    permitUnusedDeclared "org.apache.kafka:connect-json:2.5.0" // BEAM-11761

    // Debezium dependencies
    implementation group: 'io.debezium', name: 'debezium-core', version: '3.1.1.Final'
    testImplementation group: 'io.debezium', name: 'debezium-connector-mysql', version: '3.1.1.Final'
    testImplementation group: 'io.debezium', name: 'debezium-connector-postgres', version: '3.1.1.Final'
}

test {
    testLogging {
        outputs.upToDateWhen {false}
        showStandardStreams = true
    }
}


task integrationTest(type: Test, dependsOn: processTestResources) {
  group = "Verification"
  systemProperty "beamTestPipelineOptions", JsonOutput.toJson([
          "--runner=DirectRunner",
  ])

  // Disable Gradle cache: these ITs interact with live service that should always be considered "out of date"
  outputs.upToDateWhen { false }

  include '**/*IT.class'
  classpath = sourceSets.test.runtimeClasspath
  testClassesDirs = sourceSets.test.output.classesDirs

  useJUnit {
  }
}
