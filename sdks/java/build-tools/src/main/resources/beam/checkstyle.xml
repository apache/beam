<?xml version="1.0" encoding="UTF-8"?>
<!--
    Licensed to the Apache Software Foundation (ASF) under one or more
    contributor license agreements.  See the NOTICE file distributed with
    this work for additional information regarding copyright ownership.
    The ASF licenses this file to You under the Apache License, Version 2.0
    (the "License"); you may not use this file except in compliance with
    the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->
<!DOCTYPE module PUBLIC
    "-//Puppy Crawl//DTD Check Configuration 1.3//EN"
    "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">

<!-- This is a checkstyle configuration file. For descriptions of
what the following rules do, please see the checkstyle configuration
page at http://checkstyle.sourceforge.net/config.html -->

<module name="Checker">
  <property name="severity" value="error"/>

  <!-- Allows inline SuppressWarnings annotation, by using for example
      "@SuppressWarnings("checkstyle:JavadocMethod")".
  -->
  <module name="SuppressWarningsFilter" />

  <module name="RegexpSingleline">
    <property name="format" value="Throwables.propagate\("/>
    <property name="message" value="Throwables.propagate is deprecated"/>
    <property name="severity" value="error"/>
  </module>

  <!-- Prevent *Tests.java as tools may not pick them up -->
  <module name="RegexpOnFilename">
    <property name="fileNamePattern" value=".*Tests\.java$" />
  </module>

  <!-- Check that every module has a package-info.java -->
  <module name="JavadocPackage"/>

  <module name="SuppressionFilter">
    <property name="file" value="${checkstyle.suppressions.file}" default="suppressions.xml" />
  </module>

  <!-- All Java AST specific tests live under TreeWalker module. -->
  <module name="TreeWalker">
    <module name="MissingDeprecated" />

    <module name="RedundantImport">
      <!-- Checks for redundant import statements. -->
      <property name="severity" value="error"/>
      <message key="import.redundancy"
               value="Redundant import {0}."/>
    </module>

    <module name="ImportOrder">
      <!-- Checks for out of order import statements. -->
      <property name="severity" value="error"/>
      <!-- This ensures that static imports go first. -->
      <property name="option" value="top"/>
      <property name="sortStaticImportsAlphabetically" value="true"/>
      <property name="tokens" value="STATIC_IMPORT, IMPORT"/>
      <property name="separated" value="true"/>
      <message key="import.ordering"
               value="Import {0} appears after other imports that it should precede"/>
    </module>

    <module name="AvoidStarImport">
      <property name="severity" value="error"/>
    </module>

    <!-- Forbid importing any shaded code, since it does not exist at compile time and this is probably an IDE error -->
    <module name="IllegalImport">
      <property name="illegalPkgs" value="autovalue.shaded, avro.shaded, com.google.api.client.repackaged, com.google.appengine.repackaged, io.netty.util.internal"/>
    </module>

    <!-- This is not the Nullable annotation you are looking for -->
    <module name="IllegalImport">
      <property name="illegalPkgs" value="com.sun.istack" />
    </module>

    <module name="RedundantModifier">
      <!-- Checks for redundant modifiers on various symbol definitions.
        See: http://checkstyle.sourceforge.net/config_modifier.html#RedundantModifier
      -->
      <property name="tokens" value="METHOD_DEF, VARIABLE_DEF, ANNOTATION_FIELD_DEF, INTERFACE_DEF, CLASS_DEF, ENUM_DEF"/>
    </module>

    <!--
        IllegalImport cannot forbid classes, and c.g.api.client.util is used for some shaded
        code and some useful code. So we need to fall back to Regexp.
    -->
    <module name="RegexpSinglelineJava">
      <property name="format" value="com\.google\.api\.client\.util\.(ByteStreams|Charsets|Collections2|Joiner|Lists|Maps|Objects|Preconditions|Sets|Strings|Throwables)"/>
    </module>

    <!--
        Forbid non-vendored guava imports.
        testing import is allowed because it comes from guava-testing for the tests.
    -->
    <module name="RegexpSinglelineJava">
      <property name="id" value="ForbidNonVendoredGuava"/>
      <property name="format" value="(\scom\.google\.common\.(?!testing))|(\scom\.google\.thirdparty)"/>
      <property name="severity" value="error"/>
      <property name="message" value="You are using raw guava, please use vendored guava classes."/>
    </module>

    <!-- Forbid non-vendored gRPC/protobuf imports. -->
    <module name="RegexpSinglelineJava">
      <property name="id" value="ForbidNonVendoredGrpcProtobuf"/>
      <property name="format" value="((\scom\.google\.protobuf)|(\sio\.grpc))"/>
      <property name="severity" value="error"/>
      <property name="message" value="You are using raw grpc/protobuf, please use vendored grpc/protobuf classes."/>
    </module>

    <!-- Forbid guava imports from gRPC vendored guava version. -->
    <module name="RegexpSinglelineJava">
      <property name="id" value="ForbidGrpcVendoredGuava"/>
      <property name="format" value="(\sorg\.apache\.beam\.vendor\.grpc\.(.*)\.com\.google\.common\.(?!testing))|(\sorg\.apache\.beam\.vendor\.grpc\.(.*)\.com\.google\.thirdparty)"/>
      <property name="severity" value="error"/>
      <property name="message" value="You are using raw guava, please use vendored guava classes."/>
    </module>

    <!-- Forbid org.spark_project imports. -->
    <module name="RegexpSinglelineJava">
      <property name="id" value="ForbidSparkProject"/>
      <property name="format" value="(\sorg\.spark_project)"/>
      <property name="severity" value="error"/>
      <property name="message" value="You should not use org.spark_project classes in Beam."/>
    </module>

    <!-- Forbid calling Loggers different than LOG. -->
    <module name="RegexpSinglelineJava">
      <property name="id" value="LoggerNamingStyle"/>
      <property name="format" value="(\sprivate static final Logger )(?!LOG )"/>
      <property name="severity" value="error"/>
      <property name="message" value="You should name sfl4j Loggers as LOG."/>
    </module>

    <!-- Forbid TestNG imports that may leak because of dependencies. -->
    <module name="RegexpSinglelineJava">
      <property name="id" value="ForbidTestNG"/>
      <property name="format" value="(\sorg\.testng)"/>
      <property name="severity" value="error"/>
      <property name="message" value="You should not use TestNG classes in Beam."/>
    </module>

    <!-- Forbid Non-vendored byte-buddy imports. -->
    <module name="RegexpSinglelineJava">
      <property name="id" value="ForbidByteBuddy"/>
      <property name="format" value="(\snet\.bytebuddy)"/>
      <property name="severity" value="error"/>
      <property name="message" value="You are using raw byte-buddy, please use vendored byte-buddy classes."/>
    </module>

    <!-- Forbid Non-vendored calcite imports. -->
    <module name="RegexpSinglelineJava">
      <property name="id" value="ForbidCalcite"/>
      <property name="format" value="(\sorg\.apache\.calcite)"/>
      <property name="severity" value="error"/>
      <property name="message" value="You are using raw calcite, please use vendored calcite classes."/>
    </module>

    <module name="UnusedImports">
      <property name="severity" value="error"/>
      <property name="processJavadoc" value="true"/>
      <message key="import.unused"
               value="Unused import: {0}."/>
    </module>

    <module name="IllegalThrows">
      <property name="illegalClassNames"
        value="java.lang.Error,java.lang.RuntimeException" />
    </module>

    <!--

    JAVADOC CHECKS

    -->

    <!-- Required to work in pair with SuppressWarningsFilter-->
    <module name="SuppressWarningsHolder" />

    <!-- Checks for Javadoc comments.                     -->
    <!-- See http://checkstyle.sf.net/config_javadoc.html -->
    <module name="JavadocMethod">
      <property name="scope" value="protected"/>
      <property name="severity" value="error"/>
      <property name="allowMissingJavadoc" value="true"/>
      <property name="allowMissingParamTags" value="true"/>
      <property name="allowMissingReturnTag" value="true"/>
      <property name="allowMissingThrowsTags" value="true"/>
      <property name="allowThrowsTagsForSubclasses" value="true"/>
      <property name="allowUndeclaredRTE" value="true"/>
    </module>

    <module name="JavadocMethod">
      <property name="scope" value="public"/>
      <property name="severity" value="error"/>
      <property name="minLineCount" value="30"/>
      <property name="allowMissingJavadoc" value="false"/>
      <property name="allowMissingPropertyJavadoc" value="true"/>
      <property name="allowMissingParamTags" value="true"/>
      <property name="allowMissingReturnTag" value="true"/>
      <property name="allowMissingThrowsTags" value="true"/>
      <property name="allowThrowsTagsForSubclasses" value="true"/>
      <property name="allowUndeclaredRTE" value="true"/>
    </module>

    <!-- Check that paragraph tags are used correctly in Javadoc. -->
    <!--
    TODO(https://issues.apache.org/jira/browse/BEAM-4670): re-enable after fixing after spotless

    A lot of our Javadoc has moderately broken HTML. It lacks paragraph tags where it ought
    to have them. Spotless reformats so that checkstyle noticies this. This can be fixed
    a bit at a time.

    <module name="JavadocParagraph"/>
    -->

    <module name="JavadocType">
      <property name="scope" value="protected"/>
      <property name="severity" value="error"/>
      <property name="allowMissingParamTags" value="true"/>
    </module>

    <module name="JavadocStyle">
      <property name="severity" value="error"/>
      <property name="checkHtml" value="true"/>
    </module>

    <!--

    NAMING CHECKS

    -->

    <!-- Item 38 - Adhere to generally accepted naming conventions -->

    <module name="PackageName">
      <!-- Validates identifiers for package names against the
        supplied expression. -->
      <!-- Here the default checkstyle rule restricts package name parts to
        seven characters, this is not in line with common practice at Google.
      -->
      <property name="format" value="^[a-z]+(\.[a-z][a-z0-9]{1,})*$"/>
      <property name="severity" value="error"/>
    </module>
 
    <module name="PackageDeclaration" />

    <module name="TypeNameCheck">
      <!-- Validates static, final fields against the
      expression "^[A-Z][a-zA-Z0-9]*$". -->
      <metadata name="altname" value="TypeName"/>
      <property name="severity" value="error"/>
    </module>

    <module name="ConstantNameCheck">
      <!-- Validates non-private, static, final fields against the supplied
      public/package final fields "^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$". -->
      <metadata name="altname" value="ConstantName"/>
      <property name="applyToPublic" value="true"/>
      <property name="applyToProtected" value="true"/>
      <property name="applyToPackage" value="true"/>
      <property name="applyToPrivate" value="false"/>
      <property name="format" value="^([A-Z][A-Z0-9]*(_[A-Z0-9]+)*|FLAG_.*)$"/>
      <message key="name.invalidPattern"
               value="Variable ''{0}'' should be in ALL_CAPS (if it is a constant) or be private (otherwise)."/>
      <property name="severity" value="error"/>
    </module>

    <module name="StaticVariableNameCheck">
      <!-- Validates static, non-final fields against the supplied
      expression "^[a-z][a-zA-Z0-9]*_?$". -->
      <metadata name="altname" value="StaticVariableName"/>
      <property name="applyToPublic" value="true"/>
      <property name="applyToProtected" value="true"/>
      <property name="applyToPackage" value="true"/>
      <property name="applyToPrivate" value="true"/>
      <property name="format" value="^[a-z][a-zA-Z0-9]*_?$"/>
      <property name="severity" value="error"/>
    </module>

    <module name="MemberNameCheck">
      <!-- Validates non-static members against the supplied expression. -->
      <metadata name="altname" value="MemberName"/>
      <property name="applyToPublic" value="true"/>
      <property name="applyToProtected" value="true"/>
      <property name="applyToPackage" value="true"/>
      <property name="applyToPrivate" value="true"/>
      <property name="format" value="^[a-z][a-zA-Z0-9]*$"/>
      <property name="severity" value="error"/>
    </module>

    <module name="MethodNameCheck">
      <!-- Validates identifiers for method names. -->
      <metadata name="altname" value="MethodName"/>
      <property name="format" value="^[a-z][a-zA-Z0-9]*(_[a-zA-Z0-9]+)*$"/>
      <property name="severity" value="error"/>
    </module>

    <module name="ParameterName">
      <!-- Validates identifiers for method parameters against the
        expression "^[a-z][a-zA-Z0-9]*$". -->
      <property name="severity" value="error"/>
    </module>

    <module name="LocalFinalVariableName">
      <!-- Validates identifiers for local final variables against the
        expression "^[a-z][a-zA-Z0-9]*$". -->
      <property name="severity" value="error"/>
    </module>

    <module name="LocalVariableName">
      <!-- Validates identifiers for local variables against the
        expression "^[a-z][a-zA-Z0-9]*$". -->
      <property name="severity" value="error"/>
    </module>

    <!-- Type parameters must be either one of the four blessed letters
    T, K, V, W, X or else be capital-case terminated with a T,
    such as MyGenericParameterT -->
    <module name="ClassTypeParameterName">
      <property name="format" value="^(((T|K|V|W|X)[0-9]*)|([A-Z][a-z][a-zA-Z]*T))$"/>
      <property name="severity" value="error"/>
    </module>

    <module name="MethodTypeParameterName">
      <property name="format" value="^(((T|K|V|W|X)[0-9]*)|([A-Z][a-z][a-zA-Z]*T))$"/>
      <property name="severity" value="error"/>
    </module>

    <module name="InterfaceTypeParameterName">
      <property name="format" value="^(((T|K|V|W|X)[0-9]*)|([A-Z][a-z][a-zA-Z]*T))$"/>
      <property name="severity" value="error"/>
    </module>

    <!--

    LENGTH and CODING CHECKS

    -->

    <!--
    TODO(https://issues.apache.org/jira/browse/BEAM-4669): re-enable after fixing after spotless

    When spotless re-indents, multi-line strings are often split so close to 100 chars that the
    indentation makes them exceed the max line length. This can be fixed a bit at a time.

    <module name="LineLength">
      <property name="max" value="100"/>
      <property name="severity" value="error"/>
      <property name="ignorePattern"
          value="^(package .*;\s*)|(import .*;\s*)|( *\* .*https?://.*)$"/>
    </module>
     -->

    <!-- Checks for braces around if and else blocks -->
    <module name="NeedBraces">
      <property name="severity" value="error"/>
      <property name="tokens" value="LITERAL_IF, LITERAL_ELSE, LITERAL_FOR, LITERAL_WHILE, LITERAL_DO"/>
    </module>

    <module name="UpperEll">
      <!-- Checks that long constants are defined with an upper ell.-->
      <property name="severity" value="error"/>
    </module>

    <module name="FallThrough">
      <!-- Warn about falling through to the next case statement.  Similar to
      javac -Xlint:fallthrough, but the check is suppressed if a single-line comment
      on the last non-blank line preceding the fallen-into case contains 'fall through' (or
      some other variants that we don't publicized to promote consistency).
      -->
      <property name="reliefPattern"
       value="fall through|Fall through|fallthru|Fallthru|falls through|Falls through|fallthrough|Fallthrough|No break|NO break|no break|continue on"/>
      <property name="severity" value="error"/>
    </module>

    <!-- Checks for over-complicated boolean expressions. -->
    <module name="SimplifyBooleanExpression"/>

    <!--

    MODIFIERS CHECKS

    -->

    <module name="ModifierOrder">
      <!-- Warn if modifier order is inconsistent with JLS3 8.1.1, 8.3.1, and
           8.4.3.  The prescribed order is:
           public, protected, private, abstract, static, final, transient, volatile,
           synchronized, native, strictfp
        -->
      <property name="severity" value="error"/>
    </module>


    <!-- Allow use of comment to suppress javadocstyle -->
    <module name="SuppressionCommentFilter">
      <property name="offCommentFormat" value="CHECKSTYLE.OFF\: ([\w\|]+)"/>
      <property name="onCommentFormat" value="CHECKSTYLE.ON\: ([\w\|]+)"/>
      <property name="checkFormat" value="$1"/>
    </module>

    <module name="ArrayTypeStyle"/>
  </module>

</module>

