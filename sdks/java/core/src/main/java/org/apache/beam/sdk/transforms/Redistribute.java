/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.beam.sdk.transforms;

import java.util.concurrent.ThreadLocalRandom;
import org.apache.beam.sdk.util.Reshuffle;
import org.apache.beam.sdk.util.ValueWithRecordId;
import org.apache.beam.sdk.util.WindowingStrategy;
import org.apache.beam.sdk.values.KV;
import org.apache.beam.sdk.values.PCollection;

/**
 * {@link PTransform Transforms} that return a {@link PCollection} equivalent to their input, but
 * which is distributed differently, in order to provide additional operational properties. See
 * {@link #byKey} and {@link #arbitrarily}.
 */
public class Redistribute {
  /**
   * Redistributes the collection by key, providing some of the side effects of a {@link
   * GroupByKey}, in particular: prevents fusion of the surrounding transforms, checkpointing and
   * deduplication by id (see {@link ValueWithRecordId}).
   *
   * <p>Internally performs a {@link GroupByKey} so that the data is key-partitioned. Configures the
   * {@link WindowingStrategy} so that no data is dropped, but doesn't affect the need for the user
   * to specify allowed lateness and accumulation mode before a user-inserted GroupByKey.
   *
   * @param <K> The type of key being reshuffled on.
   * @param <V> The type of value being reshuffled.
   */
  public static <K, V> PTransform<PCollection<KV<K, V>>, PCollection<KV<K, V>>> byKey() {
    return Reshuffle.of();
  }

  /**
   * Redistributes the collection in an arbitrary fashion, preventing fusion of the surrounding
   * transforms.
   *
   * @param <T> Type of the value being redistributed.
   */
  public static <T> Arbitrarily<T> arbitrarily() {
    return new Arbitrarily<>();
  }

  /** Implementation of {@link #arbitrarily}. */
  public static class Arbitrarily<T> extends PTransform<PCollection<T>, PCollection<T>> {
    @Override
    public PCollection<T> apply(PCollection<T> input) {
      return input
          .apply(ParDo.of(new PairWithBundleKey<T>()))
          .apply(Reshuffle.<Integer, T>of())
          .apply(Values.<T>create());
    }
  }

  private static class PairWithBundleKey<T> extends DoFn<T, KV<Integer, T>> {
    // We would like to efficiently pair each element in the input PCollection<T> with a key that is
    // as globally unique as possible, because reparallelization will be at most as good as the
    // uniqueness of our generated keys.
    //
    // An obvious way is to generate a new random number for each element.
    // Then bundle "i" will generate a stream:
    //
    //   r_i0, r_i1, ...
    //
    // However, here we use a faster strategy that produces the same expected number of duplicates:
    // bundle "i" generates a seed random number r_i, and then simply repeatedly increments it:
    //
    //   r_i, r_i + 1, r_i + 2, ...
    //
    // This seems less random, but here's why this produces the same number of duplicates:
    //
    // Let us compute the expectation of how many times the number X will appear in the union of
    // the sets of keys generated by each bundle - i.e. expected duplication ratio.
    // Within 1 bundle of size N, the answer is, with both strategies, N/X.
    // By linearity of expectation https://en.wikipedia.org/wiki/Expected_value#Linearity ,
    // for several bundles of total size N, the answer will be also the same - N/X.
    //
    // Q.E.D.
    private int currentBundleKey;

    @Setup
    public void setup() {
      currentBundleKey = ThreadLocalRandom.current().nextInt();
    }

    @ProcessElement
    public void processElement(ProcessContext c) {
      c.output(KV.of(currentBundleKey++, c.element()));
    }
  }
}
