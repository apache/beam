/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.beam.sdk.transforms;

import java.util.concurrent.ThreadLocalRandom;
import org.apache.beam.sdk.transforms.windowing.BoundedWindow;
import org.apache.beam.sdk.transforms.windowing.Window;
import org.apache.beam.sdk.util.IdentityWindowFn;
import org.apache.beam.sdk.util.Reshuffle;
import org.apache.beam.sdk.util.ReshuffleTrigger;
import org.apache.beam.sdk.util.ValueWithRecordId;
import org.apache.beam.sdk.util.WindowingStrategy;
import org.apache.beam.sdk.values.KV;
import org.apache.beam.sdk.values.PCollection;
import org.joda.time.Duration;

/**
 * {@link PTransform Transforms} that return a {@link PCollection} equivalent to their input, but
 * which is distributed differently, in order to provide additional operational properties. See
 * {@link #byKey} and {@link #arbitrarily}.
 */
public class Redistribute {
  /**
   * Redistributes the collection by key, providing some of the side effects of a {@link
   * GroupByKey}, in particular: prevents fusion of the surrounding transforms, checkpointing and
   * deduplication by id (see {@link ValueWithRecordId}), and ensures that elements with the same
   * key are processed by the same worker.
   *
   * @param <K> The type of key being reshuffled on.
   * @param <V> The type of value being reshuffled.
   */
  public static <K, V> PTransform<PCollection<KV<K, V>>, PCollection<KV<K, V>>> byKey() {
    return new ByKey<>();
  }

  /**
   * Redistributes the collection in an arbitrary fashion, preventing fusion of the surrounding
   * transforms.
   *
   * @param <T> Type of the value being redistributed.
   */
  public static <T> PTransform<PCollection<T>, PCollection<T>> arbitrarily() {
    return new Arbitrarily<>();
  }

  /** Implementation of {@link #arbitrarily}. */
  private static class Arbitrarily<T> extends PTransform<PCollection<T>, PCollection<T>> {
    @Override
    public PCollection<T> apply(PCollection<T> input) {
      return input
          .apply(ParDo.of(new PairWithBundleKey<T>()))
          .apply(Reshuffle.<Integer, T>of())
          .apply(Values.<T>create());
    }
  }

  /**
   * Pairs each element with a best-effort unique key.
   *
   * <p>We would like to efficiently pair each element in the input {@link PCollection} with a key
   * that is as globally unique as possible, because reparallelization will be at most as good as
   * the uniqueness of our generated keys.
   *
   * <p>An obvious way is to generate a new random number for each element. Then bundle "i" will
   * generate a stream:
   *
   * <pre>
   *   r_i0, r_i1, ...
   * </pre>
   *
   * However, here we use a faster strategy that produces the same expected number of duplicates:
   * bundle "i" generates a seed random number r_i, and then simply repeatedly increments it:
   *
   * <pre>
   *   r_i, r_i + 1, r_i + 2, ...
   * </pre>
   *
   * This seems less random, but here's why this produces the same number of duplicates:
   *
   * <p>Let us compute the expectation of how many times the number X will appear in the union of
   * the sets of keys generated by each bundle - i.e. expected duplication ratio.
   *
   * <p>For any single number generated by any of the bundles, the answer is, with both strategies,
   * 1/U, where U is the universe size - i.e. probability that this particular number equals X.
   *
   * <p>By <a href="https://en.wikipedia.org/wiki/Expected_value#Linearity">linearity of
   * expectation</a>, for several bundles of total size N, the answer will be also the same - N/U.
   *
   * <p>Q.E.D.
   */
  private static class PairWithBundleKey<T> extends DoFn<T, KV<Integer, T>> {
    private int currentBundleKey;

    @Setup
    public void setup() {
      currentBundleKey = ThreadLocalRandom.current().nextInt();
    }

    @ProcessElement
    public void processElement(ProcessContext c) {
      c.output(KV.of(currentBundleKey++, c.element()));
    }
  }

  /** Implementation of {@link #byKey}. */
  private static class ByKey<K, V>
      extends PTransform<PCollection<KV<K, V>>, PCollection<KV<K, V>>> {
    @Override
    public PCollection<KV<K, V>> apply(PCollection<KV<K, V>> input) {
      WindowingStrategy<?, ?> originalStrategy = input.getWindowingStrategy();
      // If the input has already had its windows merged, then the GBK that performed the merge
      // will have set originalStrategy.getWindowFn() to InvalidWindows, causing the GBK contained
      // here to fail. Instead, we install a valid WindowFn that leaves all windows unchanged.
      Window.Bound<KV<K, V>> rewindow =
          Window.<KV<K, V>>into(
                  new IdentityWindowFn<>(originalStrategy.getWindowFn().windowCoder()))
              .triggering(new ReshuffleTrigger<>())
              .discardingFiredPanes()
              .withAllowedLateness(Duration.millis(BoundedWindow.TIMESTAMP_MAX_VALUE.getMillis()));

      return input
          .apply(rewindow)
          .apply(GroupByKey.<K, V>create())
          // Set the windowing strategy directly, so that it doesn't get counted as the user having
          // set allowed lateness.
          .setWindowingStrategyInternal(originalStrategy)
          .apply(
              "ExpandIterable",
              ParDo.of(
                  new DoFn<KV<K, Iterable<V>>, KV<K, V>>() {
                    @ProcessElement
                    public void processElement(ProcessContext c) {
                      K key = c.element().getKey();
                      for (V value : c.element().getValue()) {
                        c.output(KV.of(key, value));
                      }
                    }
                  }));
    }
  }
}
