/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.beam.sdk.util;

import java.util.concurrent.ThreadLocalRandom;
import org.apache.beam.sdk.transforms.DoFn;
import org.apache.beam.sdk.transforms.PTransform;
import org.apache.beam.sdk.transforms.ParDo;
import org.apache.beam.sdk.transforms.Values;
import org.apache.beam.sdk.values.KV;
import org.apache.beam.sdk.values.PCollection;

/**
 * A {@link PTransform} that returns a {@link PCollection} equivalent to its input, but prevents
 * fusion of the surrounding transforms, so that the runner will split the returned {@link
 * PCollection} into bundles for parallel processing independently.
 */
public abstract class Rebundle {
  /**
   * Creates a {@link Rebundle} transform that produces a collection that the runner can split into
   * bundles in an arbitrarily fashion.
   */
  public static <T> Default<T> create() {
    return new Default<T>();
  }

  /** The default {@link Rebundle} transform. */
  public static class Default<T> extends PTransform<PCollection<T>, PCollection<T>> {
    @Override
    public PCollection<T> apply(PCollection<T> input) {
      return input
          .apply(ParDo.of(new PairWithBundleKey<T>()))
          .apply(Reshuffle.<Integer, T>of())
          .apply(Values.<T>create());
    }
  }

  private static class PairWithBundleKey<T> extends DoFn<T, KV<Integer, T>> {
    // We would like to efficiently pair each element in the input PCollection<T> with a key that is
    // as globally unique as possible, because reparallelization will be at most as good as the
    // uniqueness of our generated keys.
    //
    // An obvious way is to generate a new random number for each element.
    // Then bundle "i" will generate a stream:
    //
    //   r_i0, r_i1, ...
    //
    // However, here we use a faster strategy that produces the same expected number of duplicates:
    // bundle "i" generates a seed random number r_i, and then simply repeatedly increments it:
    //
    //   r_i, r_i + 1, r_i + 2, ...
    //
    // This seems less random, but here's why this produces the same number of duplicates:
    //
    // Let us compute the expectation of how many times the number X will appear in the union of
    // the sets of keys generated by each bundle - i.e. expected duplication ratio.
    // Within 1 bundle of size N, the answer is, with both strategies, N/X.
    // By linearity of expectation https://en.wikipedia.org/wiki/Expected_value#Linearity ,
    // for several bundles of total size N, the answer will be also the same - N/X.
    //
    // Q.E.D.
    private int currentBundleKey;

    @Setup
    public void setup() {
      currentBundleKey = ThreadLocalRandom.current().nextInt();
    }

    @ProcessElement
    public void processElement(ProcessContext c) {
      c.output(KV.of(currentBundleKey++, c.element()));
    }
  }
}
