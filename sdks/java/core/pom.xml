<?xml version="1.0" encoding="UTF-8"?>
<!--
    Licensed to the Apache Software Foundation (ASF) under one or more
    contributor license agreements.  See the NOTICE file distributed with
    this work for additional information regarding copyright ownership.
    The ASF licenses this file to You under the Apache License, Version 2.0
    (the "License"); you may not use this file except in compliance with
    the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

  <modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>org.apache.beam</groupId>
    <artifactId>beam-sdks-java-parent</artifactId>
    <version>0.7.0-SNAPSHOT</version>
    <relativePath>../pom.xml</relativePath>
  </parent>

  <artifactId>beam-sdks-java-core</artifactId>
  <name>Apache Beam :: SDKs :: Java :: Core</name>
  <description>Beam SDK Java All provides a simple, Java-based
  interface for processing virtually any size data. This
  artifact includes entire Apache Beam Java SDK.</description>

  <packaging>jar</packaging>

  <properties>
    <timestamp>${maven.build.timestamp}</timestamp>
    <maven.build.timestamp.format>yyyy-MM-dd HH:mm</maven.build.timestamp.format>
  </properties>

  <build>
    <resources>
      <resource>
        <directory>src/main/resources</directory>
        <filtering>true</filtering>
      </resource>
    </resources>

    <pluginManagement>
      <plugins>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-checkstyle-plugin</artifactId>
          <configuration>
            <!-- Set testSourceDirectory in order to exclude generated-test-sources -->
            <testSourceDirectory>${project.basedir}/src/test/</testSourceDirectory>
          </configuration>
        </plugin>
      </plugins>
    </pluginManagement>

    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <configuration>
          <excludedGroups>
            org.apache.beam.sdk.testing.NeedsRunner
          </excludedGroups>
          <systemPropertyVariables>
            <beamUseDummyRunner>true</beamUseDummyRunner>
          </systemPropertyVariables>
        </configuration>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jar-plugin</artifactId>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-shade-plugin</artifactId>

        <!--
        This configuration bundles the SDK with all of its
        dependencies, as follows:

         - If a dependency makes up part of the SDK's API surface (for
           examples, joda-time and BigQuery's TableRow) then the
           class is included in the bundled SDK.
         - If a dependency is merely used by the SDK as a private implementation
           detail, the class is included in a repackaged form so it will
           never cause a conflict with any other user or library's
           dependencies.

        In the first execution, all of the repackaged dependencies are
        bundled in a minimized jar. Because they are an implementation
        detail, this should not be observable.

        In the second execution, all of the dependencies that are part of
        the SDK's API surface are included fully. This ensures that if any
        class overrides something on the class path, all of the other classes
        from that version of its library are also overridden.
        -->
        <executions>

          <!-- Bundle all repackaged implementation detail dependencies -->
          <execution>
            <id>bundle-and-repackage</id>
            <phase>package</phase>
            <goals>
              <goal>shade</goal>
            </goals>
            <configuration>
              <shadeTestJar>true</shadeTestJar>
              <artifactSet>
                <!-- This excludes all API surface libraries from repackaging.
                     The list should be complete, even if some of the entries
                     do not match a relocation pattern. -->
                <excludes>
                  <exclude>com.google.api-client:google-api-client</exclude>
                  <exclude>com.google.apis:google-api-services-bigquery</exclude>
                  <exclude>com.google.apis:google-api-services-dataflow</exclude>
                  <exclude>com.google.apis:google-api-services-pubsub</exclude>
                  <exclude>com.google.apis:google-api-services-storage</exclude>
                  <exclude>com.google.auto.service:auto-service</exclude>
                  <exclude>com.google.code.findbugs:jsr305</exclude>
                  <exclude>com.google.http-client:google-http-client</exclude>
                  <exclude>com.google.http-client:google-http-client-jackson2</exclude>
                  <exclude>com.google.oauth-client:google-oauth-client</exclude>
                  <exclude>com.google.protobuf:protobuf-java</exclude>
                  <exclude>com.fasterxml.jackson.core:jackson-annotation</exclude>
                  <exclude>com.fasterxml.jackson.core:jackson-core</exclude>
                  <exclude>com.fasterxml.jackson.core:jackson-databind</exclude>
                  <exclude>joda-time:joda-time</exclude>
                  <exclude>junit:junit</exclude>
                  <exclude>org.apache.avro:avro</exclude>
                  <exclude>org.hamcrest:hamcrest-all</exclude>
                  <exclude>org.slf4j:slf4j-api</exclude>
                  <exclude>org.xerial:snappy-java</exclude>
                </excludes>
              </artifactSet>
              <filters>
                <filter>
                  <artifact>*:*</artifact>
                  <excludes>
                    <exclude>META-INF/*.SF</exclude>
                    <exclude>META-INF/*.DSA</exclude>
                    <exclude>META-INF/*.RSA</exclude>
                  </excludes>
                </filter>
              </filters>
              <!--
              What we really want is to repackage "" to
              "org.apache.beam.sdk.private" but the
              implementation of the shade plugin the relocates
              non-class files as well (and fails to join directory
              names witha "/").

              Instead, we have a separate toplevel relocation for
              every root package prefix in our dependencies.

              Additionally, inclusion/exclusion in the jar is independent of
              the rewriting of other class files, so we must still exclude
              the packages from all of the API surface dependencies here.
              -->
              <relocations>
                <relocation>
                  <pattern>com.</pattern>
                  <shadedPattern>org.apache.beam.sdk.private.com.</shadedPattern>
                  <excludes>
                    <exclude>com.google.api.client.**</exclude>
                    <exclude>com.google.api.services.bigquery.**</exclude>
                    <exclude>com.google.api.services.dataflow.**</exclude>
                    <exclude>com.google.api.services.pubsub.**</exclude>
                    <exclude>com.google.api.services.storage.**</exclude>
                    <exclude>com.google.cloud.dataflow.**</exclude>
                    <exclude>com.google.protobuf.**</exclude>
                    <exclude>com.fasterxml.jackson.**</exclude>
                  </excludes>
                </relocation>
                <relocation>
                  <pattern>io.</pattern>
                  <shadedPattern>org.apache.beam.sdk.private.io.</shadedPattern>
                </relocation>
                <relocation>
                  <pattern>okio.</pattern>
                  <shadedPattern>org.apache.beam.sdk.private.okio.</shadedPattern>
                </relocation>
                <relocation>
                  <pattern>org.</pattern>
                  <shadedPattern>org.apache.beam.sdk.private.org.</shadedPattern>
                  <excludes>
                    <exclude>org.apache.avro.**</exclude>
                    <exclude>org.apache.beam.**</exclude>
                    <exclude>org.hamcrest.**</exclude>
                    <exclude>org.joda.time.**</exclude>
                    <exclude>org.junit.**</exclude>
                    <exclude>org.slf4j.**</exclude>
                    <exclude>org.w3c.dom.**</exclude>
                    <exclude>org.xerial.snappy.**</exclude>
                  </excludes>
                </relocation>
                <relocation>
                  <pattern>javax.</pattern>
                  <shadedPattern>org.apache.beam.sdk.private.javax.</shadedPattern>
                  <excludes>
                    <exclude>javax.annotion</exclude>
                  </excludes>
                </relocation>
              </relocations>
            </configuration>
          </execution>

          <!-- Bundle all remaining dependencies without repackaging -->
          <execution>
            <id>bundle-rest-without-repackaging</id>
            <phase>package</phase>
            <goals>
              <goal>shade</goal>
            </goals>
            <configuration>
              <shadeTestJar>true</shadeTestJar>
              <finalName>${project.artifactId}-bundled-${project.version}</finalName>
              <artifactSet>
                <!-- This includes all API surface libraries, which were
                     excluded from repackaging. The list should be complete,
                     identical to the exclusions from the prior execution.
                -->
                <includes>
                  <include>com.google.api-client:google-api-client</include>
                  <include>com.google.apis:google-api-services-bigquery</include>
                  <include>com.google.apis:google-api-services-dataflow</include>
                  <include>com.google.apis:google-api-services-pubsub</include>
                  <include>com.google.apis:google-api-services-storage</include>
                  <include>com.google.auto.service:auto-service</include>
                  <include>com.google.code.findbugs:jsr305</include>
                  <include>com.google.http-client:google-http-client</include>
                  <include>com.google.http-client:google-http-client-jackson2</include>
                  <include>com.google.oauth-client:google-oauth-client</include>
                  <include>com.google.protobuf:protobuf-java</include>
                  <include>com.fasterxml.jackson.core:jackson-annotation</include>
                  <include>com.fasterxml.jackson.core:jackson-core</include>
                  <include>com.fasterxml.jackson.core:jackson-databind</include>
                  <include>joda-time:joda-time</include>
                  <include>org.apache.avro:avro</include>
                  <include>org.slf4j:slf4j-api</include>
                  <include>org.xerial:snappy-java</include>
                </includes>
              </artifactSet>
              <filters>
                <filter>
                  <artifact>*:*</artifact>
                  <excludes>
                    <exclude>META-INF/*.SF</exclude>
                    <exclude>META-INF/*.DSA</exclude>
                    <exclude>META-INF/*.RSA</exclude>
                  </excludes>
                </filter>
              </filters>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!-- Coverage analysis for unit tests. -->
      <plugin>
        <groupId>org.jacoco</groupId>
        <artifactId>jacoco-maven-plugin</artifactId>
      </plugin>

      <!-- Avro plugin for automatic code generation -->
      <plugin>
        <groupId>org.apache.avro</groupId>
        <artifactId>avro-maven-plugin</artifactId>
        <executions>
          <execution>
            <id>schemas</id>
            <phase>generate-sources</phase>
            <goals>
              <goal>schema</goal>
            </goals>
            <configuration>
              <testSourceDirectory>${project.basedir}/src/test/</testSourceDirectory>
              <testOutputDirectory>${project.build.directory}/generated-test-sources/java</testOutputDirectory>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!-- This plugin tells Maven about an additional test-source directory to build, 
        which contains Avro-generated source files. This is not strictly needed for the regular 
        Maven build, but helps certain IDEs automatically find and compile generated code. -->
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>build-helper-maven-plugin</artifactId>
        <executions>
          <execution>
            <id>add-test-source</id>
            <phase>generate-test-sources</phase>
            <goals>
              <goal>add-test-source</goal>
            </goals>
            <configuration>
              <sources>
                <source>${project.build.directory}/generated-test-sources/java</source>
              </sources>
            </configuration>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>

  <dependencies>
    <dependency>
      <groupId>com.google.http-client</groupId>
      <artifactId>google-http-client</artifactId>
    </dependency>

    <dependency>
      <groupId>com.google.guava</groupId>
      <artifactId>guava</artifactId>
    </dependency>

    <dependency>
      <!-- Note: when relocating guava, ensure guava-testlib is not also relocated by
           excluding com.google.common.**.testing.* -->
      <groupId>com.google.guava</groupId>
      <artifactId>guava-testlib</artifactId>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>com.google.protobuf</groupId>
      <artifactId>protobuf-java</artifactId>
    </dependency>

    <dependency>
      <groupId>com.google.code.findbugs</groupId>
      <artifactId>jsr305</artifactId>
    </dependency>

    <dependency>
      <groupId>com.fasterxml.jackson.core</groupId>
      <artifactId>jackson-core</artifactId>
    </dependency>

    <dependency>
      <groupId>com.fasterxml.jackson.core</groupId>
      <artifactId>jackson-annotations</artifactId>
    </dependency>

    <dependency>
      <groupId>com.fasterxml.jackson.core</groupId>
      <artifactId>jackson-databind</artifactId>
    </dependency>

    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-api</artifactId>
    </dependency>

    <dependency>
      <groupId>net.bytebuddy</groupId>
      <artifactId>byte-buddy</artifactId>
    </dependency>

    <dependency>
      <groupId>org.apache.avro</groupId>
      <artifactId>avro</artifactId>
    </dependency>

    <dependency>
      <groupId>org.xerial.snappy</groupId>
      <artifactId>snappy-java</artifactId>
    </dependency>

    <dependency>
      <groupId>org.apache.commons</groupId>
      <artifactId>commons-compress</artifactId>
    </dependency>

    <dependency>
      <groupId>org.apache.commons</groupId>
      <artifactId>commons-lang3</artifactId>
    </dependency>

    <dependency>
      <groupId>joda-time</groupId>
      <artifactId>joda-time</artifactId>
    </dependency>

    <!-- To use org.apache.beam.io.AvroSource with XZ-encoded files, please explicitly
      declare this dependency to include org.tukaani:xz on the classpath at runtime. -->
    <dependency>
      <groupId>org.tukaani</groupId>
      <artifactId>xz</artifactId>
      <version>1.5</version>
      <scope>runtime</scope>
      <optional>true</optional>
    </dependency>

    <!-- build dependencies -->
    <dependency>
      <groupId>com.google.auto.service</groupId>
      <artifactId>auto-service</artifactId>
      <optional>true</optional>
    </dependency>

    <dependency>
      <groupId>com.google.auto.value</groupId>
      <artifactId>auto-value</artifactId>
      <scope>provided</scope>
    </dependency>

    <!-- test dependencies -->
    <dependency>
      <groupId>org.apache.beam</groupId>
      <artifactId>beam-sdks-common-fn-api</artifactId>
      <type>test-jar</type>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>com.fasterxml.jackson.dataformat</groupId>
      <artifactId>jackson-dataformat-yaml</artifactId>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.hamcrest</groupId>
      <artifactId>hamcrest-all</artifactId>
      <scope>provided</scope>
    </dependency>

    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <scope>provided</scope>
    </dependency>

    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-jdk14</artifactId>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.mockito</groupId>
      <artifactId>mockito-all</artifactId>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>com.esotericsoftware.kryo</groupId>
      <artifactId>kryo</artifactId>
      <version>2.21</version>
      <scope>test</scope>
    </dependency>
  </dependencies>
</project>
