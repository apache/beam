/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * License); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import groovy.json.JsonOutput

apply plugin: org.apache.beam.gradle.BeamModulePlugin
applyJavaNature()
applyGrpcNature()
provideIntegrationTestingDependencies()
enableJavaPerformanceTesting()

description = "Apache Beam :: SDKs :: Java :: Extensions :: Timeseries"
ext.summary = """Beam TIMESERIES provides a new interface to deal with the common tasks of 
timeseries processing"""

/** Define the list of runners which execute a precommit test.
 * Some runners are run from separate projects, see the preCommit task below
 * for details.
 */
// TODO: Add apexRunner - https://issues.apache.org/jira/browse/BEAM-3583
def preCommitRunners = ["directRunner"]
for (String runner : preCommitRunners) {
  configurations.create(runner + "PreCommit")
}


dependencies {
  compile library.java.guava
  // https://mvnrepository.com/artifact/org.tensorflow/proto
  compile 'org.tensorflow:proto:1.10.0'
  compile 'com.google.cloud.bigtable:bigtable-hbase-beam:1.5.0'
  shadow project(path: ":beam-sdks-java-core", configuration: "shadow")
  shadow project(path: ":beam-sdks-java-extensions-google-cloud-platform-core", configuration: "shadow")
  shadow project(path: ":beam-sdks-java-io-google-cloud-platform", configuration: "shadow")
  shadow project(path: ":beam-runners-google-cloud-dataflow-java", configuration: "shadow")
  shadow library.java.protobuf_java
  shadow library.java.google_api_client
  shadow library.java.google_api_services_bigquery
  shadow library.java.google_http_client
  shadow library.java.bigdataoss_util
  shadow library.java.google_auth_library_oauth2_http
  shadow library.java.google_auth_library_credentials
  shadow library.java.avro
  shadow library.java.google_api_services_pubsub
  shadow library.java.datastore_v1_proto_client
  shadow library.java.datastore_v1_protos
  shadow library.java.joda_time
  shadow library.java.slf4j_api
  shadow library.java.slf4j_jdk14
  runtime project(path: ":beam-runners-direct-java", configuration: "shadow")
  shadowTest project(path: ":beam-sdks-java-io-google-cloud-platform", configuration: "shadowTest")

}

/*
task timeSeriesIntegrationTest(type: Test) {
  group = "Verification"
  def gcpProject = project.findProperty('gcpProject') ?: 'apache-beam-testing'
  def gcsTempRoot = project.findProperty('gcsTempRoot') ?: 'gs://temp-storage-for-end-to-end-tests/'

  // Disable Gradle cache (it should not be used because the IT's won't run).
  outputs.upToDateWhen { false }

  def pipelineOptions = [
          "--project=${gcpProject}",
          "--tempLocation=${gcsTempRoot}",
          "--blockOnRun=false"]

  systemProperty "beamTestPipelineOptions", JsonOutput.toJson(pipelineOptions)

  maxParallelForks 4
  classpath = project(":beam-sdks-java-extensions-timeseries").sourceSets.test.runtimeClasspath
  testClassesDirs = files(project(":beam-sdks-java-extensions-timeseries").sourceSets.test.output.classesDirs)
  useJUnit { }
}
*/


