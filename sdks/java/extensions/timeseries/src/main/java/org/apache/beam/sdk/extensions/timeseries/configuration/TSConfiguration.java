/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.beam.sdk.extensions.timeseries.configuration;

import com.google.auto.value.AutoValue;
import java.io.Serializable;
import java.util.Optional;
import javax.annotation.Nullable;
import org.apache.beam.sdk.annotations.Experimental;
import org.apache.beam.sdk.extensions.timeseries.TimeSeriesOptions;
import org.joda.time.Duration;

/** configuration options for the timeseries pipeline. */
@SuppressWarnings("serial")
@Experimental
@AutoValue
public abstract class TSConfiguration implements Serializable {

  /**
   * Used to determine the backfill operation type. NONE : Do not backfill NULL : Do not set a value
   * LAST_KNOWN_VALUE : Use the last known value
   */
  public enum BFillOptions {
    NONE,
    NULL,
    LAST_KNOWN_VALUE
  }

  // Back fill option that should be used in pipeline
  @Nullable
  public abstract BFillOptions fillOption();

  // The down sample period which must be set.
  public abstract Duration downSampleDuration();

  // Once a key is observed we will generate a value during periods when the key has not been
  // observed if the
  // fillOption is set to anything other than NONE.
  public abstract Duration timeToLive();

  abstract Builder toBuilder();

  public static TSConfiguration.Builder builder() {
    return new AutoValue_TSConfiguration.Builder();
  }

  /** Builder for TSConfiguration. */
  @AutoValue.Builder
  public abstract static class Builder {

    public abstract Builder fillOption(BFillOptions fillOption);

    public abstract Builder downSampleDuration(Duration downSampleDuration);

    public abstract Builder timeToLive(Duration timeToLive);

    public abstract TSConfiguration build();
  }

  // Internal metadata value used for Accums which have been autogenerated
  public static final String HEARTBEAT = "HB";

  /** Confirm configuration and return a configuration object used in pipeline. */
  public static TSConfiguration createConfigurationFromOptions(TimeSeriesOptions options) {

    TimeSeriesOptions timeSeriesOptions = (TimeSeriesOptions) options;

    TSConfiguration.Builder configuration = TSConfiguration.builder();

    if (!(Optional.ofNullable(timeSeriesOptions.getDownSampleDurationMillis()).orElse(0L) > 0)) {
      throw new IllegalArgumentException("Down sample duration must be > 0 ");
    }

    configuration.downSampleDuration(
        Duration.millis(timeSeriesOptions.getDownSampleDurationMillis()));

    configuration.fillOption(
        BFillOptions.valueOf(
            Optional.ofNullable(timeSeriesOptions.getFillOption()).orElse("NONE")));

    configuration.timeToLive(Duration.millis(timeSeriesOptions.getTimeToLiveMillis()));

    return configuration.build();
  }
}
