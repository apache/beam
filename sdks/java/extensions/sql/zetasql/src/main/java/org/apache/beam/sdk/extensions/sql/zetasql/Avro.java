package org.apache.beam.sdk.extensions.sql.zetasql;

/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Avro extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Avro\",\"fields\":[{\"name\":\"StringField\",\"type\":\"string\"},{\"name\":\"IntField\",\"type\":\"int\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence StringField;
  @Deprecated public int IntField;

  /**
   * Default constructor.
   */
  public Avro() {}

  /**
   * All-args constructor.
   */
  public Avro(java.lang.CharSequence StringField, java.lang.Integer IntField) {
    this.StringField = StringField;
    this.IntField = IntField;
  }

@Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
      case 0: return StringField;
      case 1: return IntField;
      default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  @Override
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
      case 0: StringField = (java.lang.CharSequence)value$; break;
      case 1: IntField = (java.lang.Integer)value$; break;
      default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'StringField' field.
   */
  public java.lang.CharSequence getStringField() {
    return StringField;
  }

  /**
   * Sets the value of the 'StringField' field.
   * @param value the value to set.
   */
  public void setStringField(java.lang.CharSequence value) {
    this.StringField = value;
  }

  /**
   * Gets the value of the 'IntField' field.
   */
  public java.lang.Integer getIntField() {
    return IntField;
  }

  /**
   * Sets the value of the 'IntField' field.
   * @param value the value to set.
   */
  public void setIntField(java.lang.Integer value) {
    this.IntField = value;
  }

  /** Creates a new Avro RecordBuilder */
  public static Avro.Builder newBuilder() {
    return new Avro.Builder();
  }

  /** Creates a new Avro RecordBuilder by copying an existing Builder */
  public static Avro.Builder newBuilder(Avro.Builder other) {
    return new Avro.Builder(other);
  }

  /** Creates a new Avro RecordBuilder by copying an existing Avro instance */
  public static Avro.Builder newBuilder(Avro other) {
    return new Avro.Builder(other);
  }

  /**
   * RecordBuilder for Avro instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Avro>
      implements org.apache.avro.data.RecordBuilder<Avro> {

    private java.lang.CharSequence StringField;
    private int IntField;

    /** Creates a new Builder */
    private Builder() {
      super(Avro.SCHEMA$);
    }

    /** Creates a Builder by copying an existing Builder */
    private Builder(Avro.Builder other) {
      super(other);
    }

    /** Creates a Builder by copying an existing Avro instance */
    private Builder(Avro other) {
      super(Avro.SCHEMA$);
      if (isValidValue(fields()[0], other.StringField)) {
        this.StringField = data().deepCopy(fields()[0].schema(), other.StringField);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.IntField)) {
        this.IntField = data().deepCopy(fields()[1].schema(), other.IntField);
        fieldSetFlags()[1] = true;
      }
    }

    /** Gets the value of the 'StringField' field */
    public java.lang.CharSequence getStringField() {
      return StringField;
    }

    /** Sets the value of the 'StringField' field */
    public Avro.Builder setStringField(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.StringField = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /** Checks whether the 'StringField' field has been set */
    public boolean hasStringField() {
      return fieldSetFlags()[0];
    }

    /** Clears the value of the 'StringField' field */
    public Avro.Builder clearStringField() {
      StringField = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'IntField' field */
    public java.lang.Integer getIntField() {
      return IntField;
    }

    /** Sets the value of the 'IntField' field */
    public Avro.Builder setIntField(int value) {
      validate(fields()[1], value);
      this.IntField = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /** Checks whether the 'IntField' field has been set */
    public boolean hasIntField() {
      return fieldSetFlags()[1];
    }

    /** Clears the value of the 'IntField' field */
    public Avro.Builder clearIntField() {
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public Avro build() {
      try {
        Avro record = new Avro();
        record.StringField = fieldSetFlags()[0] ? this.StringField : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.IntField = fieldSetFlags()[1] ? this.IntField : (java.lang.Integer) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
