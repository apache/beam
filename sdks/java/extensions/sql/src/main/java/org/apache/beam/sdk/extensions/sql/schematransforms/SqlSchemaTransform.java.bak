/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.beam.sdk.extensions.sql.schematransforms;

import com.google.auto.service.AutoService;
import java.util.Collections;
import java.util.List;
import org.apache.beam.sdk.extensions.sql.SqlTransform;
import org.apache.beam.sdk.schemas.Schema;
import org.apache.beam.sdk.schemas.transforms.SchemaTransform;
import org.apache.beam.sdk.schemas.transforms.SchemaTransformProvider;
import org.apache.beam.sdk.transforms.PTransform;
import org.apache.beam.sdk.values.PCollectionRowTuple;
import org.apache.beam.sdk.values.Row;

public class SqlSchemaTransform implements SchemaTransform {

  @AutoService(SchemaTransformProvider.class)
  public static class SqlProjectAndPredicateSchemaTransformProvider
      implements SchemaTransformProvider {

    @Override
    public String identifier() {
      return "sql:project-and-predicate";
    }

    @Override
    public Schema configurationSchema() {
      return Schema.builder().addStringField("sqlQuery").build();
    }

    @Override
    public SchemaTransform from(Row configuration) {
      return new SqlSchemaTransform(configuration.getString("sqlQuery"));
    }

    @Override
    public List<String> inputCollectionNames() {
      return Collections.singletonList("input");
    }

    @Override
    public List<String> outputCollectionNames() {
      return Collections.singletonList("output");
    }
  }

  private final String sqlQuery;

  SqlSchemaTransform(String sqlQuery) {
    this.sqlQuery = sqlQuery;
  }

  @Override
  public PTransform<PCollectionRowTuple, PCollectionRowTuple> buildTransform() {
    return new PTransform<PCollectionRowTuple, PCollectionRowTuple>() {
      @Override
      public PCollectionRowTuple expand(PCollectionRowTuple input) {
        return PCollectionRowTuple.of(
            "output", input.get("input").apply(SqlTransform.query(sqlQuery)));
      }
    };
  }
}
