// Licensed to the Apache Software Foundation (ASF) under one or more
// contributor license agreements.  See the NOTICE file distributed with
// this work for additional information regarding copyright ownership.
// The ASF licenses this file to You under the Apache License, Version 2.0
// (the "License"); you may not use this file except in compliance with
// the License.  You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package reflectx

import "reflect"

// Generated arity-specialized Func implementations to avoid runtime temporary
// slices. Code that knows the arity can potentially avoid that overhead in
// addition to avoiding the reflection call overhead.
//
// We force FuncXxY to implement Func as well to have a single registry. Concrete
// Func implementations should implement the most specific supported variant. This
// also allows more specific intermediate interfaces, such as Func2xbool, to be added
// later.

{{range $in := upto 8}}
{{range $out := upto 4}}
type Func{{$in}}x{{$out}} interface {
    Func
    Call{{$in}}x{{$out}}({{mktuple $in "interface{}"}}) ({{mktuple $out "interface{}"}})
}

type shimFunc{{$in}}x{{$out}} struct {
    inner Func
}

func (c *shimFunc{{$in}}x{{$out}}) Name() string {
   return c.inner.Name()
}

func (c *shimFunc{{$in}}x{{$out}}) Type() reflect.Type {
   return c.inner.Type()
}

func (c *shimFunc{{$in}}x{{$out}}) Call(args []interface{}) []interface{} {
   return c.inner.Call(args)
}

func (c *shimFunc{{$in}}x{{$out}}) Call{{$in}}x{{$out}}({{mkargs $in "arg%v" "interface{}"}}) ({{mktuple $out "interface{}"}}) {
   ret := c.inner.Call([]interface{}{ {{mktuplef $in "arg%v"}} })
   _ = ret
   return {{mktuplef $out "ret[%v]"}}
}

func ToFunc{{$in}}x{{$out}}(c Func) Func{{$in}}x{{$out}} {
    if c.Type().NumIn() != {{$in}} || c.Type().NumOut() != {{$out}} {
        panic("incompatible func type")
    }
    if sc, ok := c.(Func{{$in}}x{{$out}}); ok {
        return sc
    }
    return &shimFunc{{$in}}x{{$out}}{inner: c}
}

func MakeFunc{{$in}}x{{$out}}(fn interface{}) Func{{$in}}x{{$out}} {
    return ToFunc{{$in}}x{{$out}}(MakeFunc(fn))
}
{{end}}
{{end}}
