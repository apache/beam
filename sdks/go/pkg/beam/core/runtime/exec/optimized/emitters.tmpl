// Licensed to the Apache Software Foundation (ASF) under one or more
// contributor license agreements.  See the NOTICE file distributed with
// this work for additional information regarding copyright ownership.
// The ASF licenses this file to You under the Apache License, Version 2.0
// (the "License"); you may not use this file except in compliance with
// the License.  You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package {{.Package}}

import (
   	"context"
    "reflect"

    "github.com/apache/beam/sdks/go/pkg/beam/core/runtime/exec"
  	"github.com/apache/beam/sdks/go/pkg/beam/core/typex"
{{- range $import := .Imports}}
    "{{$import}}"
{{- end}}
)

func init() {
{{- range $x := .X}}
    exec.RegisterEmitter(reflect.TypeOf((*func ({{$x.Type}}))(nil)).Elem(), emitMaker{{$x.Name}})
    exec.RegisterEmitter(reflect.TypeOf((*func (typex.EventTime, {{$x.Type}}))(nil)).Elem(), emitMakerET{{$x.Name}})
{{- range $y := .Y}}
    exec.RegisterEmitter(reflect.TypeOf((*func ({{$x.Type}}, {{$y.Type}}))(nil)).Elem(), emitMaker{{$x.Name}}{{$y.Name}})
    exec.RegisterEmitter(reflect.TypeOf((*func (typex.EventTime, {{$x.Type}}, {{$y.Type}}))(nil)).Elem(), emitMakerET{{$x.Name}}{{$y.Name}})
{{- end}}
{{- end}}
}

type emitNative struct {
	n     exec.ElementProcessor
	fn    interface{}

	ctx context.Context
	et  typex.EventTime
}

func (e *emitNative) Init(ctx context.Context, et typex.EventTime) error {
	e.ctx = ctx
	e.et = et
	return nil
}

func (e *emitNative) Value() interface{} {
	return e.fn
}

{{range $x := .X}}
func emitMaker{{$x.Name}}(n exec.ElementProcessor) exec.ReusableEmitter {
    ret := &emitNative{n: n}
    ret.fn = ret.invoke{{$x.Name}}
    return ret
}

func (e *emitNative) invoke{{$x.Name}}(elm {{$x.Type}}) {
	value := exec.FullValue{Timestamp: e.et, Elm: elm }
	if err := e.n.ProcessElement(e.ctx, value); err != nil {
		panic(err)
	}
}

func emitMakerET{{$x.Name}}(n exec.ElementProcessor) exec.ReusableEmitter {
    ret := &emitNative{n: n}
    ret.fn = ret.invokeET{{$x.Name}}
    return ret
}

func (e *emitNative) invokeET{{$x.Name}}(t typex.EventTime, elm {{$x.Type}}) {
	value := exec.FullValue{Timestamp: t, Elm: elm }
	if err := e.n.ProcessElement(e.ctx, value); err != nil {
		panic(err)
	}
}

{{range $y := .Y}}
func emitMaker{{$x.Name}}{{$y.Name}}(n exec.ElementProcessor) exec.ReusableEmitter {
    ret := &emitNative{n: n}
    ret.fn = ret.invoke{{$x.Name}}{{$y.Name}}
    return ret
}

func (e *emitNative) invoke{{$x.Name}}{{$y.Name}}(key {{$x.Type}}, val {{$y.Type}}) {
	value := exec.FullValue{Timestamp: e.et, Elm: key, Elm2: val }
	if err := e.n.ProcessElement(e.ctx, value); err != nil {
		panic(err)
	}
}

func emitMakerET{{$x.Name}}{{$y.Name}}(n exec.ElementProcessor) exec.ReusableEmitter {
    ret := &emitNative{n: n}
    ret.fn = ret.invokeET{{$x.Name}}{{$y.Name}}
    return ret
}

func (e *emitNative) invokeET{{$x.Name}}{{$y.Name}}(t typex.EventTime, key {{$x.Type}}, val {{$y.Type}}) {
	value := exec.FullValue{Timestamp: t, Elm: key, Elm2: val }
	if err := e.n.ProcessElement(e.ctx, value); err != nil {
		panic(err)
	}
}
{{end}}
{{end}}
