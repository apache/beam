// Licensed to the Apache Software Foundation (ASF) under one or more
// contributor license agreements.  See the NOTICE file distributed with
// this work for additional information regarding copyright ownership.
// The ASF licenses this file to You under the Apache License, Version 2.0
// (the "License"); you may not use this file except in compliance with
// the License.  You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package {{.Package}}

import (
    "reflect"

  	"github.com/apache/beam/sdks/go/pkg/beam/core/util/reflectx"
{{- range $import := .Imports}}
    "{{$import}}"
{{- end}}
)

// TODO(herohde) 1/4/2018: Potential targets for type-specialization include simple predicate,
// dofn and combiner forms.
//
//   (1) func(X) bool                    // unary predicate
//   (2) func(X, X) X                    // binary combiner merge
//   (3) func(ctx?, X) (X, error?)       // simple DoFn with direct output
//   (4) func(ctx?, X, func(X)) (error?) // simple DoFn with emitter
//
// For now, we just do #2.

func init() {
{{- range $x := .X}}
    reflectx.RegisterFunc(reflect.TypeOf((*func ({{$x.Type}}, {{$x.Type}}){{$x.Type}})(nil)).Elem(), funcMaker{{$x.Name}}M)
{{- end}}
}

{{range $x := .X}}
type native{{$x.Name}}MFunc struct {
	fn    func ({{$x.Type}}, {{$x.Type}}){{$x.Type}}
}

func funcMaker{{$x.Name}}M(fn interface{}) reflectx.Func {
    f := fn.(func ({{$x.Type}}, {{$x.Type}}){{$x.Type}})
    return &native{{$x.Name}}MFunc{fn: f}
}

func (c *native{{$x.Name}}MFunc) Name() string {
    return reflectx.FunctionName(c.fn)
}

func (c *native{{$x.Name}}MFunc) Type() reflect.Type {
    return reflect.TypeOf(c.fn)
}

func (c *native{{$x.Name}}MFunc) Call(args []interface{}) []interface{} {
    out := c.fn(args[0].({{$x.Type}}), args[1].({{$x.Type}}))
    return []interface{}{out}
}

func (c *native{{$x.Name}}MFunc) Call2x1(a, b interface{}) interface{} {
    return c.fn(a.({{$x.Type}}), b.({{$x.Type}}))
}
{{end}}
