// Licensed to the Apache Software Foundation (ASF) under one or more
// contributor license agreements.  See the NOTICE file distributed with
// this work for additional information regarding copyright ownership.
// The ASF licenses this file to You under the Apache License, Version 2.0
// (the "License"); you may not use this file except in compliance with
// the License.  You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package {{.Package}}

import (
    "reflect"

  	"github.com/apache/beam/sdks/go/pkg/beam/core/util/reflectx"
{{- range $import := .Imports}}
    "{{$import}}"
{{- end}}
)

// This template registers all forms of encoders as general
// reflectx.Func specializations for each X.

func init() {
{{- range $x := .X}}
    reflectx.RegisterFunc(reflect.TypeOf((*func ({{$x.Type}}) []byte)(nil)).Elem(), encoderMaker{{$x.Name}})
    reflectx.RegisterFunc(reflect.TypeOf((*func ({{$x.Type}}) ([]byte, error))(nil)).Elem(), encoderMaker{{$x.Name}}E)
    reflectx.RegisterFunc(reflect.TypeOf((*func (reflect.Type, {{$x.Type}}) []byte)(nil)).Elem(), encoderMakerT{{$x.Name}})
    reflectx.RegisterFunc(reflect.TypeOf((*func (reflect.Type, {{$x.Type}}) ([]byte, error))(nil)).Elem(), encoderMakerT{{$x.Name}}E)
{{- end}}
}

{{range $x := .X}}
type encoder{{$x.Name}} struct {
	fn    func ({{$x.Type}})[]byte
}

func encoderMaker{{$x.Name}}(fn interface{}) reflectx.Func {
    f := fn.(func ({{$x.Type}})[]byte)
    return &encoder{{$x.Name}}{fn: f}
}

func (c *encoder{{$x.Name}}) Name() string {
    return reflectx.FunctionName(c.fn)
}

func (c *encoder{{$x.Name}}) Type() reflect.Type {
    return reflect.TypeOf(c.fn)
}

func (c *encoder{{$x.Name}}) Call(args []interface{}) []interface{} {
    out := c.fn(args[0].({{$x.Type}}))
    return []interface{}{out}
}

func (c *encoder{{$x.Name}}) Call1x1(v interface{}) interface{} {
    return c.fn(v.({{$x.Type}}))
}


type encoder{{$x.Name}}E struct {
	fn    func ({{$x.Type}}) ([]byte, error)
}

func encoderMaker{{$x.Name}}E(fn interface{}) reflectx.Func {
    f := fn.(func ({{$x.Type}})([]byte, error))
    return &encoder{{$x.Name}}E{fn: f}
}

func (c *encoder{{$x.Name}}E) Name() string {
    return reflectx.FunctionName(c.fn)
}

func (c *encoder{{$x.Name}}E) Type() reflect.Type {
    return reflect.TypeOf(c.fn)
}

func (c *encoder{{$x.Name}}E) Call(args []interface{}) []interface{} {
    v, err := c.fn(args[0].({{$x.Type}}))
    return []interface{}{v, err}
}

func (c *encoder{{$x.Name}}E) Call1x2(v interface{}) (interface{}, interface{}) {
    return c.fn(v.({{$x.Type}}))
}

type encoderT{{$x.Name}} struct {
	fn    func (reflect.Type, {{$x.Type}})[]byte
}

func encoderMakerT{{$x.Name}}(fn interface{}) reflectx.Func {
    f := fn.(func (reflect.Type, {{$x.Type}})[]byte)
    return &encoderT{{$x.Name}}{fn: f}
}

func (c *encoderT{{$x.Name}}) Name() string {
    return reflectx.FunctionName(c.fn)
}

func (c *encoderT{{$x.Name}}) Type() reflect.Type {
    return reflect.TypeOf(c.fn)
}

func (c *encoderT{{$x.Name}}) Call(args []interface{}) []interface{} {
    out := c.fn(args[0].(reflect.Type), args[1].({{$x.Type}}))
    return []interface{}{out}
}

func (c *encoderT{{$x.Name}}) Call2x1(t, v interface{}) interface{} {
    return c.fn(t.(reflect.Type), v.({{$x.Type}}))
}


type encoderT{{$x.Name}}E struct {
	fn    func (reflect.Type, {{$x.Type}}) ([]byte, error)
}

func encoderMakerT{{$x.Name}}E(fn interface{}) reflectx.Func {
    f := fn.(func (reflect.Type, {{$x.Type}})([]byte, error))
    return &encoderT{{$x.Name}}E{fn: f}
}

func (c *encoderT{{$x.Name}}E) Name() string {
    return reflectx.FunctionName(c.fn)
}

func (c *encoderT{{$x.Name}}E) Type() reflect.Type {
    return reflect.TypeOf(c.fn)
}

func (c *encoderT{{$x.Name}}E) Call(args []interface{}) []interface{} {
    val, err := c.fn(args[0].(reflect.Type), args[1].({{$x.Type}}))
    return []interface{}{val, err}
}

func (c *encoderT{{$x.Name}}E) Call2x2(t, v interface{}) (interface{}, interface{}) {
    return c.fn(t.(reflect.Type), v.({{$x.Type}}))
}

{{end}}
