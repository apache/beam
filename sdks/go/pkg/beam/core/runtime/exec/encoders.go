// File generated by specialize. Do not edit.

// Licensed to the Apache Software Foundation (ASF) under one or more
// contributor license agreements.  See the NOTICE file distributed with
// this work for additional information regarding copyright ownership.
// The ASF licenses this file to You under the Apache License, Version 2.0
// (the "License"); you may not use this file except in compliance with
// the License.  You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package exec

import (
	"reflect"

	"github.com/apache/beam/sdks/go/pkg/beam/core/typex"
)

func init() {
	RegisterEncoder(reflect.TypeOf((*func([]byte) []byte)(nil)).Elem(), encoderMakerByteSlice)
	RegisterEncoder(reflect.TypeOf((*func([]byte) ([]byte, error))(nil)).Elem(), encoderMakerByteSliceE)
	RegisterEncoder(reflect.TypeOf((*func(reflect.Type, []byte) []byte)(nil)).Elem(), encoderMakerTByteSlice)
	RegisterEncoder(reflect.TypeOf((*func(reflect.Type, []byte) ([]byte, error))(nil)).Elem(), encoderMakerTByteSliceE)
	RegisterEncoder(reflect.TypeOf((*func(bool) []byte)(nil)).Elem(), encoderMakerBool)
	RegisterEncoder(reflect.TypeOf((*func(bool) ([]byte, error))(nil)).Elem(), encoderMakerBoolE)
	RegisterEncoder(reflect.TypeOf((*func(reflect.Type, bool) []byte)(nil)).Elem(), encoderMakerTBool)
	RegisterEncoder(reflect.TypeOf((*func(reflect.Type, bool) ([]byte, error))(nil)).Elem(), encoderMakerTBoolE)
	RegisterEncoder(reflect.TypeOf((*func(string) []byte)(nil)).Elem(), encoderMakerString)
	RegisterEncoder(reflect.TypeOf((*func(string) ([]byte, error))(nil)).Elem(), encoderMakerStringE)
	RegisterEncoder(reflect.TypeOf((*func(reflect.Type, string) []byte)(nil)).Elem(), encoderMakerTString)
	RegisterEncoder(reflect.TypeOf((*func(reflect.Type, string) ([]byte, error))(nil)).Elem(), encoderMakerTStringE)
	RegisterEncoder(reflect.TypeOf((*func(int) []byte)(nil)).Elem(), encoderMakerInt)
	RegisterEncoder(reflect.TypeOf((*func(int) ([]byte, error))(nil)).Elem(), encoderMakerIntE)
	RegisterEncoder(reflect.TypeOf((*func(reflect.Type, int) []byte)(nil)).Elem(), encoderMakerTInt)
	RegisterEncoder(reflect.TypeOf((*func(reflect.Type, int) ([]byte, error))(nil)).Elem(), encoderMakerTIntE)
	RegisterEncoder(reflect.TypeOf((*func(int8) []byte)(nil)).Elem(), encoderMakerInt8)
	RegisterEncoder(reflect.TypeOf((*func(int8) ([]byte, error))(nil)).Elem(), encoderMakerInt8E)
	RegisterEncoder(reflect.TypeOf((*func(reflect.Type, int8) []byte)(nil)).Elem(), encoderMakerTInt8)
	RegisterEncoder(reflect.TypeOf((*func(reflect.Type, int8) ([]byte, error))(nil)).Elem(), encoderMakerTInt8E)
	RegisterEncoder(reflect.TypeOf((*func(int16) []byte)(nil)).Elem(), encoderMakerInt16)
	RegisterEncoder(reflect.TypeOf((*func(int16) ([]byte, error))(nil)).Elem(), encoderMakerInt16E)
	RegisterEncoder(reflect.TypeOf((*func(reflect.Type, int16) []byte)(nil)).Elem(), encoderMakerTInt16)
	RegisterEncoder(reflect.TypeOf((*func(reflect.Type, int16) ([]byte, error))(nil)).Elem(), encoderMakerTInt16E)
	RegisterEncoder(reflect.TypeOf((*func(int32) []byte)(nil)).Elem(), encoderMakerInt32)
	RegisterEncoder(reflect.TypeOf((*func(int32) ([]byte, error))(nil)).Elem(), encoderMakerInt32E)
	RegisterEncoder(reflect.TypeOf((*func(reflect.Type, int32) []byte)(nil)).Elem(), encoderMakerTInt32)
	RegisterEncoder(reflect.TypeOf((*func(reflect.Type, int32) ([]byte, error))(nil)).Elem(), encoderMakerTInt32E)
	RegisterEncoder(reflect.TypeOf((*func(int64) []byte)(nil)).Elem(), encoderMakerInt64)
	RegisterEncoder(reflect.TypeOf((*func(int64) ([]byte, error))(nil)).Elem(), encoderMakerInt64E)
	RegisterEncoder(reflect.TypeOf((*func(reflect.Type, int64) []byte)(nil)).Elem(), encoderMakerTInt64)
	RegisterEncoder(reflect.TypeOf((*func(reflect.Type, int64) ([]byte, error))(nil)).Elem(), encoderMakerTInt64E)
	RegisterEncoder(reflect.TypeOf((*func(uint) []byte)(nil)).Elem(), encoderMakerUint)
	RegisterEncoder(reflect.TypeOf((*func(uint) ([]byte, error))(nil)).Elem(), encoderMakerUintE)
	RegisterEncoder(reflect.TypeOf((*func(reflect.Type, uint) []byte)(nil)).Elem(), encoderMakerTUint)
	RegisterEncoder(reflect.TypeOf((*func(reflect.Type, uint) ([]byte, error))(nil)).Elem(), encoderMakerTUintE)
	RegisterEncoder(reflect.TypeOf((*func(uint8) []byte)(nil)).Elem(), encoderMakerUint8)
	RegisterEncoder(reflect.TypeOf((*func(uint8) ([]byte, error))(nil)).Elem(), encoderMakerUint8E)
	RegisterEncoder(reflect.TypeOf((*func(reflect.Type, uint8) []byte)(nil)).Elem(), encoderMakerTUint8)
	RegisterEncoder(reflect.TypeOf((*func(reflect.Type, uint8) ([]byte, error))(nil)).Elem(), encoderMakerTUint8E)
	RegisterEncoder(reflect.TypeOf((*func(uint16) []byte)(nil)).Elem(), encoderMakerUint16)
	RegisterEncoder(reflect.TypeOf((*func(uint16) ([]byte, error))(nil)).Elem(), encoderMakerUint16E)
	RegisterEncoder(reflect.TypeOf((*func(reflect.Type, uint16) []byte)(nil)).Elem(), encoderMakerTUint16)
	RegisterEncoder(reflect.TypeOf((*func(reflect.Type, uint16) ([]byte, error))(nil)).Elem(), encoderMakerTUint16E)
	RegisterEncoder(reflect.TypeOf((*func(uint32) []byte)(nil)).Elem(), encoderMakerUint32)
	RegisterEncoder(reflect.TypeOf((*func(uint32) ([]byte, error))(nil)).Elem(), encoderMakerUint32E)
	RegisterEncoder(reflect.TypeOf((*func(reflect.Type, uint32) []byte)(nil)).Elem(), encoderMakerTUint32)
	RegisterEncoder(reflect.TypeOf((*func(reflect.Type, uint32) ([]byte, error))(nil)).Elem(), encoderMakerTUint32E)
	RegisterEncoder(reflect.TypeOf((*func(uint64) []byte)(nil)).Elem(), encoderMakerUint64)
	RegisterEncoder(reflect.TypeOf((*func(uint64) ([]byte, error))(nil)).Elem(), encoderMakerUint64E)
	RegisterEncoder(reflect.TypeOf((*func(reflect.Type, uint64) []byte)(nil)).Elem(), encoderMakerTUint64)
	RegisterEncoder(reflect.TypeOf((*func(reflect.Type, uint64) ([]byte, error))(nil)).Elem(), encoderMakerTUint64E)
	RegisterEncoder(reflect.TypeOf((*func(float32) []byte)(nil)).Elem(), encoderMakerFloat32)
	RegisterEncoder(reflect.TypeOf((*func(float32) ([]byte, error))(nil)).Elem(), encoderMakerFloat32E)
	RegisterEncoder(reflect.TypeOf((*func(reflect.Type, float32) []byte)(nil)).Elem(), encoderMakerTFloat32)
	RegisterEncoder(reflect.TypeOf((*func(reflect.Type, float32) ([]byte, error))(nil)).Elem(), encoderMakerTFloat32E)
	RegisterEncoder(reflect.TypeOf((*func(float64) []byte)(nil)).Elem(), encoderMakerFloat64)
	RegisterEncoder(reflect.TypeOf((*func(float64) ([]byte, error))(nil)).Elem(), encoderMakerFloat64E)
	RegisterEncoder(reflect.TypeOf((*func(reflect.Type, float64) []byte)(nil)).Elem(), encoderMakerTFloat64)
	RegisterEncoder(reflect.TypeOf((*func(reflect.Type, float64) ([]byte, error))(nil)).Elem(), encoderMakerTFloat64E)
	RegisterEncoder(reflect.TypeOf((*func(typex.T) []byte)(nil)).Elem(), encoderMakerTypex_T)
	RegisterEncoder(reflect.TypeOf((*func(typex.T) ([]byte, error))(nil)).Elem(), encoderMakerTypex_TE)
	RegisterEncoder(reflect.TypeOf((*func(reflect.Type, typex.T) []byte)(nil)).Elem(), encoderMakerTTypex_T)
	RegisterEncoder(reflect.TypeOf((*func(reflect.Type, typex.T) ([]byte, error))(nil)).Elem(), encoderMakerTTypex_TE)
	RegisterEncoder(reflect.TypeOf((*func(typex.U) []byte)(nil)).Elem(), encoderMakerTypex_U)
	RegisterEncoder(reflect.TypeOf((*func(typex.U) ([]byte, error))(nil)).Elem(), encoderMakerTypex_UE)
	RegisterEncoder(reflect.TypeOf((*func(reflect.Type, typex.U) []byte)(nil)).Elem(), encoderMakerTTypex_U)
	RegisterEncoder(reflect.TypeOf((*func(reflect.Type, typex.U) ([]byte, error))(nil)).Elem(), encoderMakerTTypex_UE)
	RegisterEncoder(reflect.TypeOf((*func(typex.V) []byte)(nil)).Elem(), encoderMakerTypex_V)
	RegisterEncoder(reflect.TypeOf((*func(typex.V) ([]byte, error))(nil)).Elem(), encoderMakerTypex_VE)
	RegisterEncoder(reflect.TypeOf((*func(reflect.Type, typex.V) []byte)(nil)).Elem(), encoderMakerTTypex_V)
	RegisterEncoder(reflect.TypeOf((*func(reflect.Type, typex.V) ([]byte, error))(nil)).Elem(), encoderMakerTTypex_VE)
	RegisterEncoder(reflect.TypeOf((*func(typex.W) []byte)(nil)).Elem(), encoderMakerTypex_W)
	RegisterEncoder(reflect.TypeOf((*func(typex.W) ([]byte, error))(nil)).Elem(), encoderMakerTypex_WE)
	RegisterEncoder(reflect.TypeOf((*func(reflect.Type, typex.W) []byte)(nil)).Elem(), encoderMakerTTypex_W)
	RegisterEncoder(reflect.TypeOf((*func(reflect.Type, typex.W) ([]byte, error))(nil)).Elem(), encoderMakerTTypex_WE)
	RegisterEncoder(reflect.TypeOf((*func(typex.X) []byte)(nil)).Elem(), encoderMakerTypex_X)
	RegisterEncoder(reflect.TypeOf((*func(typex.X) ([]byte, error))(nil)).Elem(), encoderMakerTypex_XE)
	RegisterEncoder(reflect.TypeOf((*func(reflect.Type, typex.X) []byte)(nil)).Elem(), encoderMakerTTypex_X)
	RegisterEncoder(reflect.TypeOf((*func(reflect.Type, typex.X) ([]byte, error))(nil)).Elem(), encoderMakerTTypex_XE)
	RegisterEncoder(reflect.TypeOf((*func(typex.Y) []byte)(nil)).Elem(), encoderMakerTypex_Y)
	RegisterEncoder(reflect.TypeOf((*func(typex.Y) ([]byte, error))(nil)).Elem(), encoderMakerTypex_YE)
	RegisterEncoder(reflect.TypeOf((*func(reflect.Type, typex.Y) []byte)(nil)).Elem(), encoderMakerTTypex_Y)
	RegisterEncoder(reflect.TypeOf((*func(reflect.Type, typex.Y) ([]byte, error))(nil)).Elem(), encoderMakerTTypex_YE)
	RegisterEncoder(reflect.TypeOf((*func(typex.Z) []byte)(nil)).Elem(), encoderMakerTypex_Z)
	RegisterEncoder(reflect.TypeOf((*func(typex.Z) ([]byte, error))(nil)).Elem(), encoderMakerTypex_ZE)
	RegisterEncoder(reflect.TypeOf((*func(reflect.Type, typex.Z) []byte)(nil)).Elem(), encoderMakerTTypex_Z)
	RegisterEncoder(reflect.TypeOf((*func(reflect.Type, typex.Z) ([]byte, error))(nil)).Elem(), encoderMakerTTypex_ZE)
}

type encoderByteSlice struct {
	fn func([]byte) []byte
}

func (e *encoderByteSlice) Encode(t reflect.Type, val reflect.Value) ([]byte, error) {
	return e.fn(val.Interface().([]byte)), nil
}

func encoderMakerByteSlice(fn reflect.Value) Encoder {
	return &encoderByteSlice{fn: fn.Interface().(func([]byte) []byte)}
}

type encoderByteSliceE struct {
	fn func([]byte) ([]byte, error)
}

func (e *encoderByteSliceE) Encode(t reflect.Type, val reflect.Value) ([]byte, error) {
	return e.fn(val.Interface().([]byte))
}

func encoderMakerByteSliceE(fn reflect.Value) Encoder {
	return &encoderByteSliceE{fn: fn.Interface().(func([]byte) ([]byte, error))}
}

type encoderTByteSlice struct {
	fn func(reflect.Type, []byte) []byte
}

func (e *encoderTByteSlice) Encode(t reflect.Type, val reflect.Value) ([]byte, error) {
	return e.fn(t, val.Interface().([]byte)), nil
}

func encoderMakerTByteSlice(fn reflect.Value) Encoder {
	return &encoderTByteSlice{fn: fn.Interface().(func(reflect.Type, []byte) []byte)}
}

type encoderTByteSliceE struct {
	fn func(reflect.Type, []byte) ([]byte, error)
}

func (e *encoderTByteSliceE) Encode(t reflect.Type, val reflect.Value) ([]byte, error) {
	return e.fn(t, val.Interface().([]byte))
}

func encoderMakerTByteSliceE(fn reflect.Value) Encoder {
	return &encoderTByteSliceE{fn: fn.Interface().(func(reflect.Type, []byte) ([]byte, error))}
}

type encoderBool struct {
	fn func(bool) []byte
}

func (e *encoderBool) Encode(t reflect.Type, val reflect.Value) ([]byte, error) {
	return e.fn(val.Interface().(bool)), nil
}

func encoderMakerBool(fn reflect.Value) Encoder {
	return &encoderBool{fn: fn.Interface().(func(bool) []byte)}
}

type encoderBoolE struct {
	fn func(bool) ([]byte, error)
}

func (e *encoderBoolE) Encode(t reflect.Type, val reflect.Value) ([]byte, error) {
	return e.fn(val.Interface().(bool))
}

func encoderMakerBoolE(fn reflect.Value) Encoder {
	return &encoderBoolE{fn: fn.Interface().(func(bool) ([]byte, error))}
}

type encoderTBool struct {
	fn func(reflect.Type, bool) []byte
}

func (e *encoderTBool) Encode(t reflect.Type, val reflect.Value) ([]byte, error) {
	return e.fn(t, val.Interface().(bool)), nil
}

func encoderMakerTBool(fn reflect.Value) Encoder {
	return &encoderTBool{fn: fn.Interface().(func(reflect.Type, bool) []byte)}
}

type encoderTBoolE struct {
	fn func(reflect.Type, bool) ([]byte, error)
}

func (e *encoderTBoolE) Encode(t reflect.Type, val reflect.Value) ([]byte, error) {
	return e.fn(t, val.Interface().(bool))
}

func encoderMakerTBoolE(fn reflect.Value) Encoder {
	return &encoderTBoolE{fn: fn.Interface().(func(reflect.Type, bool) ([]byte, error))}
}

type encoderString struct {
	fn func(string) []byte
}

func (e *encoderString) Encode(t reflect.Type, val reflect.Value) ([]byte, error) {
	return e.fn(val.Interface().(string)), nil
}

func encoderMakerString(fn reflect.Value) Encoder {
	return &encoderString{fn: fn.Interface().(func(string) []byte)}
}

type encoderStringE struct {
	fn func(string) ([]byte, error)
}

func (e *encoderStringE) Encode(t reflect.Type, val reflect.Value) ([]byte, error) {
	return e.fn(val.Interface().(string))
}

func encoderMakerStringE(fn reflect.Value) Encoder {
	return &encoderStringE{fn: fn.Interface().(func(string) ([]byte, error))}
}

type encoderTString struct {
	fn func(reflect.Type, string) []byte
}

func (e *encoderTString) Encode(t reflect.Type, val reflect.Value) ([]byte, error) {
	return e.fn(t, val.Interface().(string)), nil
}

func encoderMakerTString(fn reflect.Value) Encoder {
	return &encoderTString{fn: fn.Interface().(func(reflect.Type, string) []byte)}
}

type encoderTStringE struct {
	fn func(reflect.Type, string) ([]byte, error)
}

func (e *encoderTStringE) Encode(t reflect.Type, val reflect.Value) ([]byte, error) {
	return e.fn(t, val.Interface().(string))
}

func encoderMakerTStringE(fn reflect.Value) Encoder {
	return &encoderTStringE{fn: fn.Interface().(func(reflect.Type, string) ([]byte, error))}
}

type encoderInt struct {
	fn func(int) []byte
}

func (e *encoderInt) Encode(t reflect.Type, val reflect.Value) ([]byte, error) {
	return e.fn(val.Interface().(int)), nil
}

func encoderMakerInt(fn reflect.Value) Encoder {
	return &encoderInt{fn: fn.Interface().(func(int) []byte)}
}

type encoderIntE struct {
	fn func(int) ([]byte, error)
}

func (e *encoderIntE) Encode(t reflect.Type, val reflect.Value) ([]byte, error) {
	return e.fn(val.Interface().(int))
}

func encoderMakerIntE(fn reflect.Value) Encoder {
	return &encoderIntE{fn: fn.Interface().(func(int) ([]byte, error))}
}

type encoderTInt struct {
	fn func(reflect.Type, int) []byte
}

func (e *encoderTInt) Encode(t reflect.Type, val reflect.Value) ([]byte, error) {
	return e.fn(t, val.Interface().(int)), nil
}

func encoderMakerTInt(fn reflect.Value) Encoder {
	return &encoderTInt{fn: fn.Interface().(func(reflect.Type, int) []byte)}
}

type encoderTIntE struct {
	fn func(reflect.Type, int) ([]byte, error)
}

func (e *encoderTIntE) Encode(t reflect.Type, val reflect.Value) ([]byte, error) {
	return e.fn(t, val.Interface().(int))
}

func encoderMakerTIntE(fn reflect.Value) Encoder {
	return &encoderTIntE{fn: fn.Interface().(func(reflect.Type, int) ([]byte, error))}
}

type encoderInt8 struct {
	fn func(int8) []byte
}

func (e *encoderInt8) Encode(t reflect.Type, val reflect.Value) ([]byte, error) {
	return e.fn(val.Interface().(int8)), nil
}

func encoderMakerInt8(fn reflect.Value) Encoder {
	return &encoderInt8{fn: fn.Interface().(func(int8) []byte)}
}

type encoderInt8E struct {
	fn func(int8) ([]byte, error)
}

func (e *encoderInt8E) Encode(t reflect.Type, val reflect.Value) ([]byte, error) {
	return e.fn(val.Interface().(int8))
}

func encoderMakerInt8E(fn reflect.Value) Encoder {
	return &encoderInt8E{fn: fn.Interface().(func(int8) ([]byte, error))}
}

type encoderTInt8 struct {
	fn func(reflect.Type, int8) []byte
}

func (e *encoderTInt8) Encode(t reflect.Type, val reflect.Value) ([]byte, error) {
	return e.fn(t, val.Interface().(int8)), nil
}

func encoderMakerTInt8(fn reflect.Value) Encoder {
	return &encoderTInt8{fn: fn.Interface().(func(reflect.Type, int8) []byte)}
}

type encoderTInt8E struct {
	fn func(reflect.Type, int8) ([]byte, error)
}

func (e *encoderTInt8E) Encode(t reflect.Type, val reflect.Value) ([]byte, error) {
	return e.fn(t, val.Interface().(int8))
}

func encoderMakerTInt8E(fn reflect.Value) Encoder {
	return &encoderTInt8E{fn: fn.Interface().(func(reflect.Type, int8) ([]byte, error))}
}

type encoderInt16 struct {
	fn func(int16) []byte
}

func (e *encoderInt16) Encode(t reflect.Type, val reflect.Value) ([]byte, error) {
	return e.fn(val.Interface().(int16)), nil
}

func encoderMakerInt16(fn reflect.Value) Encoder {
	return &encoderInt16{fn: fn.Interface().(func(int16) []byte)}
}

type encoderInt16E struct {
	fn func(int16) ([]byte, error)
}

func (e *encoderInt16E) Encode(t reflect.Type, val reflect.Value) ([]byte, error) {
	return e.fn(val.Interface().(int16))
}

func encoderMakerInt16E(fn reflect.Value) Encoder {
	return &encoderInt16E{fn: fn.Interface().(func(int16) ([]byte, error))}
}

type encoderTInt16 struct {
	fn func(reflect.Type, int16) []byte
}

func (e *encoderTInt16) Encode(t reflect.Type, val reflect.Value) ([]byte, error) {
	return e.fn(t, val.Interface().(int16)), nil
}

func encoderMakerTInt16(fn reflect.Value) Encoder {
	return &encoderTInt16{fn: fn.Interface().(func(reflect.Type, int16) []byte)}
}

type encoderTInt16E struct {
	fn func(reflect.Type, int16) ([]byte, error)
}

func (e *encoderTInt16E) Encode(t reflect.Type, val reflect.Value) ([]byte, error) {
	return e.fn(t, val.Interface().(int16))
}

func encoderMakerTInt16E(fn reflect.Value) Encoder {
	return &encoderTInt16E{fn: fn.Interface().(func(reflect.Type, int16) ([]byte, error))}
}

type encoderInt32 struct {
	fn func(int32) []byte
}

func (e *encoderInt32) Encode(t reflect.Type, val reflect.Value) ([]byte, error) {
	return e.fn(val.Interface().(int32)), nil
}

func encoderMakerInt32(fn reflect.Value) Encoder {
	return &encoderInt32{fn: fn.Interface().(func(int32) []byte)}
}

type encoderInt32E struct {
	fn func(int32) ([]byte, error)
}

func (e *encoderInt32E) Encode(t reflect.Type, val reflect.Value) ([]byte, error) {
	return e.fn(val.Interface().(int32))
}

func encoderMakerInt32E(fn reflect.Value) Encoder {
	return &encoderInt32E{fn: fn.Interface().(func(int32) ([]byte, error))}
}

type encoderTInt32 struct {
	fn func(reflect.Type, int32) []byte
}

func (e *encoderTInt32) Encode(t reflect.Type, val reflect.Value) ([]byte, error) {
	return e.fn(t, val.Interface().(int32)), nil
}

func encoderMakerTInt32(fn reflect.Value) Encoder {
	return &encoderTInt32{fn: fn.Interface().(func(reflect.Type, int32) []byte)}
}

type encoderTInt32E struct {
	fn func(reflect.Type, int32) ([]byte, error)
}

func (e *encoderTInt32E) Encode(t reflect.Type, val reflect.Value) ([]byte, error) {
	return e.fn(t, val.Interface().(int32))
}

func encoderMakerTInt32E(fn reflect.Value) Encoder {
	return &encoderTInt32E{fn: fn.Interface().(func(reflect.Type, int32) ([]byte, error))}
}

type encoderInt64 struct {
	fn func(int64) []byte
}

func (e *encoderInt64) Encode(t reflect.Type, val reflect.Value) ([]byte, error) {
	return e.fn(val.Interface().(int64)), nil
}

func encoderMakerInt64(fn reflect.Value) Encoder {
	return &encoderInt64{fn: fn.Interface().(func(int64) []byte)}
}

type encoderInt64E struct {
	fn func(int64) ([]byte, error)
}

func (e *encoderInt64E) Encode(t reflect.Type, val reflect.Value) ([]byte, error) {
	return e.fn(val.Interface().(int64))
}

func encoderMakerInt64E(fn reflect.Value) Encoder {
	return &encoderInt64E{fn: fn.Interface().(func(int64) ([]byte, error))}
}

type encoderTInt64 struct {
	fn func(reflect.Type, int64) []byte
}

func (e *encoderTInt64) Encode(t reflect.Type, val reflect.Value) ([]byte, error) {
	return e.fn(t, val.Interface().(int64)), nil
}

func encoderMakerTInt64(fn reflect.Value) Encoder {
	return &encoderTInt64{fn: fn.Interface().(func(reflect.Type, int64) []byte)}
}

type encoderTInt64E struct {
	fn func(reflect.Type, int64) ([]byte, error)
}

func (e *encoderTInt64E) Encode(t reflect.Type, val reflect.Value) ([]byte, error) {
	return e.fn(t, val.Interface().(int64))
}

func encoderMakerTInt64E(fn reflect.Value) Encoder {
	return &encoderTInt64E{fn: fn.Interface().(func(reflect.Type, int64) ([]byte, error))}
}

type encoderUint struct {
	fn func(uint) []byte
}

func (e *encoderUint) Encode(t reflect.Type, val reflect.Value) ([]byte, error) {
	return e.fn(val.Interface().(uint)), nil
}

func encoderMakerUint(fn reflect.Value) Encoder {
	return &encoderUint{fn: fn.Interface().(func(uint) []byte)}
}

type encoderUintE struct {
	fn func(uint) ([]byte, error)
}

func (e *encoderUintE) Encode(t reflect.Type, val reflect.Value) ([]byte, error) {
	return e.fn(val.Interface().(uint))
}

func encoderMakerUintE(fn reflect.Value) Encoder {
	return &encoderUintE{fn: fn.Interface().(func(uint) ([]byte, error))}
}

type encoderTUint struct {
	fn func(reflect.Type, uint) []byte
}

func (e *encoderTUint) Encode(t reflect.Type, val reflect.Value) ([]byte, error) {
	return e.fn(t, val.Interface().(uint)), nil
}

func encoderMakerTUint(fn reflect.Value) Encoder {
	return &encoderTUint{fn: fn.Interface().(func(reflect.Type, uint) []byte)}
}

type encoderTUintE struct {
	fn func(reflect.Type, uint) ([]byte, error)
}

func (e *encoderTUintE) Encode(t reflect.Type, val reflect.Value) ([]byte, error) {
	return e.fn(t, val.Interface().(uint))
}

func encoderMakerTUintE(fn reflect.Value) Encoder {
	return &encoderTUintE{fn: fn.Interface().(func(reflect.Type, uint) ([]byte, error))}
}

type encoderUint8 struct {
	fn func(uint8) []byte
}

func (e *encoderUint8) Encode(t reflect.Type, val reflect.Value) ([]byte, error) {
	return e.fn(val.Interface().(uint8)), nil
}

func encoderMakerUint8(fn reflect.Value) Encoder {
	return &encoderUint8{fn: fn.Interface().(func(uint8) []byte)}
}

type encoderUint8E struct {
	fn func(uint8) ([]byte, error)
}

func (e *encoderUint8E) Encode(t reflect.Type, val reflect.Value) ([]byte, error) {
	return e.fn(val.Interface().(uint8))
}

func encoderMakerUint8E(fn reflect.Value) Encoder {
	return &encoderUint8E{fn: fn.Interface().(func(uint8) ([]byte, error))}
}

type encoderTUint8 struct {
	fn func(reflect.Type, uint8) []byte
}

func (e *encoderTUint8) Encode(t reflect.Type, val reflect.Value) ([]byte, error) {
	return e.fn(t, val.Interface().(uint8)), nil
}

func encoderMakerTUint8(fn reflect.Value) Encoder {
	return &encoderTUint8{fn: fn.Interface().(func(reflect.Type, uint8) []byte)}
}

type encoderTUint8E struct {
	fn func(reflect.Type, uint8) ([]byte, error)
}

func (e *encoderTUint8E) Encode(t reflect.Type, val reflect.Value) ([]byte, error) {
	return e.fn(t, val.Interface().(uint8))
}

func encoderMakerTUint8E(fn reflect.Value) Encoder {
	return &encoderTUint8E{fn: fn.Interface().(func(reflect.Type, uint8) ([]byte, error))}
}

type encoderUint16 struct {
	fn func(uint16) []byte
}

func (e *encoderUint16) Encode(t reflect.Type, val reflect.Value) ([]byte, error) {
	return e.fn(val.Interface().(uint16)), nil
}

func encoderMakerUint16(fn reflect.Value) Encoder {
	return &encoderUint16{fn: fn.Interface().(func(uint16) []byte)}
}

type encoderUint16E struct {
	fn func(uint16) ([]byte, error)
}

func (e *encoderUint16E) Encode(t reflect.Type, val reflect.Value) ([]byte, error) {
	return e.fn(val.Interface().(uint16))
}

func encoderMakerUint16E(fn reflect.Value) Encoder {
	return &encoderUint16E{fn: fn.Interface().(func(uint16) ([]byte, error))}
}

type encoderTUint16 struct {
	fn func(reflect.Type, uint16) []byte
}

func (e *encoderTUint16) Encode(t reflect.Type, val reflect.Value) ([]byte, error) {
	return e.fn(t, val.Interface().(uint16)), nil
}

func encoderMakerTUint16(fn reflect.Value) Encoder {
	return &encoderTUint16{fn: fn.Interface().(func(reflect.Type, uint16) []byte)}
}

type encoderTUint16E struct {
	fn func(reflect.Type, uint16) ([]byte, error)
}

func (e *encoderTUint16E) Encode(t reflect.Type, val reflect.Value) ([]byte, error) {
	return e.fn(t, val.Interface().(uint16))
}

func encoderMakerTUint16E(fn reflect.Value) Encoder {
	return &encoderTUint16E{fn: fn.Interface().(func(reflect.Type, uint16) ([]byte, error))}
}

type encoderUint32 struct {
	fn func(uint32) []byte
}

func (e *encoderUint32) Encode(t reflect.Type, val reflect.Value) ([]byte, error) {
	return e.fn(val.Interface().(uint32)), nil
}

func encoderMakerUint32(fn reflect.Value) Encoder {
	return &encoderUint32{fn: fn.Interface().(func(uint32) []byte)}
}

type encoderUint32E struct {
	fn func(uint32) ([]byte, error)
}

func (e *encoderUint32E) Encode(t reflect.Type, val reflect.Value) ([]byte, error) {
	return e.fn(val.Interface().(uint32))
}

func encoderMakerUint32E(fn reflect.Value) Encoder {
	return &encoderUint32E{fn: fn.Interface().(func(uint32) ([]byte, error))}
}

type encoderTUint32 struct {
	fn func(reflect.Type, uint32) []byte
}

func (e *encoderTUint32) Encode(t reflect.Type, val reflect.Value) ([]byte, error) {
	return e.fn(t, val.Interface().(uint32)), nil
}

func encoderMakerTUint32(fn reflect.Value) Encoder {
	return &encoderTUint32{fn: fn.Interface().(func(reflect.Type, uint32) []byte)}
}

type encoderTUint32E struct {
	fn func(reflect.Type, uint32) ([]byte, error)
}

func (e *encoderTUint32E) Encode(t reflect.Type, val reflect.Value) ([]byte, error) {
	return e.fn(t, val.Interface().(uint32))
}

func encoderMakerTUint32E(fn reflect.Value) Encoder {
	return &encoderTUint32E{fn: fn.Interface().(func(reflect.Type, uint32) ([]byte, error))}
}

type encoderUint64 struct {
	fn func(uint64) []byte
}

func (e *encoderUint64) Encode(t reflect.Type, val reflect.Value) ([]byte, error) {
	return e.fn(val.Interface().(uint64)), nil
}

func encoderMakerUint64(fn reflect.Value) Encoder {
	return &encoderUint64{fn: fn.Interface().(func(uint64) []byte)}
}

type encoderUint64E struct {
	fn func(uint64) ([]byte, error)
}

func (e *encoderUint64E) Encode(t reflect.Type, val reflect.Value) ([]byte, error) {
	return e.fn(val.Interface().(uint64))
}

func encoderMakerUint64E(fn reflect.Value) Encoder {
	return &encoderUint64E{fn: fn.Interface().(func(uint64) ([]byte, error))}
}

type encoderTUint64 struct {
	fn func(reflect.Type, uint64) []byte
}

func (e *encoderTUint64) Encode(t reflect.Type, val reflect.Value) ([]byte, error) {
	return e.fn(t, val.Interface().(uint64)), nil
}

func encoderMakerTUint64(fn reflect.Value) Encoder {
	return &encoderTUint64{fn: fn.Interface().(func(reflect.Type, uint64) []byte)}
}

type encoderTUint64E struct {
	fn func(reflect.Type, uint64) ([]byte, error)
}

func (e *encoderTUint64E) Encode(t reflect.Type, val reflect.Value) ([]byte, error) {
	return e.fn(t, val.Interface().(uint64))
}

func encoderMakerTUint64E(fn reflect.Value) Encoder {
	return &encoderTUint64E{fn: fn.Interface().(func(reflect.Type, uint64) ([]byte, error))}
}

type encoderFloat32 struct {
	fn func(float32) []byte
}

func (e *encoderFloat32) Encode(t reflect.Type, val reflect.Value) ([]byte, error) {
	return e.fn(val.Interface().(float32)), nil
}

func encoderMakerFloat32(fn reflect.Value) Encoder {
	return &encoderFloat32{fn: fn.Interface().(func(float32) []byte)}
}

type encoderFloat32E struct {
	fn func(float32) ([]byte, error)
}

func (e *encoderFloat32E) Encode(t reflect.Type, val reflect.Value) ([]byte, error) {
	return e.fn(val.Interface().(float32))
}

func encoderMakerFloat32E(fn reflect.Value) Encoder {
	return &encoderFloat32E{fn: fn.Interface().(func(float32) ([]byte, error))}
}

type encoderTFloat32 struct {
	fn func(reflect.Type, float32) []byte
}

func (e *encoderTFloat32) Encode(t reflect.Type, val reflect.Value) ([]byte, error) {
	return e.fn(t, val.Interface().(float32)), nil
}

func encoderMakerTFloat32(fn reflect.Value) Encoder {
	return &encoderTFloat32{fn: fn.Interface().(func(reflect.Type, float32) []byte)}
}

type encoderTFloat32E struct {
	fn func(reflect.Type, float32) ([]byte, error)
}

func (e *encoderTFloat32E) Encode(t reflect.Type, val reflect.Value) ([]byte, error) {
	return e.fn(t, val.Interface().(float32))
}

func encoderMakerTFloat32E(fn reflect.Value) Encoder {
	return &encoderTFloat32E{fn: fn.Interface().(func(reflect.Type, float32) ([]byte, error))}
}

type encoderFloat64 struct {
	fn func(float64) []byte
}

func (e *encoderFloat64) Encode(t reflect.Type, val reflect.Value) ([]byte, error) {
	return e.fn(val.Interface().(float64)), nil
}

func encoderMakerFloat64(fn reflect.Value) Encoder {
	return &encoderFloat64{fn: fn.Interface().(func(float64) []byte)}
}

type encoderFloat64E struct {
	fn func(float64) ([]byte, error)
}

func (e *encoderFloat64E) Encode(t reflect.Type, val reflect.Value) ([]byte, error) {
	return e.fn(val.Interface().(float64))
}

func encoderMakerFloat64E(fn reflect.Value) Encoder {
	return &encoderFloat64E{fn: fn.Interface().(func(float64) ([]byte, error))}
}

type encoderTFloat64 struct {
	fn func(reflect.Type, float64) []byte
}

func (e *encoderTFloat64) Encode(t reflect.Type, val reflect.Value) ([]byte, error) {
	return e.fn(t, val.Interface().(float64)), nil
}

func encoderMakerTFloat64(fn reflect.Value) Encoder {
	return &encoderTFloat64{fn: fn.Interface().(func(reflect.Type, float64) []byte)}
}

type encoderTFloat64E struct {
	fn func(reflect.Type, float64) ([]byte, error)
}

func (e *encoderTFloat64E) Encode(t reflect.Type, val reflect.Value) ([]byte, error) {
	return e.fn(t, val.Interface().(float64))
}

func encoderMakerTFloat64E(fn reflect.Value) Encoder {
	return &encoderTFloat64E{fn: fn.Interface().(func(reflect.Type, float64) ([]byte, error))}
}

type encoderTypex_T struct {
	fn func(typex.T) []byte
}

func (e *encoderTypex_T) Encode(t reflect.Type, val reflect.Value) ([]byte, error) {
	return e.fn(val.Interface().(typex.T)), nil
}

func encoderMakerTypex_T(fn reflect.Value) Encoder {
	return &encoderTypex_T{fn: fn.Interface().(func(typex.T) []byte)}
}

type encoderTypex_TE struct {
	fn func(typex.T) ([]byte, error)
}

func (e *encoderTypex_TE) Encode(t reflect.Type, val reflect.Value) ([]byte, error) {
	return e.fn(val.Interface().(typex.T))
}

func encoderMakerTypex_TE(fn reflect.Value) Encoder {
	return &encoderTypex_TE{fn: fn.Interface().(func(typex.T) ([]byte, error))}
}

type encoderTTypex_T struct {
	fn func(reflect.Type, typex.T) []byte
}

func (e *encoderTTypex_T) Encode(t reflect.Type, val reflect.Value) ([]byte, error) {
	return e.fn(t, val.Interface().(typex.T)), nil
}

func encoderMakerTTypex_T(fn reflect.Value) Encoder {
	return &encoderTTypex_T{fn: fn.Interface().(func(reflect.Type, typex.T) []byte)}
}

type encoderTTypex_TE struct {
	fn func(reflect.Type, typex.T) ([]byte, error)
}

func (e *encoderTTypex_TE) Encode(t reflect.Type, val reflect.Value) ([]byte, error) {
	return e.fn(t, val.Interface().(typex.T))
}

func encoderMakerTTypex_TE(fn reflect.Value) Encoder {
	return &encoderTTypex_TE{fn: fn.Interface().(func(reflect.Type, typex.T) ([]byte, error))}
}

type encoderTypex_U struct {
	fn func(typex.U) []byte
}

func (e *encoderTypex_U) Encode(t reflect.Type, val reflect.Value) ([]byte, error) {
	return e.fn(val.Interface().(typex.U)), nil
}

func encoderMakerTypex_U(fn reflect.Value) Encoder {
	return &encoderTypex_U{fn: fn.Interface().(func(typex.U) []byte)}
}

type encoderTypex_UE struct {
	fn func(typex.U) ([]byte, error)
}

func (e *encoderTypex_UE) Encode(t reflect.Type, val reflect.Value) ([]byte, error) {
	return e.fn(val.Interface().(typex.U))
}

func encoderMakerTypex_UE(fn reflect.Value) Encoder {
	return &encoderTypex_UE{fn: fn.Interface().(func(typex.U) ([]byte, error))}
}

type encoderTTypex_U struct {
	fn func(reflect.Type, typex.U) []byte
}

func (e *encoderTTypex_U) Encode(t reflect.Type, val reflect.Value) ([]byte, error) {
	return e.fn(t, val.Interface().(typex.U)), nil
}

func encoderMakerTTypex_U(fn reflect.Value) Encoder {
	return &encoderTTypex_U{fn: fn.Interface().(func(reflect.Type, typex.U) []byte)}
}

type encoderTTypex_UE struct {
	fn func(reflect.Type, typex.U) ([]byte, error)
}

func (e *encoderTTypex_UE) Encode(t reflect.Type, val reflect.Value) ([]byte, error) {
	return e.fn(t, val.Interface().(typex.U))
}

func encoderMakerTTypex_UE(fn reflect.Value) Encoder {
	return &encoderTTypex_UE{fn: fn.Interface().(func(reflect.Type, typex.U) ([]byte, error))}
}

type encoderTypex_V struct {
	fn func(typex.V) []byte
}

func (e *encoderTypex_V) Encode(t reflect.Type, val reflect.Value) ([]byte, error) {
	return e.fn(val.Interface().(typex.V)), nil
}

func encoderMakerTypex_V(fn reflect.Value) Encoder {
	return &encoderTypex_V{fn: fn.Interface().(func(typex.V) []byte)}
}

type encoderTypex_VE struct {
	fn func(typex.V) ([]byte, error)
}

func (e *encoderTypex_VE) Encode(t reflect.Type, val reflect.Value) ([]byte, error) {
	return e.fn(val.Interface().(typex.V))
}

func encoderMakerTypex_VE(fn reflect.Value) Encoder {
	return &encoderTypex_VE{fn: fn.Interface().(func(typex.V) ([]byte, error))}
}

type encoderTTypex_V struct {
	fn func(reflect.Type, typex.V) []byte
}

func (e *encoderTTypex_V) Encode(t reflect.Type, val reflect.Value) ([]byte, error) {
	return e.fn(t, val.Interface().(typex.V)), nil
}

func encoderMakerTTypex_V(fn reflect.Value) Encoder {
	return &encoderTTypex_V{fn: fn.Interface().(func(reflect.Type, typex.V) []byte)}
}

type encoderTTypex_VE struct {
	fn func(reflect.Type, typex.V) ([]byte, error)
}

func (e *encoderTTypex_VE) Encode(t reflect.Type, val reflect.Value) ([]byte, error) {
	return e.fn(t, val.Interface().(typex.V))
}

func encoderMakerTTypex_VE(fn reflect.Value) Encoder {
	return &encoderTTypex_VE{fn: fn.Interface().(func(reflect.Type, typex.V) ([]byte, error))}
}

type encoderTypex_W struct {
	fn func(typex.W) []byte
}

func (e *encoderTypex_W) Encode(t reflect.Type, val reflect.Value) ([]byte, error) {
	return e.fn(val.Interface().(typex.W)), nil
}

func encoderMakerTypex_W(fn reflect.Value) Encoder {
	return &encoderTypex_W{fn: fn.Interface().(func(typex.W) []byte)}
}

type encoderTypex_WE struct {
	fn func(typex.W) ([]byte, error)
}

func (e *encoderTypex_WE) Encode(t reflect.Type, val reflect.Value) ([]byte, error) {
	return e.fn(val.Interface().(typex.W))
}

func encoderMakerTypex_WE(fn reflect.Value) Encoder {
	return &encoderTypex_WE{fn: fn.Interface().(func(typex.W) ([]byte, error))}
}

type encoderTTypex_W struct {
	fn func(reflect.Type, typex.W) []byte
}

func (e *encoderTTypex_W) Encode(t reflect.Type, val reflect.Value) ([]byte, error) {
	return e.fn(t, val.Interface().(typex.W)), nil
}

func encoderMakerTTypex_W(fn reflect.Value) Encoder {
	return &encoderTTypex_W{fn: fn.Interface().(func(reflect.Type, typex.W) []byte)}
}

type encoderTTypex_WE struct {
	fn func(reflect.Type, typex.W) ([]byte, error)
}

func (e *encoderTTypex_WE) Encode(t reflect.Type, val reflect.Value) ([]byte, error) {
	return e.fn(t, val.Interface().(typex.W))
}

func encoderMakerTTypex_WE(fn reflect.Value) Encoder {
	return &encoderTTypex_WE{fn: fn.Interface().(func(reflect.Type, typex.W) ([]byte, error))}
}

type encoderTypex_X struct {
	fn func(typex.X) []byte
}

func (e *encoderTypex_X) Encode(t reflect.Type, val reflect.Value) ([]byte, error) {
	return e.fn(val.Interface().(typex.X)), nil
}

func encoderMakerTypex_X(fn reflect.Value) Encoder {
	return &encoderTypex_X{fn: fn.Interface().(func(typex.X) []byte)}
}

type encoderTypex_XE struct {
	fn func(typex.X) ([]byte, error)
}

func (e *encoderTypex_XE) Encode(t reflect.Type, val reflect.Value) ([]byte, error) {
	return e.fn(val.Interface().(typex.X))
}

func encoderMakerTypex_XE(fn reflect.Value) Encoder {
	return &encoderTypex_XE{fn: fn.Interface().(func(typex.X) ([]byte, error))}
}

type encoderTTypex_X struct {
	fn func(reflect.Type, typex.X) []byte
}

func (e *encoderTTypex_X) Encode(t reflect.Type, val reflect.Value) ([]byte, error) {
	return e.fn(t, val.Interface().(typex.X)), nil
}

func encoderMakerTTypex_X(fn reflect.Value) Encoder {
	return &encoderTTypex_X{fn: fn.Interface().(func(reflect.Type, typex.X) []byte)}
}

type encoderTTypex_XE struct {
	fn func(reflect.Type, typex.X) ([]byte, error)
}

func (e *encoderTTypex_XE) Encode(t reflect.Type, val reflect.Value) ([]byte, error) {
	return e.fn(t, val.Interface().(typex.X))
}

func encoderMakerTTypex_XE(fn reflect.Value) Encoder {
	return &encoderTTypex_XE{fn: fn.Interface().(func(reflect.Type, typex.X) ([]byte, error))}
}

type encoderTypex_Y struct {
	fn func(typex.Y) []byte
}

func (e *encoderTypex_Y) Encode(t reflect.Type, val reflect.Value) ([]byte, error) {
	return e.fn(val.Interface().(typex.Y)), nil
}

func encoderMakerTypex_Y(fn reflect.Value) Encoder {
	return &encoderTypex_Y{fn: fn.Interface().(func(typex.Y) []byte)}
}

type encoderTypex_YE struct {
	fn func(typex.Y) ([]byte, error)
}

func (e *encoderTypex_YE) Encode(t reflect.Type, val reflect.Value) ([]byte, error) {
	return e.fn(val.Interface().(typex.Y))
}

func encoderMakerTypex_YE(fn reflect.Value) Encoder {
	return &encoderTypex_YE{fn: fn.Interface().(func(typex.Y) ([]byte, error))}
}

type encoderTTypex_Y struct {
	fn func(reflect.Type, typex.Y) []byte
}

func (e *encoderTTypex_Y) Encode(t reflect.Type, val reflect.Value) ([]byte, error) {
	return e.fn(t, val.Interface().(typex.Y)), nil
}

func encoderMakerTTypex_Y(fn reflect.Value) Encoder {
	return &encoderTTypex_Y{fn: fn.Interface().(func(reflect.Type, typex.Y) []byte)}
}

type encoderTTypex_YE struct {
	fn func(reflect.Type, typex.Y) ([]byte, error)
}

func (e *encoderTTypex_YE) Encode(t reflect.Type, val reflect.Value) ([]byte, error) {
	return e.fn(t, val.Interface().(typex.Y))
}

func encoderMakerTTypex_YE(fn reflect.Value) Encoder {
	return &encoderTTypex_YE{fn: fn.Interface().(func(reflect.Type, typex.Y) ([]byte, error))}
}

type encoderTypex_Z struct {
	fn func(typex.Z) []byte
}

func (e *encoderTypex_Z) Encode(t reflect.Type, val reflect.Value) ([]byte, error) {
	return e.fn(val.Interface().(typex.Z)), nil
}

func encoderMakerTypex_Z(fn reflect.Value) Encoder {
	return &encoderTypex_Z{fn: fn.Interface().(func(typex.Z) []byte)}
}

type encoderTypex_ZE struct {
	fn func(typex.Z) ([]byte, error)
}

func (e *encoderTypex_ZE) Encode(t reflect.Type, val reflect.Value) ([]byte, error) {
	return e.fn(val.Interface().(typex.Z))
}

func encoderMakerTypex_ZE(fn reflect.Value) Encoder {
	return &encoderTypex_ZE{fn: fn.Interface().(func(typex.Z) ([]byte, error))}
}

type encoderTTypex_Z struct {
	fn func(reflect.Type, typex.Z) []byte
}

func (e *encoderTTypex_Z) Encode(t reflect.Type, val reflect.Value) ([]byte, error) {
	return e.fn(t, val.Interface().(typex.Z)), nil
}

func encoderMakerTTypex_Z(fn reflect.Value) Encoder {
	return &encoderTTypex_Z{fn: fn.Interface().(func(reflect.Type, typex.Z) []byte)}
}

type encoderTTypex_ZE struct {
	fn func(reflect.Type, typex.Z) ([]byte, error)
}

func (e *encoderTTypex_ZE) Encode(t reflect.Type, val reflect.Value) ([]byte, error) {
	return e.fn(t, val.Interface().(typex.Z))
}

func encoderMakerTTypex_ZE(fn reflect.Value) Encoder {
	return &encoderTTypex_ZE{fn: fn.Interface().(func(reflect.Type, typex.Z) ([]byte, error))}
}
