// Licensed to the Apache Software Foundation (ASF) under one or more
// contributor license agreements.  See the NOTICE file distributed with
// this work for additional information regarding copyright ownership.
// The ASF licenses this file to You under the Apache License, Version 2.0
// (the "License"); you may not use this file except in compliance with
// the License.  You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package exec

import (
    "reflect"

  	"github.com/apache/beam/sdks/go/pkg/beam/core/typex"
)

func init() {
{{- range $x := .X}}
    RegisterEncoder(reflect.TypeOf((*func ({{$x.Type}}) []byte)(nil)).Elem(), encoderMaker{{$x.Name}})
    RegisterEncoder(reflect.TypeOf((*func ({{$x.Type}}) ([]byte, error))(nil)).Elem(), encoderMaker{{$x.Name}}E)
    RegisterEncoder(reflect.TypeOf((*func (reflect.Type, {{$x.Type}}) []byte)(nil)).Elem(), encoderMakerT{{$x.Name}})
    RegisterEncoder(reflect.TypeOf((*func (reflect.Type, {{$x.Type}}) ([]byte, error))(nil)).Elem(), encoderMakerT{{$x.Name}}E)
{{- end}}
}

{{range $x := .X}}
type encoder{{$x.Name}} struct {
    fn func ({{$x.Type}}) []byte
}

func (e *encoder{{$x.Name}}) Encode(t reflect.Type, val reflect.Value) ([]byte, error) {
    return e.fn(val.Interface().({{$x.Type}})), nil
}

func encoderMaker{{$x.Name}}(fn reflect.Value) Encoder {
    return &encoder{{$x.Name}}{fn: fn.Interface().(func ({{$x.Type}}) []byte)}
}

type encoder{{$x.Name}}E struct {
    fn func ({{$x.Type}}) ([]byte, error)
}

func (e *encoder{{$x.Name}}E) Encode(t reflect.Type, val reflect.Value) ([]byte, error) {
    return e.fn(val.Interface().({{$x.Type}}))
}

func encoderMaker{{$x.Name}}E(fn reflect.Value) Encoder {
    return &encoder{{$x.Name}}E{fn: fn.Interface().(func ({{$x.Type}}) ([]byte, error))}
}

type encoderT{{$x.Name}} struct {
    fn func (reflect.Type, {{$x.Type}}) []byte
}

func (e *encoderT{{$x.Name}}) Encode(t reflect.Type, val reflect.Value) ([]byte, error) {
    return e.fn(t, val.Interface().({{$x.Type}})), nil
}

func encoderMakerT{{$x.Name}}(fn reflect.Value) Encoder {
    return &encoderT{{$x.Name}}{fn: fn.Interface().(func (reflect.Type, {{$x.Type}}) []byte)}
}

type encoderT{{$x.Name}}E struct {
    fn func (reflect.Type, {{$x.Type}}) ([]byte, error)
}

func (e *encoderT{{$x.Name}}E) Encode(t reflect.Type, val reflect.Value) ([]byte, error) {
    return e.fn(t, val.Interface().({{$x.Type}}))
}

func encoderMakerT{{$x.Name}}E(fn reflect.Value) Encoder {
    return &encoderT{{$x.Name}}E{fn: fn.Interface().(func (reflect.Type, {{$x.Type}}) ([]byte, error))}
}
{{end}}
