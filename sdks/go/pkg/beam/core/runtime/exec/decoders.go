// File generated by specialize. Do not edit.

// Licensed to the Apache Software Foundation (ASF) under one or more
// contributor license agreements.  See the NOTICE file distributed with
// this work for additional information regarding copyright ownership.
// The ASF licenses this file to You under the Apache License, Version 2.0
// (the "License"); you may not use this file except in compliance with
// the License.  You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package exec

import (
	"reflect"

	"github.com/apache/beam/sdks/go/pkg/beam/core/typex"
)

func init() {
	RegisterDecoder(reflect.TypeOf((*func([]byte) []byte)(nil)).Elem(), decoderMakerByteSlice)
	RegisterDecoder(reflect.TypeOf((*func([]byte) ([]byte, error))(nil)).Elem(), decoderMakerByteSliceE)
	RegisterDecoder(reflect.TypeOf((*func(reflect.Type, []byte) []byte)(nil)).Elem(), decoderMakerTByteSlice)
	RegisterDecoder(reflect.TypeOf((*func(reflect.Type, []byte) ([]byte, error))(nil)).Elem(), decoderMakerTByteSliceE)
	RegisterDecoder(reflect.TypeOf((*func([]byte) bool)(nil)).Elem(), decoderMakerBool)
	RegisterDecoder(reflect.TypeOf((*func([]byte) (bool, error))(nil)).Elem(), decoderMakerBoolE)
	RegisterDecoder(reflect.TypeOf((*func(reflect.Type, []byte) bool)(nil)).Elem(), decoderMakerTBool)
	RegisterDecoder(reflect.TypeOf((*func(reflect.Type, []byte) (bool, error))(nil)).Elem(), decoderMakerTBoolE)
	RegisterDecoder(reflect.TypeOf((*func([]byte) string)(nil)).Elem(), decoderMakerString)
	RegisterDecoder(reflect.TypeOf((*func([]byte) (string, error))(nil)).Elem(), decoderMakerStringE)
	RegisterDecoder(reflect.TypeOf((*func(reflect.Type, []byte) string)(nil)).Elem(), decoderMakerTString)
	RegisterDecoder(reflect.TypeOf((*func(reflect.Type, []byte) (string, error))(nil)).Elem(), decoderMakerTStringE)
	RegisterDecoder(reflect.TypeOf((*func([]byte) int)(nil)).Elem(), decoderMakerInt)
	RegisterDecoder(reflect.TypeOf((*func([]byte) (int, error))(nil)).Elem(), decoderMakerIntE)
	RegisterDecoder(reflect.TypeOf((*func(reflect.Type, []byte) int)(nil)).Elem(), decoderMakerTInt)
	RegisterDecoder(reflect.TypeOf((*func(reflect.Type, []byte) (int, error))(nil)).Elem(), decoderMakerTIntE)
	RegisterDecoder(reflect.TypeOf((*func([]byte) int8)(nil)).Elem(), decoderMakerInt8)
	RegisterDecoder(reflect.TypeOf((*func([]byte) (int8, error))(nil)).Elem(), decoderMakerInt8E)
	RegisterDecoder(reflect.TypeOf((*func(reflect.Type, []byte) int8)(nil)).Elem(), decoderMakerTInt8)
	RegisterDecoder(reflect.TypeOf((*func(reflect.Type, []byte) (int8, error))(nil)).Elem(), decoderMakerTInt8E)
	RegisterDecoder(reflect.TypeOf((*func([]byte) int16)(nil)).Elem(), decoderMakerInt16)
	RegisterDecoder(reflect.TypeOf((*func([]byte) (int16, error))(nil)).Elem(), decoderMakerInt16E)
	RegisterDecoder(reflect.TypeOf((*func(reflect.Type, []byte) int16)(nil)).Elem(), decoderMakerTInt16)
	RegisterDecoder(reflect.TypeOf((*func(reflect.Type, []byte) (int16, error))(nil)).Elem(), decoderMakerTInt16E)
	RegisterDecoder(reflect.TypeOf((*func([]byte) int32)(nil)).Elem(), decoderMakerInt32)
	RegisterDecoder(reflect.TypeOf((*func([]byte) (int32, error))(nil)).Elem(), decoderMakerInt32E)
	RegisterDecoder(reflect.TypeOf((*func(reflect.Type, []byte) int32)(nil)).Elem(), decoderMakerTInt32)
	RegisterDecoder(reflect.TypeOf((*func(reflect.Type, []byte) (int32, error))(nil)).Elem(), decoderMakerTInt32E)
	RegisterDecoder(reflect.TypeOf((*func([]byte) int64)(nil)).Elem(), decoderMakerInt64)
	RegisterDecoder(reflect.TypeOf((*func([]byte) (int64, error))(nil)).Elem(), decoderMakerInt64E)
	RegisterDecoder(reflect.TypeOf((*func(reflect.Type, []byte) int64)(nil)).Elem(), decoderMakerTInt64)
	RegisterDecoder(reflect.TypeOf((*func(reflect.Type, []byte) (int64, error))(nil)).Elem(), decoderMakerTInt64E)
	RegisterDecoder(reflect.TypeOf((*func([]byte) uint)(nil)).Elem(), decoderMakerUint)
	RegisterDecoder(reflect.TypeOf((*func([]byte) (uint, error))(nil)).Elem(), decoderMakerUintE)
	RegisterDecoder(reflect.TypeOf((*func(reflect.Type, []byte) uint)(nil)).Elem(), decoderMakerTUint)
	RegisterDecoder(reflect.TypeOf((*func(reflect.Type, []byte) (uint, error))(nil)).Elem(), decoderMakerTUintE)
	RegisterDecoder(reflect.TypeOf((*func([]byte) uint8)(nil)).Elem(), decoderMakerUint8)
	RegisterDecoder(reflect.TypeOf((*func([]byte) (uint8, error))(nil)).Elem(), decoderMakerUint8E)
	RegisterDecoder(reflect.TypeOf((*func(reflect.Type, []byte) uint8)(nil)).Elem(), decoderMakerTUint8)
	RegisterDecoder(reflect.TypeOf((*func(reflect.Type, []byte) (uint8, error))(nil)).Elem(), decoderMakerTUint8E)
	RegisterDecoder(reflect.TypeOf((*func([]byte) uint16)(nil)).Elem(), decoderMakerUint16)
	RegisterDecoder(reflect.TypeOf((*func([]byte) (uint16, error))(nil)).Elem(), decoderMakerUint16E)
	RegisterDecoder(reflect.TypeOf((*func(reflect.Type, []byte) uint16)(nil)).Elem(), decoderMakerTUint16)
	RegisterDecoder(reflect.TypeOf((*func(reflect.Type, []byte) (uint16, error))(nil)).Elem(), decoderMakerTUint16E)
	RegisterDecoder(reflect.TypeOf((*func([]byte) uint32)(nil)).Elem(), decoderMakerUint32)
	RegisterDecoder(reflect.TypeOf((*func([]byte) (uint32, error))(nil)).Elem(), decoderMakerUint32E)
	RegisterDecoder(reflect.TypeOf((*func(reflect.Type, []byte) uint32)(nil)).Elem(), decoderMakerTUint32)
	RegisterDecoder(reflect.TypeOf((*func(reflect.Type, []byte) (uint32, error))(nil)).Elem(), decoderMakerTUint32E)
	RegisterDecoder(reflect.TypeOf((*func([]byte) uint64)(nil)).Elem(), decoderMakerUint64)
	RegisterDecoder(reflect.TypeOf((*func([]byte) (uint64, error))(nil)).Elem(), decoderMakerUint64E)
	RegisterDecoder(reflect.TypeOf((*func(reflect.Type, []byte) uint64)(nil)).Elem(), decoderMakerTUint64)
	RegisterDecoder(reflect.TypeOf((*func(reflect.Type, []byte) (uint64, error))(nil)).Elem(), decoderMakerTUint64E)
	RegisterDecoder(reflect.TypeOf((*func([]byte) float32)(nil)).Elem(), decoderMakerFloat32)
	RegisterDecoder(reflect.TypeOf((*func([]byte) (float32, error))(nil)).Elem(), decoderMakerFloat32E)
	RegisterDecoder(reflect.TypeOf((*func(reflect.Type, []byte) float32)(nil)).Elem(), decoderMakerTFloat32)
	RegisterDecoder(reflect.TypeOf((*func(reflect.Type, []byte) (float32, error))(nil)).Elem(), decoderMakerTFloat32E)
	RegisterDecoder(reflect.TypeOf((*func([]byte) float64)(nil)).Elem(), decoderMakerFloat64)
	RegisterDecoder(reflect.TypeOf((*func([]byte) (float64, error))(nil)).Elem(), decoderMakerFloat64E)
	RegisterDecoder(reflect.TypeOf((*func(reflect.Type, []byte) float64)(nil)).Elem(), decoderMakerTFloat64)
	RegisterDecoder(reflect.TypeOf((*func(reflect.Type, []byte) (float64, error))(nil)).Elem(), decoderMakerTFloat64E)
	RegisterDecoder(reflect.TypeOf((*func([]byte) typex.T)(nil)).Elem(), decoderMakerTypex_T)
	RegisterDecoder(reflect.TypeOf((*func([]byte) (typex.T, error))(nil)).Elem(), decoderMakerTypex_TE)
	RegisterDecoder(reflect.TypeOf((*func(reflect.Type, []byte) typex.T)(nil)).Elem(), decoderMakerTTypex_T)
	RegisterDecoder(reflect.TypeOf((*func(reflect.Type, []byte) (typex.T, error))(nil)).Elem(), decoderMakerTTypex_TE)
	RegisterDecoder(reflect.TypeOf((*func([]byte) typex.U)(nil)).Elem(), decoderMakerTypex_U)
	RegisterDecoder(reflect.TypeOf((*func([]byte) (typex.U, error))(nil)).Elem(), decoderMakerTypex_UE)
	RegisterDecoder(reflect.TypeOf((*func(reflect.Type, []byte) typex.U)(nil)).Elem(), decoderMakerTTypex_U)
	RegisterDecoder(reflect.TypeOf((*func(reflect.Type, []byte) (typex.U, error))(nil)).Elem(), decoderMakerTTypex_UE)
	RegisterDecoder(reflect.TypeOf((*func([]byte) typex.V)(nil)).Elem(), decoderMakerTypex_V)
	RegisterDecoder(reflect.TypeOf((*func([]byte) (typex.V, error))(nil)).Elem(), decoderMakerTypex_VE)
	RegisterDecoder(reflect.TypeOf((*func(reflect.Type, []byte) typex.V)(nil)).Elem(), decoderMakerTTypex_V)
	RegisterDecoder(reflect.TypeOf((*func(reflect.Type, []byte) (typex.V, error))(nil)).Elem(), decoderMakerTTypex_VE)
	RegisterDecoder(reflect.TypeOf((*func([]byte) typex.W)(nil)).Elem(), decoderMakerTypex_W)
	RegisterDecoder(reflect.TypeOf((*func([]byte) (typex.W, error))(nil)).Elem(), decoderMakerTypex_WE)
	RegisterDecoder(reflect.TypeOf((*func(reflect.Type, []byte) typex.W)(nil)).Elem(), decoderMakerTTypex_W)
	RegisterDecoder(reflect.TypeOf((*func(reflect.Type, []byte) (typex.W, error))(nil)).Elem(), decoderMakerTTypex_WE)
	RegisterDecoder(reflect.TypeOf((*func([]byte) typex.X)(nil)).Elem(), decoderMakerTypex_X)
	RegisterDecoder(reflect.TypeOf((*func([]byte) (typex.X, error))(nil)).Elem(), decoderMakerTypex_XE)
	RegisterDecoder(reflect.TypeOf((*func(reflect.Type, []byte) typex.X)(nil)).Elem(), decoderMakerTTypex_X)
	RegisterDecoder(reflect.TypeOf((*func(reflect.Type, []byte) (typex.X, error))(nil)).Elem(), decoderMakerTTypex_XE)
	RegisterDecoder(reflect.TypeOf((*func([]byte) typex.Y)(nil)).Elem(), decoderMakerTypex_Y)
	RegisterDecoder(reflect.TypeOf((*func([]byte) (typex.Y, error))(nil)).Elem(), decoderMakerTypex_YE)
	RegisterDecoder(reflect.TypeOf((*func(reflect.Type, []byte) typex.Y)(nil)).Elem(), decoderMakerTTypex_Y)
	RegisterDecoder(reflect.TypeOf((*func(reflect.Type, []byte) (typex.Y, error))(nil)).Elem(), decoderMakerTTypex_YE)
	RegisterDecoder(reflect.TypeOf((*func([]byte) typex.Z)(nil)).Elem(), decoderMakerTypex_Z)
	RegisterDecoder(reflect.TypeOf((*func([]byte) (typex.Z, error))(nil)).Elem(), decoderMakerTypex_ZE)
	RegisterDecoder(reflect.TypeOf((*func(reflect.Type, []byte) typex.Z)(nil)).Elem(), decoderMakerTTypex_Z)
	RegisterDecoder(reflect.TypeOf((*func(reflect.Type, []byte) (typex.Z, error))(nil)).Elem(), decoderMakerTTypex_ZE)
}

type decoderByteSlice struct {
	fn func([]byte) []byte
}

func (e *decoderByteSlice) Decode(t reflect.Type, data []byte) (reflect.Value, error) {
	return reflect.ValueOf(e.fn(data)), nil
}

func decoderMakerByteSlice(fn reflect.Value) Decoder {
	return &decoderByteSlice{fn: fn.Interface().(func([]byte) []byte)}
}

type decoderByteSliceE struct {
	fn func([]byte) ([]byte, error)
}

func (e *decoderByteSliceE) Decode(t reflect.Type, data []byte) (reflect.Value, error) {
	val, err := e.fn(data)
	if err != nil {
		return reflect.Value{}, nil
	}
	return reflect.ValueOf(val), nil
}

func decoderMakerByteSliceE(fn reflect.Value) Decoder {
	return &decoderByteSliceE{fn: fn.Interface().(func([]byte) ([]byte, error))}
}

type decoderTByteSlice struct {
	fn func(reflect.Type, []byte) []byte
}

func (e *decoderTByteSlice) Decode(t reflect.Type, data []byte) (reflect.Value, error) {
	return reflect.ValueOf(e.fn(t, data)), nil
}

func decoderMakerTByteSlice(fn reflect.Value) Decoder {
	return &decoderTByteSlice{fn: fn.Interface().(func(reflect.Type, []byte) []byte)}
}

type decoderTByteSliceE struct {
	fn func(reflect.Type, []byte) ([]byte, error)
}

func (e *decoderTByteSliceE) Decode(t reflect.Type, data []byte) (reflect.Value, error) {
	val, err := e.fn(t, data)
	if err != nil {
		return reflect.Value{}, nil
	}
	return reflect.ValueOf(val), nil
}

func decoderMakerTByteSliceE(fn reflect.Value) Decoder {
	return &decoderTByteSliceE{fn: fn.Interface().(func(reflect.Type, []byte) ([]byte, error))}
}

type decoderBool struct {
	fn func([]byte) bool
}

func (e *decoderBool) Decode(t reflect.Type, data []byte) (reflect.Value, error) {
	return reflect.ValueOf(e.fn(data)), nil
}

func decoderMakerBool(fn reflect.Value) Decoder {
	return &decoderBool{fn: fn.Interface().(func([]byte) bool)}
}

type decoderBoolE struct {
	fn func([]byte) (bool, error)
}

func (e *decoderBoolE) Decode(t reflect.Type, data []byte) (reflect.Value, error) {
	val, err := e.fn(data)
	if err != nil {
		return reflect.Value{}, nil
	}
	return reflect.ValueOf(val), nil
}

func decoderMakerBoolE(fn reflect.Value) Decoder {
	return &decoderBoolE{fn: fn.Interface().(func([]byte) (bool, error))}
}

type decoderTBool struct {
	fn func(reflect.Type, []byte) bool
}

func (e *decoderTBool) Decode(t reflect.Type, data []byte) (reflect.Value, error) {
	return reflect.ValueOf(e.fn(t, data)), nil
}

func decoderMakerTBool(fn reflect.Value) Decoder {
	return &decoderTBool{fn: fn.Interface().(func(reflect.Type, []byte) bool)}
}

type decoderTBoolE struct {
	fn func(reflect.Type, []byte) (bool, error)
}

func (e *decoderTBoolE) Decode(t reflect.Type, data []byte) (reflect.Value, error) {
	val, err := e.fn(t, data)
	if err != nil {
		return reflect.Value{}, nil
	}
	return reflect.ValueOf(val), nil
}

func decoderMakerTBoolE(fn reflect.Value) Decoder {
	return &decoderTBoolE{fn: fn.Interface().(func(reflect.Type, []byte) (bool, error))}
}

type decoderString struct {
	fn func([]byte) string
}

func (e *decoderString) Decode(t reflect.Type, data []byte) (reflect.Value, error) {
	return reflect.ValueOf(e.fn(data)), nil
}

func decoderMakerString(fn reflect.Value) Decoder {
	return &decoderString{fn: fn.Interface().(func([]byte) string)}
}

type decoderStringE struct {
	fn func([]byte) (string, error)
}

func (e *decoderStringE) Decode(t reflect.Type, data []byte) (reflect.Value, error) {
	val, err := e.fn(data)
	if err != nil {
		return reflect.Value{}, nil
	}
	return reflect.ValueOf(val), nil
}

func decoderMakerStringE(fn reflect.Value) Decoder {
	return &decoderStringE{fn: fn.Interface().(func([]byte) (string, error))}
}

type decoderTString struct {
	fn func(reflect.Type, []byte) string
}

func (e *decoderTString) Decode(t reflect.Type, data []byte) (reflect.Value, error) {
	return reflect.ValueOf(e.fn(t, data)), nil
}

func decoderMakerTString(fn reflect.Value) Decoder {
	return &decoderTString{fn: fn.Interface().(func(reflect.Type, []byte) string)}
}

type decoderTStringE struct {
	fn func(reflect.Type, []byte) (string, error)
}

func (e *decoderTStringE) Decode(t reflect.Type, data []byte) (reflect.Value, error) {
	val, err := e.fn(t, data)
	if err != nil {
		return reflect.Value{}, nil
	}
	return reflect.ValueOf(val), nil
}

func decoderMakerTStringE(fn reflect.Value) Decoder {
	return &decoderTStringE{fn: fn.Interface().(func(reflect.Type, []byte) (string, error))}
}

type decoderInt struct {
	fn func([]byte) int
}

func (e *decoderInt) Decode(t reflect.Type, data []byte) (reflect.Value, error) {
	return reflect.ValueOf(e.fn(data)), nil
}

func decoderMakerInt(fn reflect.Value) Decoder {
	return &decoderInt{fn: fn.Interface().(func([]byte) int)}
}

type decoderIntE struct {
	fn func([]byte) (int, error)
}

func (e *decoderIntE) Decode(t reflect.Type, data []byte) (reflect.Value, error) {
	val, err := e.fn(data)
	if err != nil {
		return reflect.Value{}, nil
	}
	return reflect.ValueOf(val), nil
}

func decoderMakerIntE(fn reflect.Value) Decoder {
	return &decoderIntE{fn: fn.Interface().(func([]byte) (int, error))}
}

type decoderTInt struct {
	fn func(reflect.Type, []byte) int
}

func (e *decoderTInt) Decode(t reflect.Type, data []byte) (reflect.Value, error) {
	return reflect.ValueOf(e.fn(t, data)), nil
}

func decoderMakerTInt(fn reflect.Value) Decoder {
	return &decoderTInt{fn: fn.Interface().(func(reflect.Type, []byte) int)}
}

type decoderTIntE struct {
	fn func(reflect.Type, []byte) (int, error)
}

func (e *decoderTIntE) Decode(t reflect.Type, data []byte) (reflect.Value, error) {
	val, err := e.fn(t, data)
	if err != nil {
		return reflect.Value{}, nil
	}
	return reflect.ValueOf(val), nil
}

func decoderMakerTIntE(fn reflect.Value) Decoder {
	return &decoderTIntE{fn: fn.Interface().(func(reflect.Type, []byte) (int, error))}
}

type decoderInt8 struct {
	fn func([]byte) int8
}

func (e *decoderInt8) Decode(t reflect.Type, data []byte) (reflect.Value, error) {
	return reflect.ValueOf(e.fn(data)), nil
}

func decoderMakerInt8(fn reflect.Value) Decoder {
	return &decoderInt8{fn: fn.Interface().(func([]byte) int8)}
}

type decoderInt8E struct {
	fn func([]byte) (int8, error)
}

func (e *decoderInt8E) Decode(t reflect.Type, data []byte) (reflect.Value, error) {
	val, err := e.fn(data)
	if err != nil {
		return reflect.Value{}, nil
	}
	return reflect.ValueOf(val), nil
}

func decoderMakerInt8E(fn reflect.Value) Decoder {
	return &decoderInt8E{fn: fn.Interface().(func([]byte) (int8, error))}
}

type decoderTInt8 struct {
	fn func(reflect.Type, []byte) int8
}

func (e *decoderTInt8) Decode(t reflect.Type, data []byte) (reflect.Value, error) {
	return reflect.ValueOf(e.fn(t, data)), nil
}

func decoderMakerTInt8(fn reflect.Value) Decoder {
	return &decoderTInt8{fn: fn.Interface().(func(reflect.Type, []byte) int8)}
}

type decoderTInt8E struct {
	fn func(reflect.Type, []byte) (int8, error)
}

func (e *decoderTInt8E) Decode(t reflect.Type, data []byte) (reflect.Value, error) {
	val, err := e.fn(t, data)
	if err != nil {
		return reflect.Value{}, nil
	}
	return reflect.ValueOf(val), nil
}

func decoderMakerTInt8E(fn reflect.Value) Decoder {
	return &decoderTInt8E{fn: fn.Interface().(func(reflect.Type, []byte) (int8, error))}
}

type decoderInt16 struct {
	fn func([]byte) int16
}

func (e *decoderInt16) Decode(t reflect.Type, data []byte) (reflect.Value, error) {
	return reflect.ValueOf(e.fn(data)), nil
}

func decoderMakerInt16(fn reflect.Value) Decoder {
	return &decoderInt16{fn: fn.Interface().(func([]byte) int16)}
}

type decoderInt16E struct {
	fn func([]byte) (int16, error)
}

func (e *decoderInt16E) Decode(t reflect.Type, data []byte) (reflect.Value, error) {
	val, err := e.fn(data)
	if err != nil {
		return reflect.Value{}, nil
	}
	return reflect.ValueOf(val), nil
}

func decoderMakerInt16E(fn reflect.Value) Decoder {
	return &decoderInt16E{fn: fn.Interface().(func([]byte) (int16, error))}
}

type decoderTInt16 struct {
	fn func(reflect.Type, []byte) int16
}

func (e *decoderTInt16) Decode(t reflect.Type, data []byte) (reflect.Value, error) {
	return reflect.ValueOf(e.fn(t, data)), nil
}

func decoderMakerTInt16(fn reflect.Value) Decoder {
	return &decoderTInt16{fn: fn.Interface().(func(reflect.Type, []byte) int16)}
}

type decoderTInt16E struct {
	fn func(reflect.Type, []byte) (int16, error)
}

func (e *decoderTInt16E) Decode(t reflect.Type, data []byte) (reflect.Value, error) {
	val, err := e.fn(t, data)
	if err != nil {
		return reflect.Value{}, nil
	}
	return reflect.ValueOf(val), nil
}

func decoderMakerTInt16E(fn reflect.Value) Decoder {
	return &decoderTInt16E{fn: fn.Interface().(func(reflect.Type, []byte) (int16, error))}
}

type decoderInt32 struct {
	fn func([]byte) int32
}

func (e *decoderInt32) Decode(t reflect.Type, data []byte) (reflect.Value, error) {
	return reflect.ValueOf(e.fn(data)), nil
}

func decoderMakerInt32(fn reflect.Value) Decoder {
	return &decoderInt32{fn: fn.Interface().(func([]byte) int32)}
}

type decoderInt32E struct {
	fn func([]byte) (int32, error)
}

func (e *decoderInt32E) Decode(t reflect.Type, data []byte) (reflect.Value, error) {
	val, err := e.fn(data)
	if err != nil {
		return reflect.Value{}, nil
	}
	return reflect.ValueOf(val), nil
}

func decoderMakerInt32E(fn reflect.Value) Decoder {
	return &decoderInt32E{fn: fn.Interface().(func([]byte) (int32, error))}
}

type decoderTInt32 struct {
	fn func(reflect.Type, []byte) int32
}

func (e *decoderTInt32) Decode(t reflect.Type, data []byte) (reflect.Value, error) {
	return reflect.ValueOf(e.fn(t, data)), nil
}

func decoderMakerTInt32(fn reflect.Value) Decoder {
	return &decoderTInt32{fn: fn.Interface().(func(reflect.Type, []byte) int32)}
}

type decoderTInt32E struct {
	fn func(reflect.Type, []byte) (int32, error)
}

func (e *decoderTInt32E) Decode(t reflect.Type, data []byte) (reflect.Value, error) {
	val, err := e.fn(t, data)
	if err != nil {
		return reflect.Value{}, nil
	}
	return reflect.ValueOf(val), nil
}

func decoderMakerTInt32E(fn reflect.Value) Decoder {
	return &decoderTInt32E{fn: fn.Interface().(func(reflect.Type, []byte) (int32, error))}
}

type decoderInt64 struct {
	fn func([]byte) int64
}

func (e *decoderInt64) Decode(t reflect.Type, data []byte) (reflect.Value, error) {
	return reflect.ValueOf(e.fn(data)), nil
}

func decoderMakerInt64(fn reflect.Value) Decoder {
	return &decoderInt64{fn: fn.Interface().(func([]byte) int64)}
}

type decoderInt64E struct {
	fn func([]byte) (int64, error)
}

func (e *decoderInt64E) Decode(t reflect.Type, data []byte) (reflect.Value, error) {
	val, err := e.fn(data)
	if err != nil {
		return reflect.Value{}, nil
	}
	return reflect.ValueOf(val), nil
}

func decoderMakerInt64E(fn reflect.Value) Decoder {
	return &decoderInt64E{fn: fn.Interface().(func([]byte) (int64, error))}
}

type decoderTInt64 struct {
	fn func(reflect.Type, []byte) int64
}

func (e *decoderTInt64) Decode(t reflect.Type, data []byte) (reflect.Value, error) {
	return reflect.ValueOf(e.fn(t, data)), nil
}

func decoderMakerTInt64(fn reflect.Value) Decoder {
	return &decoderTInt64{fn: fn.Interface().(func(reflect.Type, []byte) int64)}
}

type decoderTInt64E struct {
	fn func(reflect.Type, []byte) (int64, error)
}

func (e *decoderTInt64E) Decode(t reflect.Type, data []byte) (reflect.Value, error) {
	val, err := e.fn(t, data)
	if err != nil {
		return reflect.Value{}, nil
	}
	return reflect.ValueOf(val), nil
}

func decoderMakerTInt64E(fn reflect.Value) Decoder {
	return &decoderTInt64E{fn: fn.Interface().(func(reflect.Type, []byte) (int64, error))}
}

type decoderUint struct {
	fn func([]byte) uint
}

func (e *decoderUint) Decode(t reflect.Type, data []byte) (reflect.Value, error) {
	return reflect.ValueOf(e.fn(data)), nil
}

func decoderMakerUint(fn reflect.Value) Decoder {
	return &decoderUint{fn: fn.Interface().(func([]byte) uint)}
}

type decoderUintE struct {
	fn func([]byte) (uint, error)
}

func (e *decoderUintE) Decode(t reflect.Type, data []byte) (reflect.Value, error) {
	val, err := e.fn(data)
	if err != nil {
		return reflect.Value{}, nil
	}
	return reflect.ValueOf(val), nil
}

func decoderMakerUintE(fn reflect.Value) Decoder {
	return &decoderUintE{fn: fn.Interface().(func([]byte) (uint, error))}
}

type decoderTUint struct {
	fn func(reflect.Type, []byte) uint
}

func (e *decoderTUint) Decode(t reflect.Type, data []byte) (reflect.Value, error) {
	return reflect.ValueOf(e.fn(t, data)), nil
}

func decoderMakerTUint(fn reflect.Value) Decoder {
	return &decoderTUint{fn: fn.Interface().(func(reflect.Type, []byte) uint)}
}

type decoderTUintE struct {
	fn func(reflect.Type, []byte) (uint, error)
}

func (e *decoderTUintE) Decode(t reflect.Type, data []byte) (reflect.Value, error) {
	val, err := e.fn(t, data)
	if err != nil {
		return reflect.Value{}, nil
	}
	return reflect.ValueOf(val), nil
}

func decoderMakerTUintE(fn reflect.Value) Decoder {
	return &decoderTUintE{fn: fn.Interface().(func(reflect.Type, []byte) (uint, error))}
}

type decoderUint8 struct {
	fn func([]byte) uint8
}

func (e *decoderUint8) Decode(t reflect.Type, data []byte) (reflect.Value, error) {
	return reflect.ValueOf(e.fn(data)), nil
}

func decoderMakerUint8(fn reflect.Value) Decoder {
	return &decoderUint8{fn: fn.Interface().(func([]byte) uint8)}
}

type decoderUint8E struct {
	fn func([]byte) (uint8, error)
}

func (e *decoderUint8E) Decode(t reflect.Type, data []byte) (reflect.Value, error) {
	val, err := e.fn(data)
	if err != nil {
		return reflect.Value{}, nil
	}
	return reflect.ValueOf(val), nil
}

func decoderMakerUint8E(fn reflect.Value) Decoder {
	return &decoderUint8E{fn: fn.Interface().(func([]byte) (uint8, error))}
}

type decoderTUint8 struct {
	fn func(reflect.Type, []byte) uint8
}

func (e *decoderTUint8) Decode(t reflect.Type, data []byte) (reflect.Value, error) {
	return reflect.ValueOf(e.fn(t, data)), nil
}

func decoderMakerTUint8(fn reflect.Value) Decoder {
	return &decoderTUint8{fn: fn.Interface().(func(reflect.Type, []byte) uint8)}
}

type decoderTUint8E struct {
	fn func(reflect.Type, []byte) (uint8, error)
}

func (e *decoderTUint8E) Decode(t reflect.Type, data []byte) (reflect.Value, error) {
	val, err := e.fn(t, data)
	if err != nil {
		return reflect.Value{}, nil
	}
	return reflect.ValueOf(val), nil
}

func decoderMakerTUint8E(fn reflect.Value) Decoder {
	return &decoderTUint8E{fn: fn.Interface().(func(reflect.Type, []byte) (uint8, error))}
}

type decoderUint16 struct {
	fn func([]byte) uint16
}

func (e *decoderUint16) Decode(t reflect.Type, data []byte) (reflect.Value, error) {
	return reflect.ValueOf(e.fn(data)), nil
}

func decoderMakerUint16(fn reflect.Value) Decoder {
	return &decoderUint16{fn: fn.Interface().(func([]byte) uint16)}
}

type decoderUint16E struct {
	fn func([]byte) (uint16, error)
}

func (e *decoderUint16E) Decode(t reflect.Type, data []byte) (reflect.Value, error) {
	val, err := e.fn(data)
	if err != nil {
		return reflect.Value{}, nil
	}
	return reflect.ValueOf(val), nil
}

func decoderMakerUint16E(fn reflect.Value) Decoder {
	return &decoderUint16E{fn: fn.Interface().(func([]byte) (uint16, error))}
}

type decoderTUint16 struct {
	fn func(reflect.Type, []byte) uint16
}

func (e *decoderTUint16) Decode(t reflect.Type, data []byte) (reflect.Value, error) {
	return reflect.ValueOf(e.fn(t, data)), nil
}

func decoderMakerTUint16(fn reflect.Value) Decoder {
	return &decoderTUint16{fn: fn.Interface().(func(reflect.Type, []byte) uint16)}
}

type decoderTUint16E struct {
	fn func(reflect.Type, []byte) (uint16, error)
}

func (e *decoderTUint16E) Decode(t reflect.Type, data []byte) (reflect.Value, error) {
	val, err := e.fn(t, data)
	if err != nil {
		return reflect.Value{}, nil
	}
	return reflect.ValueOf(val), nil
}

func decoderMakerTUint16E(fn reflect.Value) Decoder {
	return &decoderTUint16E{fn: fn.Interface().(func(reflect.Type, []byte) (uint16, error))}
}

type decoderUint32 struct {
	fn func([]byte) uint32
}

func (e *decoderUint32) Decode(t reflect.Type, data []byte) (reflect.Value, error) {
	return reflect.ValueOf(e.fn(data)), nil
}

func decoderMakerUint32(fn reflect.Value) Decoder {
	return &decoderUint32{fn: fn.Interface().(func([]byte) uint32)}
}

type decoderUint32E struct {
	fn func([]byte) (uint32, error)
}

func (e *decoderUint32E) Decode(t reflect.Type, data []byte) (reflect.Value, error) {
	val, err := e.fn(data)
	if err != nil {
		return reflect.Value{}, nil
	}
	return reflect.ValueOf(val), nil
}

func decoderMakerUint32E(fn reflect.Value) Decoder {
	return &decoderUint32E{fn: fn.Interface().(func([]byte) (uint32, error))}
}

type decoderTUint32 struct {
	fn func(reflect.Type, []byte) uint32
}

func (e *decoderTUint32) Decode(t reflect.Type, data []byte) (reflect.Value, error) {
	return reflect.ValueOf(e.fn(t, data)), nil
}

func decoderMakerTUint32(fn reflect.Value) Decoder {
	return &decoderTUint32{fn: fn.Interface().(func(reflect.Type, []byte) uint32)}
}

type decoderTUint32E struct {
	fn func(reflect.Type, []byte) (uint32, error)
}

func (e *decoderTUint32E) Decode(t reflect.Type, data []byte) (reflect.Value, error) {
	val, err := e.fn(t, data)
	if err != nil {
		return reflect.Value{}, nil
	}
	return reflect.ValueOf(val), nil
}

func decoderMakerTUint32E(fn reflect.Value) Decoder {
	return &decoderTUint32E{fn: fn.Interface().(func(reflect.Type, []byte) (uint32, error))}
}

type decoderUint64 struct {
	fn func([]byte) uint64
}

func (e *decoderUint64) Decode(t reflect.Type, data []byte) (reflect.Value, error) {
	return reflect.ValueOf(e.fn(data)), nil
}

func decoderMakerUint64(fn reflect.Value) Decoder {
	return &decoderUint64{fn: fn.Interface().(func([]byte) uint64)}
}

type decoderUint64E struct {
	fn func([]byte) (uint64, error)
}

func (e *decoderUint64E) Decode(t reflect.Type, data []byte) (reflect.Value, error) {
	val, err := e.fn(data)
	if err != nil {
		return reflect.Value{}, nil
	}
	return reflect.ValueOf(val), nil
}

func decoderMakerUint64E(fn reflect.Value) Decoder {
	return &decoderUint64E{fn: fn.Interface().(func([]byte) (uint64, error))}
}

type decoderTUint64 struct {
	fn func(reflect.Type, []byte) uint64
}

func (e *decoderTUint64) Decode(t reflect.Type, data []byte) (reflect.Value, error) {
	return reflect.ValueOf(e.fn(t, data)), nil
}

func decoderMakerTUint64(fn reflect.Value) Decoder {
	return &decoderTUint64{fn: fn.Interface().(func(reflect.Type, []byte) uint64)}
}

type decoderTUint64E struct {
	fn func(reflect.Type, []byte) (uint64, error)
}

func (e *decoderTUint64E) Decode(t reflect.Type, data []byte) (reflect.Value, error) {
	val, err := e.fn(t, data)
	if err != nil {
		return reflect.Value{}, nil
	}
	return reflect.ValueOf(val), nil
}

func decoderMakerTUint64E(fn reflect.Value) Decoder {
	return &decoderTUint64E{fn: fn.Interface().(func(reflect.Type, []byte) (uint64, error))}
}

type decoderFloat32 struct {
	fn func([]byte) float32
}

func (e *decoderFloat32) Decode(t reflect.Type, data []byte) (reflect.Value, error) {
	return reflect.ValueOf(e.fn(data)), nil
}

func decoderMakerFloat32(fn reflect.Value) Decoder {
	return &decoderFloat32{fn: fn.Interface().(func([]byte) float32)}
}

type decoderFloat32E struct {
	fn func([]byte) (float32, error)
}

func (e *decoderFloat32E) Decode(t reflect.Type, data []byte) (reflect.Value, error) {
	val, err := e.fn(data)
	if err != nil {
		return reflect.Value{}, nil
	}
	return reflect.ValueOf(val), nil
}

func decoderMakerFloat32E(fn reflect.Value) Decoder {
	return &decoderFloat32E{fn: fn.Interface().(func([]byte) (float32, error))}
}

type decoderTFloat32 struct {
	fn func(reflect.Type, []byte) float32
}

func (e *decoderTFloat32) Decode(t reflect.Type, data []byte) (reflect.Value, error) {
	return reflect.ValueOf(e.fn(t, data)), nil
}

func decoderMakerTFloat32(fn reflect.Value) Decoder {
	return &decoderTFloat32{fn: fn.Interface().(func(reflect.Type, []byte) float32)}
}

type decoderTFloat32E struct {
	fn func(reflect.Type, []byte) (float32, error)
}

func (e *decoderTFloat32E) Decode(t reflect.Type, data []byte) (reflect.Value, error) {
	val, err := e.fn(t, data)
	if err != nil {
		return reflect.Value{}, nil
	}
	return reflect.ValueOf(val), nil
}

func decoderMakerTFloat32E(fn reflect.Value) Decoder {
	return &decoderTFloat32E{fn: fn.Interface().(func(reflect.Type, []byte) (float32, error))}
}

type decoderFloat64 struct {
	fn func([]byte) float64
}

func (e *decoderFloat64) Decode(t reflect.Type, data []byte) (reflect.Value, error) {
	return reflect.ValueOf(e.fn(data)), nil
}

func decoderMakerFloat64(fn reflect.Value) Decoder {
	return &decoderFloat64{fn: fn.Interface().(func([]byte) float64)}
}

type decoderFloat64E struct {
	fn func([]byte) (float64, error)
}

func (e *decoderFloat64E) Decode(t reflect.Type, data []byte) (reflect.Value, error) {
	val, err := e.fn(data)
	if err != nil {
		return reflect.Value{}, nil
	}
	return reflect.ValueOf(val), nil
}

func decoderMakerFloat64E(fn reflect.Value) Decoder {
	return &decoderFloat64E{fn: fn.Interface().(func([]byte) (float64, error))}
}

type decoderTFloat64 struct {
	fn func(reflect.Type, []byte) float64
}

func (e *decoderTFloat64) Decode(t reflect.Type, data []byte) (reflect.Value, error) {
	return reflect.ValueOf(e.fn(t, data)), nil
}

func decoderMakerTFloat64(fn reflect.Value) Decoder {
	return &decoderTFloat64{fn: fn.Interface().(func(reflect.Type, []byte) float64)}
}

type decoderTFloat64E struct {
	fn func(reflect.Type, []byte) (float64, error)
}

func (e *decoderTFloat64E) Decode(t reflect.Type, data []byte) (reflect.Value, error) {
	val, err := e.fn(t, data)
	if err != nil {
		return reflect.Value{}, nil
	}
	return reflect.ValueOf(val), nil
}

func decoderMakerTFloat64E(fn reflect.Value) Decoder {
	return &decoderTFloat64E{fn: fn.Interface().(func(reflect.Type, []byte) (float64, error))}
}

type decoderTypex_T struct {
	fn func([]byte) typex.T
}

func (e *decoderTypex_T) Decode(t reflect.Type, data []byte) (reflect.Value, error) {
	return reflect.ValueOf(e.fn(data)), nil
}

func decoderMakerTypex_T(fn reflect.Value) Decoder {
	return &decoderTypex_T{fn: fn.Interface().(func([]byte) typex.T)}
}

type decoderTypex_TE struct {
	fn func([]byte) (typex.T, error)
}

func (e *decoderTypex_TE) Decode(t reflect.Type, data []byte) (reflect.Value, error) {
	val, err := e.fn(data)
	if err != nil {
		return reflect.Value{}, nil
	}
	return reflect.ValueOf(val), nil
}

func decoderMakerTypex_TE(fn reflect.Value) Decoder {
	return &decoderTypex_TE{fn: fn.Interface().(func([]byte) (typex.T, error))}
}

type decoderTTypex_T struct {
	fn func(reflect.Type, []byte) typex.T
}

func (e *decoderTTypex_T) Decode(t reflect.Type, data []byte) (reflect.Value, error) {
	return reflect.ValueOf(e.fn(t, data)), nil
}

func decoderMakerTTypex_T(fn reflect.Value) Decoder {
	return &decoderTTypex_T{fn: fn.Interface().(func(reflect.Type, []byte) typex.T)}
}

type decoderTTypex_TE struct {
	fn func(reflect.Type, []byte) (typex.T, error)
}

func (e *decoderTTypex_TE) Decode(t reflect.Type, data []byte) (reflect.Value, error) {
	val, err := e.fn(t, data)
	if err != nil {
		return reflect.Value{}, nil
	}
	return reflect.ValueOf(val), nil
}

func decoderMakerTTypex_TE(fn reflect.Value) Decoder {
	return &decoderTTypex_TE{fn: fn.Interface().(func(reflect.Type, []byte) (typex.T, error))}
}

type decoderTypex_U struct {
	fn func([]byte) typex.U
}

func (e *decoderTypex_U) Decode(t reflect.Type, data []byte) (reflect.Value, error) {
	return reflect.ValueOf(e.fn(data)), nil
}

func decoderMakerTypex_U(fn reflect.Value) Decoder {
	return &decoderTypex_U{fn: fn.Interface().(func([]byte) typex.U)}
}

type decoderTypex_UE struct {
	fn func([]byte) (typex.U, error)
}

func (e *decoderTypex_UE) Decode(t reflect.Type, data []byte) (reflect.Value, error) {
	val, err := e.fn(data)
	if err != nil {
		return reflect.Value{}, nil
	}
	return reflect.ValueOf(val), nil
}

func decoderMakerTypex_UE(fn reflect.Value) Decoder {
	return &decoderTypex_UE{fn: fn.Interface().(func([]byte) (typex.U, error))}
}

type decoderTTypex_U struct {
	fn func(reflect.Type, []byte) typex.U
}

func (e *decoderTTypex_U) Decode(t reflect.Type, data []byte) (reflect.Value, error) {
	return reflect.ValueOf(e.fn(t, data)), nil
}

func decoderMakerTTypex_U(fn reflect.Value) Decoder {
	return &decoderTTypex_U{fn: fn.Interface().(func(reflect.Type, []byte) typex.U)}
}

type decoderTTypex_UE struct {
	fn func(reflect.Type, []byte) (typex.U, error)
}

func (e *decoderTTypex_UE) Decode(t reflect.Type, data []byte) (reflect.Value, error) {
	val, err := e.fn(t, data)
	if err != nil {
		return reflect.Value{}, nil
	}
	return reflect.ValueOf(val), nil
}

func decoderMakerTTypex_UE(fn reflect.Value) Decoder {
	return &decoderTTypex_UE{fn: fn.Interface().(func(reflect.Type, []byte) (typex.U, error))}
}

type decoderTypex_V struct {
	fn func([]byte) typex.V
}

func (e *decoderTypex_V) Decode(t reflect.Type, data []byte) (reflect.Value, error) {
	return reflect.ValueOf(e.fn(data)), nil
}

func decoderMakerTypex_V(fn reflect.Value) Decoder {
	return &decoderTypex_V{fn: fn.Interface().(func([]byte) typex.V)}
}

type decoderTypex_VE struct {
	fn func([]byte) (typex.V, error)
}

func (e *decoderTypex_VE) Decode(t reflect.Type, data []byte) (reflect.Value, error) {
	val, err := e.fn(data)
	if err != nil {
		return reflect.Value{}, nil
	}
	return reflect.ValueOf(val), nil
}

func decoderMakerTypex_VE(fn reflect.Value) Decoder {
	return &decoderTypex_VE{fn: fn.Interface().(func([]byte) (typex.V, error))}
}

type decoderTTypex_V struct {
	fn func(reflect.Type, []byte) typex.V
}

func (e *decoderTTypex_V) Decode(t reflect.Type, data []byte) (reflect.Value, error) {
	return reflect.ValueOf(e.fn(t, data)), nil
}

func decoderMakerTTypex_V(fn reflect.Value) Decoder {
	return &decoderTTypex_V{fn: fn.Interface().(func(reflect.Type, []byte) typex.V)}
}

type decoderTTypex_VE struct {
	fn func(reflect.Type, []byte) (typex.V, error)
}

func (e *decoderTTypex_VE) Decode(t reflect.Type, data []byte) (reflect.Value, error) {
	val, err := e.fn(t, data)
	if err != nil {
		return reflect.Value{}, nil
	}
	return reflect.ValueOf(val), nil
}

func decoderMakerTTypex_VE(fn reflect.Value) Decoder {
	return &decoderTTypex_VE{fn: fn.Interface().(func(reflect.Type, []byte) (typex.V, error))}
}

type decoderTypex_W struct {
	fn func([]byte) typex.W
}

func (e *decoderTypex_W) Decode(t reflect.Type, data []byte) (reflect.Value, error) {
	return reflect.ValueOf(e.fn(data)), nil
}

func decoderMakerTypex_W(fn reflect.Value) Decoder {
	return &decoderTypex_W{fn: fn.Interface().(func([]byte) typex.W)}
}

type decoderTypex_WE struct {
	fn func([]byte) (typex.W, error)
}

func (e *decoderTypex_WE) Decode(t reflect.Type, data []byte) (reflect.Value, error) {
	val, err := e.fn(data)
	if err != nil {
		return reflect.Value{}, nil
	}
	return reflect.ValueOf(val), nil
}

func decoderMakerTypex_WE(fn reflect.Value) Decoder {
	return &decoderTypex_WE{fn: fn.Interface().(func([]byte) (typex.W, error))}
}

type decoderTTypex_W struct {
	fn func(reflect.Type, []byte) typex.W
}

func (e *decoderTTypex_W) Decode(t reflect.Type, data []byte) (reflect.Value, error) {
	return reflect.ValueOf(e.fn(t, data)), nil
}

func decoderMakerTTypex_W(fn reflect.Value) Decoder {
	return &decoderTTypex_W{fn: fn.Interface().(func(reflect.Type, []byte) typex.W)}
}

type decoderTTypex_WE struct {
	fn func(reflect.Type, []byte) (typex.W, error)
}

func (e *decoderTTypex_WE) Decode(t reflect.Type, data []byte) (reflect.Value, error) {
	val, err := e.fn(t, data)
	if err != nil {
		return reflect.Value{}, nil
	}
	return reflect.ValueOf(val), nil
}

func decoderMakerTTypex_WE(fn reflect.Value) Decoder {
	return &decoderTTypex_WE{fn: fn.Interface().(func(reflect.Type, []byte) (typex.W, error))}
}

type decoderTypex_X struct {
	fn func([]byte) typex.X
}

func (e *decoderTypex_X) Decode(t reflect.Type, data []byte) (reflect.Value, error) {
	return reflect.ValueOf(e.fn(data)), nil
}

func decoderMakerTypex_X(fn reflect.Value) Decoder {
	return &decoderTypex_X{fn: fn.Interface().(func([]byte) typex.X)}
}

type decoderTypex_XE struct {
	fn func([]byte) (typex.X, error)
}

func (e *decoderTypex_XE) Decode(t reflect.Type, data []byte) (reflect.Value, error) {
	val, err := e.fn(data)
	if err != nil {
		return reflect.Value{}, nil
	}
	return reflect.ValueOf(val), nil
}

func decoderMakerTypex_XE(fn reflect.Value) Decoder {
	return &decoderTypex_XE{fn: fn.Interface().(func([]byte) (typex.X, error))}
}

type decoderTTypex_X struct {
	fn func(reflect.Type, []byte) typex.X
}

func (e *decoderTTypex_X) Decode(t reflect.Type, data []byte) (reflect.Value, error) {
	return reflect.ValueOf(e.fn(t, data)), nil
}

func decoderMakerTTypex_X(fn reflect.Value) Decoder {
	return &decoderTTypex_X{fn: fn.Interface().(func(reflect.Type, []byte) typex.X)}
}

type decoderTTypex_XE struct {
	fn func(reflect.Type, []byte) (typex.X, error)
}

func (e *decoderTTypex_XE) Decode(t reflect.Type, data []byte) (reflect.Value, error) {
	val, err := e.fn(t, data)
	if err != nil {
		return reflect.Value{}, nil
	}
	return reflect.ValueOf(val), nil
}

func decoderMakerTTypex_XE(fn reflect.Value) Decoder {
	return &decoderTTypex_XE{fn: fn.Interface().(func(reflect.Type, []byte) (typex.X, error))}
}

type decoderTypex_Y struct {
	fn func([]byte) typex.Y
}

func (e *decoderTypex_Y) Decode(t reflect.Type, data []byte) (reflect.Value, error) {
	return reflect.ValueOf(e.fn(data)), nil
}

func decoderMakerTypex_Y(fn reflect.Value) Decoder {
	return &decoderTypex_Y{fn: fn.Interface().(func([]byte) typex.Y)}
}

type decoderTypex_YE struct {
	fn func([]byte) (typex.Y, error)
}

func (e *decoderTypex_YE) Decode(t reflect.Type, data []byte) (reflect.Value, error) {
	val, err := e.fn(data)
	if err != nil {
		return reflect.Value{}, nil
	}
	return reflect.ValueOf(val), nil
}

func decoderMakerTypex_YE(fn reflect.Value) Decoder {
	return &decoderTypex_YE{fn: fn.Interface().(func([]byte) (typex.Y, error))}
}

type decoderTTypex_Y struct {
	fn func(reflect.Type, []byte) typex.Y
}

func (e *decoderTTypex_Y) Decode(t reflect.Type, data []byte) (reflect.Value, error) {
	return reflect.ValueOf(e.fn(t, data)), nil
}

func decoderMakerTTypex_Y(fn reflect.Value) Decoder {
	return &decoderTTypex_Y{fn: fn.Interface().(func(reflect.Type, []byte) typex.Y)}
}

type decoderTTypex_YE struct {
	fn func(reflect.Type, []byte) (typex.Y, error)
}

func (e *decoderTTypex_YE) Decode(t reflect.Type, data []byte) (reflect.Value, error) {
	val, err := e.fn(t, data)
	if err != nil {
		return reflect.Value{}, nil
	}
	return reflect.ValueOf(val), nil
}

func decoderMakerTTypex_YE(fn reflect.Value) Decoder {
	return &decoderTTypex_YE{fn: fn.Interface().(func(reflect.Type, []byte) (typex.Y, error))}
}

type decoderTypex_Z struct {
	fn func([]byte) typex.Z
}

func (e *decoderTypex_Z) Decode(t reflect.Type, data []byte) (reflect.Value, error) {
	return reflect.ValueOf(e.fn(data)), nil
}

func decoderMakerTypex_Z(fn reflect.Value) Decoder {
	return &decoderTypex_Z{fn: fn.Interface().(func([]byte) typex.Z)}
}

type decoderTypex_ZE struct {
	fn func([]byte) (typex.Z, error)
}

func (e *decoderTypex_ZE) Decode(t reflect.Type, data []byte) (reflect.Value, error) {
	val, err := e.fn(data)
	if err != nil {
		return reflect.Value{}, nil
	}
	return reflect.ValueOf(val), nil
}

func decoderMakerTypex_ZE(fn reflect.Value) Decoder {
	return &decoderTypex_ZE{fn: fn.Interface().(func([]byte) (typex.Z, error))}
}

type decoderTTypex_Z struct {
	fn func(reflect.Type, []byte) typex.Z
}

func (e *decoderTTypex_Z) Decode(t reflect.Type, data []byte) (reflect.Value, error) {
	return reflect.ValueOf(e.fn(t, data)), nil
}

func decoderMakerTTypex_Z(fn reflect.Value) Decoder {
	return &decoderTTypex_Z{fn: fn.Interface().(func(reflect.Type, []byte) typex.Z)}
}

type decoderTTypex_ZE struct {
	fn func(reflect.Type, []byte) (typex.Z, error)
}

func (e *decoderTTypex_ZE) Decode(t reflect.Type, data []byte) (reflect.Value, error) {
	val, err := e.fn(t, data)
	if err != nil {
		return reflect.Value{}, nil
	}
	return reflect.ValueOf(val), nil
}

func decoderMakerTTypex_ZE(fn reflect.Value) Decoder {
	return &decoderTTypex_ZE{fn: fn.Interface().(func(reflect.Type, []byte) (typex.Z, error))}
}
