// Licensed to the Apache Software Foundation (ASF) under one or more
// contributor license agreements.  See the NOTICE file distributed with
// this work for additional information regarding copyright ownership.
// The ASF licenses this file to You under the Apache License, Version 2.0
// (the "License"); you may not use this file except in compliance with
// the License.  You may obtain a copy of the License at
//
//	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated from fn_arity.tmpl. DO NOT EDIT.

package exec

import (
	"fmt"

	"github.com/apache/beam/sdks/v2/go/pkg/beam/core/util/reflectx"
	"github.com/apache/beam/sdks/v2/go/pkg/beam/core/typex"
)

// initCall initializes the caller for the invoker, avoiding slice allocation for the 
// return values, and uses a cached return processor to handle the different possible
// return cases.
func (n *invoker) initCall() {
	switch fn := n.fn.Fn.(type) {
{{range $out := upto 4}}
{{range $in := upto 8}}
	case reflectx.Func{{$in}}x{{$out}}:
		n.call = func(pn typex.PaneInfo, ws []typex.Window, ts typex.EventTime) (*FullValue, error) {
			{{if $out}}{{mktuplef $out "r%v"}} := {{end}}fn.Call{{$in}}x{{$out}}({{mktuplef $in "n.args[%v]"}})
			{{- if $out}}
			return n.ret{{$out}}(pn, ws, ts, {{mktuplef $out "r%v"}})
			{{- else}}
			return nil, nil
			{{- end}}
		}
{{end}}
{{end}}
	default:
		n.call = func(pn typex.PaneInfo, ws []typex.Window, ts typex.EventTime) (*FullValue, error) {
			ret := n.fn.Fn.Call(n.args)
			if n.outErrIdx >= 0 && ret[n.outErrIdx] != nil {
				return nil, ret[n.outErrIdx].(error)
			}

			// (5) Return direct output, if any. Input timestamp and windows are implicitly
			// propagated.
			switch len(ret) {
			case 0:
				return nil, nil
			case 1:
				return n.ret1(pn, ws, ts, ret[0])
			case 2:
				return n.ret2(pn, ws, ts, ret[0], ret[1])
			case 3:
				return n.ret3(pn, ws, ts, ret[0], ret[1], ret[2])
			case 4:
				return n.ret4(pn, ws, ts, ret[0], ret[1], ret[2], ret[3])
			}
			panic(fmt.Sprintf("invoker: %v has > 4 return values, which is not permitted", n.fn.Fn.Name()))
		} 
	}
}
