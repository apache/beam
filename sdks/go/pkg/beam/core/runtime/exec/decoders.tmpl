// Licensed to the Apache Software Foundation (ASF) under one or more
// contributor license agreements.  See the NOTICE file distributed with
// this work for additional information regarding copyright ownership.
// The ASF licenses this file to You under the Apache License, Version 2.0
// (the "License"); you may not use this file except in compliance with
// the License.  You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package exec

import (
    "reflect"

  	"github.com/apache/beam/sdks/go/pkg/beam/core/typex"
)

func init() {
{{- range $x := .X}}
    RegisterDecoder(reflect.TypeOf((*func ([]byte) {{$x.Type}})(nil)).Elem(), decoderMaker{{$x.Name}})
    RegisterDecoder(reflect.TypeOf((*func ([]byte) ({{$x.Type}}, error))(nil)).Elem(), decoderMaker{{$x.Name}}E)
    RegisterDecoder(reflect.TypeOf((*func (reflect.Type, []byte) {{$x.Type}})(nil)).Elem(), decoderMakerT{{$x.Name}})
    RegisterDecoder(reflect.TypeOf((*func (reflect.Type, []byte) ({{$x.Type}}, error))(nil)).Elem(), decoderMakerT{{$x.Name}}E)
{{- end}}
}

{{range $x := .X}}
type decoder{{$x.Name}} struct {
    fn func ([]byte) {{$x.Type}}
}

func (e *decoder{{$x.Name}}) Decode(t reflect.Type, data []byte) (reflect.Value, error) {
    return reflect.ValueOf(e.fn(data)), nil
}

func decoderMaker{{$x.Name}}(fn reflect.Value) Decoder {
    return &decoder{{$x.Name}}{fn: fn.Interface().(func ([]byte) {{$x.Type}})}
}

type decoder{{$x.Name}}E struct {
    fn func ([]byte) ({{$x.Type}}, error)
}

func (e *decoder{{$x.Name}}E) Decode(t reflect.Type, data []byte) (reflect.Value, error) {
    val, err := e.fn(data)
    if err != nil {
        return reflect.Value{}, nil
    }
    return reflect.ValueOf(val), nil
}

func decoderMaker{{$x.Name}}E(fn reflect.Value) Decoder {
    return &decoder{{$x.Name}}E{fn: fn.Interface().(func ([]byte) ({{$x.Type}}, error))}
}

type decoderT{{$x.Name}} struct {
    fn func (reflect.Type, []byte) {{$x.Type}}
}

func (e *decoderT{{$x.Name}}) Decode(t reflect.Type, data []byte) (reflect.Value, error) {
    return reflect.ValueOf(e.fn(t, data)), nil
}

func decoderMakerT{{$x.Name}}(fn reflect.Value) Decoder {
    return &decoderT{{$x.Name}}{fn: fn.Interface().(func (reflect.Type, []byte) {{$x.Type}})}
}

type decoderT{{$x.Name}}E struct {
    fn func (reflect.Type, []byte) ({{$x.Type}}, error)
}

func (e *decoderT{{$x.Name}}E) Decode(t reflect.Type, data []byte) (reflect.Value, error) {
    val, err := e.fn(t, data)
    if err != nil {
        return reflect.Value{}, nil
    }
    return reflect.ValueOf(val), nil
}

func decoderMakerT{{$x.Name}}E(fn reflect.Value) Decoder {
    return &decoderT{{$x.Name}}E{fn: fn.Interface().(func (reflect.Type, []byte) ({{$x.Type}}, error))}
}
{{end}}
