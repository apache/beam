// Licensed to the Apache Software Foundation (ASF) under one or more
// contributor license agreements.  See the NOTICE file distributed with
// this work for additional information regarding copyright ownership.
// The ASF licenses this file to You under the Apache License, Version 2.0
// (the "License"); you may not use this file except in compliance with
// the License.  You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: beam_provision_api.proto

/*
Package fnexecution_v1 is a generated protocol buffer package.

It is generated from these files:
	beam_provision_api.proto

It has these top-level messages:
	GetProvisionInfoRequest
	GetProvisionInfoResponse
	ProvisionInfo
*/
package fnexecution_v1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/struct"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// A request to get the provision info of a SDK harness worker instance.
type GetProvisionInfoRequest struct {
}

func (m *GetProvisionInfoRequest) Reset()                    { *m = GetProvisionInfoRequest{} }
func (m *GetProvisionInfoRequest) String() string            { return proto.CompactTextString(m) }
func (*GetProvisionInfoRequest) ProtoMessage()               {}
func (*GetProvisionInfoRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// A response containing the provision info of a SDK harness worker instance.
type GetProvisionInfoResponse struct {
	Info *ProvisionInfo `protobuf:"bytes,1,opt,name=info" json:"info,omitempty"`
}

func (m *GetProvisionInfoResponse) Reset()                    { *m = GetProvisionInfoResponse{} }
func (m *GetProvisionInfoResponse) String() string            { return proto.CompactTextString(m) }
func (*GetProvisionInfoResponse) ProtoMessage()               {}
func (*GetProvisionInfoResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *GetProvisionInfoResponse) GetInfo() *ProvisionInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

// Runtime provisioning information for a SDK harness worker instance,
// such as pipeline options, resource constraints and other job metadata
type ProvisionInfo struct {
	// (required) The job ID.
	JobId string `protobuf:"bytes,1,opt,name=job_id,json=jobId" json:"job_id,omitempty"`
	// (required) The job name.
	JobName string `protobuf:"bytes,2,opt,name=job_name,json=jobName" json:"job_name,omitempty"`
	// (required) Pipeline options. For non-template jobs, the options are
	// identical to what is passed to job submission.
	PipelineOptions *google_protobuf.Struct `protobuf:"bytes,3,opt,name=pipeline_options,json=pipelineOptions" json:"pipeline_options,omitempty"`
}

func (m *ProvisionInfo) Reset()                    { *m = ProvisionInfo{} }
func (m *ProvisionInfo) String() string            { return proto.CompactTextString(m) }
func (*ProvisionInfo) ProtoMessage()               {}
func (*ProvisionInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ProvisionInfo) GetJobId() string {
	if m != nil {
		return m.JobId
	}
	return ""
}

func (m *ProvisionInfo) GetJobName() string {
	if m != nil {
		return m.JobName
	}
	return ""
}

func (m *ProvisionInfo) GetPipelineOptions() *google_protobuf.Struct {
	if m != nil {
		return m.PipelineOptions
	}
	return nil
}

func init() {
	proto.RegisterType((*GetProvisionInfoRequest)(nil), "org.apache.beam.model.fn_execution.v1.GetProvisionInfoRequest")
	proto.RegisterType((*GetProvisionInfoResponse)(nil), "org.apache.beam.model.fn_execution.v1.GetProvisionInfoResponse")
	proto.RegisterType((*ProvisionInfo)(nil), "org.apache.beam.model.fn_execution.v1.ProvisionInfo")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ProvisionService service

type ProvisionServiceClient interface {
	// Get provision information for the SDK harness worker instance.
	GetProvisionInfo(ctx context.Context, in *GetProvisionInfoRequest, opts ...grpc.CallOption) (*GetProvisionInfoResponse, error)
}

type provisionServiceClient struct {
	cc *grpc.ClientConn
}

func NewProvisionServiceClient(cc *grpc.ClientConn) ProvisionServiceClient {
	return &provisionServiceClient{cc}
}

func (c *provisionServiceClient) GetProvisionInfo(ctx context.Context, in *GetProvisionInfoRequest, opts ...grpc.CallOption) (*GetProvisionInfoResponse, error) {
	out := new(GetProvisionInfoResponse)
	err := grpc.Invoke(ctx, "/org.apache.beam.model.fn_execution.v1.ProvisionService/GetProvisionInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ProvisionService service

type ProvisionServiceServer interface {
	// Get provision information for the SDK harness worker instance.
	GetProvisionInfo(context.Context, *GetProvisionInfoRequest) (*GetProvisionInfoResponse, error)
}

func RegisterProvisionServiceServer(s *grpc.Server, srv ProvisionServiceServer) {
	s.RegisterService(&_ProvisionService_serviceDesc, srv)
}

func _ProvisionService_GetProvisionInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProvisionInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProvisionServiceServer).GetProvisionInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.apache.beam.model.fn_execution.v1.ProvisionService/GetProvisionInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProvisionServiceServer).GetProvisionInfo(ctx, req.(*GetProvisionInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ProvisionService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "org.apache.beam.model.fn_execution.v1.ProvisionService",
	HandlerType: (*ProvisionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProvisionInfo",
			Handler:    _ProvisionService_GetProvisionInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "beam_provision_api.proto",
}

func init() { proto.RegisterFile("beam_provision_api.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 311 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x90, 0xcd, 0x4a, 0x03, 0x31,
	0x14, 0x85, 0x19, 0x7f, 0xaa, 0xc6, 0xbf, 0x12, 0x90, 0x4e, 0x8b, 0x0b, 0x29, 0x0a, 0xae, 0x52,
	0x5a, 0x5d, 0x2b, 0x16, 0x41, 0xbb, 0x51, 0x69, 0x77, 0x6e, 0x42, 0x32, 0x73, 0xa7, 0xa6, 0x74,
	0x72, 0xe3, 0x24, 0x33, 0xf8, 0x02, 0x3e, 0x81, 0x2f, 0xe1, 0x63, 0x4a, 0x33, 0x4c, 0x69, 0x95,
	0x42, 0x71, 0x9b, 0x73, 0xcf, 0x97, 0x73, 0x0e, 0x09, 0x25, 0x88, 0x94, 0x9b, 0x0c, 0x0b, 0x65,
	0x15, 0x6a, 0x2e, 0x8c, 0x62, 0x26, 0x43, 0x87, 0xf4, 0x02, 0xb3, 0x31, 0x13, 0x46, 0x44, 0x6f,
	0xc0, 0x66, 0x47, 0x2c, 0xc5, 0x18, 0xa6, 0x2c, 0xd1, 0x1c, 0x3e, 0x20, 0xca, 0x9d, 0x42, 0xcd,
	0x8a, 0x6e, 0xeb, 0x74, 0x8c, 0x38, 0x9e, 0x42, 0xc7, 0x9b, 0x64, 0x9e, 0x74, 0xac, 0xcb, 0xf2,
	0xc8, 0x95, 0x90, 0x76, 0x93, 0x34, 0x1e, 0xc0, 0xbd, 0x54, 0xf8, 0x81, 0x4e, 0x70, 0x08, 0xef,
	0x39, 0x58, 0xd7, 0x8e, 0x49, 0xf8, 0x57, 0xb2, 0x06, 0xb5, 0x05, 0xfa, 0x48, 0xb6, 0x94, 0x4e,
	0x30, 0x0c, 0xce, 0x82, 0xcb, 0xfd, 0xde, 0x35, 0x5b, 0x2b, 0x0a, 0x5b, 0x66, 0x79, 0x42, 0xfb,
	0x33, 0x20, 0x87, 0x4b, 0xef, 0xf4, 0x84, 0xd4, 0x26, 0x28, 0xb9, 0x8a, 0x3d, 0x7d, 0x6f, 0xb8,
	0x3d, 0x41, 0x39, 0x88, 0x69, 0x93, 0xec, 0xce, 0x9e, 0xb5, 0x48, 0x21, 0xdc, 0xf0, 0xc2, 0xce,
	0x04, 0xe5, 0x93, 0x48, 0x81, 0xf6, 0x49, 0xdd, 0x28, 0x03, 0x53, 0xa5, 0x81, 0xa3, 0x99, 0xfd,
	0x66, 0xc3, 0x4d, 0x9f, 0xac, 0xc1, 0xca, 0xf6, 0xac, 0x6a, 0xcf, 0x46, 0xbe, 0xfd, 0xf0, 0xb8,
	0x32, 0x3c, 0x97, 0xf7, 0xbd, 0xef, 0x80, 0xd4, 0xe7, 0x39, 0x46, 0x90, 0x15, 0x2a, 0x02, 0xfa,
	0x15, 0x90, 0xfa, 0xef, 0x0d, 0xe8, 0xcd, 0x9a, 0x6d, 0x57, 0xec, 0xda, 0xba, 0xfd, 0xb7, 0xbf,
	0x1c, 0xbf, 0x7f, 0x4f, 0xce, 0x57, 0x11, 0x16, 0x01, 0xfd, 0x83, 0xb9, 0xfd, 0xce, 0xa8, 0xd7,
	0xa3, 0x05, 0x95, 0x17, 0x5d, 0x59, 0xf3, 0x93, 0x5c, 0xfd, 0x04, 0x00, 0x00, 0xff, 0xff, 0x2e,
	0xae, 0x1f, 0x23, 0x61, 0x02, 0x00, 0x00,
}
