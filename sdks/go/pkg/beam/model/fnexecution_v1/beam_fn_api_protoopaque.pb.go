//
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//
// Protocol Buffers describing the Fn API and boostrapping.
//
// TODO: Usage of plural names in lists looks awkward in Java
// e.g. getOutputsMap, addCodersBuilder
//
// TODO: gRPC / proto field names conflict with generated code
// e.g. "class" in java, "output" in python

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.0
// 	protoc        v5.27.3
// source: org/apache/beam/model/fn_execution/v1/beam_fn_api.proto

// TODO: Consider consolidating common components in another package
// and language namespaces for re-use with Runner Api.

//go:build protoopaque

package fnexecution_v1

import (
	pipeline_v1 "github.com/apache/beam/sdks/v2/go/pkg/beam/model/pipeline_v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/descriptorpb"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FnApiTransforms_Runner int32

const (
	// DataSource is a Root Transform, and a source of data for downstream
	// transforms in the same ProcessBundleDescriptor.
	// It represents a stream of values coming in from an external source/over
	// a data channel, typically from the runner. It's not the PCollection itself
	// but a description of how to get the portion of the PCollection for a given
	// bundle.
	//
	// The DataSource transform is implemented in each SDK and not explicitly
	// provided during pipeline construction. A runner inserts the transform
	// in ProcessBundleDescriptors to indicate where the bundle
	// can retrieve data for an associated ProcessBundleRequest.
	// Data for the same request will be retrieved with the matching instruction ID,
	// and transform ID determined by the runner.
	//
	// The DataSource transform will take a stream of bytes from the remote
	// source for the matching instruction ID and decode them as windowed
	// values using the provided coder ID, which must be a windowed value coder.
	//
	// Payload: RemoteGrpcPort
	FnApiTransforms_DATA_SOURCE FnApiTransforms_Runner = 0
	// DataSink is a transform that sends PCollection elements to a remote
	// port using the Data API.
	//
	// The DataSink transform is implemented in each SDK and not explicitly
	// provided during pipeline construction. A runner inserts the transform in
	// ProcessBundleDescriptors to indicate where the bundle can send
	// data for each associated ProcessBundleRequest. Data for the same
	// request will be sent with the matching instruction ID and transform ID.
	// Each PCollection that exits the ProcessBundleDescriptor subgraph will have
	// it's own DataSink, keyed by a transform ID determined by the runner.
	//
	// The DataSink will take in a stream of elements for a given instruction ID
	// and encode them for transmission to the remote sink. The coder ID must be
	// for a windowed value coder.
	//
	// Payload: RemoteGrpcPort
	FnApiTransforms_DATA_SINK FnApiTransforms_Runner = 1
)

// Enum value maps for FnApiTransforms_Runner.
var (
	FnApiTransforms_Runner_name = map[int32]string{
		0: "DATA_SOURCE",
		1: "DATA_SINK",
	}
	FnApiTransforms_Runner_value = map[string]int32{
		"DATA_SOURCE": 0,
		"DATA_SINK":   1,
	}
)

func (x FnApiTransforms_Runner) Enum() *FnApiTransforms_Runner {
	p := new(FnApiTransforms_Runner)
	*p = x
	return p
}

func (x FnApiTransforms_Runner) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FnApiTransforms_Runner) Descriptor() protoreflect.EnumDescriptor {
	return file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_enumTypes[0].Descriptor()
}

func (FnApiTransforms_Runner) Type() protoreflect.EnumType {
	return &file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_enumTypes[0]
}

func (x FnApiTransforms_Runner) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

type LogEntry_Severity_Enum int32

const (
	// Unspecified level information. Will be logged at the TRACE level.
	LogEntry_Severity_UNSPECIFIED LogEntry_Severity_Enum = 0
	LogEntry_Severity_TRACE       LogEntry_Severity_Enum = 1
	// Debugging information.
	LogEntry_Severity_DEBUG LogEntry_Severity_Enum = 2
	// Normal events.
	LogEntry_Severity_INFO LogEntry_Severity_Enum = 3
	// Normal but significant events, such as start up, shut down, or
	// configuration.
	LogEntry_Severity_NOTICE LogEntry_Severity_Enum = 4
	// Warning events might cause problems.
	LogEntry_Severity_WARN LogEntry_Severity_Enum = 5
	// Error events are likely to cause problems.
	LogEntry_Severity_ERROR LogEntry_Severity_Enum = 6
	// Critical events cause severe problems or brief outages and may
	// indicate that a person must take action.
	LogEntry_Severity_CRITICAL LogEntry_Severity_Enum = 7
)

// Enum value maps for LogEntry_Severity_Enum.
var (
	LogEntry_Severity_Enum_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "TRACE",
		2: "DEBUG",
		3: "INFO",
		4: "NOTICE",
		5: "WARN",
		6: "ERROR",
		7: "CRITICAL",
	}
	LogEntry_Severity_Enum_value = map[string]int32{
		"UNSPECIFIED": 0,
		"TRACE":       1,
		"DEBUG":       2,
		"INFO":        3,
		"NOTICE":      4,
		"WARN":        5,
		"ERROR":       6,
		"CRITICAL":    7,
	}
)

func (x LogEntry_Severity_Enum) Enum() *LogEntry_Severity_Enum {
	p := new(LogEntry_Severity_Enum)
	*p = x
	return p
}

func (x LogEntry_Severity_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LogEntry_Severity_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_enumTypes[1].Descriptor()
}

func (LogEntry_Severity_Enum) Type() protoreflect.EnumType {
	return &file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_enumTypes[1]
}

func (x LogEntry_Severity_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Describes transforms necessary to execute Beam over the FnAPI but are
// implementation details rather than part of the core model.
type FnApiTransforms struct {
	state         protoimpl.MessageState `protogen:"opaque.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FnApiTransforms) Reset() {
	*x = FnApiTransforms{}
	mi := &file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FnApiTransforms) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FnApiTransforms) ProtoMessage() {}

func (x *FnApiTransforms) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

type FnApiTransforms_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

}

func (b0 FnApiTransforms_builder) Build() *FnApiTransforms {
	m0 := &FnApiTransforms{}
	b, x := &b0, m0
	_, _ = b, x
	return m0
}

// A descriptor for connecting to a remote port using the Beam Fn Data API.
// Allows for communication between two environments (for example between the
// runner and the SDK).
// Stable
type RemoteGrpcPort struct {
	state                           protoimpl.MessageState            `protogen:"opaque.v1"`
	xxx_hidden_ApiServiceDescriptor *pipeline_v1.ApiServiceDescriptor `protobuf:"bytes,1,opt,name=api_service_descriptor,json=apiServiceDescriptor,proto3" json:"api_service_descriptor,omitempty"`
	xxx_hidden_CoderId              string                            `protobuf:"bytes,2,opt,name=coder_id,json=coderId,proto3" json:"coder_id,omitempty"`
	unknownFields                   protoimpl.UnknownFields
	sizeCache                       protoimpl.SizeCache
}

func (x *RemoteGrpcPort) Reset() {
	*x = RemoteGrpcPort{}
	mi := &file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoteGrpcPort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteGrpcPort) ProtoMessage() {}

func (x *RemoteGrpcPort) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *RemoteGrpcPort) GetApiServiceDescriptor() *pipeline_v1.ApiServiceDescriptor {
	if x != nil {
		return x.xxx_hidden_ApiServiceDescriptor
	}
	return nil
}

func (x *RemoteGrpcPort) GetCoderId() string {
	if x != nil {
		return x.xxx_hidden_CoderId
	}
	return ""
}

func (x *RemoteGrpcPort) SetApiServiceDescriptor(v *pipeline_v1.ApiServiceDescriptor) {
	x.xxx_hidden_ApiServiceDescriptor = v
}

func (x *RemoteGrpcPort) SetCoderId(v string) {
	x.xxx_hidden_CoderId = v
}

func (x *RemoteGrpcPort) HasApiServiceDescriptor() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_ApiServiceDescriptor != nil
}

func (x *RemoteGrpcPort) ClearApiServiceDescriptor() {
	x.xxx_hidden_ApiServiceDescriptor = nil
}

type RemoteGrpcPort_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// (Required) An API descriptor which describes where to
	// connect to including any authentication that is required.
	ApiServiceDescriptor *pipeline_v1.ApiServiceDescriptor
	// (Required) The ID of the Coder that will be used to encode and decode data
	// sent over this port.
	CoderId string
}

func (b0 RemoteGrpcPort_builder) Build() *RemoteGrpcPort {
	m0 := &RemoteGrpcPort{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_ApiServiceDescriptor = b.ApiServiceDescriptor
	x.xxx_hidden_CoderId = b.CoderId
	return m0
}

// Requests the ProcessBundleDescriptor with the given id.
type GetProcessBundleDescriptorRequest struct {
	state                                protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_ProcessBundleDescriptorId string                 `protobuf:"bytes,1,opt,name=process_bundle_descriptor_id,json=processBundleDescriptorId,proto3" json:"process_bundle_descriptor_id,omitempty"`
	unknownFields                        protoimpl.UnknownFields
	sizeCache                            protoimpl.SizeCache
}

func (x *GetProcessBundleDescriptorRequest) Reset() {
	*x = GetProcessBundleDescriptorRequest{}
	mi := &file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetProcessBundleDescriptorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProcessBundleDescriptorRequest) ProtoMessage() {}

func (x *GetProcessBundleDescriptorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *GetProcessBundleDescriptorRequest) GetProcessBundleDescriptorId() string {
	if x != nil {
		return x.xxx_hidden_ProcessBundleDescriptorId
	}
	return ""
}

func (x *GetProcessBundleDescriptorRequest) SetProcessBundleDescriptorId(v string) {
	x.xxx_hidden_ProcessBundleDescriptorId = v
}

type GetProcessBundleDescriptorRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	ProcessBundleDescriptorId string
}

func (b0 GetProcessBundleDescriptorRequest_builder) Build() *GetProcessBundleDescriptorRequest {
	m0 := &GetProcessBundleDescriptorRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_ProcessBundleDescriptorId = b.ProcessBundleDescriptorId
	return m0
}

// A request sent by a runner which the SDK is asked to fulfill.
// For any unsupported request type, an error should be returned with a
// matching instruction id.
// Stable
type InstructionRequest struct {
	state                    protoimpl.MessageState       `protogen:"opaque.v1"`
	xxx_hidden_InstructionId string                       `protobuf:"bytes,1,opt,name=instruction_id,json=instructionId,proto3" json:"instruction_id,omitempty"`
	xxx_hidden_Request       isInstructionRequest_Request `protobuf_oneof:"request"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *InstructionRequest) Reset() {
	*x = InstructionRequest{}
	mi := &file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InstructionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstructionRequest) ProtoMessage() {}

func (x *InstructionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *InstructionRequest) GetInstructionId() string {
	if x != nil {
		return x.xxx_hidden_InstructionId
	}
	return ""
}

func (x *InstructionRequest) GetProcessBundle() *ProcessBundleRequest {
	if x != nil {
		if x, ok := x.xxx_hidden_Request.(*instructionRequest_ProcessBundle); ok {
			return x.ProcessBundle
		}
	}
	return nil
}

func (x *InstructionRequest) GetProcessBundleProgress() *ProcessBundleProgressRequest {
	if x != nil {
		if x, ok := x.xxx_hidden_Request.(*instructionRequest_ProcessBundleProgress); ok {
			return x.ProcessBundleProgress
		}
	}
	return nil
}

func (x *InstructionRequest) GetProcessBundleSplit() *ProcessBundleSplitRequest {
	if x != nil {
		if x, ok := x.xxx_hidden_Request.(*instructionRequest_ProcessBundleSplit); ok {
			return x.ProcessBundleSplit
		}
	}
	return nil
}

func (x *InstructionRequest) GetFinalizeBundle() *FinalizeBundleRequest {
	if x != nil {
		if x, ok := x.xxx_hidden_Request.(*instructionRequest_FinalizeBundle); ok {
			return x.FinalizeBundle
		}
	}
	return nil
}

func (x *InstructionRequest) GetMonitoringInfos() *MonitoringInfosMetadataRequest {
	if x != nil {
		if x, ok := x.xxx_hidden_Request.(*instructionRequest_MonitoringInfos); ok {
			return x.MonitoringInfos
		}
	}
	return nil
}

func (x *InstructionRequest) GetHarnessMonitoringInfos() *HarnessMonitoringInfosRequest {
	if x != nil {
		if x, ok := x.xxx_hidden_Request.(*instructionRequest_HarnessMonitoringInfos); ok {
			return x.HarnessMonitoringInfos
		}
	}
	return nil
}

func (x *InstructionRequest) GetSampleData() *SampleDataRequest {
	if x != nil {
		if x, ok := x.xxx_hidden_Request.(*instructionRequest_SampleData); ok {
			return x.SampleData
		}
	}
	return nil
}

func (x *InstructionRequest) GetRegister() *RegisterRequest {
	if x != nil {
		if x, ok := x.xxx_hidden_Request.(*instructionRequest_Register); ok {
			return x.Register
		}
	}
	return nil
}

func (x *InstructionRequest) SetInstructionId(v string) {
	x.xxx_hidden_InstructionId = v
}

func (x *InstructionRequest) SetProcessBundle(v *ProcessBundleRequest) {
	if v == nil {
		x.xxx_hidden_Request = nil
		return
	}
	x.xxx_hidden_Request = &instructionRequest_ProcessBundle{v}
}

func (x *InstructionRequest) SetProcessBundleProgress(v *ProcessBundleProgressRequest) {
	if v == nil {
		x.xxx_hidden_Request = nil
		return
	}
	x.xxx_hidden_Request = &instructionRequest_ProcessBundleProgress{v}
}

func (x *InstructionRequest) SetProcessBundleSplit(v *ProcessBundleSplitRequest) {
	if v == nil {
		x.xxx_hidden_Request = nil
		return
	}
	x.xxx_hidden_Request = &instructionRequest_ProcessBundleSplit{v}
}

func (x *InstructionRequest) SetFinalizeBundle(v *FinalizeBundleRequest) {
	if v == nil {
		x.xxx_hidden_Request = nil
		return
	}
	x.xxx_hidden_Request = &instructionRequest_FinalizeBundle{v}
}

func (x *InstructionRequest) SetMonitoringInfos(v *MonitoringInfosMetadataRequest) {
	if v == nil {
		x.xxx_hidden_Request = nil
		return
	}
	x.xxx_hidden_Request = &instructionRequest_MonitoringInfos{v}
}

func (x *InstructionRequest) SetHarnessMonitoringInfos(v *HarnessMonitoringInfosRequest) {
	if v == nil {
		x.xxx_hidden_Request = nil
		return
	}
	x.xxx_hidden_Request = &instructionRequest_HarnessMonitoringInfos{v}
}

func (x *InstructionRequest) SetSampleData(v *SampleDataRequest) {
	if v == nil {
		x.xxx_hidden_Request = nil
		return
	}
	x.xxx_hidden_Request = &instructionRequest_SampleData{v}
}

func (x *InstructionRequest) SetRegister(v *RegisterRequest) {
	if v == nil {
		x.xxx_hidden_Request = nil
		return
	}
	x.xxx_hidden_Request = &instructionRequest_Register{v}
}

func (x *InstructionRequest) HasRequest() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Request != nil
}

func (x *InstructionRequest) HasProcessBundle() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Request.(*instructionRequest_ProcessBundle)
	return ok
}

func (x *InstructionRequest) HasProcessBundleProgress() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Request.(*instructionRequest_ProcessBundleProgress)
	return ok
}

func (x *InstructionRequest) HasProcessBundleSplit() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Request.(*instructionRequest_ProcessBundleSplit)
	return ok
}

func (x *InstructionRequest) HasFinalizeBundle() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Request.(*instructionRequest_FinalizeBundle)
	return ok
}

func (x *InstructionRequest) HasMonitoringInfos() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Request.(*instructionRequest_MonitoringInfos)
	return ok
}

func (x *InstructionRequest) HasHarnessMonitoringInfos() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Request.(*instructionRequest_HarnessMonitoringInfos)
	return ok
}

func (x *InstructionRequest) HasSampleData() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Request.(*instructionRequest_SampleData)
	return ok
}

func (x *InstructionRequest) HasRegister() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Request.(*instructionRequest_Register)
	return ok
}

func (x *InstructionRequest) ClearRequest() {
	x.xxx_hidden_Request = nil
}

func (x *InstructionRequest) ClearProcessBundle() {
	if _, ok := x.xxx_hidden_Request.(*instructionRequest_ProcessBundle); ok {
		x.xxx_hidden_Request = nil
	}
}

func (x *InstructionRequest) ClearProcessBundleProgress() {
	if _, ok := x.xxx_hidden_Request.(*instructionRequest_ProcessBundleProgress); ok {
		x.xxx_hidden_Request = nil
	}
}

func (x *InstructionRequest) ClearProcessBundleSplit() {
	if _, ok := x.xxx_hidden_Request.(*instructionRequest_ProcessBundleSplit); ok {
		x.xxx_hidden_Request = nil
	}
}

func (x *InstructionRequest) ClearFinalizeBundle() {
	if _, ok := x.xxx_hidden_Request.(*instructionRequest_FinalizeBundle); ok {
		x.xxx_hidden_Request = nil
	}
}

func (x *InstructionRequest) ClearMonitoringInfos() {
	if _, ok := x.xxx_hidden_Request.(*instructionRequest_MonitoringInfos); ok {
		x.xxx_hidden_Request = nil
	}
}

func (x *InstructionRequest) ClearHarnessMonitoringInfos() {
	if _, ok := x.xxx_hidden_Request.(*instructionRequest_HarnessMonitoringInfos); ok {
		x.xxx_hidden_Request = nil
	}
}

func (x *InstructionRequest) ClearSampleData() {
	if _, ok := x.xxx_hidden_Request.(*instructionRequest_SampleData); ok {
		x.xxx_hidden_Request = nil
	}
}

func (x *InstructionRequest) ClearRegister() {
	if _, ok := x.xxx_hidden_Request.(*instructionRequest_Register); ok {
		x.xxx_hidden_Request = nil
	}
}

const InstructionRequest_Request_not_set_case case_InstructionRequest_Request = 0
const InstructionRequest_ProcessBundle_case case_InstructionRequest_Request = 1001
const InstructionRequest_ProcessBundleProgress_case case_InstructionRequest_Request = 1002
const InstructionRequest_ProcessBundleSplit_case case_InstructionRequest_Request = 1003
const InstructionRequest_FinalizeBundle_case case_InstructionRequest_Request = 1004
const InstructionRequest_MonitoringInfos_case case_InstructionRequest_Request = 1005
const InstructionRequest_HarnessMonitoringInfos_case case_InstructionRequest_Request = 1006
const InstructionRequest_SampleData_case case_InstructionRequest_Request = 1007
const InstructionRequest_Register_case case_InstructionRequest_Request = 1000

func (x *InstructionRequest) WhichRequest() case_InstructionRequest_Request {
	if x == nil {
		return InstructionRequest_Request_not_set_case
	}
	switch x.xxx_hidden_Request.(type) {
	case *instructionRequest_ProcessBundle:
		return InstructionRequest_ProcessBundle_case
	case *instructionRequest_ProcessBundleProgress:
		return InstructionRequest_ProcessBundleProgress_case
	case *instructionRequest_ProcessBundleSplit:
		return InstructionRequest_ProcessBundleSplit_case
	case *instructionRequest_FinalizeBundle:
		return InstructionRequest_FinalizeBundle_case
	case *instructionRequest_MonitoringInfos:
		return InstructionRequest_MonitoringInfos_case
	case *instructionRequest_HarnessMonitoringInfos:
		return InstructionRequest_HarnessMonitoringInfos_case
	case *instructionRequest_SampleData:
		return InstructionRequest_SampleData_case
	case *instructionRequest_Register:
		return InstructionRequest_Register_case
	default:
		return InstructionRequest_Request_not_set_case
	}
}

type InstructionRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// (Required) A unique identifier provided by the runner which represents
	// this requests execution. The InstructionResponse MUST have the matching id.
	InstructionId string
	// (Required) A request that the SDK Harness needs to interpret.

	// Fields of oneof xxx_hidden_Request:
	ProcessBundle          *ProcessBundleRequest
	ProcessBundleProgress  *ProcessBundleProgressRequest
	ProcessBundleSplit     *ProcessBundleSplitRequest
	FinalizeBundle         *FinalizeBundleRequest
	MonitoringInfos        *MonitoringInfosMetadataRequest
	HarnessMonitoringInfos *HarnessMonitoringInfosRequest
	SampleData             *SampleDataRequest
	// DEPRECATED
	Register *RegisterRequest
	// -- end of xxx_hidden_Request
}

func (b0 InstructionRequest_builder) Build() *InstructionRequest {
	m0 := &InstructionRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_InstructionId = b.InstructionId
	if b.ProcessBundle != nil {
		x.xxx_hidden_Request = &instructionRequest_ProcessBundle{b.ProcessBundle}
	}
	if b.ProcessBundleProgress != nil {
		x.xxx_hidden_Request = &instructionRequest_ProcessBundleProgress{b.ProcessBundleProgress}
	}
	if b.ProcessBundleSplit != nil {
		x.xxx_hidden_Request = &instructionRequest_ProcessBundleSplit{b.ProcessBundleSplit}
	}
	if b.FinalizeBundle != nil {
		x.xxx_hidden_Request = &instructionRequest_FinalizeBundle{b.FinalizeBundle}
	}
	if b.MonitoringInfos != nil {
		x.xxx_hidden_Request = &instructionRequest_MonitoringInfos{b.MonitoringInfos}
	}
	if b.HarnessMonitoringInfos != nil {
		x.xxx_hidden_Request = &instructionRequest_HarnessMonitoringInfos{b.HarnessMonitoringInfos}
	}
	if b.SampleData != nil {
		x.xxx_hidden_Request = &instructionRequest_SampleData{b.SampleData}
	}
	if b.Register != nil {
		x.xxx_hidden_Request = &instructionRequest_Register{b.Register}
	}
	return m0
}

type case_InstructionRequest_Request protoreflect.FieldNumber

func (x case_InstructionRequest_Request) String() string {
	md := file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[3].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type isInstructionRequest_Request interface {
	isInstructionRequest_Request()
}

type instructionRequest_ProcessBundle struct {
	ProcessBundle *ProcessBundleRequest `protobuf:"bytes,1001,opt,name=process_bundle,json=processBundle,proto3,oneof"`
}

type instructionRequest_ProcessBundleProgress struct {
	ProcessBundleProgress *ProcessBundleProgressRequest `protobuf:"bytes,1002,opt,name=process_bundle_progress,json=processBundleProgress,proto3,oneof"`
}

type instructionRequest_ProcessBundleSplit struct {
	ProcessBundleSplit *ProcessBundleSplitRequest `protobuf:"bytes,1003,opt,name=process_bundle_split,json=processBundleSplit,proto3,oneof"`
}

type instructionRequest_FinalizeBundle struct {
	FinalizeBundle *FinalizeBundleRequest `protobuf:"bytes,1004,opt,name=finalize_bundle,json=finalizeBundle,proto3,oneof"`
}

type instructionRequest_MonitoringInfos struct {
	MonitoringInfos *MonitoringInfosMetadataRequest `protobuf:"bytes,1005,opt,name=monitoring_infos,json=monitoringInfos,proto3,oneof"`
}

type instructionRequest_HarnessMonitoringInfos struct {
	HarnessMonitoringInfos *HarnessMonitoringInfosRequest `protobuf:"bytes,1006,opt,name=harness_monitoring_infos,json=harnessMonitoringInfos,proto3,oneof"`
}

type instructionRequest_SampleData struct {
	SampleData *SampleDataRequest `protobuf:"bytes,1007,opt,name=sample_data,json=sampleData,proto3,oneof"`
}

type instructionRequest_Register struct {
	// DEPRECATED
	Register *RegisterRequest `protobuf:"bytes,1000,opt,name=register,proto3,oneof"`
}

func (*instructionRequest_ProcessBundle) isInstructionRequest_Request() {}

func (*instructionRequest_ProcessBundleProgress) isInstructionRequest_Request() {}

func (*instructionRequest_ProcessBundleSplit) isInstructionRequest_Request() {}

func (*instructionRequest_FinalizeBundle) isInstructionRequest_Request() {}

func (*instructionRequest_MonitoringInfos) isInstructionRequest_Request() {}

func (*instructionRequest_HarnessMonitoringInfos) isInstructionRequest_Request() {}

func (*instructionRequest_SampleData) isInstructionRequest_Request() {}

func (*instructionRequest_Register) isInstructionRequest_Request() {}

// The response for an associated request the SDK had been asked to fulfill.
// Stable
type InstructionResponse struct {
	state                    protoimpl.MessageState         `protogen:"opaque.v1"`
	xxx_hidden_InstructionId string                         `protobuf:"bytes,1,opt,name=instruction_id,json=instructionId,proto3" json:"instruction_id,omitempty"`
	xxx_hidden_Error         string                         `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	xxx_hidden_Response      isInstructionResponse_Response `protobuf_oneof:"response"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *InstructionResponse) Reset() {
	*x = InstructionResponse{}
	mi := &file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InstructionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstructionResponse) ProtoMessage() {}

func (x *InstructionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *InstructionResponse) GetInstructionId() string {
	if x != nil {
		return x.xxx_hidden_InstructionId
	}
	return ""
}

func (x *InstructionResponse) GetError() string {
	if x != nil {
		return x.xxx_hidden_Error
	}
	return ""
}

func (x *InstructionResponse) GetProcessBundle() *ProcessBundleResponse {
	if x != nil {
		if x, ok := x.xxx_hidden_Response.(*instructionResponse_ProcessBundle); ok {
			return x.ProcessBundle
		}
	}
	return nil
}

func (x *InstructionResponse) GetProcessBundleProgress() *ProcessBundleProgressResponse {
	if x != nil {
		if x, ok := x.xxx_hidden_Response.(*instructionResponse_ProcessBundleProgress); ok {
			return x.ProcessBundleProgress
		}
	}
	return nil
}

func (x *InstructionResponse) GetProcessBundleSplit() *ProcessBundleSplitResponse {
	if x != nil {
		if x, ok := x.xxx_hidden_Response.(*instructionResponse_ProcessBundleSplit); ok {
			return x.ProcessBundleSplit
		}
	}
	return nil
}

func (x *InstructionResponse) GetFinalizeBundle() *FinalizeBundleResponse {
	if x != nil {
		if x, ok := x.xxx_hidden_Response.(*instructionResponse_FinalizeBundle); ok {
			return x.FinalizeBundle
		}
	}
	return nil
}

func (x *InstructionResponse) GetMonitoringInfos() *MonitoringInfosMetadataResponse {
	if x != nil {
		if x, ok := x.xxx_hidden_Response.(*instructionResponse_MonitoringInfos); ok {
			return x.MonitoringInfos
		}
	}
	return nil
}

func (x *InstructionResponse) GetHarnessMonitoringInfos() *HarnessMonitoringInfosResponse {
	if x != nil {
		if x, ok := x.xxx_hidden_Response.(*instructionResponse_HarnessMonitoringInfos); ok {
			return x.HarnessMonitoringInfos
		}
	}
	return nil
}

func (x *InstructionResponse) GetSampleData() *SampleDataResponse {
	if x != nil {
		if x, ok := x.xxx_hidden_Response.(*instructionResponse_SampleData); ok {
			return x.SampleData
		}
	}
	return nil
}

func (x *InstructionResponse) GetRegister() *RegisterResponse {
	if x != nil {
		if x, ok := x.xxx_hidden_Response.(*instructionResponse_Register); ok {
			return x.Register
		}
	}
	return nil
}

func (x *InstructionResponse) SetInstructionId(v string) {
	x.xxx_hidden_InstructionId = v
}

func (x *InstructionResponse) SetError(v string) {
	x.xxx_hidden_Error = v
}

func (x *InstructionResponse) SetProcessBundle(v *ProcessBundleResponse) {
	if v == nil {
		x.xxx_hidden_Response = nil
		return
	}
	x.xxx_hidden_Response = &instructionResponse_ProcessBundle{v}
}

func (x *InstructionResponse) SetProcessBundleProgress(v *ProcessBundleProgressResponse) {
	if v == nil {
		x.xxx_hidden_Response = nil
		return
	}
	x.xxx_hidden_Response = &instructionResponse_ProcessBundleProgress{v}
}

func (x *InstructionResponse) SetProcessBundleSplit(v *ProcessBundleSplitResponse) {
	if v == nil {
		x.xxx_hidden_Response = nil
		return
	}
	x.xxx_hidden_Response = &instructionResponse_ProcessBundleSplit{v}
}

func (x *InstructionResponse) SetFinalizeBundle(v *FinalizeBundleResponse) {
	if v == nil {
		x.xxx_hidden_Response = nil
		return
	}
	x.xxx_hidden_Response = &instructionResponse_FinalizeBundle{v}
}

func (x *InstructionResponse) SetMonitoringInfos(v *MonitoringInfosMetadataResponse) {
	if v == nil {
		x.xxx_hidden_Response = nil
		return
	}
	x.xxx_hidden_Response = &instructionResponse_MonitoringInfos{v}
}

func (x *InstructionResponse) SetHarnessMonitoringInfos(v *HarnessMonitoringInfosResponse) {
	if v == nil {
		x.xxx_hidden_Response = nil
		return
	}
	x.xxx_hidden_Response = &instructionResponse_HarnessMonitoringInfos{v}
}

func (x *InstructionResponse) SetSampleData(v *SampleDataResponse) {
	if v == nil {
		x.xxx_hidden_Response = nil
		return
	}
	x.xxx_hidden_Response = &instructionResponse_SampleData{v}
}

func (x *InstructionResponse) SetRegister(v *RegisterResponse) {
	if v == nil {
		x.xxx_hidden_Response = nil
		return
	}
	x.xxx_hidden_Response = &instructionResponse_Register{v}
}

func (x *InstructionResponse) HasResponse() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Response != nil
}

func (x *InstructionResponse) HasProcessBundle() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Response.(*instructionResponse_ProcessBundle)
	return ok
}

func (x *InstructionResponse) HasProcessBundleProgress() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Response.(*instructionResponse_ProcessBundleProgress)
	return ok
}

func (x *InstructionResponse) HasProcessBundleSplit() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Response.(*instructionResponse_ProcessBundleSplit)
	return ok
}

func (x *InstructionResponse) HasFinalizeBundle() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Response.(*instructionResponse_FinalizeBundle)
	return ok
}

func (x *InstructionResponse) HasMonitoringInfos() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Response.(*instructionResponse_MonitoringInfos)
	return ok
}

func (x *InstructionResponse) HasHarnessMonitoringInfos() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Response.(*instructionResponse_HarnessMonitoringInfos)
	return ok
}

func (x *InstructionResponse) HasSampleData() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Response.(*instructionResponse_SampleData)
	return ok
}

func (x *InstructionResponse) HasRegister() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Response.(*instructionResponse_Register)
	return ok
}

func (x *InstructionResponse) ClearResponse() {
	x.xxx_hidden_Response = nil
}

func (x *InstructionResponse) ClearProcessBundle() {
	if _, ok := x.xxx_hidden_Response.(*instructionResponse_ProcessBundle); ok {
		x.xxx_hidden_Response = nil
	}
}

func (x *InstructionResponse) ClearProcessBundleProgress() {
	if _, ok := x.xxx_hidden_Response.(*instructionResponse_ProcessBundleProgress); ok {
		x.xxx_hidden_Response = nil
	}
}

func (x *InstructionResponse) ClearProcessBundleSplit() {
	if _, ok := x.xxx_hidden_Response.(*instructionResponse_ProcessBundleSplit); ok {
		x.xxx_hidden_Response = nil
	}
}

func (x *InstructionResponse) ClearFinalizeBundle() {
	if _, ok := x.xxx_hidden_Response.(*instructionResponse_FinalizeBundle); ok {
		x.xxx_hidden_Response = nil
	}
}

func (x *InstructionResponse) ClearMonitoringInfos() {
	if _, ok := x.xxx_hidden_Response.(*instructionResponse_MonitoringInfos); ok {
		x.xxx_hidden_Response = nil
	}
}

func (x *InstructionResponse) ClearHarnessMonitoringInfos() {
	if _, ok := x.xxx_hidden_Response.(*instructionResponse_HarnessMonitoringInfos); ok {
		x.xxx_hidden_Response = nil
	}
}

func (x *InstructionResponse) ClearSampleData() {
	if _, ok := x.xxx_hidden_Response.(*instructionResponse_SampleData); ok {
		x.xxx_hidden_Response = nil
	}
}

func (x *InstructionResponse) ClearRegister() {
	if _, ok := x.xxx_hidden_Response.(*instructionResponse_Register); ok {
		x.xxx_hidden_Response = nil
	}
}

const InstructionResponse_Response_not_set_case case_InstructionResponse_Response = 0
const InstructionResponse_ProcessBundle_case case_InstructionResponse_Response = 1001
const InstructionResponse_ProcessBundleProgress_case case_InstructionResponse_Response = 1002
const InstructionResponse_ProcessBundleSplit_case case_InstructionResponse_Response = 1003
const InstructionResponse_FinalizeBundle_case case_InstructionResponse_Response = 1004
const InstructionResponse_MonitoringInfos_case case_InstructionResponse_Response = 1005
const InstructionResponse_HarnessMonitoringInfos_case case_InstructionResponse_Response = 1006
const InstructionResponse_SampleData_case case_InstructionResponse_Response = 1007
const InstructionResponse_Register_case case_InstructionResponse_Response = 1000

func (x *InstructionResponse) WhichResponse() case_InstructionResponse_Response {
	if x == nil {
		return InstructionResponse_Response_not_set_case
	}
	switch x.xxx_hidden_Response.(type) {
	case *instructionResponse_ProcessBundle:
		return InstructionResponse_ProcessBundle_case
	case *instructionResponse_ProcessBundleProgress:
		return InstructionResponse_ProcessBundleProgress_case
	case *instructionResponse_ProcessBundleSplit:
		return InstructionResponse_ProcessBundleSplit_case
	case *instructionResponse_FinalizeBundle:
		return InstructionResponse_FinalizeBundle_case
	case *instructionResponse_MonitoringInfos:
		return InstructionResponse_MonitoringInfos_case
	case *instructionResponse_HarnessMonitoringInfos:
		return InstructionResponse_HarnessMonitoringInfos_case
	case *instructionResponse_SampleData:
		return InstructionResponse_SampleData_case
	case *instructionResponse_Register:
		return InstructionResponse_Register_case
	default:
		return InstructionResponse_Response_not_set_case
	}
}

type InstructionResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// (Required) A reference provided by the runner which represents a requests
	// execution. The InstructionResponse MUST have the matching id when
	// responding to the runner.
	InstructionId string
	// If this is specified, then this instruction has failed.
	// A human readable string representing the reason as to why processing has
	// failed.
	Error string
	// If the instruction did not fail, it is required to return an equivalent
	// response type depending on the request this matches.

	// Fields of oneof xxx_hidden_Response:
	ProcessBundle          *ProcessBundleResponse
	ProcessBundleProgress  *ProcessBundleProgressResponse
	ProcessBundleSplit     *ProcessBundleSplitResponse
	FinalizeBundle         *FinalizeBundleResponse
	MonitoringInfos        *MonitoringInfosMetadataResponse
	HarnessMonitoringInfos *HarnessMonitoringInfosResponse
	SampleData             *SampleDataResponse
	// DEPRECATED
	Register *RegisterResponse
	// -- end of xxx_hidden_Response
}

func (b0 InstructionResponse_builder) Build() *InstructionResponse {
	m0 := &InstructionResponse{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_InstructionId = b.InstructionId
	x.xxx_hidden_Error = b.Error
	if b.ProcessBundle != nil {
		x.xxx_hidden_Response = &instructionResponse_ProcessBundle{b.ProcessBundle}
	}
	if b.ProcessBundleProgress != nil {
		x.xxx_hidden_Response = &instructionResponse_ProcessBundleProgress{b.ProcessBundleProgress}
	}
	if b.ProcessBundleSplit != nil {
		x.xxx_hidden_Response = &instructionResponse_ProcessBundleSplit{b.ProcessBundleSplit}
	}
	if b.FinalizeBundle != nil {
		x.xxx_hidden_Response = &instructionResponse_FinalizeBundle{b.FinalizeBundle}
	}
	if b.MonitoringInfos != nil {
		x.xxx_hidden_Response = &instructionResponse_MonitoringInfos{b.MonitoringInfos}
	}
	if b.HarnessMonitoringInfos != nil {
		x.xxx_hidden_Response = &instructionResponse_HarnessMonitoringInfos{b.HarnessMonitoringInfos}
	}
	if b.SampleData != nil {
		x.xxx_hidden_Response = &instructionResponse_SampleData{b.SampleData}
	}
	if b.Register != nil {
		x.xxx_hidden_Response = &instructionResponse_Register{b.Register}
	}
	return m0
}

type case_InstructionResponse_Response protoreflect.FieldNumber

func (x case_InstructionResponse_Response) String() string {
	md := file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[4].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type isInstructionResponse_Response interface {
	isInstructionResponse_Response()
}

type instructionResponse_ProcessBundle struct {
	ProcessBundle *ProcessBundleResponse `protobuf:"bytes,1001,opt,name=process_bundle,json=processBundle,proto3,oneof"`
}

type instructionResponse_ProcessBundleProgress struct {
	ProcessBundleProgress *ProcessBundleProgressResponse `protobuf:"bytes,1002,opt,name=process_bundle_progress,json=processBundleProgress,proto3,oneof"`
}

type instructionResponse_ProcessBundleSplit struct {
	ProcessBundleSplit *ProcessBundleSplitResponse `protobuf:"bytes,1003,opt,name=process_bundle_split,json=processBundleSplit,proto3,oneof"`
}

type instructionResponse_FinalizeBundle struct {
	FinalizeBundle *FinalizeBundleResponse `protobuf:"bytes,1004,opt,name=finalize_bundle,json=finalizeBundle,proto3,oneof"`
}

type instructionResponse_MonitoringInfos struct {
	MonitoringInfos *MonitoringInfosMetadataResponse `protobuf:"bytes,1005,opt,name=monitoring_infos,json=monitoringInfos,proto3,oneof"`
}

type instructionResponse_HarnessMonitoringInfos struct {
	HarnessMonitoringInfos *HarnessMonitoringInfosResponse `protobuf:"bytes,1006,opt,name=harness_monitoring_infos,json=harnessMonitoringInfos,proto3,oneof"`
}

type instructionResponse_SampleData struct {
	SampleData *SampleDataResponse `protobuf:"bytes,1007,opt,name=sample_data,json=sampleData,proto3,oneof"`
}

type instructionResponse_Register struct {
	// DEPRECATED
	Register *RegisterResponse `protobuf:"bytes,1000,opt,name=register,proto3,oneof"`
}

func (*instructionResponse_ProcessBundle) isInstructionResponse_Response() {}

func (*instructionResponse_ProcessBundleProgress) isInstructionResponse_Response() {}

func (*instructionResponse_ProcessBundleSplit) isInstructionResponse_Response() {}

func (*instructionResponse_FinalizeBundle) isInstructionResponse_Response() {}

func (*instructionResponse_MonitoringInfos) isInstructionResponse_Response() {}

func (*instructionResponse_HarnessMonitoringInfos) isInstructionResponse_Response() {}

func (*instructionResponse_SampleData) isInstructionResponse_Response() {}

func (*instructionResponse_Register) isInstructionResponse_Response() {}

// If supported, the `SampleDataRequest` will respond with a
// `SampleDataResponse`. The SDK being queried must have the
// "beam:protocol:data_sampling:v1" capability. Samples are taken only from the
// specified PCollection ids. An empty list will return everything.
type SampleDataRequest struct {
	state                     protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_PcollectionIds []string               `protobuf:"bytes,1,rep,name=pcollection_ids,json=pcollectionIds,proto3" json:"pcollection_ids,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *SampleDataRequest) Reset() {
	*x = SampleDataRequest{}
	mi := &file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SampleDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SampleDataRequest) ProtoMessage() {}

func (x *SampleDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *SampleDataRequest) GetPcollectionIds() []string {
	if x != nil {
		return x.xxx_hidden_PcollectionIds
	}
	return nil
}

func (x *SampleDataRequest) SetPcollectionIds(v []string) {
	x.xxx_hidden_PcollectionIds = v
}

type SampleDataRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// (Optional) The PCollection ids to filter for.
	PcollectionIds []string
}

func (b0 SampleDataRequest_builder) Build() *SampleDataRequest {
	m0 := &SampleDataRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_PcollectionIds = b.PcollectionIds
	return m0
}

// An element sampled when the SDK is processing a bundle. This is a proto
// message to allow for additional per-element metadata.
type SampledElement struct {
	state                      protoimpl.MessageState    `protogen:"opaque.v1"`
	xxx_hidden_Element         []byte                    `protobuf:"bytes,1,opt,name=element,proto3" json:"element,omitempty"`
	xxx_hidden_SampleTimestamp *timestamppb.Timestamp    `protobuf:"bytes,2,opt,name=sample_timestamp,json=sampleTimestamp,proto3" json:"sample_timestamp,omitempty"`
	xxx_hidden_Exception       *SampledElement_Exception `protobuf:"bytes,3,opt,name=exception,proto3" json:"exception,omitempty"`
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *SampledElement) Reset() {
	*x = SampledElement{}
	mi := &file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SampledElement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SampledElement) ProtoMessage() {}

func (x *SampledElement) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *SampledElement) GetElement() []byte {
	if x != nil {
		return x.xxx_hidden_Element
	}
	return nil
}

func (x *SampledElement) GetSampleTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_SampleTimestamp
	}
	return nil
}

func (x *SampledElement) GetException() *SampledElement_Exception {
	if x != nil {
		return x.xxx_hidden_Exception
	}
	return nil
}

func (x *SampledElement) SetElement(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.xxx_hidden_Element = v
}

func (x *SampledElement) SetSampleTimestamp(v *timestamppb.Timestamp) {
	x.xxx_hidden_SampleTimestamp = v
}

func (x *SampledElement) SetException(v *SampledElement_Exception) {
	x.xxx_hidden_Exception = v
}

func (x *SampledElement) HasSampleTimestamp() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_SampleTimestamp != nil
}

func (x *SampledElement) HasException() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Exception != nil
}

func (x *SampledElement) ClearSampleTimestamp() {
	x.xxx_hidden_SampleTimestamp = nil
}

func (x *SampledElement) ClearException() {
	x.xxx_hidden_Exception = nil
}

type SampledElement_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// (Required) Sampled raw bytes for an element. This is a
	// single encoded element in the nested context.
	Element []byte
	// (Required) Timestamp of when the sample was taken.
	SampleTimestamp *timestamppb.Timestamp
	// (Optional) This will be set if this element was sampled because of a user
	// exception.
	Exception *SampledElement_Exception
}

func (b0 SampledElement_builder) Build() *SampledElement {
	m0 := &SampledElement{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Element = b.Element
	x.xxx_hidden_SampleTimestamp = b.SampleTimestamp
	x.xxx_hidden_Exception = b.Exception
	return m0
}

// If supported, the `SampleDataResponse` will contain samples from PCollections
// based upon the filters specified in the request.
type SampleDataResponse struct {
	state                     protoimpl.MessageState                     `protogen:"opaque.v1"`
	xxx_hidden_ElementSamples map[string]*SampleDataResponse_ElementList `protobuf:"bytes,1,rep,name=element_samples,json=elementSamples,proto3" json:"element_samples,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *SampleDataResponse) Reset() {
	*x = SampleDataResponse{}
	mi := &file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SampleDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SampleDataResponse) ProtoMessage() {}

func (x *SampleDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *SampleDataResponse) GetElementSamples() map[string]*SampleDataResponse_ElementList {
	if x != nil {
		return x.xxx_hidden_ElementSamples
	}
	return nil
}

func (x *SampleDataResponse) SetElementSamples(v map[string]*SampleDataResponse_ElementList) {
	x.xxx_hidden_ElementSamples = v
}

type SampleDataResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Map from PCollection id to sampled elements.
	ElementSamples map[string]*SampleDataResponse_ElementList
}

func (b0 SampleDataResponse_builder) Build() *SampleDataResponse {
	m0 := &SampleDataResponse{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_ElementSamples = b.ElementSamples
	return m0
}

// A request to provide full MonitoringInfo associated with the entire SDK
// harness process, not specific to a bundle.
//
// An SDK can report metrics using an identifier that only contains the
// associated payload. A runner who wants to receive the full metrics
// information can request all the monitoring metadata via a
// MonitoringInfosMetadataRequest providing a list of ids as necessary.
//
// The SDK is allowed to reuse the identifiers
// for the lifetime of the associated control connection as long
// as the MonitoringInfo could be reconstructed fully by overwriting its
// payload field with the bytes specified here.
type HarnessMonitoringInfosRequest struct {
	state         protoimpl.MessageState `protogen:"opaque.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HarnessMonitoringInfosRequest) Reset() {
	*x = HarnessMonitoringInfosRequest{}
	mi := &file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HarnessMonitoringInfosRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HarnessMonitoringInfosRequest) ProtoMessage() {}

func (x *HarnessMonitoringInfosRequest) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

type HarnessMonitoringInfosRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

}

func (b0 HarnessMonitoringInfosRequest_builder) Build() *HarnessMonitoringInfosRequest {
	m0 := &HarnessMonitoringInfosRequest{}
	b, x := &b0, m0
	_, _ = b, x
	return m0
}

type HarnessMonitoringInfosResponse struct {
	state                     protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_MonitoringData map[string][]byte      `protobuf:"bytes,1,rep,name=monitoring_data,json=monitoringData,proto3" json:"monitoring_data,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *HarnessMonitoringInfosResponse) Reset() {
	*x = HarnessMonitoringInfosResponse{}
	mi := &file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HarnessMonitoringInfosResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HarnessMonitoringInfosResponse) ProtoMessage() {}

func (x *HarnessMonitoringInfosResponse) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *HarnessMonitoringInfosResponse) GetMonitoringData() map[string][]byte {
	if x != nil {
		return x.xxx_hidden_MonitoringData
	}
	return nil
}

func (x *HarnessMonitoringInfosResponse) SetMonitoringData(v map[string][]byte) {
	x.xxx_hidden_MonitoringData = v
}

type HarnessMonitoringInfosResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// An identifier to MonitoringInfo.payload mapping containing
	// Metrics associated with the SDK harness, not a specific bundle.
	//
	// An SDK can report metrics using an identifier that only contains the
	// associated payload. A runner who wants to receive the full metrics
	// information can request all the monitoring metadata via a
	// MonitoringInfosMetadataRequest providing a list of ids as necessary.
	//
	// The SDK is allowed to reuse the identifiers
	// for the lifetime of the associated control connection as long
	// as the MonitoringInfo could be reconstructed fully by overwriting its
	// payload field with the bytes specified here.
	MonitoringData map[string][]byte
}

func (b0 HarnessMonitoringInfosResponse_builder) Build() *HarnessMonitoringInfosResponse {
	m0 := &HarnessMonitoringInfosResponse{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_MonitoringData = b.MonitoringData
	return m0
}

// A list of objects which can be referred to by the runner in
// future requests.
// Stable
type RegisterRequest struct {
	state                              protoimpl.MessageState      `protogen:"opaque.v1"`
	xxx_hidden_ProcessBundleDescriptor *[]*ProcessBundleDescriptor `protobuf:"bytes,1,rep,name=process_bundle_descriptor,json=processBundleDescriptor,proto3" json:"process_bundle_descriptor,omitempty"`
	unknownFields                      protoimpl.UnknownFields
	sizeCache                          protoimpl.SizeCache
}

func (x *RegisterRequest) Reset() {
	*x = RegisterRequest{}
	mi := &file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterRequest) ProtoMessage() {}

func (x *RegisterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *RegisterRequest) GetProcessBundleDescriptor() []*ProcessBundleDescriptor {
	if x != nil {
		if x.xxx_hidden_ProcessBundleDescriptor != nil {
			return *x.xxx_hidden_ProcessBundleDescriptor
		}
	}
	return nil
}

func (x *RegisterRequest) SetProcessBundleDescriptor(v []*ProcessBundleDescriptor) {
	x.xxx_hidden_ProcessBundleDescriptor = &v
}

type RegisterRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// (Optional) The set of descriptors used to process bundles.
	ProcessBundleDescriptor []*ProcessBundleDescriptor
}

func (b0 RegisterRequest_builder) Build() *RegisterRequest {
	m0 := &RegisterRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_ProcessBundleDescriptor = &b.ProcessBundleDescriptor
	return m0
}

// Stable
type RegisterResponse struct {
	state         protoimpl.MessageState `protogen:"opaque.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RegisterResponse) Reset() {
	*x = RegisterResponse{}
	mi := &file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterResponse) ProtoMessage() {}

func (x *RegisterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

type RegisterResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

}

func (b0 RegisterResponse_builder) Build() *RegisterResponse {
	m0 := &RegisterResponse{}
	b, x := &b0, m0
	_, _ = b, x
	return m0
}

// Definitions that should be used to construct the bundle processing graph.
type ProcessBundleDescriptor struct {
	state                                protoimpl.MessageState                    `protogen:"opaque.v1"`
	xxx_hidden_Id                        string                                    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	xxx_hidden_Transforms                map[string]*pipeline_v1.PTransform        `protobuf:"bytes,2,rep,name=transforms,proto3" json:"transforms,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	xxx_hidden_Pcollections              map[string]*pipeline_v1.PCollection       `protobuf:"bytes,3,rep,name=pcollections,proto3" json:"pcollections,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	xxx_hidden_WindowingStrategies       map[string]*pipeline_v1.WindowingStrategy `protobuf:"bytes,4,rep,name=windowing_strategies,json=windowingStrategies,proto3" json:"windowing_strategies,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	xxx_hidden_Coders                    map[string]*pipeline_v1.Coder             `protobuf:"bytes,5,rep,name=coders,proto3" json:"coders,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	xxx_hidden_Environments              map[string]*pipeline_v1.Environment       `protobuf:"bytes,6,rep,name=environments,proto3" json:"environments,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	xxx_hidden_StateApiServiceDescriptor *pipeline_v1.ApiServiceDescriptor         `protobuf:"bytes,7,opt,name=state_api_service_descriptor,json=stateApiServiceDescriptor,proto3" json:"state_api_service_descriptor,omitempty"`
	xxx_hidden_TimerApiServiceDescriptor *pipeline_v1.ApiServiceDescriptor         `protobuf:"bytes,8,opt,name=timer_api_service_descriptor,json=timerApiServiceDescriptor,proto3" json:"timer_api_service_descriptor,omitempty"`
	unknownFields                        protoimpl.UnknownFields
	sizeCache                            protoimpl.SizeCache
}

func (x *ProcessBundleDescriptor) Reset() {
	*x = ProcessBundleDescriptor{}
	mi := &file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProcessBundleDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessBundleDescriptor) ProtoMessage() {}

func (x *ProcessBundleDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ProcessBundleDescriptor) GetId() string {
	if x != nil {
		return x.xxx_hidden_Id
	}
	return ""
}

func (x *ProcessBundleDescriptor) GetTransforms() map[string]*pipeline_v1.PTransform {
	if x != nil {
		return x.xxx_hidden_Transforms
	}
	return nil
}

func (x *ProcessBundleDescriptor) GetPcollections() map[string]*pipeline_v1.PCollection {
	if x != nil {
		return x.xxx_hidden_Pcollections
	}
	return nil
}

func (x *ProcessBundleDescriptor) GetWindowingStrategies() map[string]*pipeline_v1.WindowingStrategy {
	if x != nil {
		return x.xxx_hidden_WindowingStrategies
	}
	return nil
}

func (x *ProcessBundleDescriptor) GetCoders() map[string]*pipeline_v1.Coder {
	if x != nil {
		return x.xxx_hidden_Coders
	}
	return nil
}

func (x *ProcessBundleDescriptor) GetEnvironments() map[string]*pipeline_v1.Environment {
	if x != nil {
		return x.xxx_hidden_Environments
	}
	return nil
}

func (x *ProcessBundleDescriptor) GetStateApiServiceDescriptor() *pipeline_v1.ApiServiceDescriptor {
	if x != nil {
		return x.xxx_hidden_StateApiServiceDescriptor
	}
	return nil
}

func (x *ProcessBundleDescriptor) GetTimerApiServiceDescriptor() *pipeline_v1.ApiServiceDescriptor {
	if x != nil {
		return x.xxx_hidden_TimerApiServiceDescriptor
	}
	return nil
}

func (x *ProcessBundleDescriptor) SetId(v string) {
	x.xxx_hidden_Id = v
}

func (x *ProcessBundleDescriptor) SetTransforms(v map[string]*pipeline_v1.PTransform) {
	x.xxx_hidden_Transforms = v
}

func (x *ProcessBundleDescriptor) SetPcollections(v map[string]*pipeline_v1.PCollection) {
	x.xxx_hidden_Pcollections = v
}

func (x *ProcessBundleDescriptor) SetWindowingStrategies(v map[string]*pipeline_v1.WindowingStrategy) {
	x.xxx_hidden_WindowingStrategies = v
}

func (x *ProcessBundleDescriptor) SetCoders(v map[string]*pipeline_v1.Coder) {
	x.xxx_hidden_Coders = v
}

func (x *ProcessBundleDescriptor) SetEnvironments(v map[string]*pipeline_v1.Environment) {
	x.xxx_hidden_Environments = v
}

func (x *ProcessBundleDescriptor) SetStateApiServiceDescriptor(v *pipeline_v1.ApiServiceDescriptor) {
	x.xxx_hidden_StateApiServiceDescriptor = v
}

func (x *ProcessBundleDescriptor) SetTimerApiServiceDescriptor(v *pipeline_v1.ApiServiceDescriptor) {
	x.xxx_hidden_TimerApiServiceDescriptor = v
}

func (x *ProcessBundleDescriptor) HasStateApiServiceDescriptor() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_StateApiServiceDescriptor != nil
}

func (x *ProcessBundleDescriptor) HasTimerApiServiceDescriptor() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_TimerApiServiceDescriptor != nil
}

func (x *ProcessBundleDescriptor) ClearStateApiServiceDescriptor() {
	x.xxx_hidden_StateApiServiceDescriptor = nil
}

func (x *ProcessBundleDescriptor) ClearTimerApiServiceDescriptor() {
	x.xxx_hidden_TimerApiServiceDescriptor = nil
}

type ProcessBundleDescriptor_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// (Required) A pipeline level unique id which can be used as a reference to
	// refer to this.
	Id string
	// (Required) A map from pipeline-scoped id to PTransform.
	Transforms map[string]*pipeline_v1.PTransform
	// (Required) A map from pipeline-scoped id to PCollection.
	Pcollections map[string]*pipeline_v1.PCollection
	// (Required) A map from pipeline-scoped id to WindowingStrategy.
	WindowingStrategies map[string]*pipeline_v1.WindowingStrategy
	// (Required) A map from pipeline-scoped id to Coder.
	Coders map[string]*pipeline_v1.Coder
	// (Required) A map from pipeline-scoped id to Environment.
	Environments map[string]*pipeline_v1.Environment
	// A descriptor describing the end point to use for State API
	// calls. Required if the Runner intends to send remote references over the
	// data plane or if any of the transforms rely on user state or side inputs.
	StateApiServiceDescriptor *pipeline_v1.ApiServiceDescriptor
	// A descriptor describing the end point to use for Data API for user timers.
	// Required if the ProcessBundleDescriptor contains any transforms that have user timers.
	TimerApiServiceDescriptor *pipeline_v1.ApiServiceDescriptor
}

func (b0 ProcessBundleDescriptor_builder) Build() *ProcessBundleDescriptor {
	m0 := &ProcessBundleDescriptor{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Id = b.Id
	x.xxx_hidden_Transforms = b.Transforms
	x.xxx_hidden_Pcollections = b.Pcollections
	x.xxx_hidden_WindowingStrategies = b.WindowingStrategies
	x.xxx_hidden_Coders = b.Coders
	x.xxx_hidden_Environments = b.Environments
	x.xxx_hidden_StateApiServiceDescriptor = b.StateApiServiceDescriptor
	x.xxx_hidden_TimerApiServiceDescriptor = b.TimerApiServiceDescriptor
	return m0
}

// One of the applications specifying the scope of work for a bundle.
// See
// https://docs.google.com/document/d/1tUDb45sStdR8u7-jBkGdw3OGFK7aa2-V7eo86zYSE_4/edit#heading=h.9g3g5weg2u9
// for further details.
type BundleApplication struct {
	state                       protoimpl.MessageState            `protogen:"opaque.v1"`
	xxx_hidden_TransformId      string                            `protobuf:"bytes,1,opt,name=transform_id,json=transformId,proto3" json:"transform_id,omitempty"`
	xxx_hidden_InputId          string                            `protobuf:"bytes,2,opt,name=input_id,json=inputId,proto3" json:"input_id,omitempty"`
	xxx_hidden_Element          []byte                            `protobuf:"bytes,3,opt,name=element,proto3" json:"element,omitempty"`
	xxx_hidden_OutputWatermarks map[string]*timestamppb.Timestamp `protobuf:"bytes,4,rep,name=output_watermarks,json=outputWatermarks,proto3" json:"output_watermarks,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	xxx_hidden_IsBounded        pipeline_v1.IsBounded_Enum        `protobuf:"varint,5,opt,name=is_bounded,json=isBounded,proto3,enum=org.apache.beam.model.pipeline.v1.IsBounded_Enum" json:"is_bounded,omitempty"`
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
}

func (x *BundleApplication) Reset() {
	*x = BundleApplication{}
	mi := &file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BundleApplication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BundleApplication) ProtoMessage() {}

func (x *BundleApplication) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *BundleApplication) GetTransformId() string {
	if x != nil {
		return x.xxx_hidden_TransformId
	}
	return ""
}

func (x *BundleApplication) GetInputId() string {
	if x != nil {
		return x.xxx_hidden_InputId
	}
	return ""
}

func (x *BundleApplication) GetElement() []byte {
	if x != nil {
		return x.xxx_hidden_Element
	}
	return nil
}

func (x *BundleApplication) GetOutputWatermarks() map[string]*timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_OutputWatermarks
	}
	return nil
}

func (x *BundleApplication) GetIsBounded() pipeline_v1.IsBounded_Enum {
	if x != nil {
		return x.xxx_hidden_IsBounded
	}
	return pipeline_v1.IsBounded_Enum(0)
}

func (x *BundleApplication) SetTransformId(v string) {
	x.xxx_hidden_TransformId = v
}

func (x *BundleApplication) SetInputId(v string) {
	x.xxx_hidden_InputId = v
}

func (x *BundleApplication) SetElement(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.xxx_hidden_Element = v
}

func (x *BundleApplication) SetOutputWatermarks(v map[string]*timestamppb.Timestamp) {
	x.xxx_hidden_OutputWatermarks = v
}

func (x *BundleApplication) SetIsBounded(v pipeline_v1.IsBounded_Enum) {
	x.xxx_hidden_IsBounded = v
}

type BundleApplication_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// (Required) The transform to which to pass the element
	TransformId string
	// (Required) Name of the transform's input to which to pass the element.
	InputId string
	// (Required) The encoded element to pass to the transform.
	Element []byte
	// The map is keyed by the local output name of the PTransform. Each
	// value represents a lower bound on the timestamps of elements that
	// are produced by this PTransform into each of its output PCollections
	// when invoked with this application.
	//
	// If there is no watermark reported from RestrictionTracker, the runner will
	// use MIN_TIMESTAMP by default.
	OutputWatermarks map[string]*timestamppb.Timestamp
	// Whether this application potentially produces an unbounded
	// amount of data. Note that this should only be set to BOUNDED if and
	// only if the application is known to produce a finite amount of output.
	IsBounded pipeline_v1.IsBounded_Enum
}

func (b0 BundleApplication_builder) Build() *BundleApplication {
	m0 := &BundleApplication{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_TransformId = b.TransformId
	x.xxx_hidden_InputId = b.InputId
	x.xxx_hidden_Element = b.Element
	x.xxx_hidden_OutputWatermarks = b.OutputWatermarks
	x.xxx_hidden_IsBounded = b.IsBounded
	return m0
}

// An Application should be scheduled for execution after a delay.
// Either an absolute timestamp or a relative timestamp can represent a
// scheduled execution time.
type DelayedBundleApplication struct {
	state                         protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Application        *BundleApplication     `protobuf:"bytes,1,opt,name=application,proto3" json:"application,omitempty"`
	xxx_hidden_RequestedTimeDelay *durationpb.Duration   `protobuf:"bytes,2,opt,name=requested_time_delay,json=requestedTimeDelay,proto3" json:"requested_time_delay,omitempty"`
	unknownFields                 protoimpl.UnknownFields
	sizeCache                     protoimpl.SizeCache
}

func (x *DelayedBundleApplication) Reset() {
	*x = DelayedBundleApplication{}
	mi := &file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DelayedBundleApplication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelayedBundleApplication) ProtoMessage() {}

func (x *DelayedBundleApplication) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *DelayedBundleApplication) GetApplication() *BundleApplication {
	if x != nil {
		return x.xxx_hidden_Application
	}
	return nil
}

func (x *DelayedBundleApplication) GetRequestedTimeDelay() *durationpb.Duration {
	if x != nil {
		return x.xxx_hidden_RequestedTimeDelay
	}
	return nil
}

func (x *DelayedBundleApplication) SetApplication(v *BundleApplication) {
	x.xxx_hidden_Application = v
}

func (x *DelayedBundleApplication) SetRequestedTimeDelay(v *durationpb.Duration) {
	x.xxx_hidden_RequestedTimeDelay = v
}

func (x *DelayedBundleApplication) HasApplication() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Application != nil
}

func (x *DelayedBundleApplication) HasRequestedTimeDelay() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_RequestedTimeDelay != nil
}

func (x *DelayedBundleApplication) ClearApplication() {
	x.xxx_hidden_Application = nil
}

func (x *DelayedBundleApplication) ClearRequestedTimeDelay() {
	x.xxx_hidden_RequestedTimeDelay = nil
}

type DelayedBundleApplication_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// (Required) The application that should be scheduled.
	Application *BundleApplication
	// Recommended time delay at which the application should be scheduled to
	// execute by the runner. Time delay that equals 0 may be scheduled to execute
	// immediately. The unit of time delay should be microsecond.
	RequestedTimeDelay *durationpb.Duration
}

func (b0 DelayedBundleApplication_builder) Build() *DelayedBundleApplication {
	m0 := &DelayedBundleApplication{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Application = b.Application
	x.xxx_hidden_RequestedTimeDelay = b.RequestedTimeDelay
	return m0
}

// A request to process a given bundle.
// Stable
type ProcessBundleRequest struct {
	state                                protoimpl.MessageState              `protogen:"opaque.v1"`
	xxx_hidden_ProcessBundleDescriptorId string                              `protobuf:"bytes,1,opt,name=process_bundle_descriptor_id,json=processBundleDescriptorId,proto3" json:"process_bundle_descriptor_id,omitempty"`
	xxx_hidden_CacheTokens               *[]*ProcessBundleRequest_CacheToken `protobuf:"bytes,2,rep,name=cache_tokens,json=cacheTokens,proto3" json:"cache_tokens,omitempty"`
	xxx_hidden_Elements                  *Elements                           `protobuf:"bytes,3,opt,name=elements,proto3" json:"elements,omitempty"`
	unknownFields                        protoimpl.UnknownFields
	sizeCache                            protoimpl.SizeCache
}

func (x *ProcessBundleRequest) Reset() {
	*x = ProcessBundleRequest{}
	mi := &file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProcessBundleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessBundleRequest) ProtoMessage() {}

func (x *ProcessBundleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ProcessBundleRequest) GetProcessBundleDescriptorId() string {
	if x != nil {
		return x.xxx_hidden_ProcessBundleDescriptorId
	}
	return ""
}

func (x *ProcessBundleRequest) GetCacheTokens() []*ProcessBundleRequest_CacheToken {
	if x != nil {
		if x.xxx_hidden_CacheTokens != nil {
			return *x.xxx_hidden_CacheTokens
		}
	}
	return nil
}

func (x *ProcessBundleRequest) GetElements() *Elements {
	if x != nil {
		return x.xxx_hidden_Elements
	}
	return nil
}

func (x *ProcessBundleRequest) SetProcessBundleDescriptorId(v string) {
	x.xxx_hidden_ProcessBundleDescriptorId = v
}

func (x *ProcessBundleRequest) SetCacheTokens(v []*ProcessBundleRequest_CacheToken) {
	x.xxx_hidden_CacheTokens = &v
}

func (x *ProcessBundleRequest) SetElements(v *Elements) {
	x.xxx_hidden_Elements = v
}

func (x *ProcessBundleRequest) HasElements() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Elements != nil
}

func (x *ProcessBundleRequest) ClearElements() {
	x.xxx_hidden_Elements = nil
}

type ProcessBundleRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// (Required) A reference to the process bundle descriptor that must be
	// instantiated and executed by the SDK harness.
	ProcessBundleDescriptorId string
	// (Optional) A list of cache tokens that can be used by an SDK to reuse
	// cached data returned by the State API across multiple bundles.
	//
	// Note that SDKs that can efficiently consume this field should declare
	// the beam:protocol:state_caching:v1 capability enabling runners to reduce
	// the amount of memory used.
	//
	// See https://s.apache.org/beam-fn-state-api-and-bundle-processing#heading=h.7ghoih5aig5m
	// for additional details on how to use the cache token with the State API
	// to cache data across bundle boundaries.
	CacheTokens []*ProcessBundleRequest_CacheToken
	// (Optional) Elements to be processed with the bundle. Either all or
	// none of the bundle elements should be included in the ProcessBundleRequest.
	// This embedding is to achieve better efficiency for bundles that contain
	// only small amounts of data and are cheap to be processed on the SDK harness
	// side. This field can be set only if the SDK declares that it supports the
	// beam:protocol:control_request_elements_embedding:v1 capability. See more
	// at https://s.apache.org/beam-fn-api-control-data-embedding.
	Elements *Elements
}

func (b0 ProcessBundleRequest_builder) Build() *ProcessBundleRequest {
	m0 := &ProcessBundleRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_ProcessBundleDescriptorId = b.ProcessBundleDescriptorId
	x.xxx_hidden_CacheTokens = &b.CacheTokens
	x.xxx_hidden_Elements = b.Elements
	return m0
}

type ProcessBundleResponse struct {
	state                           protoimpl.MessageState         `protogen:"opaque.v1"`
	xxx_hidden_ResidualRoots        *[]*DelayedBundleApplication   `protobuf:"bytes,2,rep,name=residual_roots,json=residualRoots,proto3" json:"residual_roots,omitempty"`
	xxx_hidden_MonitoringInfos      *[]*pipeline_v1.MonitoringInfo `protobuf:"bytes,3,rep,name=monitoring_infos,json=monitoringInfos,proto3" json:"monitoring_infos,omitempty"`
	xxx_hidden_RequiresFinalization bool                           `protobuf:"varint,4,opt,name=requires_finalization,json=requiresFinalization,proto3" json:"requires_finalization,omitempty"`
	xxx_hidden_MonitoringData       map[string][]byte              `protobuf:"bytes,5,rep,name=monitoring_data,json=monitoringData,proto3" json:"monitoring_data,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	xxx_hidden_Elements             *Elements                      `protobuf:"bytes,6,opt,name=elements,proto3" json:"elements,omitempty"`
	unknownFields                   protoimpl.UnknownFields
	sizeCache                       protoimpl.SizeCache
}

func (x *ProcessBundleResponse) Reset() {
	*x = ProcessBundleResponse{}
	mi := &file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProcessBundleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessBundleResponse) ProtoMessage() {}

func (x *ProcessBundleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ProcessBundleResponse) GetResidualRoots() []*DelayedBundleApplication {
	if x != nil {
		if x.xxx_hidden_ResidualRoots != nil {
			return *x.xxx_hidden_ResidualRoots
		}
	}
	return nil
}

func (x *ProcessBundleResponse) GetMonitoringInfos() []*pipeline_v1.MonitoringInfo {
	if x != nil {
		if x.xxx_hidden_MonitoringInfos != nil {
			return *x.xxx_hidden_MonitoringInfos
		}
	}
	return nil
}

func (x *ProcessBundleResponse) GetRequiresFinalization() bool {
	if x != nil {
		return x.xxx_hidden_RequiresFinalization
	}
	return false
}

func (x *ProcessBundleResponse) GetMonitoringData() map[string][]byte {
	if x != nil {
		return x.xxx_hidden_MonitoringData
	}
	return nil
}

func (x *ProcessBundleResponse) GetElements() *Elements {
	if x != nil {
		return x.xxx_hidden_Elements
	}
	return nil
}

func (x *ProcessBundleResponse) SetResidualRoots(v []*DelayedBundleApplication) {
	x.xxx_hidden_ResidualRoots = &v
}

func (x *ProcessBundleResponse) SetMonitoringInfos(v []*pipeline_v1.MonitoringInfo) {
	x.xxx_hidden_MonitoringInfos = &v
}

func (x *ProcessBundleResponse) SetRequiresFinalization(v bool) {
	x.xxx_hidden_RequiresFinalization = v
}

func (x *ProcessBundleResponse) SetMonitoringData(v map[string][]byte) {
	x.xxx_hidden_MonitoringData = v
}

func (x *ProcessBundleResponse) SetElements(v *Elements) {
	x.xxx_hidden_Elements = v
}

func (x *ProcessBundleResponse) HasElements() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Elements != nil
}

func (x *ProcessBundleResponse) ClearElements() {
	x.xxx_hidden_Elements = nil
}

type ProcessBundleResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// (Optional) Specifies that the bundle has not been completed and the
	// following applications need to be scheduled and executed in the future.
	// A runner that does not yet support residual roots MUST still check that
	// this is empty for correctness.
	//
	// Note that these residual roots must not have been returned as part of a
	// prior split for this bundle.
	ResidualRoots []*DelayedBundleApplication
	// DEPRECATED (Required) The list of metrics or other MonitoredState
	// collected while processing this bundle.
	MonitoringInfos []*pipeline_v1.MonitoringInfo
	// (Optional) Specifies that the runner must callback to this worker
	// once the output of the bundle is committed. The Runner must send a
	// FinalizeBundleRequest with the instruction id of the ProcessBundleRequest
	// that is related to this ProcessBundleResponse.
	RequiresFinalization bool
	// An identifier to MonitoringInfo.payload mapping.
	//
	// An SDK can report metrics using an identifier that only contains the
	// associated payload. A runner who wants to receive the full metrics
	// information can request all the monitoring metadata via a
	// MonitoringInfosMetadataRequest providing a list of ids as necessary.
	//
	// The SDK is allowed to reuse the identifiers across multiple bundles as long
	// as the MonitoringInfo could be reconstructed fully by overwriting its
	// payload field with the bytes specified here.
	MonitoringData map[string][]byte
	// (Optional) Output elements of the processed bundle. Either all or
	// none of the bundle elements should be included in the ProcessBundleResponse.
	// This embedding is to achieve better efficiency for bundles that only
	// contain small amounts of data. his field can be set only if the runner
	// declares that it supports the
	// beam:protocol:control_request_elements_embedding:v1 capability. See more at
	// https://s.apache.org/beam-fn-api-control-data-embedding.
	Elements *Elements
}

func (b0 ProcessBundleResponse_builder) Build() *ProcessBundleResponse {
	m0 := &ProcessBundleResponse{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_ResidualRoots = &b.ResidualRoots
	x.xxx_hidden_MonitoringInfos = &b.MonitoringInfos
	x.xxx_hidden_RequiresFinalization = b.RequiresFinalization
	x.xxx_hidden_MonitoringData = b.MonitoringData
	x.xxx_hidden_Elements = b.Elements
	return m0
}

// A request to report progress information for a given bundle.
// This is an optional request to be handled and is used to support advanced
// SDK features such as SplittableDoFn, user level metrics etc.
type ProcessBundleProgressRequest struct {
	state                    protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_InstructionId string                 `protobuf:"bytes,1,opt,name=instruction_id,json=instructionId,proto3" json:"instruction_id,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *ProcessBundleProgressRequest) Reset() {
	*x = ProcessBundleProgressRequest{}
	mi := &file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProcessBundleProgressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessBundleProgressRequest) ProtoMessage() {}

func (x *ProcessBundleProgressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ProcessBundleProgressRequest) GetInstructionId() string {
	if x != nil {
		return x.xxx_hidden_InstructionId
	}
	return ""
}

func (x *ProcessBundleProgressRequest) SetInstructionId(v string) {
	x.xxx_hidden_InstructionId = v
}

type ProcessBundleProgressRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// (Required) A reference to an active process bundle request with the given
	// instruction id.
	InstructionId string
}

func (b0 ProcessBundleProgressRequest_builder) Build() *ProcessBundleProgressRequest {
	m0 := &ProcessBundleProgressRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_InstructionId = b.InstructionId
	return m0
}

// A request to provide full MonitoringInfo for a set of provided ids.
//
// An SDK can report metrics using an identifier that only contains the
// associated payload. A runner who wants to receive the full metrics
// information can request all the monitoring metadata via a
// MonitoringInfosMetadataRequest providing a list of ids as necessary.
//
// The SDK is allowed to reuse the identifiers for the lifetime of the
// associated control connection as long as the MonitoringInfo could be
// reconstructed fully by overwriting its payload field with the bytes specified
// here.
type MonitoringInfosMetadataRequest struct {
	state                       protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_MonitoringInfoId []string               `protobuf:"bytes,1,rep,name=monitoring_info_id,json=monitoringInfoId,proto3" json:"monitoring_info_id,omitempty"`
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
}

func (x *MonitoringInfosMetadataRequest) Reset() {
	*x = MonitoringInfosMetadataRequest{}
	mi := &file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MonitoringInfosMetadataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonitoringInfosMetadataRequest) ProtoMessage() {}

func (x *MonitoringInfosMetadataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *MonitoringInfosMetadataRequest) GetMonitoringInfoId() []string {
	if x != nil {
		return x.xxx_hidden_MonitoringInfoId
	}
	return nil
}

func (x *MonitoringInfosMetadataRequest) SetMonitoringInfoId(v []string) {
	x.xxx_hidden_MonitoringInfoId = v
}

type MonitoringInfosMetadataRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// A list of ids for which the full MonitoringInfo is requested for.
	MonitoringInfoId []string
}

func (b0 MonitoringInfosMetadataRequest_builder) Build() *MonitoringInfosMetadataRequest {
	m0 := &MonitoringInfosMetadataRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_MonitoringInfoId = b.MonitoringInfoId
	return m0
}

type ProcessBundleProgressResponse struct {
	state                            protoimpl.MessageState         `protogen:"opaque.v1"`
	xxx_hidden_MonitoringInfos       *[]*pipeline_v1.MonitoringInfo `protobuf:"bytes,3,rep,name=monitoring_infos,json=monitoringInfos,proto3" json:"monitoring_infos,omitempty"`
	xxx_hidden_MonitoringData        map[string][]byte              `protobuf:"bytes,5,rep,name=monitoring_data,json=monitoringData,proto3" json:"monitoring_data,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	xxx_hidden_ConsumingReceivedData bool                           `protobuf:"varint,6,opt,name=consuming_received_data,json=consumingReceivedData,proto3,oneof" json:"consuming_received_data,omitempty"`
	XXX_raceDetectHookData           protoimpl.RaceDetectHookData
	XXX_presence                     [1]uint32
	unknownFields                    protoimpl.UnknownFields
	sizeCache                        protoimpl.SizeCache
}

func (x *ProcessBundleProgressResponse) Reset() {
	*x = ProcessBundleProgressResponse{}
	mi := &file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProcessBundleProgressResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessBundleProgressResponse) ProtoMessage() {}

func (x *ProcessBundleProgressResponse) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ProcessBundleProgressResponse) GetMonitoringInfos() []*pipeline_v1.MonitoringInfo {
	if x != nil {
		if x.xxx_hidden_MonitoringInfos != nil {
			return *x.xxx_hidden_MonitoringInfos
		}
	}
	return nil
}

func (x *ProcessBundleProgressResponse) GetMonitoringData() map[string][]byte {
	if x != nil {
		return x.xxx_hidden_MonitoringData
	}
	return nil
}

func (x *ProcessBundleProgressResponse) GetConsumingReceivedData() bool {
	if x != nil {
		return x.xxx_hidden_ConsumingReceivedData
	}
	return false
}

func (x *ProcessBundleProgressResponse) SetMonitoringInfos(v []*pipeline_v1.MonitoringInfo) {
	x.xxx_hidden_MonitoringInfos = &v
}

func (x *ProcessBundleProgressResponse) SetMonitoringData(v map[string][]byte) {
	x.xxx_hidden_MonitoringData = v
}

func (x *ProcessBundleProgressResponse) SetConsumingReceivedData(v bool) {
	x.xxx_hidden_ConsumingReceivedData = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 3)
}

func (x *ProcessBundleProgressResponse) HasConsumingReceivedData() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *ProcessBundleProgressResponse) ClearConsumingReceivedData() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_ConsumingReceivedData = false
}

type ProcessBundleProgressResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// DEPRECATED (Required) The list of metrics or other MonitoredState
	// collected while processing this bundle.
	MonitoringInfos []*pipeline_v1.MonitoringInfo
	// An identifier to MonitoringInfo.payload mapping.
	//
	// An SDK can report metrics using an identifier that only contains the
	// associated payload. A runner who wants to receive the full metrics
	// information can request all the monitoring metadata via a
	// MonitoringInfosMetadataRequest providing a list of ids as necessary.
	//
	// The SDK is allowed to reuse the identifiers
	// for the lifetime of the associated control connection as long
	// as the MonitoringInfo could be reconstructed fully by overwriting its
	// payload field with the bytes specified here.
	MonitoringData map[string][]byte
	// Indicates that the SDK is still busy consuming the data that as already
	// been received on the data channel. If this is set, a runner may abstain
	// from sending further data on the data channel until this field becomes
	// unset. This field is currently used during shuffle reads on large elements.
	ConsumingReceivedData *bool
}

func (b0 ProcessBundleProgressResponse_builder) Build() *ProcessBundleProgressResponse {
	m0 := &ProcessBundleProgressResponse{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_MonitoringInfos = &b.MonitoringInfos
	x.xxx_hidden_MonitoringData = b.MonitoringData
	if b.ConsumingReceivedData != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 3)
		x.xxx_hidden_ConsumingReceivedData = *b.ConsumingReceivedData
	}
	return m0
}

// A response that contains the full mapping information associated with
// a specified set of identifiers.
//
// An SDK can report metrics using an identifier that only contains the
// associated payload. A runner who wants to receive the full metrics
// information can request all the monitoring metadata via a
// MonitoringInfosMetadataRequest providing a list of ids as necessary.
//
// The SDK is allowed to reuse the identifiers
// for the lifetime of the associated control connection as long
// as the MonitoringInfo could be reconstructed fully by overwriting its
// payload field with the bytes specified here.
type MonitoringInfosMetadataResponse struct {
	state                     protoimpl.MessageState                 `protogen:"opaque.v1"`
	xxx_hidden_MonitoringInfo map[string]*pipeline_v1.MonitoringInfo `protobuf:"bytes,1,rep,name=monitoring_info,json=monitoringInfo,proto3" json:"monitoring_info,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *MonitoringInfosMetadataResponse) Reset() {
	*x = MonitoringInfosMetadataResponse{}
	mi := &file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MonitoringInfosMetadataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonitoringInfosMetadataResponse) ProtoMessage() {}

func (x *MonitoringInfosMetadataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *MonitoringInfosMetadataResponse) GetMonitoringInfo() map[string]*pipeline_v1.MonitoringInfo {
	if x != nil {
		return x.xxx_hidden_MonitoringInfo
	}
	return nil
}

func (x *MonitoringInfosMetadataResponse) SetMonitoringInfo(v map[string]*pipeline_v1.MonitoringInfo) {
	x.xxx_hidden_MonitoringInfo = v
}

type MonitoringInfosMetadataResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// A mapping from an identifier to the full metrics information.
	MonitoringInfo map[string]*pipeline_v1.MonitoringInfo
}

func (b0 MonitoringInfosMetadataResponse_builder) Build() *MonitoringInfosMetadataResponse {
	m0 := &MonitoringInfosMetadataResponse{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_MonitoringInfo = b.MonitoringInfo
	return m0
}

// Represents a request to the SDK to split a currently active bundle.
type ProcessBundleSplitRequest struct {
	state                    protoimpl.MessageState                             `protogen:"opaque.v1"`
	xxx_hidden_InstructionId string                                             `protobuf:"bytes,1,opt,name=instruction_id,json=instructionId,proto3" json:"instruction_id,omitempty"`
	xxx_hidden_DesiredSplits map[string]*ProcessBundleSplitRequest_DesiredSplit `protobuf:"bytes,3,rep,name=desired_splits,json=desiredSplits,proto3" json:"desired_splits,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *ProcessBundleSplitRequest) Reset() {
	*x = ProcessBundleSplitRequest{}
	mi := &file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProcessBundleSplitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessBundleSplitRequest) ProtoMessage() {}

func (x *ProcessBundleSplitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ProcessBundleSplitRequest) GetInstructionId() string {
	if x != nil {
		return x.xxx_hidden_InstructionId
	}
	return ""
}

func (x *ProcessBundleSplitRequest) GetDesiredSplits() map[string]*ProcessBundleSplitRequest_DesiredSplit {
	if x != nil {
		return x.xxx_hidden_DesiredSplits
	}
	return nil
}

func (x *ProcessBundleSplitRequest) SetInstructionId(v string) {
	x.xxx_hidden_InstructionId = v
}

func (x *ProcessBundleSplitRequest) SetDesiredSplits(v map[string]*ProcessBundleSplitRequest_DesiredSplit) {
	x.xxx_hidden_DesiredSplits = v
}

type ProcessBundleSplitRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// (Required) A reference to an active process bundle request with the given
	// instruction id.
	InstructionId string
	// (Required) Specifies the desired split for each transform.
	//
	// Currently only splits at gRPC read operations are supported.
	// This may, of course, limit the amount of work downstream operations
	// receive.
	DesiredSplits map[string]*ProcessBundleSplitRequest_DesiredSplit
}

func (b0 ProcessBundleSplitRequest_builder) Build() *ProcessBundleSplitRequest {
	m0 := &ProcessBundleSplitRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_InstructionId = b.InstructionId
	x.xxx_hidden_DesiredSplits = b.DesiredSplits
	return m0
}

// Represents a partition of the bundle: a "primary" and a "residual", with the
// following properties:
//   - The work in primary and residual doesn't overlap, and combined, adds up
//     to the work in the current bundle if the split hadn't happened.
//   - The current bundle, if it keeps executing, will have done exactly none of
//     the work under residual_roots and none of the elements at and beyond the
//     first_residual_element.
//   - The current bundle, if no further splits happen, will have done exactly
//     the work under primary_roots and all elements up to and including the
//     channel split's last_primary_element.
//
// This allows the SDK to relinquish ownership of and commit to not process some
// of the elements that it may have been sent (the residual) while retaining
// ownership and commitment to finish the other portion (the primary).
//
// Example with three splits of a single bundle:
// Let's say the SDK is processing elements [A B C D E]. These elements make
// up the 0-indexed channel.
//
// ** First Split **
// Channel Split = [ A B C D <> E ]
// Primary Roots = [] (No elements were split)
// Residual Roots = []
//
// Say a split request comes in. The SDK could return a response with a channel
// split representing a last_primary_element of 3 (D) and
// first_residual_element of 4 (E). The SDK is now responsible for processing A
// B C D and the runner must process E in the future.
//
// (A B C D) | (E)
//
// ** Second Split **
// Channel Split = [ A < B C > D E ]
// Primary Roots = [B1 C1]
// Residual Roots = [B2 C2]
//
// A future split request could have the SDK split the elements B into B1 and
// B2 and C into C1 and C2 representing their primary and residual roots. The
//
// (A B1 C1) | (B2 C2 D)
//
// SDK would return a response with a channel split representing a
// last_primary_element of 0 (A) and first_residual_element of 3 (D) with
// primary_roots (B1, C1) and residual_roots (B2, C2). The SDK is now
// responsible for processing A B1 C1 and the runner must process B2 C2 D (and
// E from the prior split) in the future.
//
// ** Third Split **
// Channel Split = [ A < B C > D E ]
// Primary Roots = [B1a]
// Residual Roots [B1b C1]
// Yet another future split request could have the SDK could split B1 further
// into B1a and B1b primary and residuals and return C1 as a residual (assuming
// C1 was left unprocessed). The SDK would return a response with a channel
// split representing a last_primary_element of 0 (A) and
// first_residual_element of 3 (E) with primary_roots (B1a) and residual_roots
// (B1b, C1). The SDK is now responsible for processing A B1a the runner must
// process B1b C1 (in addition to C2, D, E from prior splits) in the future.
//
// (A B1a) | (B1b C1)
//
// For more rigorous definitions see https://s.apache.org/beam-breaking-fusion
type ProcessBundleSplitResponse struct {
	state                    protoimpl.MessageState                      `protogen:"opaque.v1"`
	xxx_hidden_PrimaryRoots  *[]*BundleApplication                       `protobuf:"bytes,1,rep,name=primary_roots,json=primaryRoots,proto3" json:"primary_roots,omitempty"`
	xxx_hidden_ResidualRoots *[]*DelayedBundleApplication                `protobuf:"bytes,2,rep,name=residual_roots,json=residualRoots,proto3" json:"residual_roots,omitempty"`
	xxx_hidden_ChannelSplits *[]*ProcessBundleSplitResponse_ChannelSplit `protobuf:"bytes,3,rep,name=channel_splits,json=channelSplits,proto3" json:"channel_splits,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *ProcessBundleSplitResponse) Reset() {
	*x = ProcessBundleSplitResponse{}
	mi := &file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProcessBundleSplitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessBundleSplitResponse) ProtoMessage() {}

func (x *ProcessBundleSplitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ProcessBundleSplitResponse) GetPrimaryRoots() []*BundleApplication {
	if x != nil {
		if x.xxx_hidden_PrimaryRoots != nil {
			return *x.xxx_hidden_PrimaryRoots
		}
	}
	return nil
}

func (x *ProcessBundleSplitResponse) GetResidualRoots() []*DelayedBundleApplication {
	if x != nil {
		if x.xxx_hidden_ResidualRoots != nil {
			return *x.xxx_hidden_ResidualRoots
		}
	}
	return nil
}

func (x *ProcessBundleSplitResponse) GetChannelSplits() []*ProcessBundleSplitResponse_ChannelSplit {
	if x != nil {
		if x.xxx_hidden_ChannelSplits != nil {
			return *x.xxx_hidden_ChannelSplits
		}
	}
	return nil
}

func (x *ProcessBundleSplitResponse) SetPrimaryRoots(v []*BundleApplication) {
	x.xxx_hidden_PrimaryRoots = &v
}

func (x *ProcessBundleSplitResponse) SetResidualRoots(v []*DelayedBundleApplication) {
	x.xxx_hidden_ResidualRoots = &v
}

func (x *ProcessBundleSplitResponse) SetChannelSplits(v []*ProcessBundleSplitResponse_ChannelSplit) {
	x.xxx_hidden_ChannelSplits = &v
}

type ProcessBundleSplitResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// (Optional) Root applications that should replace the current bundle.
	//
	// Note that primary roots can only be specified if a channel split's
	// last_primary_element + 1 < first_residual_element
	//
	// Note that there must be a corresponding residual root contained within
	// residual_roots representing the remainder of processing for the original
	// element this this primary root represents a fraction of.
	PrimaryRoots []*BundleApplication
	// (Optional) Root applications that have been removed from the current bundle and
	// have to be executed in a separate bundle (e.g. in parallel on a different
	// worker, or after the current bundle completes, etc.)
	//
	// Note that residual roots can only be specified if a channel split's
	// last_primary_element + 1 < first_residual_element
	//
	// Note that there must be a corresponding primary root contained within
	// primary_roots representing the remainder of processing for the original
	// element this this residual root represents a fraction of.
	//
	// Note that subsequent splits must not return prior residual roots.
	ResidualRoots []*DelayedBundleApplication
	// (Required) Partitions of input data channels into primary and residual
	// elements, if any. Must not include any elements represented in the bundle
	// applications roots above of the current split or any prior split of the
	// same bundle.
	ChannelSplits []*ProcessBundleSplitResponse_ChannelSplit
}

func (b0 ProcessBundleSplitResponse_builder) Build() *ProcessBundleSplitResponse {
	m0 := &ProcessBundleSplitResponse{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_PrimaryRoots = &b.PrimaryRoots
	x.xxx_hidden_ResidualRoots = &b.ResidualRoots
	x.xxx_hidden_ChannelSplits = &b.ChannelSplits
	return m0
}

type FinalizeBundleRequest struct {
	state                    protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_InstructionId string                 `protobuf:"bytes,1,opt,name=instruction_id,json=instructionId,proto3" json:"instruction_id,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *FinalizeBundleRequest) Reset() {
	*x = FinalizeBundleRequest{}
	mi := &file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FinalizeBundleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinalizeBundleRequest) ProtoMessage() {}

func (x *FinalizeBundleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *FinalizeBundleRequest) GetInstructionId() string {
	if x != nil {
		return x.xxx_hidden_InstructionId
	}
	return ""
}

func (x *FinalizeBundleRequest) SetInstructionId(v string) {
	x.xxx_hidden_InstructionId = v
}

type FinalizeBundleRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// (Required) A reference to a completed process bundle request with the given
	// instruction id.
	InstructionId string
}

func (b0 FinalizeBundleRequest_builder) Build() *FinalizeBundleRequest {
	m0 := &FinalizeBundleRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_InstructionId = b.InstructionId
	return m0
}

type FinalizeBundleResponse struct {
	state         protoimpl.MessageState `protogen:"opaque.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FinalizeBundleResponse) Reset() {
	*x = FinalizeBundleResponse{}
	mi := &file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FinalizeBundleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinalizeBundleResponse) ProtoMessage() {}

func (x *FinalizeBundleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

type FinalizeBundleResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

}

func (b0 FinalizeBundleResponse_builder) Build() *FinalizeBundleResponse {
	m0 := &FinalizeBundleResponse{}
	b, x := &b0, m0
	_, _ = b, x
	return m0
}

// Messages used to represent logical byte streams.
// Stable
type Elements struct {
	state             protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Data   *[]*Elements_Data      `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	xxx_hidden_Timers *[]*Elements_Timers    `protobuf:"bytes,2,rep,name=timers,proto3" json:"timers,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *Elements) Reset() {
	*x = Elements{}
	mi := &file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Elements) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Elements) ProtoMessage() {}

func (x *Elements) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Elements) GetData() []*Elements_Data {
	if x != nil {
		if x.xxx_hidden_Data != nil {
			return *x.xxx_hidden_Data
		}
	}
	return nil
}

func (x *Elements) GetTimers() []*Elements_Timers {
	if x != nil {
		if x.xxx_hidden_Timers != nil {
			return *x.xxx_hidden_Timers
		}
	}
	return nil
}

func (x *Elements) SetData(v []*Elements_Data) {
	x.xxx_hidden_Data = &v
}

func (x *Elements) SetTimers(v []*Elements_Timers) {
	x.xxx_hidden_Timers = &v
}

type Elements_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// (Optional) A list containing parts of logical byte streams.
	Data []*Elements_Data
	// (Optional)  A list of timer byte streams.
	Timers []*Elements_Timers
}

func (b0 Elements_builder) Build() *Elements {
	m0 := &Elements{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Data = &b.Data
	x.xxx_hidden_Timers = &b.Timers
	return m0
}

type StateRequest struct {
	state                    protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	xxx_hidden_InstructionId string                 `protobuf:"bytes,2,opt,name=instruction_id,json=instructionId,proto3" json:"instruction_id,omitempty"`
	xxx_hidden_StateKey      *StateKey              `protobuf:"bytes,3,opt,name=state_key,json=stateKey,proto3" json:"state_key,omitempty"`
	xxx_hidden_Request       isStateRequest_Request `protobuf_oneof:"request"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *StateRequest) Reset() {
	*x = StateRequest{}
	mi := &file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateRequest) ProtoMessage() {}

func (x *StateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *StateRequest) GetId() string {
	if x != nil {
		return x.xxx_hidden_Id
	}
	return ""
}

func (x *StateRequest) GetInstructionId() string {
	if x != nil {
		return x.xxx_hidden_InstructionId
	}
	return ""
}

func (x *StateRequest) GetStateKey() *StateKey {
	if x != nil {
		return x.xxx_hidden_StateKey
	}
	return nil
}

func (x *StateRequest) GetGet() *StateGetRequest {
	if x != nil {
		if x, ok := x.xxx_hidden_Request.(*stateRequest_Get); ok {
			return x.Get
		}
	}
	return nil
}

func (x *StateRequest) GetAppend() *StateAppendRequest {
	if x != nil {
		if x, ok := x.xxx_hidden_Request.(*stateRequest_Append); ok {
			return x.Append
		}
	}
	return nil
}

func (x *StateRequest) GetClear() *StateClearRequest {
	if x != nil {
		if x, ok := x.xxx_hidden_Request.(*stateRequest_Clear); ok {
			return x.Clear
		}
	}
	return nil
}

func (x *StateRequest) SetId(v string) {
	x.xxx_hidden_Id = v
}

func (x *StateRequest) SetInstructionId(v string) {
	x.xxx_hidden_InstructionId = v
}

func (x *StateRequest) SetStateKey(v *StateKey) {
	x.xxx_hidden_StateKey = v
}

func (x *StateRequest) SetGet(v *StateGetRequest) {
	if v == nil {
		x.xxx_hidden_Request = nil
		return
	}
	x.xxx_hidden_Request = &stateRequest_Get{v}
}

func (x *StateRequest) SetAppend(v *StateAppendRequest) {
	if v == nil {
		x.xxx_hidden_Request = nil
		return
	}
	x.xxx_hidden_Request = &stateRequest_Append{v}
}

func (x *StateRequest) SetClear(v *StateClearRequest) {
	if v == nil {
		x.xxx_hidden_Request = nil
		return
	}
	x.xxx_hidden_Request = &stateRequest_Clear{v}
}

func (x *StateRequest) HasStateKey() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_StateKey != nil
}

func (x *StateRequest) HasRequest() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Request != nil
}

func (x *StateRequest) HasGet() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Request.(*stateRequest_Get)
	return ok
}

func (x *StateRequest) HasAppend() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Request.(*stateRequest_Append)
	return ok
}

func (x *StateRequest) HasClear() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Request.(*stateRequest_Clear)
	return ok
}

func (x *StateRequest) ClearStateKey() {
	x.xxx_hidden_StateKey = nil
}

func (x *StateRequest) ClearRequest() {
	x.xxx_hidden_Request = nil
}

func (x *StateRequest) ClearGet() {
	if _, ok := x.xxx_hidden_Request.(*stateRequest_Get); ok {
		x.xxx_hidden_Request = nil
	}
}

func (x *StateRequest) ClearAppend() {
	if _, ok := x.xxx_hidden_Request.(*stateRequest_Append); ok {
		x.xxx_hidden_Request = nil
	}
}

func (x *StateRequest) ClearClear() {
	if _, ok := x.xxx_hidden_Request.(*stateRequest_Clear); ok {
		x.xxx_hidden_Request = nil
	}
}

const StateRequest_Request_not_set_case case_StateRequest_Request = 0
const StateRequest_Get_case case_StateRequest_Request = 1000
const StateRequest_Append_case case_StateRequest_Request = 1001
const StateRequest_Clear_case case_StateRequest_Request = 1002

func (x *StateRequest) WhichRequest() case_StateRequest_Request {
	if x == nil {
		return StateRequest_Request_not_set_case
	}
	switch x.xxx_hidden_Request.(type) {
	case *stateRequest_Get:
		return StateRequest_Get_case
	case *stateRequest_Append:
		return StateRequest_Append_case
	case *stateRequest_Clear:
		return StateRequest_Clear_case
	default:
		return StateRequest_Request_not_set_case
	}
}

type StateRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// (Required) A unique identifier provided by the SDK which represents this
	// requests execution. The StateResponse corresponding with this request
	// will have the matching id.
	Id string
	// (Required) The associated instruction id of the work that is currently
	// being processed. This allows for the runner to associate any modifications
	// to state to be committed with the appropriate work execution.
	InstructionId string
	// (Required) The state key this request is for.
	StateKey *StateKey
	// (Required) The action to take on this request.

	// Fields of oneof xxx_hidden_Request:
	// A request to get state.
	Get *StateGetRequest
	// A request to append to state.
	Append *StateAppendRequest
	// A request to clear state.
	Clear *StateClearRequest
	// -- end of xxx_hidden_Request
}

func (b0 StateRequest_builder) Build() *StateRequest {
	m0 := &StateRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Id = b.Id
	x.xxx_hidden_InstructionId = b.InstructionId
	x.xxx_hidden_StateKey = b.StateKey
	if b.Get != nil {
		x.xxx_hidden_Request = &stateRequest_Get{b.Get}
	}
	if b.Append != nil {
		x.xxx_hidden_Request = &stateRequest_Append{b.Append}
	}
	if b.Clear != nil {
		x.xxx_hidden_Request = &stateRequest_Clear{b.Clear}
	}
	return m0
}

type case_StateRequest_Request protoreflect.FieldNumber

func (x case_StateRequest_Request) String() string {
	md := file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[26].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type isStateRequest_Request interface {
	isStateRequest_Request()
}

type stateRequest_Get struct {
	// A request to get state.
	Get *StateGetRequest `protobuf:"bytes,1000,opt,name=get,proto3,oneof"`
}

type stateRequest_Append struct {
	// A request to append to state.
	Append *StateAppendRequest `protobuf:"bytes,1001,opt,name=append,proto3,oneof"`
}

type stateRequest_Clear struct {
	// A request to clear state.
	Clear *StateClearRequest `protobuf:"bytes,1002,opt,name=clear,proto3,oneof"`
}

func (*stateRequest_Get) isStateRequest_Request() {}

func (*stateRequest_Append) isStateRequest_Request() {}

func (*stateRequest_Clear) isStateRequest_Request() {}

type StateResponse struct {
	state               protoimpl.MessageState   `protogen:"opaque.v1"`
	xxx_hidden_Id       string                   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	xxx_hidden_Error    string                   `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	xxx_hidden_Response isStateResponse_Response `protobuf_oneof:"response"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *StateResponse) Reset() {
	*x = StateResponse{}
	mi := &file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateResponse) ProtoMessage() {}

func (x *StateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *StateResponse) GetId() string {
	if x != nil {
		return x.xxx_hidden_Id
	}
	return ""
}

func (x *StateResponse) GetError() string {
	if x != nil {
		return x.xxx_hidden_Error
	}
	return ""
}

func (x *StateResponse) GetGet() *StateGetResponse {
	if x != nil {
		if x, ok := x.xxx_hidden_Response.(*stateResponse_Get); ok {
			return x.Get
		}
	}
	return nil
}

func (x *StateResponse) GetAppend() *StateAppendResponse {
	if x != nil {
		if x, ok := x.xxx_hidden_Response.(*stateResponse_Append); ok {
			return x.Append
		}
	}
	return nil
}

func (x *StateResponse) GetClear() *StateClearResponse {
	if x != nil {
		if x, ok := x.xxx_hidden_Response.(*stateResponse_Clear); ok {
			return x.Clear
		}
	}
	return nil
}

func (x *StateResponse) SetId(v string) {
	x.xxx_hidden_Id = v
}

func (x *StateResponse) SetError(v string) {
	x.xxx_hidden_Error = v
}

func (x *StateResponse) SetGet(v *StateGetResponse) {
	if v == nil {
		x.xxx_hidden_Response = nil
		return
	}
	x.xxx_hidden_Response = &stateResponse_Get{v}
}

func (x *StateResponse) SetAppend(v *StateAppendResponse) {
	if v == nil {
		x.xxx_hidden_Response = nil
		return
	}
	x.xxx_hidden_Response = &stateResponse_Append{v}
}

func (x *StateResponse) SetClear(v *StateClearResponse) {
	if v == nil {
		x.xxx_hidden_Response = nil
		return
	}
	x.xxx_hidden_Response = &stateResponse_Clear{v}
}

func (x *StateResponse) HasResponse() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Response != nil
}

func (x *StateResponse) HasGet() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Response.(*stateResponse_Get)
	return ok
}

func (x *StateResponse) HasAppend() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Response.(*stateResponse_Append)
	return ok
}

func (x *StateResponse) HasClear() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Response.(*stateResponse_Clear)
	return ok
}

func (x *StateResponse) ClearResponse() {
	x.xxx_hidden_Response = nil
}

func (x *StateResponse) ClearGet() {
	if _, ok := x.xxx_hidden_Response.(*stateResponse_Get); ok {
		x.xxx_hidden_Response = nil
	}
}

func (x *StateResponse) ClearAppend() {
	if _, ok := x.xxx_hidden_Response.(*stateResponse_Append); ok {
		x.xxx_hidden_Response = nil
	}
}

func (x *StateResponse) ClearClear() {
	if _, ok := x.xxx_hidden_Response.(*stateResponse_Clear); ok {
		x.xxx_hidden_Response = nil
	}
}

const StateResponse_Response_not_set_case case_StateResponse_Response = 0
const StateResponse_Get_case case_StateResponse_Response = 1000
const StateResponse_Append_case case_StateResponse_Response = 1001
const StateResponse_Clear_case case_StateResponse_Response = 1002

func (x *StateResponse) WhichResponse() case_StateResponse_Response {
	if x == nil {
		return StateResponse_Response_not_set_case
	}
	switch x.xxx_hidden_Response.(type) {
	case *stateResponse_Get:
		return StateResponse_Get_case
	case *stateResponse_Append:
		return StateResponse_Append_case
	case *stateResponse_Clear:
		return StateResponse_Clear_case
	default:
		return StateResponse_Response_not_set_case
	}
}

type StateResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// (Required) A reference provided by the SDK which represents a requests
	// execution. The StateResponse must have the matching id when responding
	// to the SDK.
	Id string
	// (Optional) If this is specified, then the state request has failed.
	// A human readable string representing the reason as to why the request
	// failed.
	Error string
	// A corresponding response matching the request will be populated.

	// Fields of oneof xxx_hidden_Response:
	// A response to getting state.
	Get *StateGetResponse
	// A response to appending to state.
	Append *StateAppendResponse
	// A response to clearing state.
	Clear *StateClearResponse
	// -- end of xxx_hidden_Response
}

func (b0 StateResponse_builder) Build() *StateResponse {
	m0 := &StateResponse{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Id = b.Id
	x.xxx_hidden_Error = b.Error
	if b.Get != nil {
		x.xxx_hidden_Response = &stateResponse_Get{b.Get}
	}
	if b.Append != nil {
		x.xxx_hidden_Response = &stateResponse_Append{b.Append}
	}
	if b.Clear != nil {
		x.xxx_hidden_Response = &stateResponse_Clear{b.Clear}
	}
	return m0
}

type case_StateResponse_Response protoreflect.FieldNumber

func (x case_StateResponse_Response) String() string {
	md := file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[27].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type isStateResponse_Response interface {
	isStateResponse_Response()
}

type stateResponse_Get struct {
	// A response to getting state.
	Get *StateGetResponse `protobuf:"bytes,1000,opt,name=get,proto3,oneof"`
}

type stateResponse_Append struct {
	// A response to appending to state.
	Append *StateAppendResponse `protobuf:"bytes,1001,opt,name=append,proto3,oneof"`
}

type stateResponse_Clear struct {
	// A response to clearing state.
	Clear *StateClearResponse `protobuf:"bytes,1002,opt,name=clear,proto3,oneof"`
}

func (*stateResponse_Get) isStateResponse_Response() {}

func (*stateResponse_Append) isStateResponse_Response() {}

func (*stateResponse_Clear) isStateResponse_Response() {}

type StateKey struct {
	state           protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Type isStateKey_Type        `protobuf_oneof:"type"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *StateKey) Reset() {
	*x = StateKey{}
	mi := &file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StateKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateKey) ProtoMessage() {}

func (x *StateKey) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *StateKey) GetRunner() *StateKey_Runner {
	if x != nil {
		if x, ok := x.xxx_hidden_Type.(*stateKey_Runner_); ok {
			return x.Runner
		}
	}
	return nil
}

func (x *StateKey) GetMultimapSideInput() *StateKey_MultimapSideInput {
	if x != nil {
		if x, ok := x.xxx_hidden_Type.(*stateKey_MultimapSideInput_); ok {
			return x.MultimapSideInput
		}
	}
	return nil
}

func (x *StateKey) GetBagUserState() *StateKey_BagUserState {
	if x != nil {
		if x, ok := x.xxx_hidden_Type.(*stateKey_BagUserState_); ok {
			return x.BagUserState
		}
	}
	return nil
}

func (x *StateKey) GetIterableSideInput() *StateKey_IterableSideInput {
	if x != nil {
		if x, ok := x.xxx_hidden_Type.(*stateKey_IterableSideInput_); ok {
			return x.IterableSideInput
		}
	}
	return nil
}

func (x *StateKey) GetMultimapKeysSideInput() *StateKey_MultimapKeysSideInput {
	if x != nil {
		if x, ok := x.xxx_hidden_Type.(*stateKey_MultimapKeysSideInput_); ok {
			return x.MultimapKeysSideInput
		}
	}
	return nil
}

func (x *StateKey) GetMultimapKeysValuesSideInput() *StateKey_MultimapKeysValuesSideInput {
	if x != nil {
		if x, ok := x.xxx_hidden_Type.(*stateKey_MultimapKeysValuesSideInput_); ok {
			return x.MultimapKeysValuesSideInput
		}
	}
	return nil
}

func (x *StateKey) GetMultimapKeysUserState() *StateKey_MultimapKeysUserState {
	if x != nil {
		if x, ok := x.xxx_hidden_Type.(*stateKey_MultimapKeysUserState_); ok {
			return x.MultimapKeysUserState
		}
	}
	return nil
}

func (x *StateKey) GetMultimapUserState() *StateKey_MultimapUserState {
	if x != nil {
		if x, ok := x.xxx_hidden_Type.(*stateKey_MultimapUserState_); ok {
			return x.MultimapUserState
		}
	}
	return nil
}

func (x *StateKey) GetOrderedListUserState() *StateKey_OrderedListUserState {
	if x != nil {
		if x, ok := x.xxx_hidden_Type.(*stateKey_OrderedListUserState_); ok {
			return x.OrderedListUserState
		}
	}
	return nil
}

func (x *StateKey) SetRunner(v *StateKey_Runner) {
	if v == nil {
		x.xxx_hidden_Type = nil
		return
	}
	x.xxx_hidden_Type = &stateKey_Runner_{v}
}

func (x *StateKey) SetMultimapSideInput(v *StateKey_MultimapSideInput) {
	if v == nil {
		x.xxx_hidden_Type = nil
		return
	}
	x.xxx_hidden_Type = &stateKey_MultimapSideInput_{v}
}

func (x *StateKey) SetBagUserState(v *StateKey_BagUserState) {
	if v == nil {
		x.xxx_hidden_Type = nil
		return
	}
	x.xxx_hidden_Type = &stateKey_BagUserState_{v}
}

func (x *StateKey) SetIterableSideInput(v *StateKey_IterableSideInput) {
	if v == nil {
		x.xxx_hidden_Type = nil
		return
	}
	x.xxx_hidden_Type = &stateKey_IterableSideInput_{v}
}

func (x *StateKey) SetMultimapKeysSideInput(v *StateKey_MultimapKeysSideInput) {
	if v == nil {
		x.xxx_hidden_Type = nil
		return
	}
	x.xxx_hidden_Type = &stateKey_MultimapKeysSideInput_{v}
}

func (x *StateKey) SetMultimapKeysValuesSideInput(v *StateKey_MultimapKeysValuesSideInput) {
	if v == nil {
		x.xxx_hidden_Type = nil
		return
	}
	x.xxx_hidden_Type = &stateKey_MultimapKeysValuesSideInput_{v}
}

func (x *StateKey) SetMultimapKeysUserState(v *StateKey_MultimapKeysUserState) {
	if v == nil {
		x.xxx_hidden_Type = nil
		return
	}
	x.xxx_hidden_Type = &stateKey_MultimapKeysUserState_{v}
}

func (x *StateKey) SetMultimapUserState(v *StateKey_MultimapUserState) {
	if v == nil {
		x.xxx_hidden_Type = nil
		return
	}
	x.xxx_hidden_Type = &stateKey_MultimapUserState_{v}
}

func (x *StateKey) SetOrderedListUserState(v *StateKey_OrderedListUserState) {
	if v == nil {
		x.xxx_hidden_Type = nil
		return
	}
	x.xxx_hidden_Type = &stateKey_OrderedListUserState_{v}
}

func (x *StateKey) HasType() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Type != nil
}

func (x *StateKey) HasRunner() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Type.(*stateKey_Runner_)
	return ok
}

func (x *StateKey) HasMultimapSideInput() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Type.(*stateKey_MultimapSideInput_)
	return ok
}

func (x *StateKey) HasBagUserState() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Type.(*stateKey_BagUserState_)
	return ok
}

func (x *StateKey) HasIterableSideInput() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Type.(*stateKey_IterableSideInput_)
	return ok
}

func (x *StateKey) HasMultimapKeysSideInput() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Type.(*stateKey_MultimapKeysSideInput_)
	return ok
}

func (x *StateKey) HasMultimapKeysValuesSideInput() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Type.(*stateKey_MultimapKeysValuesSideInput_)
	return ok
}

func (x *StateKey) HasMultimapKeysUserState() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Type.(*stateKey_MultimapKeysUserState_)
	return ok
}

func (x *StateKey) HasMultimapUserState() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Type.(*stateKey_MultimapUserState_)
	return ok
}

func (x *StateKey) HasOrderedListUserState() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Type.(*stateKey_OrderedListUserState_)
	return ok
}

func (x *StateKey) ClearType() {
	x.xxx_hidden_Type = nil
}

func (x *StateKey) ClearRunner() {
	if _, ok := x.xxx_hidden_Type.(*stateKey_Runner_); ok {
		x.xxx_hidden_Type = nil
	}
}

func (x *StateKey) ClearMultimapSideInput() {
	if _, ok := x.xxx_hidden_Type.(*stateKey_MultimapSideInput_); ok {
		x.xxx_hidden_Type = nil
	}
}

func (x *StateKey) ClearBagUserState() {
	if _, ok := x.xxx_hidden_Type.(*stateKey_BagUserState_); ok {
		x.xxx_hidden_Type = nil
	}
}

func (x *StateKey) ClearIterableSideInput() {
	if _, ok := x.xxx_hidden_Type.(*stateKey_IterableSideInput_); ok {
		x.xxx_hidden_Type = nil
	}
}

func (x *StateKey) ClearMultimapKeysSideInput() {
	if _, ok := x.xxx_hidden_Type.(*stateKey_MultimapKeysSideInput_); ok {
		x.xxx_hidden_Type = nil
	}
}

func (x *StateKey) ClearMultimapKeysValuesSideInput() {
	if _, ok := x.xxx_hidden_Type.(*stateKey_MultimapKeysValuesSideInput_); ok {
		x.xxx_hidden_Type = nil
	}
}

func (x *StateKey) ClearMultimapKeysUserState() {
	if _, ok := x.xxx_hidden_Type.(*stateKey_MultimapKeysUserState_); ok {
		x.xxx_hidden_Type = nil
	}
}

func (x *StateKey) ClearMultimapUserState() {
	if _, ok := x.xxx_hidden_Type.(*stateKey_MultimapUserState_); ok {
		x.xxx_hidden_Type = nil
	}
}

func (x *StateKey) ClearOrderedListUserState() {
	if _, ok := x.xxx_hidden_Type.(*stateKey_OrderedListUserState_); ok {
		x.xxx_hidden_Type = nil
	}
}

const StateKey_Type_not_set_case case_StateKey_Type = 0
const StateKey_Runner_case case_StateKey_Type = 1
const StateKey_MultimapSideInput_case case_StateKey_Type = 2
const StateKey_BagUserState_case case_StateKey_Type = 3
const StateKey_IterableSideInput_case case_StateKey_Type = 4
const StateKey_MultimapKeysSideInput_case case_StateKey_Type = 5
const StateKey_MultimapKeysValuesSideInput_case case_StateKey_Type = 8
const StateKey_MultimapKeysUserState_case case_StateKey_Type = 6
const StateKey_MultimapUserState_case case_StateKey_Type = 7
const StateKey_OrderedListUserState_case case_StateKey_Type = 9

func (x *StateKey) WhichType() case_StateKey_Type {
	if x == nil {
		return StateKey_Type_not_set_case
	}
	switch x.xxx_hidden_Type.(type) {
	case *stateKey_Runner_:
		return StateKey_Runner_case
	case *stateKey_MultimapSideInput_:
		return StateKey_MultimapSideInput_case
	case *stateKey_BagUserState_:
		return StateKey_BagUserState_case
	case *stateKey_IterableSideInput_:
		return StateKey_IterableSideInput_case
	case *stateKey_MultimapKeysSideInput_:
		return StateKey_MultimapKeysSideInput_case
	case *stateKey_MultimapKeysValuesSideInput_:
		return StateKey_MultimapKeysValuesSideInput_case
	case *stateKey_MultimapKeysUserState_:
		return StateKey_MultimapKeysUserState_case
	case *stateKey_MultimapUserState_:
		return StateKey_MultimapUserState_case
	case *stateKey_OrderedListUserState_:
		return StateKey_OrderedListUserState_case
	default:
		return StateKey_Type_not_set_case
	}
}

type StateKey_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// (Required) One of the following state keys must be set.

	// Fields of oneof xxx_hidden_Type:
	Runner                      *StateKey_Runner
	MultimapSideInput           *StateKey_MultimapSideInput
	BagUserState                *StateKey_BagUserState
	IterableSideInput           *StateKey_IterableSideInput
	MultimapKeysSideInput       *StateKey_MultimapKeysSideInput
	MultimapKeysValuesSideInput *StateKey_MultimapKeysValuesSideInput
	MultimapKeysUserState       *StateKey_MultimapKeysUserState
	MultimapUserState           *StateKey_MultimapUserState
	OrderedListUserState        *StateKey_OrderedListUserState
	// -- end of xxx_hidden_Type
}

func (b0 StateKey_builder) Build() *StateKey {
	m0 := &StateKey{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Runner != nil {
		x.xxx_hidden_Type = &stateKey_Runner_{b.Runner}
	}
	if b.MultimapSideInput != nil {
		x.xxx_hidden_Type = &stateKey_MultimapSideInput_{b.MultimapSideInput}
	}
	if b.BagUserState != nil {
		x.xxx_hidden_Type = &stateKey_BagUserState_{b.BagUserState}
	}
	if b.IterableSideInput != nil {
		x.xxx_hidden_Type = &stateKey_IterableSideInput_{b.IterableSideInput}
	}
	if b.MultimapKeysSideInput != nil {
		x.xxx_hidden_Type = &stateKey_MultimapKeysSideInput_{b.MultimapKeysSideInput}
	}
	if b.MultimapKeysValuesSideInput != nil {
		x.xxx_hidden_Type = &stateKey_MultimapKeysValuesSideInput_{b.MultimapKeysValuesSideInput}
	}
	if b.MultimapKeysUserState != nil {
		x.xxx_hidden_Type = &stateKey_MultimapKeysUserState_{b.MultimapKeysUserState}
	}
	if b.MultimapUserState != nil {
		x.xxx_hidden_Type = &stateKey_MultimapUserState_{b.MultimapUserState}
	}
	if b.OrderedListUserState != nil {
		x.xxx_hidden_Type = &stateKey_OrderedListUserState_{b.OrderedListUserState}
	}
	return m0
}

type case_StateKey_Type protoreflect.FieldNumber

func (x case_StateKey_Type) String() string {
	md := file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[28].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type isStateKey_Type interface {
	isStateKey_Type()
}

type stateKey_Runner_ struct {
	Runner *StateKey_Runner `protobuf:"bytes,1,opt,name=runner,proto3,oneof"`
}

type stateKey_MultimapSideInput_ struct {
	MultimapSideInput *StateKey_MultimapSideInput `protobuf:"bytes,2,opt,name=multimap_side_input,json=multimapSideInput,proto3,oneof"`
}

type stateKey_BagUserState_ struct {
	BagUserState *StateKey_BagUserState `protobuf:"bytes,3,opt,name=bag_user_state,json=bagUserState,proto3,oneof"`
}

type stateKey_IterableSideInput_ struct {
	IterableSideInput *StateKey_IterableSideInput `protobuf:"bytes,4,opt,name=iterable_side_input,json=iterableSideInput,proto3,oneof"`
}

type stateKey_MultimapKeysSideInput_ struct {
	MultimapKeysSideInput *StateKey_MultimapKeysSideInput `protobuf:"bytes,5,opt,name=multimap_keys_side_input,json=multimapKeysSideInput,proto3,oneof"`
}

type stateKey_MultimapKeysValuesSideInput_ struct {
	MultimapKeysValuesSideInput *StateKey_MultimapKeysValuesSideInput `protobuf:"bytes,8,opt,name=multimap_keys_values_side_input,json=multimapKeysValuesSideInput,proto3,oneof"`
}

type stateKey_MultimapKeysUserState_ struct {
	MultimapKeysUserState *StateKey_MultimapKeysUserState `protobuf:"bytes,6,opt,name=multimap_keys_user_state,json=multimapKeysUserState,proto3,oneof"`
}

type stateKey_MultimapUserState_ struct {
	MultimapUserState *StateKey_MultimapUserState `protobuf:"bytes,7,opt,name=multimap_user_state,json=multimapUserState,proto3,oneof"`
}

type stateKey_OrderedListUserState_ struct {
	OrderedListUserState *StateKey_OrderedListUserState `protobuf:"bytes,9,opt,name=ordered_list_user_state,json=orderedListUserState,proto3,oneof"`
}

func (*stateKey_Runner_) isStateKey_Type() {}

func (*stateKey_MultimapSideInput_) isStateKey_Type() {}

func (*stateKey_BagUserState_) isStateKey_Type() {}

func (*stateKey_IterableSideInput_) isStateKey_Type() {}

func (*stateKey_MultimapKeysSideInput_) isStateKey_Type() {}

func (*stateKey_MultimapKeysValuesSideInput_) isStateKey_Type() {}

func (*stateKey_MultimapKeysUserState_) isStateKey_Type() {}

func (*stateKey_MultimapUserState_) isStateKey_Type() {}

func (*stateKey_OrderedListUserState_) isStateKey_Type() {}

// A request to get state.
type StateGetRequest struct {
	state                        protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_ContinuationToken []byte                 `protobuf:"bytes,1,opt,name=continuation_token,json=continuationToken,proto3" json:"continuation_token,omitempty"`
	unknownFields                protoimpl.UnknownFields
	sizeCache                    protoimpl.SizeCache
}

func (x *StateGetRequest) Reset() {
	*x = StateGetRequest{}
	mi := &file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StateGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateGetRequest) ProtoMessage() {}

func (x *StateGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *StateGetRequest) GetContinuationToken() []byte {
	if x != nil {
		return x.xxx_hidden_ContinuationToken
	}
	return nil
}

func (x *StateGetRequest) SetContinuationToken(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.xxx_hidden_ContinuationToken = v
}

type StateGetRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// (Optional) If specified, signals to the runner that the response
	// should resume from the following continuation token.
	//
	// If unspecified, signals to the runner that the response should start
	// from the beginning of the logical continuable stream.
	ContinuationToken []byte
}

func (b0 StateGetRequest_builder) Build() *StateGetRequest {
	m0 := &StateGetRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_ContinuationToken = b.ContinuationToken
	return m0
}

// A response to get state representing a logical byte stream which can be
// continued using the state API.
type StateGetResponse struct {
	state                        protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_ContinuationToken []byte                 `protobuf:"bytes,1,opt,name=continuation_token,json=continuationToken,proto3" json:"continuation_token,omitempty"`
	xxx_hidden_Data              []byte                 `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields                protoimpl.UnknownFields
	sizeCache                    protoimpl.SizeCache
}

func (x *StateGetResponse) Reset() {
	*x = StateGetResponse{}
	mi := &file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StateGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateGetResponse) ProtoMessage() {}

func (x *StateGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *StateGetResponse) GetContinuationToken() []byte {
	if x != nil {
		return x.xxx_hidden_ContinuationToken
	}
	return nil
}

func (x *StateGetResponse) GetData() []byte {
	if x != nil {
		return x.xxx_hidden_Data
	}
	return nil
}

func (x *StateGetResponse) SetContinuationToken(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.xxx_hidden_ContinuationToken = v
}

func (x *StateGetResponse) SetData(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.xxx_hidden_Data = v
}

type StateGetResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// (Optional) If specified, represents a token which can be used with the
	// state API to get the next chunk of this logical byte stream. The end of
	// the logical byte stream is signalled by this field being unset.
	ContinuationToken []byte
	// Represents a part of a logical byte stream. Elements within
	// the logical byte stream are encoded in the nested context and
	// concatenated together.
	//
	// See also the note about OrderedListState in StateAppendRequest.
	Data []byte
}

func (b0 StateGetResponse_builder) Build() *StateGetResponse {
	m0 := &StateGetResponse{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_ContinuationToken = b.ContinuationToken
	x.xxx_hidden_Data = b.Data
	return m0
}

// A request to append state.
type StateAppendRequest struct {
	state           protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Data []byte                 `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *StateAppendRequest) Reset() {
	*x = StateAppendRequest{}
	mi := &file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StateAppendRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateAppendRequest) ProtoMessage() {}

func (x *StateAppendRequest) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *StateAppendRequest) GetData() []byte {
	if x != nil {
		return x.xxx_hidden_Data
	}
	return nil
}

func (x *StateAppendRequest) SetData(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.xxx_hidden_Data = v
}

type StateAppendRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Represents a part of a logical byte stream. Elements within
	// the logical byte stream are encoded in the nested context and
	// multiple append requests are concatenated together.
	//
	// For OrderedListState, elements of should be encoded with the
	// beam:coder:kv:v1 coder, where the first (key) component must be a
	// beam:coder:varint:v1 and the second (value) component must be encoded
	// with a beam:coder:length_prefix:v1 coder.
	Data []byte
}

func (b0 StateAppendRequest_builder) Build() *StateAppendRequest {
	m0 := &StateAppendRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Data = b.Data
	return m0
}

// A response to append state.
type StateAppendResponse struct {
	state         protoimpl.MessageState `protogen:"opaque.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StateAppendResponse) Reset() {
	*x = StateAppendResponse{}
	mi := &file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StateAppendResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateAppendResponse) ProtoMessage() {}

func (x *StateAppendResponse) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

type StateAppendResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

}

func (b0 StateAppendResponse_builder) Build() *StateAppendResponse {
	m0 := &StateAppendResponse{}
	b, x := &b0, m0
	_, _ = b, x
	return m0
}

// A request to clear state.
type StateClearRequest struct {
	state         protoimpl.MessageState `protogen:"opaque.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StateClearRequest) Reset() {
	*x = StateClearRequest{}
	mi := &file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StateClearRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateClearRequest) ProtoMessage() {}

func (x *StateClearRequest) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

type StateClearRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

}

func (b0 StateClearRequest_builder) Build() *StateClearRequest {
	m0 := &StateClearRequest{}
	b, x := &b0, m0
	_, _ = b, x
	return m0
}

// A response to clear state.
type StateClearResponse struct {
	state         protoimpl.MessageState `protogen:"opaque.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StateClearResponse) Reset() {
	*x = StateClearResponse{}
	mi := &file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StateClearResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateClearResponse) ProtoMessage() {}

func (x *StateClearResponse) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

type StateClearResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

}

func (b0 StateClearResponse_builder) Build() *StateClearResponse {
	m0 := &StateClearResponse{}
	b, x := &b0, m0
	_, _ = b, x
	return m0
}

// A message describes a sort key range [start, end).
type OrderedListRange struct {
	state            protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Start int64                  `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"`
	xxx_hidden_End   int64                  `protobuf:"varint,2,opt,name=end,proto3" json:"end,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *OrderedListRange) Reset() {
	*x = OrderedListRange{}
	mi := &file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OrderedListRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderedListRange) ProtoMessage() {}

func (x *OrderedListRange) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *OrderedListRange) GetStart() int64 {
	if x != nil {
		return x.xxx_hidden_Start
	}
	return 0
}

func (x *OrderedListRange) GetEnd() int64 {
	if x != nil {
		return x.xxx_hidden_End
	}
	return 0
}

func (x *OrderedListRange) SetStart(v int64) {
	x.xxx_hidden_Start = v
}

func (x *OrderedListRange) SetEnd(v int64) {
	x.xxx_hidden_End = v
}

type OrderedListRange_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Start int64
	End   int64
}

func (b0 OrderedListRange_builder) Build() *OrderedListRange {
	m0 := &OrderedListRange{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Start = b.Start
	x.xxx_hidden_End = b.End
	return m0
}

// A log entry
type LogEntry struct {
	state                    protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Severity      LogEntry_Severity_Enum `protobuf:"varint,1,opt,name=severity,proto3,enum=org.apache.beam.model.fn_execution.v1.LogEntry_Severity_Enum" json:"severity,omitempty"`
	xxx_hidden_Timestamp     *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	xxx_hidden_Message       string                 `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	xxx_hidden_Trace         string                 `protobuf:"bytes,4,opt,name=trace,proto3" json:"trace,omitempty"`
	xxx_hidden_InstructionId string                 `protobuf:"bytes,5,opt,name=instruction_id,json=instructionId,proto3" json:"instruction_id,omitempty"`
	xxx_hidden_TransformId   string                 `protobuf:"bytes,6,opt,name=transform_id,json=transformId,proto3" json:"transform_id,omitempty"`
	xxx_hidden_LogLocation   string                 `protobuf:"bytes,7,opt,name=log_location,json=logLocation,proto3" json:"log_location,omitempty"`
	xxx_hidden_Thread        string                 `protobuf:"bytes,8,opt,name=thread,proto3" json:"thread,omitempty"`
	xxx_hidden_CustomData    *structpb.Struct       `protobuf:"bytes,9,opt,name=custom_data,json=customData,proto3" json:"custom_data,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *LogEntry) Reset() {
	*x = LogEntry{}
	mi := &file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogEntry) ProtoMessage() {}

func (x *LogEntry) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *LogEntry) GetSeverity() LogEntry_Severity_Enum {
	if x != nil {
		return x.xxx_hidden_Severity
	}
	return LogEntry_Severity_UNSPECIFIED
}

func (x *LogEntry) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_Timestamp
	}
	return nil
}

func (x *LogEntry) GetMessage() string {
	if x != nil {
		return x.xxx_hidden_Message
	}
	return ""
}

func (x *LogEntry) GetTrace() string {
	if x != nil {
		return x.xxx_hidden_Trace
	}
	return ""
}

func (x *LogEntry) GetInstructionId() string {
	if x != nil {
		return x.xxx_hidden_InstructionId
	}
	return ""
}

func (x *LogEntry) GetTransformId() string {
	if x != nil {
		return x.xxx_hidden_TransformId
	}
	return ""
}

func (x *LogEntry) GetLogLocation() string {
	if x != nil {
		return x.xxx_hidden_LogLocation
	}
	return ""
}

func (x *LogEntry) GetThread() string {
	if x != nil {
		return x.xxx_hidden_Thread
	}
	return ""
}

func (x *LogEntry) GetCustomData() *structpb.Struct {
	if x != nil {
		return x.xxx_hidden_CustomData
	}
	return nil
}

func (x *LogEntry) SetSeverity(v LogEntry_Severity_Enum) {
	x.xxx_hidden_Severity = v
}

func (x *LogEntry) SetTimestamp(v *timestamppb.Timestamp) {
	x.xxx_hidden_Timestamp = v
}

func (x *LogEntry) SetMessage(v string) {
	x.xxx_hidden_Message = v
}

func (x *LogEntry) SetTrace(v string) {
	x.xxx_hidden_Trace = v
}

func (x *LogEntry) SetInstructionId(v string) {
	x.xxx_hidden_InstructionId = v
}

func (x *LogEntry) SetTransformId(v string) {
	x.xxx_hidden_TransformId = v
}

func (x *LogEntry) SetLogLocation(v string) {
	x.xxx_hidden_LogLocation = v
}

func (x *LogEntry) SetThread(v string) {
	x.xxx_hidden_Thread = v
}

func (x *LogEntry) SetCustomData(v *structpb.Struct) {
	x.xxx_hidden_CustomData = v
}

func (x *LogEntry) HasTimestamp() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Timestamp != nil
}

func (x *LogEntry) HasCustomData() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_CustomData != nil
}

func (x *LogEntry) ClearTimestamp() {
	x.xxx_hidden_Timestamp = nil
}

func (x *LogEntry) ClearCustomData() {
	x.xxx_hidden_CustomData = nil
}

type LogEntry_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// (Required) The severity of the log statement.
	Severity LogEntry_Severity_Enum
	// (Required) The time at which this log statement occurred.
	Timestamp *timestamppb.Timestamp
	// (Required) A human readable message.
	Message string
	// (Optional) An optional trace of the functions involved. For example, in
	// Java this can include multiple causes and multiple suppressed exceptions.
	Trace string
	// (Optional) A reference to the instruction this log statement is associated
	// with.
	InstructionId string
	// (Optional) A reference to the transform this log statement is
	// associated with.
	TransformId string
	// (Optional) Human-readable name of the function or method being invoked,
	// with optional context such as the class or package name. The format can
	// vary by language. For example:
	//
	//	qual.if.ied.Class.method (Java)
	//	dir/package.func (Go)
	//	module.function (Python)
	//	file.cc:382 (C++)
	LogLocation string
	// (Optional) The name of the thread this log statement is associated with.
	Thread string
	// (Optional) Additional structured data to log.
	// Keys are limited to these characters: [a-zA-Z_-]
	CustomData *structpb.Struct
}

func (b0 LogEntry_builder) Build() *LogEntry {
	m0 := &LogEntry{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Severity = b.Severity
	x.xxx_hidden_Timestamp = b.Timestamp
	x.xxx_hidden_Message = b.Message
	x.xxx_hidden_Trace = b.Trace
	x.xxx_hidden_InstructionId = b.InstructionId
	x.xxx_hidden_TransformId = b.TransformId
	x.xxx_hidden_LogLocation = b.LogLocation
	x.xxx_hidden_Thread = b.Thread
	x.xxx_hidden_CustomData = b.CustomData
	return m0
}

type LogControl struct {
	state         protoimpl.MessageState `protogen:"opaque.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LogControl) Reset() {
	*x = LogControl{}
	mi := &file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogControl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogControl) ProtoMessage() {}

func (x *LogControl) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

type LogControl_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

}

func (b0 LogControl_builder) Build() *LogControl {
	m0 := &LogControl{}
	b, x := &b0, m0
	_, _ = b, x
	return m0
}

type StartWorkerRequest struct {
	state                        protoimpl.MessageState            `protogen:"opaque.v1"`
	xxx_hidden_WorkerId          string                            `protobuf:"bytes,1,opt,name=worker_id,json=workerId,proto3" json:"worker_id,omitempty"`
	xxx_hidden_ControlEndpoint   *pipeline_v1.ApiServiceDescriptor `protobuf:"bytes,2,opt,name=control_endpoint,json=controlEndpoint,proto3" json:"control_endpoint,omitempty"`
	xxx_hidden_LoggingEndpoint   *pipeline_v1.ApiServiceDescriptor `protobuf:"bytes,3,opt,name=logging_endpoint,json=loggingEndpoint,proto3" json:"logging_endpoint,omitempty"`
	xxx_hidden_ArtifactEndpoint  *pipeline_v1.ApiServiceDescriptor `protobuf:"bytes,4,opt,name=artifact_endpoint,json=artifactEndpoint,proto3" json:"artifact_endpoint,omitempty"`
	xxx_hidden_ProvisionEndpoint *pipeline_v1.ApiServiceDescriptor `protobuf:"bytes,5,opt,name=provision_endpoint,json=provisionEndpoint,proto3" json:"provision_endpoint,omitempty"`
	xxx_hidden_Params            map[string]string                 `protobuf:"bytes,10,rep,name=params,proto3" json:"params,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields                protoimpl.UnknownFields
	sizeCache                    protoimpl.SizeCache
}

func (x *StartWorkerRequest) Reset() {
	*x = StartWorkerRequest{}
	mi := &file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartWorkerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartWorkerRequest) ProtoMessage() {}

func (x *StartWorkerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *StartWorkerRequest) GetWorkerId() string {
	if x != nil {
		return x.xxx_hidden_WorkerId
	}
	return ""
}

func (x *StartWorkerRequest) GetControlEndpoint() *pipeline_v1.ApiServiceDescriptor {
	if x != nil {
		return x.xxx_hidden_ControlEndpoint
	}
	return nil
}

func (x *StartWorkerRequest) GetLoggingEndpoint() *pipeline_v1.ApiServiceDescriptor {
	if x != nil {
		return x.xxx_hidden_LoggingEndpoint
	}
	return nil
}

func (x *StartWorkerRequest) GetArtifactEndpoint() *pipeline_v1.ApiServiceDescriptor {
	if x != nil {
		return x.xxx_hidden_ArtifactEndpoint
	}
	return nil
}

func (x *StartWorkerRequest) GetProvisionEndpoint() *pipeline_v1.ApiServiceDescriptor {
	if x != nil {
		return x.xxx_hidden_ProvisionEndpoint
	}
	return nil
}

func (x *StartWorkerRequest) GetParams() map[string]string {
	if x != nil {
		return x.xxx_hidden_Params
	}
	return nil
}

func (x *StartWorkerRequest) SetWorkerId(v string) {
	x.xxx_hidden_WorkerId = v
}

func (x *StartWorkerRequest) SetControlEndpoint(v *pipeline_v1.ApiServiceDescriptor) {
	x.xxx_hidden_ControlEndpoint = v
}

func (x *StartWorkerRequest) SetLoggingEndpoint(v *pipeline_v1.ApiServiceDescriptor) {
	x.xxx_hidden_LoggingEndpoint = v
}

func (x *StartWorkerRequest) SetArtifactEndpoint(v *pipeline_v1.ApiServiceDescriptor) {
	x.xxx_hidden_ArtifactEndpoint = v
}

func (x *StartWorkerRequest) SetProvisionEndpoint(v *pipeline_v1.ApiServiceDescriptor) {
	x.xxx_hidden_ProvisionEndpoint = v
}

func (x *StartWorkerRequest) SetParams(v map[string]string) {
	x.xxx_hidden_Params = v
}

func (x *StartWorkerRequest) HasControlEndpoint() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_ControlEndpoint != nil
}

func (x *StartWorkerRequest) HasLoggingEndpoint() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_LoggingEndpoint != nil
}

func (x *StartWorkerRequest) HasArtifactEndpoint() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_ArtifactEndpoint != nil
}

func (x *StartWorkerRequest) HasProvisionEndpoint() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_ProvisionEndpoint != nil
}

func (x *StartWorkerRequest) ClearControlEndpoint() {
	x.xxx_hidden_ControlEndpoint = nil
}

func (x *StartWorkerRequest) ClearLoggingEndpoint() {
	x.xxx_hidden_LoggingEndpoint = nil
}

func (x *StartWorkerRequest) ClearArtifactEndpoint() {
	x.xxx_hidden_ArtifactEndpoint = nil
}

func (x *StartWorkerRequest) ClearProvisionEndpoint() {
	x.xxx_hidden_ProvisionEndpoint = nil
}

type StartWorkerRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	WorkerId          string
	ControlEndpoint   *pipeline_v1.ApiServiceDescriptor
	LoggingEndpoint   *pipeline_v1.ApiServiceDescriptor
	ArtifactEndpoint  *pipeline_v1.ApiServiceDescriptor
	ProvisionEndpoint *pipeline_v1.ApiServiceDescriptor
	Params            map[string]string
}

func (b0 StartWorkerRequest_builder) Build() *StartWorkerRequest {
	m0 := &StartWorkerRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_WorkerId = b.WorkerId
	x.xxx_hidden_ControlEndpoint = b.ControlEndpoint
	x.xxx_hidden_LoggingEndpoint = b.LoggingEndpoint
	x.xxx_hidden_ArtifactEndpoint = b.ArtifactEndpoint
	x.xxx_hidden_ProvisionEndpoint = b.ProvisionEndpoint
	x.xxx_hidden_Params = b.Params
	return m0
}

type StartWorkerResponse struct {
	state            protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Error string                 `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *StartWorkerResponse) Reset() {
	*x = StartWorkerResponse{}
	mi := &file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartWorkerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartWorkerResponse) ProtoMessage() {}

func (x *StartWorkerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *StartWorkerResponse) GetError() string {
	if x != nil {
		return x.xxx_hidden_Error
	}
	return ""
}

func (x *StartWorkerResponse) SetError(v string) {
	x.xxx_hidden_Error = v
}

type StartWorkerResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Error string
}

func (b0 StartWorkerResponse_builder) Build() *StartWorkerResponse {
	m0 := &StartWorkerResponse{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Error = b.Error
	return m0
}

type StopWorkerRequest struct {
	state               protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_WorkerId string                 `protobuf:"bytes,1,opt,name=worker_id,json=workerId,proto3" json:"worker_id,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *StopWorkerRequest) Reset() {
	*x = StopWorkerRequest{}
	mi := &file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopWorkerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopWorkerRequest) ProtoMessage() {}

func (x *StopWorkerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *StopWorkerRequest) GetWorkerId() string {
	if x != nil {
		return x.xxx_hidden_WorkerId
	}
	return ""
}

func (x *StopWorkerRequest) SetWorkerId(v string) {
	x.xxx_hidden_WorkerId = v
}

type StopWorkerRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	WorkerId string
}

func (b0 StopWorkerRequest_builder) Build() *StopWorkerRequest {
	m0 := &StopWorkerRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_WorkerId = b.WorkerId
	return m0
}

type StopWorkerResponse struct {
	state            protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Error string                 `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *StopWorkerResponse) Reset() {
	*x = StopWorkerResponse{}
	mi := &file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopWorkerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopWorkerResponse) ProtoMessage() {}

func (x *StopWorkerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *StopWorkerResponse) GetError() string {
	if x != nil {
		return x.xxx_hidden_Error
	}
	return ""
}

func (x *StopWorkerResponse) SetError(v string) {
	x.xxx_hidden_Error = v
}

type StopWorkerResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Error string
}

func (b0 StopWorkerResponse_builder) Build() *StopWorkerResponse {
	m0 := &StopWorkerResponse{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Error = b.Error
	return m0
}

// Request from runner to SDK Harness asking for its status. For more details see
// https://s.apache.org/beam-fn-api-harness-status
type WorkerStatusRequest struct {
	state         protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Id string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkerStatusRequest) Reset() {
	*x = WorkerStatusRequest{}
	mi := &file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkerStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerStatusRequest) ProtoMessage() {}

func (x *WorkerStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *WorkerStatusRequest) GetId() string {
	if x != nil {
		return x.xxx_hidden_Id
	}
	return ""
}

func (x *WorkerStatusRequest) SetId(v string) {
	x.xxx_hidden_Id = v
}

type WorkerStatusRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// (Required) Unique ID identifying this request.
	Id string
}

func (b0 WorkerStatusRequest_builder) Build() *WorkerStatusRequest {
	m0 := &WorkerStatusRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Id = b.Id
	return m0
}

// Response from SDK Harness to runner containing the debug related status info.
type WorkerStatusResponse struct {
	state                 protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Id         string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	xxx_hidden_Error      string                 `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	xxx_hidden_StatusInfo string                 `protobuf:"bytes,3,opt,name=status_info,json=statusInfo,proto3" json:"status_info,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *WorkerStatusResponse) Reset() {
	*x = WorkerStatusResponse{}
	mi := &file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkerStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerStatusResponse) ProtoMessage() {}

func (x *WorkerStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *WorkerStatusResponse) GetId() string {
	if x != nil {
		return x.xxx_hidden_Id
	}
	return ""
}

func (x *WorkerStatusResponse) GetError() string {
	if x != nil {
		return x.xxx_hidden_Error
	}
	return ""
}

func (x *WorkerStatusResponse) GetStatusInfo() string {
	if x != nil {
		return x.xxx_hidden_StatusInfo
	}
	return ""
}

func (x *WorkerStatusResponse) SetId(v string) {
	x.xxx_hidden_Id = v
}

func (x *WorkerStatusResponse) SetError(v string) {
	x.xxx_hidden_Error = v
}

func (x *WorkerStatusResponse) SetStatusInfo(v string) {
	x.xxx_hidden_StatusInfo = v
}

type WorkerStatusResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// (Required) Unique ID from the original request.
	Id string
	// (Optional) Error message if exception encountered generating the status response.
	Error string
	// (Optional) Status debugging info reported by SDK harness worker. Content and
	// format is not strongly enforced but should be print-friendly and
	// appropriate as an HTTP response body for end user. For details of the preferred
	// info to include in the message see
	// https://s.apache.org/beam-fn-api-harness-status
	StatusInfo string
}

func (b0 WorkerStatusResponse_builder) Build() *WorkerStatusResponse {
	m0 := &WorkerStatusResponse{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Id = b.Id
	x.xxx_hidden_Error = b.Error
	x.xxx_hidden_StatusInfo = b.StatusInfo
	return m0
}

type SampledElement_Exception struct {
	state                    protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_InstructionId string                 `protobuf:"bytes,1,opt,name=instruction_id,json=instructionId,proto3" json:"instruction_id,omitempty"`
	xxx_hidden_TransformId   string                 `protobuf:"bytes,2,opt,name=transform_id,json=transformId,proto3" json:"transform_id,omitempty"`
	xxx_hidden_Error         string                 `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *SampledElement_Exception) Reset() {
	*x = SampledElement_Exception{}
	mi := &file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SampledElement_Exception) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SampledElement_Exception) ProtoMessage() {}

func (x *SampledElement_Exception) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *SampledElement_Exception) GetInstructionId() string {
	if x != nil {
		return x.xxx_hidden_InstructionId
	}
	return ""
}

func (x *SampledElement_Exception) GetTransformId() string {
	if x != nil {
		return x.xxx_hidden_TransformId
	}
	return ""
}

func (x *SampledElement_Exception) GetError() string {
	if x != nil {
		return x.xxx_hidden_Error
	}
	return ""
}

func (x *SampledElement_Exception) SetInstructionId(v string) {
	x.xxx_hidden_InstructionId = v
}

func (x *SampledElement_Exception) SetTransformId(v string) {
	x.xxx_hidden_TransformId = v
}

func (x *SampledElement_Exception) SetError(v string) {
	x.xxx_hidden_Error = v
}

type SampledElement_Exception_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// (Required) The instruction ID of the associated ProcessBundleRequest.
	InstructionId string
	// (Required) The transform ID of the executing PTransform during the
	// exception.
	TransformId string
	// (Required) The error message to be displayed to the user. Can use the
	// other fields to query for contextual logs.
	Error string
}

func (b0 SampledElement_Exception_builder) Build() *SampledElement_Exception {
	m0 := &SampledElement_Exception{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_InstructionId = b.InstructionId
	x.xxx_hidden_TransformId = b.TransformId
	x.xxx_hidden_Error = b.Error
	return m0
}

type SampleDataResponse_ElementList struct {
	state               protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Elements *[]*SampledElement     `protobuf:"bytes,1,rep,name=elements,proto3" json:"elements,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *SampleDataResponse_ElementList) Reset() {
	*x = SampleDataResponse_ElementList{}
	mi := &file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SampleDataResponse_ElementList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SampleDataResponse_ElementList) ProtoMessage() {}

func (x *SampleDataResponse_ElementList) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *SampleDataResponse_ElementList) GetElements() []*SampledElement {
	if x != nil {
		if x.xxx_hidden_Elements != nil {
			return *x.xxx_hidden_Elements
		}
	}
	return nil
}

func (x *SampleDataResponse_ElementList) SetElements(v []*SampledElement) {
	x.xxx_hidden_Elements = &v
}

type SampleDataResponse_ElementList_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Required. The individual elements sampled from a PCollection.
	Elements []*SampledElement
}

func (b0 SampleDataResponse_ElementList_builder) Build() *SampleDataResponse_ElementList {
	m0 := &SampleDataResponse_ElementList{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Elements = &b.Elements
	return m0
}

// Contains the cache token and also defines the scope of what the token applies to.
//
// See https://s.apache.org/beam-fn-state-api-and-bundle-processing#heading=h.7ghoih5aig5m
// for additional details on how to use the cache token with the State API
// to cache data across bundle boundaries.
type ProcessBundleRequest_CacheToken struct {
	state            protoimpl.MessageState                 `protogen:"opaque.v1"`
	xxx_hidden_Type  isProcessBundleRequest_CacheToken_Type `protobuf_oneof:"type"`
	xxx_hidden_Token []byte                                 `protobuf:"bytes,10,opt,name=token,proto3" json:"token,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ProcessBundleRequest_CacheToken) Reset() {
	*x = ProcessBundleRequest_CacheToken{}
	mi := &file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProcessBundleRequest_CacheToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessBundleRequest_CacheToken) ProtoMessage() {}

func (x *ProcessBundleRequest_CacheToken) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ProcessBundleRequest_CacheToken) GetUserState() *ProcessBundleRequest_CacheToken_UserState {
	if x != nil {
		if x, ok := x.xxx_hidden_Type.(*processBundleRequest_CacheToken_UserState_); ok {
			return x.UserState
		}
	}
	return nil
}

func (x *ProcessBundleRequest_CacheToken) GetSideInput() *ProcessBundleRequest_CacheToken_SideInput {
	if x != nil {
		if x, ok := x.xxx_hidden_Type.(*processBundleRequest_CacheToken_SideInput_); ok {
			return x.SideInput
		}
	}
	return nil
}

func (x *ProcessBundleRequest_CacheToken) GetToken() []byte {
	if x != nil {
		return x.xxx_hidden_Token
	}
	return nil
}

func (x *ProcessBundleRequest_CacheToken) SetUserState(v *ProcessBundleRequest_CacheToken_UserState) {
	if v == nil {
		x.xxx_hidden_Type = nil
		return
	}
	x.xxx_hidden_Type = &processBundleRequest_CacheToken_UserState_{v}
}

func (x *ProcessBundleRequest_CacheToken) SetSideInput(v *ProcessBundleRequest_CacheToken_SideInput) {
	if v == nil {
		x.xxx_hidden_Type = nil
		return
	}
	x.xxx_hidden_Type = &processBundleRequest_CacheToken_SideInput_{v}
}

func (x *ProcessBundleRequest_CacheToken) SetToken(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.xxx_hidden_Token = v
}

func (x *ProcessBundleRequest_CacheToken) HasType() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Type != nil
}

func (x *ProcessBundleRequest_CacheToken) HasUserState() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Type.(*processBundleRequest_CacheToken_UserState_)
	return ok
}

func (x *ProcessBundleRequest_CacheToken) HasSideInput() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Type.(*processBundleRequest_CacheToken_SideInput_)
	return ok
}

func (x *ProcessBundleRequest_CacheToken) ClearType() {
	x.xxx_hidden_Type = nil
}

func (x *ProcessBundleRequest_CacheToken) ClearUserState() {
	if _, ok := x.xxx_hidden_Type.(*processBundleRequest_CacheToken_UserState_); ok {
		x.xxx_hidden_Type = nil
	}
}

func (x *ProcessBundleRequest_CacheToken) ClearSideInput() {
	if _, ok := x.xxx_hidden_Type.(*processBundleRequest_CacheToken_SideInput_); ok {
		x.xxx_hidden_Type = nil
	}
}

const ProcessBundleRequest_CacheToken_Type_not_set_case case_ProcessBundleRequest_CacheToken_Type = 0
const ProcessBundleRequest_CacheToken_UserState_case case_ProcessBundleRequest_CacheToken_Type = 1
const ProcessBundleRequest_CacheToken_SideInput_case case_ProcessBundleRequest_CacheToken_Type = 2

func (x *ProcessBundleRequest_CacheToken) WhichType() case_ProcessBundleRequest_CacheToken_Type {
	if x == nil {
		return ProcessBundleRequest_CacheToken_Type_not_set_case
	}
	switch x.xxx_hidden_Type.(type) {
	case *processBundleRequest_CacheToken_UserState_:
		return ProcessBundleRequest_CacheToken_UserState_case
	case *processBundleRequest_CacheToken_SideInput_:
		return ProcessBundleRequest_CacheToken_SideInput_case
	default:
		return ProcessBundleRequest_CacheToken_Type_not_set_case
	}
}

type ProcessBundleRequest_CacheToken_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The scope of a cache token.

	// Fields of oneof xxx_hidden_Type:
	UserState *ProcessBundleRequest_CacheToken_UserState
	SideInput *ProcessBundleRequest_CacheToken_SideInput
	// -- end of xxx_hidden_Type
	// An opaque token used with the StateKey to create a globally unique
	// identifier.
	Token []byte
}

func (b0 ProcessBundleRequest_CacheToken_builder) Build() *ProcessBundleRequest_CacheToken {
	m0 := &ProcessBundleRequest_CacheToken{}
	b, x := &b0, m0
	_, _ = b, x
	if b.UserState != nil {
		x.xxx_hidden_Type = &processBundleRequest_CacheToken_UserState_{b.UserState}
	}
	if b.SideInput != nil {
		x.xxx_hidden_Type = &processBundleRequest_CacheToken_SideInput_{b.SideInput}
	}
	x.xxx_hidden_Token = b.Token
	return m0
}

type case_ProcessBundleRequest_CacheToken_Type protoreflect.FieldNumber

func (x case_ProcessBundleRequest_CacheToken_Type) String() string {
	md := file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[54].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type isProcessBundleRequest_CacheToken_Type interface {
	isProcessBundleRequest_CacheToken_Type()
}

type processBundleRequest_CacheToken_UserState_ struct {
	UserState *ProcessBundleRequest_CacheToken_UserState `protobuf:"bytes,1,opt,name=user_state,json=userState,proto3,oneof"`
}

type processBundleRequest_CacheToken_SideInput_ struct {
	SideInput *ProcessBundleRequest_CacheToken_SideInput `protobuf:"bytes,2,opt,name=side_input,json=sideInput,proto3,oneof"`
}

func (*processBundleRequest_CacheToken_UserState_) isProcessBundleRequest_CacheToken_Type() {}

func (*processBundleRequest_CacheToken_SideInput_) isProcessBundleRequest_CacheToken_Type() {}

// A flag to indicate a cache token is valid for all user state.
type ProcessBundleRequest_CacheToken_UserState struct {
	state         protoimpl.MessageState `protogen:"opaque.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProcessBundleRequest_CacheToken_UserState) Reset() {
	*x = ProcessBundleRequest_CacheToken_UserState{}
	mi := &file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProcessBundleRequest_CacheToken_UserState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessBundleRequest_CacheToken_UserState) ProtoMessage() {}

func (x *ProcessBundleRequest_CacheToken_UserState) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

type ProcessBundleRequest_CacheToken_UserState_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

}

func (b0 ProcessBundleRequest_CacheToken_UserState_builder) Build() *ProcessBundleRequest_CacheToken_UserState {
	m0 := &ProcessBundleRequest_CacheToken_UserState{}
	b, x := &b0, m0
	_, _ = b, x
	return m0
}

// A flag to indicate a cache token is valid for a side input.
type ProcessBundleRequest_CacheToken_SideInput struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_TransformId string                 `protobuf:"bytes,1,opt,name=transform_id,json=transformId,proto3" json:"transform_id,omitempty"`
	xxx_hidden_SideInputId string                 `protobuf:"bytes,2,opt,name=side_input_id,json=sideInputId,proto3" json:"side_input_id,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *ProcessBundleRequest_CacheToken_SideInput) Reset() {
	*x = ProcessBundleRequest_CacheToken_SideInput{}
	mi := &file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProcessBundleRequest_CacheToken_SideInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessBundleRequest_CacheToken_SideInput) ProtoMessage() {}

func (x *ProcessBundleRequest_CacheToken_SideInput) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ProcessBundleRequest_CacheToken_SideInput) GetTransformId() string {
	if x != nil {
		return x.xxx_hidden_TransformId
	}
	return ""
}

func (x *ProcessBundleRequest_CacheToken_SideInput) GetSideInputId() string {
	if x != nil {
		return x.xxx_hidden_SideInputId
	}
	return ""
}

func (x *ProcessBundleRequest_CacheToken_SideInput) SetTransformId(v string) {
	x.xxx_hidden_TransformId = v
}

func (x *ProcessBundleRequest_CacheToken_SideInput) SetSideInputId(v string) {
	x.xxx_hidden_SideInputId = v
}

type ProcessBundleRequest_CacheToken_SideInput_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// (Required) The id of the PTransform containing a side input.
	TransformId string
	// (Required) The id of the side input.
	SideInputId string
}

func (b0 ProcessBundleRequest_CacheToken_SideInput_builder) Build() *ProcessBundleRequest_CacheToken_SideInput {
	m0 := &ProcessBundleRequest_CacheToken_SideInput{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_TransformId = b.TransformId
	x.xxx_hidden_SideInputId = b.SideInputId
	return m0
}

// A message specifying the desired split for a single transform.
type ProcessBundleSplitRequest_DesiredSplit struct {
	state                             protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_FractionOfRemainder    float64                `protobuf:"fixed64,1,opt,name=fraction_of_remainder,json=fractionOfRemainder,proto3" json:"fraction_of_remainder,omitempty"`
	xxx_hidden_AllowedSplitPoints     []int64                `protobuf:"varint,3,rep,packed,name=allowed_split_points,json=allowedSplitPoints,proto3" json:"allowed_split_points,omitempty"`
	xxx_hidden_EstimatedInputElements int64                  `protobuf:"varint,2,opt,name=estimated_input_elements,json=estimatedInputElements,proto3" json:"estimated_input_elements,omitempty"`
	unknownFields                     protoimpl.UnknownFields
	sizeCache                         protoimpl.SizeCache
}

func (x *ProcessBundleSplitRequest_DesiredSplit) Reset() {
	*x = ProcessBundleSplitRequest_DesiredSplit{}
	mi := &file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[60]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProcessBundleSplitRequest_DesiredSplit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessBundleSplitRequest_DesiredSplit) ProtoMessage() {}

func (x *ProcessBundleSplitRequest_DesiredSplit) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[60]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ProcessBundleSplitRequest_DesiredSplit) GetFractionOfRemainder() float64 {
	if x != nil {
		return x.xxx_hidden_FractionOfRemainder
	}
	return 0
}

func (x *ProcessBundleSplitRequest_DesiredSplit) GetAllowedSplitPoints() []int64 {
	if x != nil {
		return x.xxx_hidden_AllowedSplitPoints
	}
	return nil
}

func (x *ProcessBundleSplitRequest_DesiredSplit) GetEstimatedInputElements() int64 {
	if x != nil {
		return x.xxx_hidden_EstimatedInputElements
	}
	return 0
}

func (x *ProcessBundleSplitRequest_DesiredSplit) SetFractionOfRemainder(v float64) {
	x.xxx_hidden_FractionOfRemainder = v
}

func (x *ProcessBundleSplitRequest_DesiredSplit) SetAllowedSplitPoints(v []int64) {
	x.xxx_hidden_AllowedSplitPoints = v
}

func (x *ProcessBundleSplitRequest_DesiredSplit) SetEstimatedInputElements(v int64) {
	x.xxx_hidden_EstimatedInputElements = v
}

type ProcessBundleSplitRequest_DesiredSplit_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// (Required) The fraction of known work remaining in this bundle
	// for this transform that should be kept by the SDK after this split.
	//
	// Set to 0 to "checkpoint" as soon as possible (keeping as little work as
	// possible and returning the remainder).
	FractionOfRemainder float64
	// (Optional) A set of allowed element indices where the SDK may split. When
	// this is empty, there are no constraints on where to split.
	AllowedSplitPoints []int64
	// (Required for gRPC Read operation transforms) Number of total elements
	// expected to be sent to this GrpcRead operation, required to correctly
	// account for unreceived data when determining where to split.
	EstimatedInputElements int64
}

func (b0 ProcessBundleSplitRequest_DesiredSplit_builder) Build() *ProcessBundleSplitRequest_DesiredSplit {
	m0 := &ProcessBundleSplitRequest_DesiredSplit{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_FractionOfRemainder = b.FractionOfRemainder
	x.xxx_hidden_AllowedSplitPoints = b.AllowedSplitPoints
	x.xxx_hidden_EstimatedInputElements = b.EstimatedInputElements
	return m0
}

// Represents contiguous portions of the data channel that are either
// entirely processed or entirely unprocessed and belong to the primary
// or residual respectively.
//
// This affords both a more efficient representation over the FnAPI
// (if the bundle is large) and often a more efficient representation
// on the runner side (e.g. if the set of elements can be represented
// as some range in an underlying dataset).
//
// Note that for a split the following properties must hold:
//   - last_primary_element < first_residual_element
//   - primary roots and residual roots can only be specified if the
//     last_primary_element + 1 < first_residual_element
//     (typically there is one primary and residual root per element in the
//     range (last_primary_element, first_residual_element))
//   - primary roots and residual roots must represent a disjoint but full
//     coverage of work represented by the elements between last_primary_element
//     and first_residual_element
//
// Note that subsequent splits of the same bundle must ensure that:
//   - the first_residual_element does not increase
//   - the first_residual_element does not decrease if there were residual
//     or primary roots returned in a prior split.
type ProcessBundleSplitResponse_ChannelSplit struct {
	state                           protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_TransformId          string                 `protobuf:"bytes,1,opt,name=transform_id,json=transformId,proto3" json:"transform_id,omitempty"`
	xxx_hidden_LastPrimaryElement   int64                  `protobuf:"varint,2,opt,name=last_primary_element,json=lastPrimaryElement,proto3" json:"last_primary_element,omitempty"`
	xxx_hidden_FirstResidualElement int64                  `protobuf:"varint,3,opt,name=first_residual_element,json=firstResidualElement,proto3" json:"first_residual_element,omitempty"`
	unknownFields                   protoimpl.UnknownFields
	sizeCache                       protoimpl.SizeCache
}

func (x *ProcessBundleSplitResponse_ChannelSplit) Reset() {
	*x = ProcessBundleSplitResponse_ChannelSplit{}
	mi := &file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[62]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProcessBundleSplitResponse_ChannelSplit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessBundleSplitResponse_ChannelSplit) ProtoMessage() {}

func (x *ProcessBundleSplitResponse_ChannelSplit) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[62]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ProcessBundleSplitResponse_ChannelSplit) GetTransformId() string {
	if x != nil {
		return x.xxx_hidden_TransformId
	}
	return ""
}

func (x *ProcessBundleSplitResponse_ChannelSplit) GetLastPrimaryElement() int64 {
	if x != nil {
		return x.xxx_hidden_LastPrimaryElement
	}
	return 0
}

func (x *ProcessBundleSplitResponse_ChannelSplit) GetFirstResidualElement() int64 {
	if x != nil {
		return x.xxx_hidden_FirstResidualElement
	}
	return 0
}

func (x *ProcessBundleSplitResponse_ChannelSplit) SetTransformId(v string) {
	x.xxx_hidden_TransformId = v
}

func (x *ProcessBundleSplitResponse_ChannelSplit) SetLastPrimaryElement(v int64) {
	x.xxx_hidden_LastPrimaryElement = v
}

func (x *ProcessBundleSplitResponse_ChannelSplit) SetFirstResidualElement(v int64) {
	x.xxx_hidden_FirstResidualElement = v
}

type ProcessBundleSplitResponse_ChannelSplit_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// (Required) The grpc read transform reading this channel.
	TransformId string
	// (Required) The last element of the input channel that should be entirely
	// considered part of the primary, identified by its absolute zero-based
	// index in the (ordered) channel.
	LastPrimaryElement int64
	// (Required) The first element of the input channel that should be entirely
	// considered part of the residual, identified by its absolute zero-based
	// index in the (ordered) channel.
	FirstResidualElement int64
}

func (b0 ProcessBundleSplitResponse_ChannelSplit_builder) Build() *ProcessBundleSplitResponse_ChannelSplit {
	m0 := &ProcessBundleSplitResponse_ChannelSplit{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_TransformId = b.TransformId
	x.xxx_hidden_LastPrimaryElement = b.LastPrimaryElement
	x.xxx_hidden_FirstResidualElement = b.FirstResidualElement
	return m0
}

// Represents multiple encoded elements in nested context for a given named
// instruction and transform.
type Elements_Data struct {
	state                    protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_InstructionId string                 `protobuf:"bytes,1,opt,name=instruction_id,json=instructionId,proto3" json:"instruction_id,omitempty"`
	xxx_hidden_TransformId   string                 `protobuf:"bytes,2,opt,name=transform_id,json=transformId,proto3" json:"transform_id,omitempty"`
	xxx_hidden_Data          []byte                 `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	xxx_hidden_IsLast        bool                   `protobuf:"varint,4,opt,name=is_last,json=isLast,proto3" json:"is_last,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *Elements_Data) Reset() {
	*x = Elements_Data{}
	mi := &file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[63]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Elements_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Elements_Data) ProtoMessage() {}

func (x *Elements_Data) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[63]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Elements_Data) GetInstructionId() string {
	if x != nil {
		return x.xxx_hidden_InstructionId
	}
	return ""
}

func (x *Elements_Data) GetTransformId() string {
	if x != nil {
		return x.xxx_hidden_TransformId
	}
	return ""
}

func (x *Elements_Data) GetData() []byte {
	if x != nil {
		return x.xxx_hidden_Data
	}
	return nil
}

func (x *Elements_Data) GetIsLast() bool {
	if x != nil {
		return x.xxx_hidden_IsLast
	}
	return false
}

func (x *Elements_Data) SetInstructionId(v string) {
	x.xxx_hidden_InstructionId = v
}

func (x *Elements_Data) SetTransformId(v string) {
	x.xxx_hidden_TransformId = v
}

func (x *Elements_Data) SetData(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.xxx_hidden_Data = v
}

func (x *Elements_Data) SetIsLast(v bool) {
	x.xxx_hidden_IsLast = v
}

type Elements_Data_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// (Required) A reference to an active instruction request with the given
	// instruction id.
	InstructionId string
	// (Required) A definition representing a consumer or producer of this data.
	// If received by a harness, this represents the consumer within that
	// harness that should consume these bytes. If sent by a harness, this
	// represents the producer of these bytes.
	//
	// Note that a single element may span multiple Data messages.
	//
	// Note that a sending/receiving pair should share the same identifier.
	TransformId string
	// (Optional) Represents a part of a logical byte stream. Elements within
	// the logical byte stream are encoded in the nested context and
	// concatenated together.
	Data []byte
	// (Optional) Set this bit to indicate the this is the last data block
	// for the given instruction and transform, ending the stream.
	IsLast bool
}

func (b0 Elements_Data_builder) Build() *Elements_Data {
	m0 := &Elements_Data{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_InstructionId = b.InstructionId
	x.xxx_hidden_TransformId = b.TransformId
	x.xxx_hidden_Data = b.Data
	x.xxx_hidden_IsLast = b.IsLast
	return m0
}

// Represent the encoded user timer for a given instruction, transform and
// timer id.
type Elements_Timers struct {
	state                    protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_InstructionId string                 `protobuf:"bytes,1,opt,name=instruction_id,json=instructionId,proto3" json:"instruction_id,omitempty"`
	xxx_hidden_TransformId   string                 `protobuf:"bytes,2,opt,name=transform_id,json=transformId,proto3" json:"transform_id,omitempty"`
	xxx_hidden_TimerFamilyId string                 `protobuf:"bytes,3,opt,name=timer_family_id,json=timerFamilyId,proto3" json:"timer_family_id,omitempty"`
	xxx_hidden_Timers        []byte                 `protobuf:"bytes,4,opt,name=timers,proto3" json:"timers,omitempty"`
	xxx_hidden_IsLast        bool                   `protobuf:"varint,5,opt,name=is_last,json=isLast,proto3" json:"is_last,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *Elements_Timers) Reset() {
	*x = Elements_Timers{}
	mi := &file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[64]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Elements_Timers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Elements_Timers) ProtoMessage() {}

func (x *Elements_Timers) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[64]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Elements_Timers) GetInstructionId() string {
	if x != nil {
		return x.xxx_hidden_InstructionId
	}
	return ""
}

func (x *Elements_Timers) GetTransformId() string {
	if x != nil {
		return x.xxx_hidden_TransformId
	}
	return ""
}

func (x *Elements_Timers) GetTimerFamilyId() string {
	if x != nil {
		return x.xxx_hidden_TimerFamilyId
	}
	return ""
}

func (x *Elements_Timers) GetTimers() []byte {
	if x != nil {
		return x.xxx_hidden_Timers
	}
	return nil
}

func (x *Elements_Timers) GetIsLast() bool {
	if x != nil {
		return x.xxx_hidden_IsLast
	}
	return false
}

func (x *Elements_Timers) SetInstructionId(v string) {
	x.xxx_hidden_InstructionId = v
}

func (x *Elements_Timers) SetTransformId(v string) {
	x.xxx_hidden_TransformId = v
}

func (x *Elements_Timers) SetTimerFamilyId(v string) {
	x.xxx_hidden_TimerFamilyId = v
}

func (x *Elements_Timers) SetTimers(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.xxx_hidden_Timers = v
}

func (x *Elements_Timers) SetIsLast(v bool) {
	x.xxx_hidden_IsLast = v
}

type Elements_Timers_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// (Required) A reference to an active instruction request with the given
	// instruction id.
	InstructionId string
	// (Required) A definition representing a consumer or producer of this data.
	// If received by a harness, this represents the consumer within that
	// harness that should consume these timers. If sent by a harness, this
	// represents the producer of these timers.
	TransformId string
	// (Required) The local timer family name used to identify the associated
	// timer family specification
	TimerFamilyId string
	// (Optional) Represents a logical byte stream of timers. Encoded according
	// to the coder in the timer spec.
	Timers []byte
	// (Optional) Set this bit to indicate the this is the last data block
	// for the given instruction and transform, ending the stream.
	IsLast bool
}

func (b0 Elements_Timers_builder) Build() *Elements_Timers {
	m0 := &Elements_Timers{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_InstructionId = b.InstructionId
	x.xxx_hidden_TransformId = b.TransformId
	x.xxx_hidden_TimerFamilyId = b.TimerFamilyId
	x.xxx_hidden_Timers = b.Timers
	x.xxx_hidden_IsLast = b.IsLast
	return m0
}

type StateKey_Runner struct {
	state          protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Key []byte                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *StateKey_Runner) Reset() {
	*x = StateKey_Runner{}
	mi := &file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[65]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StateKey_Runner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateKey_Runner) ProtoMessage() {}

func (x *StateKey_Runner) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[65]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *StateKey_Runner) GetKey() []byte {
	if x != nil {
		return x.xxx_hidden_Key
	}
	return nil
}

func (x *StateKey_Runner) SetKey(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.xxx_hidden_Key = v
}

type StateKey_Runner_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// (Required) Opaque information supplied by the runner. Used to support
	// remote references.
	// https://s.apache.org/beam-fn-api-send-and-receive-data
	//
	// Used by state backed iterable. And in this use case, request type can
	// only be of type get. Details see:
	// https://s.apache.org/beam-fn-api-state-backed-iterables
	Key []byte
}

func (b0 StateKey_Runner_builder) Build() *StateKey_Runner {
	m0 := &StateKey_Runner{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Key = b.Key
	return m0
}

// Represents a request for the values associated with a specified window
// in a PCollection. See
// https://s.apache.org/beam-fn-state-api-and-bundle-processing for further
// details.
//
// Can only be used to perform StateGetRequests on side inputs of the URN
// beam:side_input:iterable:v1.
//
// For a PCollection<V>, the response data stream will be a concatenation
// of all V's. See https://s.apache.org/beam-fn-api-send-and-receive-data
// for further details.
type StateKey_IterableSideInput struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_TransformId string                 `protobuf:"bytes,1,opt,name=transform_id,json=transformId,proto3" json:"transform_id,omitempty"`
	xxx_hidden_SideInputId string                 `protobuf:"bytes,2,opt,name=side_input_id,json=sideInputId,proto3" json:"side_input_id,omitempty"`
	xxx_hidden_Window      []byte                 `protobuf:"bytes,3,opt,name=window,proto3" json:"window,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *StateKey_IterableSideInput) Reset() {
	*x = StateKey_IterableSideInput{}
	mi := &file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[66]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StateKey_IterableSideInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateKey_IterableSideInput) ProtoMessage() {}

func (x *StateKey_IterableSideInput) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[66]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *StateKey_IterableSideInput) GetTransformId() string {
	if x != nil {
		return x.xxx_hidden_TransformId
	}
	return ""
}

func (x *StateKey_IterableSideInput) GetSideInputId() string {
	if x != nil {
		return x.xxx_hidden_SideInputId
	}
	return ""
}

func (x *StateKey_IterableSideInput) GetWindow() []byte {
	if x != nil {
		return x.xxx_hidden_Window
	}
	return nil
}

func (x *StateKey_IterableSideInput) SetTransformId(v string) {
	x.xxx_hidden_TransformId = v
}

func (x *StateKey_IterableSideInput) SetSideInputId(v string) {
	x.xxx_hidden_SideInputId = v
}

func (x *StateKey_IterableSideInput) SetWindow(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.xxx_hidden_Window = v
}

type StateKey_IterableSideInput_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// (Required) The id of the PTransform containing a side input.
	TransformId string
	// (Required) The id of the side input.
	SideInputId string
	// (Required) The window (after mapping the currently executing elements
	// window into the side input windows domain) encoded in a nested context.
	Window []byte
}

func (b0 StateKey_IterableSideInput_builder) Build() *StateKey_IterableSideInput {
	m0 := &StateKey_IterableSideInput{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_TransformId = b.TransformId
	x.xxx_hidden_SideInputId = b.SideInputId
	x.xxx_hidden_Window = b.Window
	return m0
}

// Represents a request for the values associated with a specified user key
// and window in a PCollection. See
// https://s.apache.org/beam-fn-state-api-and-bundle-processing for further
// details.
//
// Can only be used to perform StateGetRequests on side inputs of the URN
// beam:side_input:multimap:v1.
//
// For a PCollection<KV<K, V>>, the response data stream will be a
// concatenation of all V's associated with the specified key K. See
// https://s.apache.org/beam-fn-api-send-and-receive-data for further
// details.
type StateKey_MultimapSideInput struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_TransformId string                 `protobuf:"bytes,1,opt,name=transform_id,json=transformId,proto3" json:"transform_id,omitempty"`
	xxx_hidden_SideInputId string                 `protobuf:"bytes,2,opt,name=side_input_id,json=sideInputId,proto3" json:"side_input_id,omitempty"`
	xxx_hidden_Window      []byte                 `protobuf:"bytes,3,opt,name=window,proto3" json:"window,omitempty"`
	xxx_hidden_Key         []byte                 `protobuf:"bytes,4,opt,name=key,proto3" json:"key,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *StateKey_MultimapSideInput) Reset() {
	*x = StateKey_MultimapSideInput{}
	mi := &file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[67]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StateKey_MultimapSideInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateKey_MultimapSideInput) ProtoMessage() {}

func (x *StateKey_MultimapSideInput) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[67]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *StateKey_MultimapSideInput) GetTransformId() string {
	if x != nil {
		return x.xxx_hidden_TransformId
	}
	return ""
}

func (x *StateKey_MultimapSideInput) GetSideInputId() string {
	if x != nil {
		return x.xxx_hidden_SideInputId
	}
	return ""
}

func (x *StateKey_MultimapSideInput) GetWindow() []byte {
	if x != nil {
		return x.xxx_hidden_Window
	}
	return nil
}

func (x *StateKey_MultimapSideInput) GetKey() []byte {
	if x != nil {
		return x.xxx_hidden_Key
	}
	return nil
}

func (x *StateKey_MultimapSideInput) SetTransformId(v string) {
	x.xxx_hidden_TransformId = v
}

func (x *StateKey_MultimapSideInput) SetSideInputId(v string) {
	x.xxx_hidden_SideInputId = v
}

func (x *StateKey_MultimapSideInput) SetWindow(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.xxx_hidden_Window = v
}

func (x *StateKey_MultimapSideInput) SetKey(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.xxx_hidden_Key = v
}

type StateKey_MultimapSideInput_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// (Required) The id of the PTransform containing a side input.
	TransformId string
	// (Required) The id of the side input.
	SideInputId string
	// (Required) The window (after mapping the currently executing elements
	// window into the side input windows domain) encoded in a nested context.
	Window []byte
	// (Required) The key encoded in a nested context.
	Key []byte
}

func (b0 StateKey_MultimapSideInput_builder) Build() *StateKey_MultimapSideInput {
	m0 := &StateKey_MultimapSideInput{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_TransformId = b.TransformId
	x.xxx_hidden_SideInputId = b.SideInputId
	x.xxx_hidden_Window = b.Window
	x.xxx_hidden_Key = b.Key
	return m0
}

// Represents a request for the keys associated with a specified window in a PCollection. See
// https://s.apache.org/beam-fn-state-api-and-bundle-processing for further
// details.
//
// Can only be used to perform StateGetRequests on side inputs of the URN
// beam:side_input:multimap:v1.
//
// For a PCollection<KV<K, V>>, the response data stream will be a
// concatenation of all K's associated with the specified window. See
// https://s.apache.org/beam-fn-api-send-and-receive-data for further
// details.
type StateKey_MultimapKeysSideInput struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_TransformId string                 `protobuf:"bytes,1,opt,name=transform_id,json=transformId,proto3" json:"transform_id,omitempty"`
	xxx_hidden_SideInputId string                 `protobuf:"bytes,2,opt,name=side_input_id,json=sideInputId,proto3" json:"side_input_id,omitempty"`
	xxx_hidden_Window      []byte                 `protobuf:"bytes,3,opt,name=window,proto3" json:"window,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *StateKey_MultimapKeysSideInput) Reset() {
	*x = StateKey_MultimapKeysSideInput{}
	mi := &file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[68]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StateKey_MultimapKeysSideInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateKey_MultimapKeysSideInput) ProtoMessage() {}

func (x *StateKey_MultimapKeysSideInput) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[68]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *StateKey_MultimapKeysSideInput) GetTransformId() string {
	if x != nil {
		return x.xxx_hidden_TransformId
	}
	return ""
}

func (x *StateKey_MultimapKeysSideInput) GetSideInputId() string {
	if x != nil {
		return x.xxx_hidden_SideInputId
	}
	return ""
}

func (x *StateKey_MultimapKeysSideInput) GetWindow() []byte {
	if x != nil {
		return x.xxx_hidden_Window
	}
	return nil
}

func (x *StateKey_MultimapKeysSideInput) SetTransformId(v string) {
	x.xxx_hidden_TransformId = v
}

func (x *StateKey_MultimapKeysSideInput) SetSideInputId(v string) {
	x.xxx_hidden_SideInputId = v
}

func (x *StateKey_MultimapKeysSideInput) SetWindow(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.xxx_hidden_Window = v
}

type StateKey_MultimapKeysSideInput_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// (Required) The id of the PTransform containing a side input.
	TransformId string
	// (Required) The id of the side input.
	SideInputId string
	// (Required) The window (after mapping the currently executing elements
	// window into the side input windows domain) encoded in a nested context.
	Window []byte
}

func (b0 StateKey_MultimapKeysSideInput_builder) Build() *StateKey_MultimapKeysSideInput {
	m0 := &StateKey_MultimapKeysSideInput{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_TransformId = b.TransformId
	x.xxx_hidden_SideInputId = b.SideInputId
	x.xxx_hidden_Window = b.Window
	return m0
}

// Represents a request for the keys and values associated with a specified window in a PCollection. See
// https://s.apache.org/beam-fn-state-api-and-bundle-processing for further
// details.
//
// This is expected to be more efficient than iterating over they keys and
// looking up the values one at a time.  If a runner chooses not to implement
// this protocol, or a key has too many values to fit into a single response,
// the runner is free to fail the request and a fallback to point lookups
// will be performed by the SDK.
//
// Can only be used to perform StateGetRequests on side inputs of the URN
// beam:side_input:multimap:v1.
//
// For a PCollection<KV<K, V>>, the response data stream will be a
// concatenation of all KVs associated with the specified window,
// encoded with the the KV<K, Iterable<V>> coder.
// See
// https://s.apache.org/beam-fn-api-send-and-receive-data for further
// details.
type StateKey_MultimapKeysValuesSideInput struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_TransformId string                 `protobuf:"bytes,1,opt,name=transform_id,json=transformId,proto3" json:"transform_id,omitempty"`
	xxx_hidden_SideInputId string                 `protobuf:"bytes,2,opt,name=side_input_id,json=sideInputId,proto3" json:"side_input_id,omitempty"`
	xxx_hidden_Window      []byte                 `protobuf:"bytes,3,opt,name=window,proto3" json:"window,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *StateKey_MultimapKeysValuesSideInput) Reset() {
	*x = StateKey_MultimapKeysValuesSideInput{}
	mi := &file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[69]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StateKey_MultimapKeysValuesSideInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateKey_MultimapKeysValuesSideInput) ProtoMessage() {}

func (x *StateKey_MultimapKeysValuesSideInput) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[69]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *StateKey_MultimapKeysValuesSideInput) GetTransformId() string {
	if x != nil {
		return x.xxx_hidden_TransformId
	}
	return ""
}

func (x *StateKey_MultimapKeysValuesSideInput) GetSideInputId() string {
	if x != nil {
		return x.xxx_hidden_SideInputId
	}
	return ""
}

func (x *StateKey_MultimapKeysValuesSideInput) GetWindow() []byte {
	if x != nil {
		return x.xxx_hidden_Window
	}
	return nil
}

func (x *StateKey_MultimapKeysValuesSideInput) SetTransformId(v string) {
	x.xxx_hidden_TransformId = v
}

func (x *StateKey_MultimapKeysValuesSideInput) SetSideInputId(v string) {
	x.xxx_hidden_SideInputId = v
}

func (x *StateKey_MultimapKeysValuesSideInput) SetWindow(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.xxx_hidden_Window = v
}

type StateKey_MultimapKeysValuesSideInput_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// (Required) The id of the PTransform containing a side input.
	TransformId string
	// (Required) The id of the side input.
	SideInputId string
	// (Required) The window (after mapping the currently executing elements
	// window into the side input windows domain) encoded in a nested context.
	Window []byte
}

func (b0 StateKey_MultimapKeysValuesSideInput_builder) Build() *StateKey_MultimapKeysValuesSideInput {
	m0 := &StateKey_MultimapKeysValuesSideInput{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_TransformId = b.TransformId
	x.xxx_hidden_SideInputId = b.SideInputId
	x.xxx_hidden_Window = b.Window
	return m0
}

// Represents a request for an unordered set of values associated with a
// specified user key and window for a PTransform. See
// https://s.apache.org/beam-fn-state-api-and-bundle-processing for further
// details.
//
// The response data stream will be a concatenation of all V's associated
// with the specified user key and window.
// See https://s.apache.org/beam-fn-api-send-and-receive-data for further
// details.
type StateKey_BagUserState struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_TransformId string                 `protobuf:"bytes,1,opt,name=transform_id,json=transformId,proto3" json:"transform_id,omitempty"`
	xxx_hidden_UserStateId string                 `protobuf:"bytes,2,opt,name=user_state_id,json=userStateId,proto3" json:"user_state_id,omitempty"`
	xxx_hidden_Window      []byte                 `protobuf:"bytes,3,opt,name=window,proto3" json:"window,omitempty"`
	xxx_hidden_Key         []byte                 `protobuf:"bytes,4,opt,name=key,proto3" json:"key,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *StateKey_BagUserState) Reset() {
	*x = StateKey_BagUserState{}
	mi := &file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[70]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StateKey_BagUserState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateKey_BagUserState) ProtoMessage() {}

func (x *StateKey_BagUserState) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[70]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *StateKey_BagUserState) GetTransformId() string {
	if x != nil {
		return x.xxx_hidden_TransformId
	}
	return ""
}

func (x *StateKey_BagUserState) GetUserStateId() string {
	if x != nil {
		return x.xxx_hidden_UserStateId
	}
	return ""
}

func (x *StateKey_BagUserState) GetWindow() []byte {
	if x != nil {
		return x.xxx_hidden_Window
	}
	return nil
}

func (x *StateKey_BagUserState) GetKey() []byte {
	if x != nil {
		return x.xxx_hidden_Key
	}
	return nil
}

func (x *StateKey_BagUserState) SetTransformId(v string) {
	x.xxx_hidden_TransformId = v
}

func (x *StateKey_BagUserState) SetUserStateId(v string) {
	x.xxx_hidden_UserStateId = v
}

func (x *StateKey_BagUserState) SetWindow(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.xxx_hidden_Window = v
}

func (x *StateKey_BagUserState) SetKey(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.xxx_hidden_Key = v
}

type StateKey_BagUserState_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// (Required) The id of the PTransform containing user state.
	TransformId string
	// (Required) The id of the user state.
	UserStateId string
	// (Required) The window encoded in a nested context.
	Window []byte
	// (Required) The key of the currently executing element encoded in a
	// nested context.
	Key []byte
}

func (b0 StateKey_BagUserState_builder) Build() *StateKey_BagUserState {
	m0 := &StateKey_BagUserState{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_TransformId = b.TransformId
	x.xxx_hidden_UserStateId = b.UserStateId
	x.xxx_hidden_Window = b.Window
	x.xxx_hidden_Key = b.Key
	return m0
}

// Represents a request for the keys of a multimap associated with a specified
// user key and window for a PTransform. See
// https://s.apache.org/beam-fn-state-api-and-bundle-processing for further
// details.
//
// Can only be used to perform StateGetRequests and StateClearRequests on the
// user state.
//
// The response data stream will be a concatenation of all K's associated
// with the specified user key and window.
// See https://s.apache.org/beam-fn-api-send-and-receive-data for further
// details.
type StateKey_MultimapKeysUserState struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_TransformId string                 `protobuf:"bytes,1,opt,name=transform_id,json=transformId,proto3" json:"transform_id,omitempty"`
	xxx_hidden_UserStateId string                 `protobuf:"bytes,2,opt,name=user_state_id,json=userStateId,proto3" json:"user_state_id,omitempty"`
	xxx_hidden_Window      []byte                 `protobuf:"bytes,3,opt,name=window,proto3" json:"window,omitempty"`
	xxx_hidden_Key         []byte                 `protobuf:"bytes,4,opt,name=key,proto3" json:"key,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *StateKey_MultimapKeysUserState) Reset() {
	*x = StateKey_MultimapKeysUserState{}
	mi := &file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[71]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StateKey_MultimapKeysUserState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateKey_MultimapKeysUserState) ProtoMessage() {}

func (x *StateKey_MultimapKeysUserState) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[71]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *StateKey_MultimapKeysUserState) GetTransformId() string {
	if x != nil {
		return x.xxx_hidden_TransformId
	}
	return ""
}

func (x *StateKey_MultimapKeysUserState) GetUserStateId() string {
	if x != nil {
		return x.xxx_hidden_UserStateId
	}
	return ""
}

func (x *StateKey_MultimapKeysUserState) GetWindow() []byte {
	if x != nil {
		return x.xxx_hidden_Window
	}
	return nil
}

func (x *StateKey_MultimapKeysUserState) GetKey() []byte {
	if x != nil {
		return x.xxx_hidden_Key
	}
	return nil
}

func (x *StateKey_MultimapKeysUserState) SetTransformId(v string) {
	x.xxx_hidden_TransformId = v
}

func (x *StateKey_MultimapKeysUserState) SetUserStateId(v string) {
	x.xxx_hidden_UserStateId = v
}

func (x *StateKey_MultimapKeysUserState) SetWindow(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.xxx_hidden_Window = v
}

func (x *StateKey_MultimapKeysUserState) SetKey(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.xxx_hidden_Key = v
}

type StateKey_MultimapKeysUserState_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// (Required) The id of the PTransform containing user state.
	TransformId string
	// (Required) The id of the user state.
	UserStateId string
	// (Required) The window encoded in a nested context.
	Window []byte
	// (Required) The key of the currently executing element encoded in a
	// nested context.
	Key []byte
}

func (b0 StateKey_MultimapKeysUserState_builder) Build() *StateKey_MultimapKeysUserState {
	m0 := &StateKey_MultimapKeysUserState{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_TransformId = b.TransformId
	x.xxx_hidden_UserStateId = b.UserStateId
	x.xxx_hidden_Window = b.Window
	x.xxx_hidden_Key = b.Key
	return m0
}

// Represents a request for the values of the map key associated with a
// specified user key and window for a PTransform. See
// https://s.apache.org/beam-fn-state-api-and-bundle-processing for further
// details.
//
// The response data stream will be a concatenation of all V's associated
// with the specified map key, user key, and window.
// See https://s.apache.org/beam-fn-api-send-and-receive-data for further
// details.
type StateKey_MultimapUserState struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_TransformId string                 `protobuf:"bytes,1,opt,name=transform_id,json=transformId,proto3" json:"transform_id,omitempty"`
	xxx_hidden_UserStateId string                 `protobuf:"bytes,2,opt,name=user_state_id,json=userStateId,proto3" json:"user_state_id,omitempty"`
	xxx_hidden_Window      []byte                 `protobuf:"bytes,3,opt,name=window,proto3" json:"window,omitempty"`
	xxx_hidden_Key         []byte                 `protobuf:"bytes,4,opt,name=key,proto3" json:"key,omitempty"`
	xxx_hidden_MapKey      []byte                 `protobuf:"bytes,5,opt,name=map_key,json=mapKey,proto3" json:"map_key,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *StateKey_MultimapUserState) Reset() {
	*x = StateKey_MultimapUserState{}
	mi := &file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[72]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StateKey_MultimapUserState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateKey_MultimapUserState) ProtoMessage() {}

func (x *StateKey_MultimapUserState) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[72]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *StateKey_MultimapUserState) GetTransformId() string {
	if x != nil {
		return x.xxx_hidden_TransformId
	}
	return ""
}

func (x *StateKey_MultimapUserState) GetUserStateId() string {
	if x != nil {
		return x.xxx_hidden_UserStateId
	}
	return ""
}

func (x *StateKey_MultimapUserState) GetWindow() []byte {
	if x != nil {
		return x.xxx_hidden_Window
	}
	return nil
}

func (x *StateKey_MultimapUserState) GetKey() []byte {
	if x != nil {
		return x.xxx_hidden_Key
	}
	return nil
}

func (x *StateKey_MultimapUserState) GetMapKey() []byte {
	if x != nil {
		return x.xxx_hidden_MapKey
	}
	return nil
}

func (x *StateKey_MultimapUserState) SetTransformId(v string) {
	x.xxx_hidden_TransformId = v
}

func (x *StateKey_MultimapUserState) SetUserStateId(v string) {
	x.xxx_hidden_UserStateId = v
}

func (x *StateKey_MultimapUserState) SetWindow(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.xxx_hidden_Window = v
}

func (x *StateKey_MultimapUserState) SetKey(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.xxx_hidden_Key = v
}

func (x *StateKey_MultimapUserState) SetMapKey(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.xxx_hidden_MapKey = v
}

type StateKey_MultimapUserState_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// (Required) The id of the PTransform containing user state.
	TransformId string
	// (Required) The id of the user state.
	UserStateId string
	// (Required) The window encoded in a nested context.
	Window []byte
	// (Required) The key of the currently executing element encoded in a
	// nested context.
	Key []byte
	// (Required) The map key encoded in a nested context.
	MapKey []byte
}

func (b0 StateKey_MultimapUserState_builder) Build() *StateKey_MultimapUserState {
	m0 := &StateKey_MultimapUserState{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_TransformId = b.TransformId
	x.xxx_hidden_UserStateId = b.UserStateId
	x.xxx_hidden_Window = b.Window
	x.xxx_hidden_Key = b.Key
	x.xxx_hidden_MapKey = b.MapKey
	return m0
}

// Represents a request for an ordered list of values associated with a
// specified user key and window for a PTransform. See
// https://s.apache.org/beam-fn-state-api-and-bundle-processing for further
// details.
//
// The response data stream will be a concatenation of all entries of sort key
// and V's associated with the specified user key and window.
// See https://s.apache.org/beam-fn-api-send-and-receive-data for further
// details.
type StateKey_OrderedListUserState struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_TransformId string                 `protobuf:"bytes,1,opt,name=transform_id,json=transformId,proto3" json:"transform_id,omitempty"`
	xxx_hidden_UserStateId string                 `protobuf:"bytes,2,opt,name=user_state_id,json=userStateId,proto3" json:"user_state_id,omitempty"`
	xxx_hidden_Window      []byte                 `protobuf:"bytes,3,opt,name=window,proto3" json:"window,omitempty"`
	xxx_hidden_Key         []byte                 `protobuf:"bytes,4,opt,name=key,proto3" json:"key,omitempty"`
	xxx_hidden_Range       *OrderedListRange      `protobuf:"bytes,5,opt,name=range,proto3" json:"range,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *StateKey_OrderedListUserState) Reset() {
	*x = StateKey_OrderedListUserState{}
	mi := &file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[73]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StateKey_OrderedListUserState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateKey_OrderedListUserState) ProtoMessage() {}

func (x *StateKey_OrderedListUserState) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[73]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *StateKey_OrderedListUserState) GetTransformId() string {
	if x != nil {
		return x.xxx_hidden_TransformId
	}
	return ""
}

func (x *StateKey_OrderedListUserState) GetUserStateId() string {
	if x != nil {
		return x.xxx_hidden_UserStateId
	}
	return ""
}

func (x *StateKey_OrderedListUserState) GetWindow() []byte {
	if x != nil {
		return x.xxx_hidden_Window
	}
	return nil
}

func (x *StateKey_OrderedListUserState) GetKey() []byte {
	if x != nil {
		return x.xxx_hidden_Key
	}
	return nil
}

func (x *StateKey_OrderedListUserState) GetRange() *OrderedListRange {
	if x != nil {
		return x.xxx_hidden_Range
	}
	return nil
}

func (x *StateKey_OrderedListUserState) SetTransformId(v string) {
	x.xxx_hidden_TransformId = v
}

func (x *StateKey_OrderedListUserState) SetUserStateId(v string) {
	x.xxx_hidden_UserStateId = v
}

func (x *StateKey_OrderedListUserState) SetWindow(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.xxx_hidden_Window = v
}

func (x *StateKey_OrderedListUserState) SetKey(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.xxx_hidden_Key = v
}

func (x *StateKey_OrderedListUserState) SetRange(v *OrderedListRange) {
	x.xxx_hidden_Range = v
}

func (x *StateKey_OrderedListUserState) HasRange() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Range != nil
}

func (x *StateKey_OrderedListUserState) ClearRange() {
	x.xxx_hidden_Range = nil
}

type StateKey_OrderedListUserState_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// (Required) The id of the PTransform containing user state.
	TransformId string
	// (Required) The id of the user state.
	UserStateId string
	// (Required) The window encoded in a nested context.
	Window []byte
	// (Required) The key of the currently executing element encoded in a
	// nested context.
	Key []byte
	// (Required) The sort range encoded in a nested context.
	Range *OrderedListRange
}

func (b0 StateKey_OrderedListUserState_builder) Build() *StateKey_OrderedListUserState {
	m0 := &StateKey_OrderedListUserState{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_TransformId = b.TransformId
	x.xxx_hidden_UserStateId = b.UserStateId
	x.xxx_hidden_Window = b.Window
	x.xxx_hidden_Key = b.Key
	x.xxx_hidden_Range = b.Range
	return m0
}

// A list of log entries, enables buffering and batching of multiple
// log messages using the logging API.
type LogEntry_List struct {
	state                 protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_LogEntries *[]*LogEntry           `protobuf:"bytes,1,rep,name=log_entries,json=logEntries,proto3" json:"log_entries,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *LogEntry_List) Reset() {
	*x = LogEntry_List{}
	mi := &file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[74]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogEntry_List) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogEntry_List) ProtoMessage() {}

func (x *LogEntry_List) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[74]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *LogEntry_List) GetLogEntries() []*LogEntry {
	if x != nil {
		if x.xxx_hidden_LogEntries != nil {
			return *x.xxx_hidden_LogEntries
		}
	}
	return nil
}

func (x *LogEntry_List) SetLogEntries(v []*LogEntry) {
	x.xxx_hidden_LogEntries = &v
}

type LogEntry_List_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// (Required) One or or more log messages.
	LogEntries []*LogEntry
}

func (b0 LogEntry_List_builder) Build() *LogEntry_List {
	m0 := &LogEntry_List{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_LogEntries = &b.LogEntries
	return m0
}

// The severity of the event described in a log entry, expressed as one of the
// severity levels listed below. For your reference, the levels are
// assigned the listed numeric values. The effect of using numeric values
// other than those listed is undefined.
//
// If you are writing log entries, you should map other severity encodings to
// one of these standard levels. For example, you might map all of
// Java's FINE, FINER, and FINEST levels to `Severity.DEBUG`.
//
// This list is intentionally not comprehensive; the intent is to provide a
// common set of "good enough" severity levels so that logging front ends
// can provide filtering and searching across log types. Users of the API are
// free not to use all severity levels in their log messages.
type LogEntry_Severity struct {
	state         protoimpl.MessageState `protogen:"opaque.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LogEntry_Severity) Reset() {
	*x = LogEntry_Severity{}
	mi := &file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[75]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogEntry_Severity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogEntry_Severity) ProtoMessage() {}

func (x *LogEntry_Severity) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[75]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

type LogEntry_Severity_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

}

func (b0 LogEntry_Severity_builder) Build() *LogEntry_Severity {
	m0 := &LogEntry_Severity{}
	b, x := &b0, m0
	_, _ = b, x
	return m0
}

var File_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto protoreflect.FileDescriptor

var file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_rawDesc = []byte{
	0x0a, 0x37, 0x6f, 0x72, 0x67, 0x2f, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2f, 0x62, 0x65, 0x61,
	0x6d, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x66, 0x6e, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x65, 0x61, 0x6d, 0x5f, 0x66, 0x6e, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x25, 0x6f, 0x72, 0x67, 0x2e, 0x61,
	0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x66, 0x6e, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x1a, 0x37, 0x6f, 0x72, 0x67, 0x2f, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2f, 0x62, 0x65, 0x61,
	0x6d, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x2f, 0x76, 0x31, 0x2f, 0x62, 0x65, 0x61, 0x6d, 0x5f, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x31, 0x6f, 0x72, 0x67, 0x2f, 0x61,
	0x70, 0x61, 0x63, 0x68, 0x65, 0x2f, 0x62, 0x65, 0x61, 0x6d, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x6f, 0x72,
	0x67, 0x2f, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2f, 0x62, 0x65, 0x61, 0x6d, 0x2f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2f, 0x76, 0x31, 0x2f,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x73,
	0x0a, 0x0f, 0x46, 0x6e, 0x41, 0x70, 0x69, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d,
	0x73, 0x22, 0x60, 0x0a, 0x06, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x0b, 0x44,
	0x41, 0x54, 0x41, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x10, 0x00, 0x1a, 0x1b, 0xa2, 0xb4,
	0xfa, 0xc2, 0x05, 0x15, 0x62, 0x65, 0x61, 0x6d, 0x3a, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x3a,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x3a, 0x76, 0x31, 0x12, 0x28, 0x0a, 0x09, 0x44, 0x41, 0x54,
	0x41, 0x5f, 0x53, 0x49, 0x4e, 0x4b, 0x10, 0x01, 0x1a, 0x19, 0xa2, 0xb4, 0xfa, 0xc2, 0x05, 0x13,
	0x62, 0x65, 0x61, 0x6d, 0x3a, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x3a, 0x73, 0x69, 0x6e, 0x6b,
	0x3a, 0x76, 0x31, 0x22, 0x9a, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x47, 0x72,
	0x70, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x6d, 0x0a, 0x16, 0x61, 0x70, 0x69, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61,
	0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x69, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52,
	0x14, 0x61, 0x70, 0x69, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x49, 0x64,
	0x22, 0x64, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x42, 0x75,
	0x6e, 0x64, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x1c, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x5f, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x22, 0xbc, 0x07, 0x0a, 0x12, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a,
	0x0e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x65, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0xe9, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e,
	0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x66, 0x6e, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x42, 0x75, 0x6e,
	0x64, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x7e, 0x0a, 0x17, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x70, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0xea, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e,
	0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x66, 0x6e, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x42, 0x75, 0x6e,
	0x64, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x00, 0x52, 0x15, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x42, 0x75, 0x6e,
	0x64, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x75, 0x0a, 0x14, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x73, 0x70,
	0x6c, 0x69, 0x74, 0x18, 0xeb, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x6f, 0x72, 0x67,
	0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x66, 0x6e, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65,
	0x53, 0x70, 0x6c, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x12,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x53, 0x70, 0x6c,
	0x69, 0x74, 0x12, 0x68, 0x0a, 0x0f, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x5f, 0x62,
	0x75, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0xec, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x6f,
	0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x66, 0x6e, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x42, 0x75, 0x6e,
	0x64, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x66, 0x69,
	0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x73, 0x0a, 0x10,
	0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73,
	0x18, 0xed, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70,
	0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x66, 0x6e, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00,
	0x52, 0x0f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f,
	0x73, 0x12, 0x81, 0x01, 0x0a, 0x18, 0x68, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0xee,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63,
	0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x66, 0x6e,
	0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x61,
	0x72, 0x6e, 0x65, 0x73, 0x73, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x49,
	0x6e, 0x66, 0x6f, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x16, 0x68,
	0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67,
	0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x5c, 0x0a, 0x0b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0xef, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6f, 0x72,
	0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x66, 0x6e, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x55, 0x0a, 0x08, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x18,
	0xe8, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61,
	0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x66,
	0x6e, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00,
	0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x42, 0x09, 0x0a, 0x07, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xdc, 0x07, 0x0a, 0x13, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a,
	0x0e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x66, 0x0a, 0x0e, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0xe9, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65,
	0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x66, 0x6e, 0x5f, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x48, 0x00, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x42, 0x75, 0x6e, 0x64,
	0x6c, 0x65, 0x12, 0x7f, 0x0a, 0x17, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x62, 0x75,
	0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0xea, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68,
	0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x66, 0x6e, 0x5f,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x15, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x76, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x62,
	0x75, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x18, 0xeb, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x41, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e,
	0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x66, 0x6e, 0x5f, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x12, 0x69, 0x0a, 0x0f, 0x66,
	0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x5f, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0xec,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63,
	0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x66, 0x6e,
	0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69,
	0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x74, 0x0a, 0x10, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0xed, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x46, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62,
	0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x66, 0x6e, 0x5f, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x6d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x82, 0x01, 0x0a,
	0x18, 0x68, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0xee, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x45, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65,
	0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x66, 0x6e, 0x5f, 0x65, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73,
	0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x16, 0x68, 0x61, 0x72, 0x6e, 0x65,
	0x73, 0x73, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f,
	0x73, 0x12, 0x5d, 0x0a, 0x0b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0xef, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70,
	0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x66, 0x6e, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x56, 0x0a, 0x08, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x18, 0xe8, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65,
	0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x66, 0x6e, 0x5f, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x08,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3c, 0x0a, 0x11, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0e, 0x70, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x73, 0x22, 0xbd, 0x02, 0x0a, 0x0e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x45, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x45, 0x0a, 0x10, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x5d, 0x0a, 0x09, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x6f, 0x72, 0x67, 0x2e,
	0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x66, 0x6e, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x63, 0x65,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x6b, 0x0a, 0x09, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x22, 0xf9, 0x02, 0x0a, 0x12, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x76, 0x0a, 0x0f, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e,
	0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x66, 0x6e, 0x5f, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0e, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x73, 0x1a, 0x60, 0x0a, 0x0b, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x51, 0x0a, 0x08, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e,
	0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x66, 0x6e, 0x5f, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x64, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x65, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x1a, 0x88, 0x01, 0x0a, 0x13, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x5b, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x6f,
	0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x66, 0x6e, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x1f,
	0x0a, 0x1d, 0x48, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0xe8, 0x01, 0x0a, 0x1e, 0x48, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x4d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x82, 0x01, 0x0a, 0x0f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x59, 0x2e, 0x6f,
	0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x66, 0x6e, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x4d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x61,
	0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x41, 0x0a, 0x13, 0x4d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x8d, 0x01, 0x0a, 0x0f, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x7a,
	0x0a, 0x19, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65,
	0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3e, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62,
	0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x66, 0x6e, 0x5f, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f,
	0x72, 0x52, 0x17, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x22, 0x12, 0x0a, 0x10, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9d,
	0x0b, 0x0a, 0x17, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x6e, 0x0a, 0x0a, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4e,
	0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x66, 0x6e, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x42, 0x75,
	0x6e, 0x64, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x12, 0x74, 0x0a, 0x0c, 0x70, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x50, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65,
	0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x66, 0x6e, 0x5f, 0x65, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72,
	0x2e, 0x50, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0c, 0x70, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x8a, 0x01, 0x0a, 0x14, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x5f, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x57, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61,
	0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x66, 0x6e, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x42,
	0x75, 0x6e, 0x64, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e,
	0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x13, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77,
	0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x69, 0x65, 0x73, 0x12, 0x62, 0x0a,
	0x06, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4a, 0x2e,
	0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x66, 0x6e, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x42, 0x75, 0x6e,
	0x64, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x63, 0x6f, 0x64, 0x65, 0x72,
	0x73, 0x12, 0x74, 0x0a, 0x0c, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x50, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70,
	0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x66, 0x6e, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x65, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x78, 0x0a, 0x1c, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x61, 0x70, 0x69, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x70, 0x69, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x19, 0x73, 0x74, 0x61, 0x74, 0x65, 0x41, 0x70, 0x69,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f,
	0x72, 0x12, 0x78, 0x0a, 0x1c, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f,
	0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70,
	0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x69, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72,
	0x52, 0x19, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x41, 0x70, 0x69, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x1a, 0x6c, 0x0a, 0x0f, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x43, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61,
	0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x6f, 0x0a, 0x11, 0x50, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x44, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61,
	0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x7c, 0x0a, 0x18, 0x57, 0x69,
	0x6e, 0x64, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x69, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x4a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70,
	0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x69, 0x6e, 0x64,
	0x6f, 0x77, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x63, 0x0a, 0x0b, 0x43, 0x6f, 0x64, 0x65,
	0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3e, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61,
	0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x6f, 0x0a,
	0x11, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x44, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65,
	0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x9b,
	0x03, 0x0a, 0x11, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x07, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x7b, 0x0a, 0x11,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x77, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70,
	0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x66, 0x6e, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x57, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72,
	0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x57,
	0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x12, 0x50, 0x0a, 0x0a, 0x69, 0x73, 0x5f,
	0x62, 0x6f, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e,
	0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x73, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x2e, 0x45, 0x6e, 0x75, 0x6d,
	0x52, 0x09, 0x69, 0x73, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x1a, 0x5f, 0x0a, 0x15, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x57, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc3, 0x01, 0x0a,
	0x18, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x41, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5a, 0x0a, 0x0b, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38,
	0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x66, 0x6e, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x41, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x14, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x44, 0x65, 0x6c,
	0x61, 0x79, 0x22, 0x83, 0x05, 0x0a, 0x14, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x42, 0x75,
	0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x1c, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x19, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x69, 0x0a, 0x0c,
	0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x46, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e,
	0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x66, 0x6e, 0x5f, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x43, 0x61, 0x63, 0x68, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x0b, 0x63, 0x61, 0x63, 0x68,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x4b, 0x0a, 0x08, 0x65, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6f, 0x72, 0x67, 0x2e,
	0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x66, 0x6e, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x08, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x1a, 0xf1, 0x02, 0x0a, 0x0a, 0x43, 0x61, 0x63, 0x68, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x71, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x50, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70,
	0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x66, 0x6e, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x71, 0x0a, 0x0a, 0x73, 0x69, 0x64, 0x65, 0x5f, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x50, 0x2e, 0x6f, 0x72, 0x67,
	0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x66, 0x6e, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x2e, 0x53, 0x69, 0x64, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x48, 0x00, 0x52, 0x09,
	0x73, 0x69, 0x64, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x1a,
	0x0b, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x52, 0x0a, 0x09,
	0x53, 0x69, 0x64, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d,
	0x73, 0x69, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x69, 0x64, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x49, 0x64,
	0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xa3, 0x04, 0x0a, 0x15, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x66, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x5f, 0x72,
	0x6f, 0x6f, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x6f, 0x72, 0x67,
	0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x66, 0x6e, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65,
	0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x72, 0x65, 0x73,
	0x69, 0x64, 0x75, 0x61, 0x6c, 0x52, 0x6f, 0x6f, 0x74, 0x73, 0x12, 0x5c, 0x0a, 0x10, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68,
	0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x33, 0x0a, 0x15, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x73, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x73, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x79, 0x0a,
	0x0f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x50, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61,
	0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x66,
	0x6e, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x44,
	0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x4b, 0x0a, 0x08, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6f, 0x72, 0x67,
	0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x66, 0x6e, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x08, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0x41, 0x0a, 0x13, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x22, 0x45,
	0x0a, 0x1c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25,
	0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x4e, 0x0a, 0x1e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x10, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x49,
	0x6e, 0x66, 0x6f, 0x49, 0x64, 0x22, 0xaf, 0x03, 0x0a, 0x1d, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x10, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x31, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62,
	0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67,
	0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x81, 0x01, 0x0a, 0x0f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x58, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61,
	0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x66, 0x6e, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x42,
	0x75, 0x6e, 0x64, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67,
	0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3b, 0x0a, 0x17, 0x63, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x15, 0x63, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x44,
	0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x1a, 0x41, 0x0a, 0x13, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x63, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x4a, 0x04, 0x08, 0x02, 0x10,
	0x03, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x22, 0x9d, 0x02, 0x0a, 0x1f, 0x4d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x83, 0x01, 0x0a, 0x0f,
	0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5a, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63,
	0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x66, 0x6e,
	0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66,
	0x6f, 0x1a, 0x74, 0x0a, 0x13, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x49,
	0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x47, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6f, 0x72, 0x67, 0x2e,
	0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x81, 0x04, 0x0a, 0x19, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x7a, 0x0a, 0x0e,
	0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x53, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68,
	0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x66, 0x6e, 0x5f,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x70,
	0x6c, 0x69, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x64, 0x65, 0x73, 0x69, 0x72,
	0x65, 0x64, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x73, 0x1a, 0xae, 0x01, 0x0a, 0x0c, 0x44, 0x65, 0x73,
	0x69, 0x72, 0x65, 0x64, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x66, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x64,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4f, 0x66, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x30, 0x0a,
	0x14, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x12, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12,
	0x38, 0x0a, 0x18, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x16, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0x8f, 0x01, 0x0a, 0x12, 0x44, 0x65,
	0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x63, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x4d, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62,
	0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x66, 0x6e, 0x5f, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x70, 0x6c, 0x69, 0x74,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf6, 0x03, 0x0a, 0x1a,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x53, 0x70, 0x6c,
	0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5d, 0x0a, 0x0d, 0x70, 0x72,
	0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x38, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62,
	0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x66, 0x6e, 0x5f, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65,
	0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x70, 0x72, 0x69,
	0x6d, 0x61, 0x72, 0x79, 0x52, 0x6f, 0x6f, 0x74, 0x73, 0x12, 0x66, 0x0a, 0x0e, 0x72, 0x65, 0x73,
	0x69, 0x64, 0x75, 0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3f, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62,
	0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x66, 0x6e, 0x5f, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x65,
	0x64, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x52, 0x6f, 0x6f, 0x74,
	0x73, 0x12, 0x75, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x73, 0x70, 0x6c,
	0x69, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x6f, 0x72, 0x67, 0x2e,
	0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x66, 0x6e, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x53,
	0x70, 0x6c, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x73, 0x1a, 0x99, 0x01, 0x0a, 0x0c, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x6c, 0x61, 0x73, 0x74,
	0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x34,
	0x0a, 0x16, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x69, 0x64, 0x75, 0x61, 0x6c,
	0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x52, 0x65, 0x73, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x45, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x22, 0x3e, 0x0a, 0x15, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a,
	0x0e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x22, 0x18, 0x0a, 0x16, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xd6,
	0x03, 0x0a, 0x08, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x48, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6f, 0x72, 0x67, 0x2e,
	0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x66, 0x6e, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x4e, 0x0a, 0x06, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63,
	0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x66, 0x6e,
	0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x73, 0x52, 0x06, 0x74,
	0x69, 0x6d, 0x65, 0x72, 0x73, 0x1a, 0x81, 0x01, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x25,
	0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f,
	0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x02, 0x08, 0x01, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x69, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x1a, 0xab, 0x01, 0x0a, 0x06, 0x54, 0x69,
	0x6d, 0x65, 0x72, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x12, 0x26,
	0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x5f, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x46, 0x61,
	0x6d, 0x69, 0x6c, 0x79, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x73, 0x12, 0x17,
	0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x69, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x22, 0x94, 0x03, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x4c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e,
	0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x66, 0x6e, 0x5f, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x4b, 0x65, 0x79, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x4b, 0x0a,
	0x03, 0x67, 0x65, 0x74, 0x18, 0xe8, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6f, 0x72,
	0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x66, 0x6e, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x03, 0x67, 0x65, 0x74, 0x12, 0x54, 0x0a, 0x06, 0x61, 0x70,
	0x70, 0x65, 0x6e, 0x64, 0x18, 0xe9, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x6f, 0x72,
	0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x66, 0x6e, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x06, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64,
	0x12, 0x51, 0x0a, 0x05, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x18, 0xea, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x38, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65,
	0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x66, 0x6e, 0x5f, 0x65, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6c,
	0x65, 0x61, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x05, 0x63, 0x6c,
	0x65, 0x61, 0x72, 0x42, 0x09, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xba,
	0x02, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x4c, 0x0a, 0x03, 0x67, 0x65, 0x74, 0x18, 0xe8, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68,
	0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x66, 0x6e, 0x5f,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52,
	0x03, 0x67, 0x65, 0x74, 0x12, 0x55, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x18, 0xe9,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63,
	0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x66, 0x6e,
	0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x48, 0x00, 0x52, 0x06, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x12, 0x52, 0x0a, 0x05, 0x63,
	0x6c, 0x65, 0x61, 0x72, 0x18, 0xea, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x6f, 0x72,
	0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x66, 0x6e, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x05, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x42,
	0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xd6, 0x11, 0x0a, 0x08,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x50, 0x0a, 0x06, 0x72, 0x75, 0x6e, 0x6e,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61,
	0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x66, 0x6e, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x2e, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72,
	0x48, 0x00, 0x52, 0x06, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x73, 0x0a, 0x13, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x69, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70,
	0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x66, 0x6e, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61,
	0x70, 0x53, 0x69, 0x64, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x48, 0x00, 0x52, 0x11, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x53, 0x69, 0x64, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12,
	0x64, 0x0a, 0x0e, 0x62, 0x61, 0x67, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70,
	0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x66, 0x6e, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x2e, 0x42, 0x61, 0x67, 0x55, 0x73, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x62, 0x61, 0x67, 0x55, 0x73, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x73, 0x0a, 0x13, 0x69, 0x74, 0x65, 0x72, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x73, 0x69, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x41, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e,
	0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x66, 0x6e, 0x5f, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x4b, 0x65, 0x79, 0x2e, 0x49, 0x74, 0x65, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x69, 0x64, 0x65,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x48, 0x00, 0x52, 0x11, 0x69, 0x74, 0x65, 0x72, 0x61, 0x62, 0x6c,
	0x65, 0x53, 0x69, 0x64, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x80, 0x01, 0x0a, 0x18, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x5f, 0x73, 0x69, 0x64,
	0x65, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e,
	0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x66, 0x6e, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x2e, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x73, 0x53, 0x69, 0x64, 0x65, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x48, 0x00, 0x52, 0x15, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70,
	0x4b, 0x65, 0x79, 0x73, 0x53, 0x69, 0x64, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x93, 0x01,
	0x0a, 0x1f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x5f, 0x73, 0x69, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70,
	0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x66, 0x6e, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61,
	0x70, 0x4b, 0x65, 0x79, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x53, 0x69, 0x64, 0x65, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x48, 0x00, 0x52, 0x1b, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70,
	0x4b, 0x65, 0x79, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x53, 0x69, 0x64, 0x65, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x12, 0x80, 0x01, 0x0a, 0x18, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70,
	0x5f, 0x6b, 0x65, 0x79, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61,
	0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x66,
	0x6e, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70,
	0x4b, 0x65, 0x79, 0x73, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52,
	0x15, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x73, 0x55, 0x73, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x73, 0x0a, 0x13, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x6d,
	0x61, 0x70, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65,
	0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x66, 0x6e, 0x5f, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x4b, 0x65, 0x79, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x55, 0x73, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x11, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x6d,
	0x61, 0x70, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x7d, 0x0a, 0x17, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x6f,
	0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x66, 0x6e, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x2e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x48, 0x00, 0x52, 0x14, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x64, 0x4c, 0x69, 0x73,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x1a, 0x0a, 0x06, 0x52, 0x75,
	0x6e, 0x6e, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x1a, 0x72, 0x0a, 0x11, 0x49, 0x74, 0x65, 0x72, 0x61, 0x62,
	0x6c, 0x65, 0x53, 0x69, 0x64, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x12, 0x22,
	0x0a, 0x0d, 0x73, 0x69, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x69, 0x64, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x06, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x1a, 0x84, 0x01, 0x0a, 0x11, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x53, 0x69, 0x64, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72,
	0x6d, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x69, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x69, 0x64, 0x65,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x69, 0x6e, 0x64, 0x6f,
	0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x1a, 0x76, 0x0a, 0x15, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x4b, 0x65, 0x79,
	0x73, 0x53, 0x69, 0x64, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x12, 0x22, 0x0a,
	0x0d, 0x73, 0x69, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x69, 0x64, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x06, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x1a, 0x7c, 0x0a, 0x1b, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x6d, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x53,
	0x69, 0x64, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x73,
	0x69, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x73, 0x69, 0x64, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x06, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x1a, 0x7f, 0x0a, 0x0c, 0x42, 0x61, 0x67, 0x55, 0x73,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06,
	0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x1a, 0x88, 0x01, 0x0a, 0x15, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x6d, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x73, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x6f, 0x72, 0x6d, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x73,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x69, 0x6e,
	0x64, 0x6f, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x77, 0x69, 0x6e, 0x64, 0x6f,
	0x77, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x1a, 0x9d, 0x01, 0x0a, 0x11, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70,
	0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x06, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x61,
	0x70, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x6d, 0x61, 0x70,
	0x4b, 0x65, 0x79, 0x1a, 0xd6, 0x01, 0x0a, 0x14, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x64, 0x4c,
	0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x12,
	0x22, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x06, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x4d, 0x0a,
	0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x66, 0x6e, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x06, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x22, 0x40, 0x0a, 0x0f, 0x53, 0x74, 0x61, 0x74, 0x65, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x69,
	0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x55, 0x0a, 0x10, 0x53, 0x74, 0x61, 0x74, 0x65, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x6f,
	0x6e, 0x74, 0x69, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x28, 0x0a,
	0x12, 0x53, 0x74, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x15, 0x0a, 0x13, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x13,
	0x0a, 0x11, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x14, 0x0a, 0x12, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x65, 0x61,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3a, 0x0a, 0x10, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x03, 0x65, 0x6e, 0x64, 0x22, 0xdc, 0x04, 0x0a, 0x08, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x59, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68,
	0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x66, 0x6e, 0x5f,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x45,
	0x6e, 0x75, 0x6d, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x38, 0x0a,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x72, 0x61, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x72, 0x61, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x49,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x6f, 0x67, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x12, 0x38, 0x0a, 0x0b,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x58, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x50,
	0x0a, 0x0b, 0x6c, 0x6f, 0x67, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65,
	0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x66, 0x6e, 0x5f, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x6c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73,
	0x1a, 0x72, 0x0a, 0x08, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x22, 0x66, 0x0a, 0x04,
	0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x52, 0x41, 0x43, 0x45, 0x10, 0x01,
	0x12, 0x09, 0x0a, 0x05, 0x44, 0x45, 0x42, 0x55, 0x47, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x49,
	0x4e, 0x46, 0x4f, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x4f, 0x54, 0x49, 0x43, 0x45, 0x10,
	0x04, 0x12, 0x08, 0x0a, 0x04, 0x57, 0x41, 0x52, 0x4e, 0x10, 0x05, 0x12, 0x09, 0x0a, 0x05, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0x06, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43,
	0x41, 0x4c, 0x10, 0x07, 0x22, 0x0c, 0x0a, 0x0a, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x22, 0xe1, 0x04, 0x0a, 0x12, 0x53, 0x74, 0x61, 0x72, 0x74, 0x57, 0x6f, 0x72, 0x6b,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x6f, 0x72,
	0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x6f,
	0x72, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x12, 0x62, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65,
	0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x69, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x62, 0x0a, 0x10, 0x6c, 0x6f,
	0x67, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68,
	0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x69, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x0f, 0x6c,
	0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x64,
	0x0a, 0x11, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2e,
	0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70,
	0x69, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x6f, 0x72, 0x52, 0x10, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x45, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x12, 0x66, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65,
	0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x69, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x5d, 0x0a, 0x06,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x6f,
	0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x66, 0x6e, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x2b, 0x0a, 0x13, 0x53, 0x74, 0x61, 0x72, 0x74, 0x57,
	0x6f, 0x72, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x22, 0x30, 0x0a, 0x11, 0x53, 0x74, 0x6f, 0x70, 0x57, 0x6f, 0x72, 0x6b, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x6f, 0x72,
	0x6b, 0x65, 0x72, 0x49, 0x64, 0x22, 0x2a, 0x0a, 0x12, 0x53, 0x74, 0x6f, 0x70, 0x57, 0x6f, 0x72,
	0x6b, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x22, 0x25, 0x0a, 0x13, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x5d, 0x0a, 0x14, 0x57, 0x6f, 0x72, 0x6b,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x32, 0xc3, 0x02, 0x0a, 0x0d, 0x42, 0x65, 0x61, 0x6d,
	0x46, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x86, 0x01, 0x0a, 0x07, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x3a, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63,
	0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x66, 0x6e,
	0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x1a, 0x39, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62,
	0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x66, 0x6e, 0x5f, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x00, 0x28, 0x01,
	0x30, 0x01, 0x12, 0xa8, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f,
	0x72, 0x12, 0x48, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62,
	0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x66, 0x6e, 0x5f, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x6f, 0x72,
	0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x66, 0x6e, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x42, 0x75, 0x6e, 0x64, 0x6c,
	0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x22, 0x00, 0x32, 0x7c, 0x0a,
	0x0a, 0x42, 0x65, 0x61, 0x6d, 0x46, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x6e, 0x0a, 0x04, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x2f, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65,
	0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x66, 0x6e, 0x5f, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x1a, 0x2f, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68,
	0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x66, 0x6e, 0x5f,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x32, 0x87, 0x01, 0x0a, 0x0b,
	0x42, 0x65, 0x61, 0x6d, 0x46, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x78, 0x0a, 0x05, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x33, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68,
	0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x66, 0x6e, 0x5f,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x6f, 0x72, 0x67, 0x2e,
	0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x66, 0x6e, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x28, 0x01, 0x30, 0x01, 0x32, 0x89, 0x01, 0x0a, 0x0d, 0x42, 0x65, 0x61, 0x6d, 0x46, 0x6e,
	0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x78, 0x0a, 0x07, 0x4c, 0x6f, 0x67, 0x67, 0x69,
	0x6e, 0x67, 0x12, 0x34, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e,
	0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x66, 0x6e, 0x5f, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61,
	0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x66, 0x6e, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x22, 0x00, 0x28, 0x01, 0x30,
	0x01, 0x32, 0xa9, 0x02, 0x0a, 0x18, 0x42, 0x65, 0x61, 0x6d, 0x46, 0x6e, 0x45, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x86,
	0x01, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x12, 0x39,
	0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x66, 0x6e, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x57, 0x6f, 0x72, 0x6b,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x6f, 0x72, 0x67, 0x2e,
	0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x66, 0x6e, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x83, 0x01, 0x0a, 0x0a, 0x53, 0x74, 0x6f, 0x70,
	0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x12, 0x38, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61,
	0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x66,
	0x6e, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x6f, 0x70, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x39, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65,
	0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x66, 0x6e, 0x5f, 0x65, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x57, 0x6f, 0x72,
	0x6b, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0xa4, 0x01,
	0x0a, 0x12, 0x42, 0x65, 0x61, 0x6d, 0x46, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x8d, 0x01, 0x0a, 0x0c, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3b, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63,
	0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x66, 0x6e,
	0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f,
	0x72, 0x6b, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x1a, 0x3a, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e,
	0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x66, 0x6e, 0x5f, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x00,
	0x28, 0x01, 0x30, 0x01, 0x42, 0x81, 0x01, 0x0a, 0x24, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61,
	0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x66,
	0x6e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x42, 0x09, 0x42,
	0x65, 0x61, 0x6d, 0x46, 0x6e, 0x41, 0x70, 0x69, 0x5a, 0x4e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2f, 0x62, 0x65, 0x61, 0x6d,
	0x2f, 0x73, 0x64, 0x6b, 0x73, 0x2f, 0x76, 0x32, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x6b, 0x67, 0x2f,
	0x62, 0x65, 0x61, 0x6d, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x66, 0x6e, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x31, 0x3b, 0x66, 0x6e, 0x65, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes = make([]protoimpl.MessageInfo, 77)
var file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_goTypes = []any{
	(FnApiTransforms_Runner)(0),                       // 0: org.apache.beam.model.fn_execution.v1.FnApiTransforms.Runner
	(LogEntry_Severity_Enum)(0),                       // 1: org.apache.beam.model.fn_execution.v1.LogEntry.Severity.Enum
	(*FnApiTransforms)(nil),                           // 2: org.apache.beam.model.fn_execution.v1.FnApiTransforms
	(*RemoteGrpcPort)(nil),                            // 3: org.apache.beam.model.fn_execution.v1.RemoteGrpcPort
	(*GetProcessBundleDescriptorRequest)(nil),         // 4: org.apache.beam.model.fn_execution.v1.GetProcessBundleDescriptorRequest
	(*InstructionRequest)(nil),                        // 5: org.apache.beam.model.fn_execution.v1.InstructionRequest
	(*InstructionResponse)(nil),                       // 6: org.apache.beam.model.fn_execution.v1.InstructionResponse
	(*SampleDataRequest)(nil),                         // 7: org.apache.beam.model.fn_execution.v1.SampleDataRequest
	(*SampledElement)(nil),                            // 8: org.apache.beam.model.fn_execution.v1.SampledElement
	(*SampleDataResponse)(nil),                        // 9: org.apache.beam.model.fn_execution.v1.SampleDataResponse
	(*HarnessMonitoringInfosRequest)(nil),             // 10: org.apache.beam.model.fn_execution.v1.HarnessMonitoringInfosRequest
	(*HarnessMonitoringInfosResponse)(nil),            // 11: org.apache.beam.model.fn_execution.v1.HarnessMonitoringInfosResponse
	(*RegisterRequest)(nil),                           // 12: org.apache.beam.model.fn_execution.v1.RegisterRequest
	(*RegisterResponse)(nil),                          // 13: org.apache.beam.model.fn_execution.v1.RegisterResponse
	(*ProcessBundleDescriptor)(nil),                   // 14: org.apache.beam.model.fn_execution.v1.ProcessBundleDescriptor
	(*BundleApplication)(nil),                         // 15: org.apache.beam.model.fn_execution.v1.BundleApplication
	(*DelayedBundleApplication)(nil),                  // 16: org.apache.beam.model.fn_execution.v1.DelayedBundleApplication
	(*ProcessBundleRequest)(nil),                      // 17: org.apache.beam.model.fn_execution.v1.ProcessBundleRequest
	(*ProcessBundleResponse)(nil),                     // 18: org.apache.beam.model.fn_execution.v1.ProcessBundleResponse
	(*ProcessBundleProgressRequest)(nil),              // 19: org.apache.beam.model.fn_execution.v1.ProcessBundleProgressRequest
	(*MonitoringInfosMetadataRequest)(nil),            // 20: org.apache.beam.model.fn_execution.v1.MonitoringInfosMetadataRequest
	(*ProcessBundleProgressResponse)(nil),             // 21: org.apache.beam.model.fn_execution.v1.ProcessBundleProgressResponse
	(*MonitoringInfosMetadataResponse)(nil),           // 22: org.apache.beam.model.fn_execution.v1.MonitoringInfosMetadataResponse
	(*ProcessBundleSplitRequest)(nil),                 // 23: org.apache.beam.model.fn_execution.v1.ProcessBundleSplitRequest
	(*ProcessBundleSplitResponse)(nil),                // 24: org.apache.beam.model.fn_execution.v1.ProcessBundleSplitResponse
	(*FinalizeBundleRequest)(nil),                     // 25: org.apache.beam.model.fn_execution.v1.FinalizeBundleRequest
	(*FinalizeBundleResponse)(nil),                    // 26: org.apache.beam.model.fn_execution.v1.FinalizeBundleResponse
	(*Elements)(nil),                                  // 27: org.apache.beam.model.fn_execution.v1.Elements
	(*StateRequest)(nil),                              // 28: org.apache.beam.model.fn_execution.v1.StateRequest
	(*StateResponse)(nil),                             // 29: org.apache.beam.model.fn_execution.v1.StateResponse
	(*StateKey)(nil),                                  // 30: org.apache.beam.model.fn_execution.v1.StateKey
	(*StateGetRequest)(nil),                           // 31: org.apache.beam.model.fn_execution.v1.StateGetRequest
	(*StateGetResponse)(nil),                          // 32: org.apache.beam.model.fn_execution.v1.StateGetResponse
	(*StateAppendRequest)(nil),                        // 33: org.apache.beam.model.fn_execution.v1.StateAppendRequest
	(*StateAppendResponse)(nil),                       // 34: org.apache.beam.model.fn_execution.v1.StateAppendResponse
	(*StateClearRequest)(nil),                         // 35: org.apache.beam.model.fn_execution.v1.StateClearRequest
	(*StateClearResponse)(nil),                        // 36: org.apache.beam.model.fn_execution.v1.StateClearResponse
	(*OrderedListRange)(nil),                          // 37: org.apache.beam.model.fn_execution.v1.OrderedListRange
	(*LogEntry)(nil),                                  // 38: org.apache.beam.model.fn_execution.v1.LogEntry
	(*LogControl)(nil),                                // 39: org.apache.beam.model.fn_execution.v1.LogControl
	(*StartWorkerRequest)(nil),                        // 40: org.apache.beam.model.fn_execution.v1.StartWorkerRequest
	(*StartWorkerResponse)(nil),                       // 41: org.apache.beam.model.fn_execution.v1.StartWorkerResponse
	(*StopWorkerRequest)(nil),                         // 42: org.apache.beam.model.fn_execution.v1.StopWorkerRequest
	(*StopWorkerResponse)(nil),                        // 43: org.apache.beam.model.fn_execution.v1.StopWorkerResponse
	(*WorkerStatusRequest)(nil),                       // 44: org.apache.beam.model.fn_execution.v1.WorkerStatusRequest
	(*WorkerStatusResponse)(nil),                      // 45: org.apache.beam.model.fn_execution.v1.WorkerStatusResponse
	(*SampledElement_Exception)(nil),                  // 46: org.apache.beam.model.fn_execution.v1.SampledElement.Exception
	(*SampleDataResponse_ElementList)(nil),            // 47: org.apache.beam.model.fn_execution.v1.SampleDataResponse.ElementList
	nil,                                               // 48: org.apache.beam.model.fn_execution.v1.SampleDataResponse.ElementSamplesEntry
	nil,                                               // 49: org.apache.beam.model.fn_execution.v1.HarnessMonitoringInfosResponse.MonitoringDataEntry
	nil,                                               // 50: org.apache.beam.model.fn_execution.v1.ProcessBundleDescriptor.TransformsEntry
	nil,                                               // 51: org.apache.beam.model.fn_execution.v1.ProcessBundleDescriptor.PcollectionsEntry
	nil,                                               // 52: org.apache.beam.model.fn_execution.v1.ProcessBundleDescriptor.WindowingStrategiesEntry
	nil,                                               // 53: org.apache.beam.model.fn_execution.v1.ProcessBundleDescriptor.CodersEntry
	nil,                                               // 54: org.apache.beam.model.fn_execution.v1.ProcessBundleDescriptor.EnvironmentsEntry
	nil,                                               // 55: org.apache.beam.model.fn_execution.v1.BundleApplication.OutputWatermarksEntry
	(*ProcessBundleRequest_CacheToken)(nil),           // 56: org.apache.beam.model.fn_execution.v1.ProcessBundleRequest.CacheToken
	(*ProcessBundleRequest_CacheToken_UserState)(nil), // 57: org.apache.beam.model.fn_execution.v1.ProcessBundleRequest.CacheToken.UserState
	(*ProcessBundleRequest_CacheToken_SideInput)(nil), // 58: org.apache.beam.model.fn_execution.v1.ProcessBundleRequest.CacheToken.SideInput
	nil, // 59: org.apache.beam.model.fn_execution.v1.ProcessBundleResponse.MonitoringDataEntry
	nil, // 60: org.apache.beam.model.fn_execution.v1.ProcessBundleProgressResponse.MonitoringDataEntry
	nil, // 61: org.apache.beam.model.fn_execution.v1.MonitoringInfosMetadataResponse.MonitoringInfoEntry
	(*ProcessBundleSplitRequest_DesiredSplit)(nil), // 62: org.apache.beam.model.fn_execution.v1.ProcessBundleSplitRequest.DesiredSplit
	nil, // 63: org.apache.beam.model.fn_execution.v1.ProcessBundleSplitRequest.DesiredSplitsEntry
	(*ProcessBundleSplitResponse_ChannelSplit)(nil), // 64: org.apache.beam.model.fn_execution.v1.ProcessBundleSplitResponse.ChannelSplit
	(*Elements_Data)(nil),                           // 65: org.apache.beam.model.fn_execution.v1.Elements.Data
	(*Elements_Timers)(nil),                         // 66: org.apache.beam.model.fn_execution.v1.Elements.Timers
	(*StateKey_Runner)(nil),                         // 67: org.apache.beam.model.fn_execution.v1.StateKey.Runner
	(*StateKey_IterableSideInput)(nil),              // 68: org.apache.beam.model.fn_execution.v1.StateKey.IterableSideInput
	(*StateKey_MultimapSideInput)(nil),              // 69: org.apache.beam.model.fn_execution.v1.StateKey.MultimapSideInput
	(*StateKey_MultimapKeysSideInput)(nil),          // 70: org.apache.beam.model.fn_execution.v1.StateKey.MultimapKeysSideInput
	(*StateKey_MultimapKeysValuesSideInput)(nil),    // 71: org.apache.beam.model.fn_execution.v1.StateKey.MultimapKeysValuesSideInput
	(*StateKey_BagUserState)(nil),                   // 72: org.apache.beam.model.fn_execution.v1.StateKey.BagUserState
	(*StateKey_MultimapKeysUserState)(nil),          // 73: org.apache.beam.model.fn_execution.v1.StateKey.MultimapKeysUserState
	(*StateKey_MultimapUserState)(nil),              // 74: org.apache.beam.model.fn_execution.v1.StateKey.MultimapUserState
	(*StateKey_OrderedListUserState)(nil),           // 75: org.apache.beam.model.fn_execution.v1.StateKey.OrderedListUserState
	(*LogEntry_List)(nil),                           // 76: org.apache.beam.model.fn_execution.v1.LogEntry.List
	(*LogEntry_Severity)(nil),                       // 77: org.apache.beam.model.fn_execution.v1.LogEntry.Severity
	nil,                                             // 78: org.apache.beam.model.fn_execution.v1.StartWorkerRequest.ParamsEntry
	(*pipeline_v1.ApiServiceDescriptor)(nil),        // 79: org.apache.beam.model.pipeline.v1.ApiServiceDescriptor
	(*timestamppb.Timestamp)(nil),                   // 80: google.protobuf.Timestamp
	(pipeline_v1.IsBounded_Enum)(0),                 // 81: org.apache.beam.model.pipeline.v1.IsBounded.Enum
	(*durationpb.Duration)(nil),                     // 82: google.protobuf.Duration
	(*pipeline_v1.MonitoringInfo)(nil),              // 83: org.apache.beam.model.pipeline.v1.MonitoringInfo
	(*structpb.Struct)(nil),                         // 84: google.protobuf.Struct
	(*pipeline_v1.PTransform)(nil),                  // 85: org.apache.beam.model.pipeline.v1.PTransform
	(*pipeline_v1.PCollection)(nil),                 // 86: org.apache.beam.model.pipeline.v1.PCollection
	(*pipeline_v1.WindowingStrategy)(nil),           // 87: org.apache.beam.model.pipeline.v1.WindowingStrategy
	(*pipeline_v1.Coder)(nil),                       // 88: org.apache.beam.model.pipeline.v1.Coder
	(*pipeline_v1.Environment)(nil),                 // 89: org.apache.beam.model.pipeline.v1.Environment
}
var file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_depIdxs = []int32{
	79, // 0: org.apache.beam.model.fn_execution.v1.RemoteGrpcPort.api_service_descriptor:type_name -> org.apache.beam.model.pipeline.v1.ApiServiceDescriptor
	17, // 1: org.apache.beam.model.fn_execution.v1.InstructionRequest.process_bundle:type_name -> org.apache.beam.model.fn_execution.v1.ProcessBundleRequest
	19, // 2: org.apache.beam.model.fn_execution.v1.InstructionRequest.process_bundle_progress:type_name -> org.apache.beam.model.fn_execution.v1.ProcessBundleProgressRequest
	23, // 3: org.apache.beam.model.fn_execution.v1.InstructionRequest.process_bundle_split:type_name -> org.apache.beam.model.fn_execution.v1.ProcessBundleSplitRequest
	25, // 4: org.apache.beam.model.fn_execution.v1.InstructionRequest.finalize_bundle:type_name -> org.apache.beam.model.fn_execution.v1.FinalizeBundleRequest
	20, // 5: org.apache.beam.model.fn_execution.v1.InstructionRequest.monitoring_infos:type_name -> org.apache.beam.model.fn_execution.v1.MonitoringInfosMetadataRequest
	10, // 6: org.apache.beam.model.fn_execution.v1.InstructionRequest.harness_monitoring_infos:type_name -> org.apache.beam.model.fn_execution.v1.HarnessMonitoringInfosRequest
	7,  // 7: org.apache.beam.model.fn_execution.v1.InstructionRequest.sample_data:type_name -> org.apache.beam.model.fn_execution.v1.SampleDataRequest
	12, // 8: org.apache.beam.model.fn_execution.v1.InstructionRequest.register:type_name -> org.apache.beam.model.fn_execution.v1.RegisterRequest
	18, // 9: org.apache.beam.model.fn_execution.v1.InstructionResponse.process_bundle:type_name -> org.apache.beam.model.fn_execution.v1.ProcessBundleResponse
	21, // 10: org.apache.beam.model.fn_execution.v1.InstructionResponse.process_bundle_progress:type_name -> org.apache.beam.model.fn_execution.v1.ProcessBundleProgressResponse
	24, // 11: org.apache.beam.model.fn_execution.v1.InstructionResponse.process_bundle_split:type_name -> org.apache.beam.model.fn_execution.v1.ProcessBundleSplitResponse
	26, // 12: org.apache.beam.model.fn_execution.v1.InstructionResponse.finalize_bundle:type_name -> org.apache.beam.model.fn_execution.v1.FinalizeBundleResponse
	22, // 13: org.apache.beam.model.fn_execution.v1.InstructionResponse.monitoring_infos:type_name -> org.apache.beam.model.fn_execution.v1.MonitoringInfosMetadataResponse
	11, // 14: org.apache.beam.model.fn_execution.v1.InstructionResponse.harness_monitoring_infos:type_name -> org.apache.beam.model.fn_execution.v1.HarnessMonitoringInfosResponse
	9,  // 15: org.apache.beam.model.fn_execution.v1.InstructionResponse.sample_data:type_name -> org.apache.beam.model.fn_execution.v1.SampleDataResponse
	13, // 16: org.apache.beam.model.fn_execution.v1.InstructionResponse.register:type_name -> org.apache.beam.model.fn_execution.v1.RegisterResponse
	80, // 17: org.apache.beam.model.fn_execution.v1.SampledElement.sample_timestamp:type_name -> google.protobuf.Timestamp
	46, // 18: org.apache.beam.model.fn_execution.v1.SampledElement.exception:type_name -> org.apache.beam.model.fn_execution.v1.SampledElement.Exception
	48, // 19: org.apache.beam.model.fn_execution.v1.SampleDataResponse.element_samples:type_name -> org.apache.beam.model.fn_execution.v1.SampleDataResponse.ElementSamplesEntry
	49, // 20: org.apache.beam.model.fn_execution.v1.HarnessMonitoringInfosResponse.monitoring_data:type_name -> org.apache.beam.model.fn_execution.v1.HarnessMonitoringInfosResponse.MonitoringDataEntry
	14, // 21: org.apache.beam.model.fn_execution.v1.RegisterRequest.process_bundle_descriptor:type_name -> org.apache.beam.model.fn_execution.v1.ProcessBundleDescriptor
	50, // 22: org.apache.beam.model.fn_execution.v1.ProcessBundleDescriptor.transforms:type_name -> org.apache.beam.model.fn_execution.v1.ProcessBundleDescriptor.TransformsEntry
	51, // 23: org.apache.beam.model.fn_execution.v1.ProcessBundleDescriptor.pcollections:type_name -> org.apache.beam.model.fn_execution.v1.ProcessBundleDescriptor.PcollectionsEntry
	52, // 24: org.apache.beam.model.fn_execution.v1.ProcessBundleDescriptor.windowing_strategies:type_name -> org.apache.beam.model.fn_execution.v1.ProcessBundleDescriptor.WindowingStrategiesEntry
	53, // 25: org.apache.beam.model.fn_execution.v1.ProcessBundleDescriptor.coders:type_name -> org.apache.beam.model.fn_execution.v1.ProcessBundleDescriptor.CodersEntry
	54, // 26: org.apache.beam.model.fn_execution.v1.ProcessBundleDescriptor.environments:type_name -> org.apache.beam.model.fn_execution.v1.ProcessBundleDescriptor.EnvironmentsEntry
	79, // 27: org.apache.beam.model.fn_execution.v1.ProcessBundleDescriptor.state_api_service_descriptor:type_name -> org.apache.beam.model.pipeline.v1.ApiServiceDescriptor
	79, // 28: org.apache.beam.model.fn_execution.v1.ProcessBundleDescriptor.timer_api_service_descriptor:type_name -> org.apache.beam.model.pipeline.v1.ApiServiceDescriptor
	55, // 29: org.apache.beam.model.fn_execution.v1.BundleApplication.output_watermarks:type_name -> org.apache.beam.model.fn_execution.v1.BundleApplication.OutputWatermarksEntry
	81, // 30: org.apache.beam.model.fn_execution.v1.BundleApplication.is_bounded:type_name -> org.apache.beam.model.pipeline.v1.IsBounded.Enum
	15, // 31: org.apache.beam.model.fn_execution.v1.DelayedBundleApplication.application:type_name -> org.apache.beam.model.fn_execution.v1.BundleApplication
	82, // 32: org.apache.beam.model.fn_execution.v1.DelayedBundleApplication.requested_time_delay:type_name -> google.protobuf.Duration
	56, // 33: org.apache.beam.model.fn_execution.v1.ProcessBundleRequest.cache_tokens:type_name -> org.apache.beam.model.fn_execution.v1.ProcessBundleRequest.CacheToken
	27, // 34: org.apache.beam.model.fn_execution.v1.ProcessBundleRequest.elements:type_name -> org.apache.beam.model.fn_execution.v1.Elements
	16, // 35: org.apache.beam.model.fn_execution.v1.ProcessBundleResponse.residual_roots:type_name -> org.apache.beam.model.fn_execution.v1.DelayedBundleApplication
	83, // 36: org.apache.beam.model.fn_execution.v1.ProcessBundleResponse.monitoring_infos:type_name -> org.apache.beam.model.pipeline.v1.MonitoringInfo
	59, // 37: org.apache.beam.model.fn_execution.v1.ProcessBundleResponse.monitoring_data:type_name -> org.apache.beam.model.fn_execution.v1.ProcessBundleResponse.MonitoringDataEntry
	27, // 38: org.apache.beam.model.fn_execution.v1.ProcessBundleResponse.elements:type_name -> org.apache.beam.model.fn_execution.v1.Elements
	83, // 39: org.apache.beam.model.fn_execution.v1.ProcessBundleProgressResponse.monitoring_infos:type_name -> org.apache.beam.model.pipeline.v1.MonitoringInfo
	60, // 40: org.apache.beam.model.fn_execution.v1.ProcessBundleProgressResponse.monitoring_data:type_name -> org.apache.beam.model.fn_execution.v1.ProcessBundleProgressResponse.MonitoringDataEntry
	61, // 41: org.apache.beam.model.fn_execution.v1.MonitoringInfosMetadataResponse.monitoring_info:type_name -> org.apache.beam.model.fn_execution.v1.MonitoringInfosMetadataResponse.MonitoringInfoEntry
	63, // 42: org.apache.beam.model.fn_execution.v1.ProcessBundleSplitRequest.desired_splits:type_name -> org.apache.beam.model.fn_execution.v1.ProcessBundleSplitRequest.DesiredSplitsEntry
	15, // 43: org.apache.beam.model.fn_execution.v1.ProcessBundleSplitResponse.primary_roots:type_name -> org.apache.beam.model.fn_execution.v1.BundleApplication
	16, // 44: org.apache.beam.model.fn_execution.v1.ProcessBundleSplitResponse.residual_roots:type_name -> org.apache.beam.model.fn_execution.v1.DelayedBundleApplication
	64, // 45: org.apache.beam.model.fn_execution.v1.ProcessBundleSplitResponse.channel_splits:type_name -> org.apache.beam.model.fn_execution.v1.ProcessBundleSplitResponse.ChannelSplit
	65, // 46: org.apache.beam.model.fn_execution.v1.Elements.data:type_name -> org.apache.beam.model.fn_execution.v1.Elements.Data
	66, // 47: org.apache.beam.model.fn_execution.v1.Elements.timers:type_name -> org.apache.beam.model.fn_execution.v1.Elements.Timers
	30, // 48: org.apache.beam.model.fn_execution.v1.StateRequest.state_key:type_name -> org.apache.beam.model.fn_execution.v1.StateKey
	31, // 49: org.apache.beam.model.fn_execution.v1.StateRequest.get:type_name -> org.apache.beam.model.fn_execution.v1.StateGetRequest
	33, // 50: org.apache.beam.model.fn_execution.v1.StateRequest.append:type_name -> org.apache.beam.model.fn_execution.v1.StateAppendRequest
	35, // 51: org.apache.beam.model.fn_execution.v1.StateRequest.clear:type_name -> org.apache.beam.model.fn_execution.v1.StateClearRequest
	32, // 52: org.apache.beam.model.fn_execution.v1.StateResponse.get:type_name -> org.apache.beam.model.fn_execution.v1.StateGetResponse
	34, // 53: org.apache.beam.model.fn_execution.v1.StateResponse.append:type_name -> org.apache.beam.model.fn_execution.v1.StateAppendResponse
	36, // 54: org.apache.beam.model.fn_execution.v1.StateResponse.clear:type_name -> org.apache.beam.model.fn_execution.v1.StateClearResponse
	67, // 55: org.apache.beam.model.fn_execution.v1.StateKey.runner:type_name -> org.apache.beam.model.fn_execution.v1.StateKey.Runner
	69, // 56: org.apache.beam.model.fn_execution.v1.StateKey.multimap_side_input:type_name -> org.apache.beam.model.fn_execution.v1.StateKey.MultimapSideInput
	72, // 57: org.apache.beam.model.fn_execution.v1.StateKey.bag_user_state:type_name -> org.apache.beam.model.fn_execution.v1.StateKey.BagUserState
	68, // 58: org.apache.beam.model.fn_execution.v1.StateKey.iterable_side_input:type_name -> org.apache.beam.model.fn_execution.v1.StateKey.IterableSideInput
	70, // 59: org.apache.beam.model.fn_execution.v1.StateKey.multimap_keys_side_input:type_name -> org.apache.beam.model.fn_execution.v1.StateKey.MultimapKeysSideInput
	71, // 60: org.apache.beam.model.fn_execution.v1.StateKey.multimap_keys_values_side_input:type_name -> org.apache.beam.model.fn_execution.v1.StateKey.MultimapKeysValuesSideInput
	73, // 61: org.apache.beam.model.fn_execution.v1.StateKey.multimap_keys_user_state:type_name -> org.apache.beam.model.fn_execution.v1.StateKey.MultimapKeysUserState
	74, // 62: org.apache.beam.model.fn_execution.v1.StateKey.multimap_user_state:type_name -> org.apache.beam.model.fn_execution.v1.StateKey.MultimapUserState
	75, // 63: org.apache.beam.model.fn_execution.v1.StateKey.ordered_list_user_state:type_name -> org.apache.beam.model.fn_execution.v1.StateKey.OrderedListUserState
	1,  // 64: org.apache.beam.model.fn_execution.v1.LogEntry.severity:type_name -> org.apache.beam.model.fn_execution.v1.LogEntry.Severity.Enum
	80, // 65: org.apache.beam.model.fn_execution.v1.LogEntry.timestamp:type_name -> google.protobuf.Timestamp
	84, // 66: org.apache.beam.model.fn_execution.v1.LogEntry.custom_data:type_name -> google.protobuf.Struct
	79, // 67: org.apache.beam.model.fn_execution.v1.StartWorkerRequest.control_endpoint:type_name -> org.apache.beam.model.pipeline.v1.ApiServiceDescriptor
	79, // 68: org.apache.beam.model.fn_execution.v1.StartWorkerRequest.logging_endpoint:type_name -> org.apache.beam.model.pipeline.v1.ApiServiceDescriptor
	79, // 69: org.apache.beam.model.fn_execution.v1.StartWorkerRequest.artifact_endpoint:type_name -> org.apache.beam.model.pipeline.v1.ApiServiceDescriptor
	79, // 70: org.apache.beam.model.fn_execution.v1.StartWorkerRequest.provision_endpoint:type_name -> org.apache.beam.model.pipeline.v1.ApiServiceDescriptor
	78, // 71: org.apache.beam.model.fn_execution.v1.StartWorkerRequest.params:type_name -> org.apache.beam.model.fn_execution.v1.StartWorkerRequest.ParamsEntry
	8,  // 72: org.apache.beam.model.fn_execution.v1.SampleDataResponse.ElementList.elements:type_name -> org.apache.beam.model.fn_execution.v1.SampledElement
	47, // 73: org.apache.beam.model.fn_execution.v1.SampleDataResponse.ElementSamplesEntry.value:type_name -> org.apache.beam.model.fn_execution.v1.SampleDataResponse.ElementList
	85, // 74: org.apache.beam.model.fn_execution.v1.ProcessBundleDescriptor.TransformsEntry.value:type_name -> org.apache.beam.model.pipeline.v1.PTransform
	86, // 75: org.apache.beam.model.fn_execution.v1.ProcessBundleDescriptor.PcollectionsEntry.value:type_name -> org.apache.beam.model.pipeline.v1.PCollection
	87, // 76: org.apache.beam.model.fn_execution.v1.ProcessBundleDescriptor.WindowingStrategiesEntry.value:type_name -> org.apache.beam.model.pipeline.v1.WindowingStrategy
	88, // 77: org.apache.beam.model.fn_execution.v1.ProcessBundleDescriptor.CodersEntry.value:type_name -> org.apache.beam.model.pipeline.v1.Coder
	89, // 78: org.apache.beam.model.fn_execution.v1.ProcessBundleDescriptor.EnvironmentsEntry.value:type_name -> org.apache.beam.model.pipeline.v1.Environment
	80, // 79: org.apache.beam.model.fn_execution.v1.BundleApplication.OutputWatermarksEntry.value:type_name -> google.protobuf.Timestamp
	57, // 80: org.apache.beam.model.fn_execution.v1.ProcessBundleRequest.CacheToken.user_state:type_name -> org.apache.beam.model.fn_execution.v1.ProcessBundleRequest.CacheToken.UserState
	58, // 81: org.apache.beam.model.fn_execution.v1.ProcessBundleRequest.CacheToken.side_input:type_name -> org.apache.beam.model.fn_execution.v1.ProcessBundleRequest.CacheToken.SideInput
	83, // 82: org.apache.beam.model.fn_execution.v1.MonitoringInfosMetadataResponse.MonitoringInfoEntry.value:type_name -> org.apache.beam.model.pipeline.v1.MonitoringInfo
	62, // 83: org.apache.beam.model.fn_execution.v1.ProcessBundleSplitRequest.DesiredSplitsEntry.value:type_name -> org.apache.beam.model.fn_execution.v1.ProcessBundleSplitRequest.DesiredSplit
	37, // 84: org.apache.beam.model.fn_execution.v1.StateKey.OrderedListUserState.range:type_name -> org.apache.beam.model.fn_execution.v1.OrderedListRange
	38, // 85: org.apache.beam.model.fn_execution.v1.LogEntry.List.log_entries:type_name -> org.apache.beam.model.fn_execution.v1.LogEntry
	6,  // 86: org.apache.beam.model.fn_execution.v1.BeamFnControl.Control:input_type -> org.apache.beam.model.fn_execution.v1.InstructionResponse
	4,  // 87: org.apache.beam.model.fn_execution.v1.BeamFnControl.GetProcessBundleDescriptor:input_type -> org.apache.beam.model.fn_execution.v1.GetProcessBundleDescriptorRequest
	27, // 88: org.apache.beam.model.fn_execution.v1.BeamFnData.Data:input_type -> org.apache.beam.model.fn_execution.v1.Elements
	28, // 89: org.apache.beam.model.fn_execution.v1.BeamFnState.State:input_type -> org.apache.beam.model.fn_execution.v1.StateRequest
	76, // 90: org.apache.beam.model.fn_execution.v1.BeamFnLogging.Logging:input_type -> org.apache.beam.model.fn_execution.v1.LogEntry.List
	40, // 91: org.apache.beam.model.fn_execution.v1.BeamFnExternalWorkerPool.StartWorker:input_type -> org.apache.beam.model.fn_execution.v1.StartWorkerRequest
	42, // 92: org.apache.beam.model.fn_execution.v1.BeamFnExternalWorkerPool.StopWorker:input_type -> org.apache.beam.model.fn_execution.v1.StopWorkerRequest
	45, // 93: org.apache.beam.model.fn_execution.v1.BeamFnWorkerStatus.WorkerStatus:input_type -> org.apache.beam.model.fn_execution.v1.WorkerStatusResponse
	5,  // 94: org.apache.beam.model.fn_execution.v1.BeamFnControl.Control:output_type -> org.apache.beam.model.fn_execution.v1.InstructionRequest
	14, // 95: org.apache.beam.model.fn_execution.v1.BeamFnControl.GetProcessBundleDescriptor:output_type -> org.apache.beam.model.fn_execution.v1.ProcessBundleDescriptor
	27, // 96: org.apache.beam.model.fn_execution.v1.BeamFnData.Data:output_type -> org.apache.beam.model.fn_execution.v1.Elements
	29, // 97: org.apache.beam.model.fn_execution.v1.BeamFnState.State:output_type -> org.apache.beam.model.fn_execution.v1.StateResponse
	39, // 98: org.apache.beam.model.fn_execution.v1.BeamFnLogging.Logging:output_type -> org.apache.beam.model.fn_execution.v1.LogControl
	41, // 99: org.apache.beam.model.fn_execution.v1.BeamFnExternalWorkerPool.StartWorker:output_type -> org.apache.beam.model.fn_execution.v1.StartWorkerResponse
	43, // 100: org.apache.beam.model.fn_execution.v1.BeamFnExternalWorkerPool.StopWorker:output_type -> org.apache.beam.model.fn_execution.v1.StopWorkerResponse
	44, // 101: org.apache.beam.model.fn_execution.v1.BeamFnWorkerStatus.WorkerStatus:output_type -> org.apache.beam.model.fn_execution.v1.WorkerStatusRequest
	94, // [94:102] is the sub-list for method output_type
	86, // [86:94] is the sub-list for method input_type
	86, // [86:86] is the sub-list for extension type_name
	86, // [86:86] is the sub-list for extension extendee
	0,  // [0:86] is the sub-list for field type_name
}

func init() { file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_init() }
func file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_init() {
	if File_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto != nil {
		return
	}
	file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[3].OneofWrappers = []any{
		(*instructionRequest_ProcessBundle)(nil),
		(*instructionRequest_ProcessBundleProgress)(nil),
		(*instructionRequest_ProcessBundleSplit)(nil),
		(*instructionRequest_FinalizeBundle)(nil),
		(*instructionRequest_MonitoringInfos)(nil),
		(*instructionRequest_HarnessMonitoringInfos)(nil),
		(*instructionRequest_SampleData)(nil),
		(*instructionRequest_Register)(nil),
	}
	file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[4].OneofWrappers = []any{
		(*instructionResponse_ProcessBundle)(nil),
		(*instructionResponse_ProcessBundleProgress)(nil),
		(*instructionResponse_ProcessBundleSplit)(nil),
		(*instructionResponse_FinalizeBundle)(nil),
		(*instructionResponse_MonitoringInfos)(nil),
		(*instructionResponse_HarnessMonitoringInfos)(nil),
		(*instructionResponse_SampleData)(nil),
		(*instructionResponse_Register)(nil),
	}
	file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[19].OneofWrappers = []any{}
	file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[26].OneofWrappers = []any{
		(*stateRequest_Get)(nil),
		(*stateRequest_Append)(nil),
		(*stateRequest_Clear)(nil),
	}
	file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[27].OneofWrappers = []any{
		(*stateResponse_Get)(nil),
		(*stateResponse_Append)(nil),
		(*stateResponse_Clear)(nil),
	}
	file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[28].OneofWrappers = []any{
		(*stateKey_Runner_)(nil),
		(*stateKey_MultimapSideInput_)(nil),
		(*stateKey_BagUserState_)(nil),
		(*stateKey_IterableSideInput_)(nil),
		(*stateKey_MultimapKeysSideInput_)(nil),
		(*stateKey_MultimapKeysValuesSideInput_)(nil),
		(*stateKey_MultimapKeysUserState_)(nil),
		(*stateKey_MultimapUserState_)(nil),
		(*stateKey_OrderedListUserState_)(nil),
	}
	file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes[54].OneofWrappers = []any{
		(*processBundleRequest_CacheToken_UserState_)(nil),
		(*processBundleRequest_CacheToken_SideInput_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   77,
			NumExtensions: 0,
			NumServices:   6,
		},
		GoTypes:           file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_goTypes,
		DependencyIndexes: file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_depIdxs,
		EnumInfos:         file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_enumTypes,
		MessageInfos:      file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_msgTypes,
	}.Build()
	File_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto = out.File
	file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_rawDesc = nil
	file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_goTypes = nil
	file_org_apache_beam_model_fn_execution_v1_beam_fn_api_proto_depIdxs = nil
}
