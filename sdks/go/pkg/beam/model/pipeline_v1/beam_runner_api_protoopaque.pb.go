//
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//
// Protocol Buffers describing the Runner API, which is the runner-independent,
// SDK-independent definition of the Beam model.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.0
// 	protoc        v5.27.3
// source: org/apache/beam/model/pipeline/v1/beam_runner_api.proto

//go:build protoopaque

package pipeline_v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	descriptorpb "google.golang.org/protobuf/types/descriptorpb"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BeamConstants_Constants int32

const (
	// All timestamps of elements or window boundaries must be within
	// the interval [MIN_TIMESTAMP_MILLIS, MAX_TIMESTAMP_MILLIS].
	// The smallest representable timestamp of an element or a window boundary.
	BeamConstants_MIN_TIMESTAMP_MILLIS BeamConstants_Constants = 0
	// The largest representable timestamp of an element or a window boundary.
	BeamConstants_MAX_TIMESTAMP_MILLIS BeamConstants_Constants = 1
	// The maximum timestamp for the global window.
	// Triggers use max timestamp to set timers' timestamp. Timers fire when
	// the watermark passes their timestamps. So, the timestamp needs to be
	// smaller than the MAX_TIMESTAMP_MILLIS.
	// One standard day is subtracted from MAX_TIMESTAMP_MILLIS to make sure
	// the max timestamp is smaller than MAX_TIMESTAMP_MILLIS even after rounding up
	// to seconds or minutes.
	BeamConstants_GLOBAL_WINDOW_MAX_TIMESTAMP_MILLIS BeamConstants_Constants = 2
)

// Enum value maps for BeamConstants_Constants.
var (
	BeamConstants_Constants_name = map[int32]string{
		0: "MIN_TIMESTAMP_MILLIS",
		1: "MAX_TIMESTAMP_MILLIS",
		2: "GLOBAL_WINDOW_MAX_TIMESTAMP_MILLIS",
	}
	BeamConstants_Constants_value = map[string]int32{
		"MIN_TIMESTAMP_MILLIS":               0,
		"MAX_TIMESTAMP_MILLIS":               1,
		"GLOBAL_WINDOW_MAX_TIMESTAMP_MILLIS": 2,
	}
)

func (x BeamConstants_Constants) Enum() *BeamConstants_Constants {
	p := new(BeamConstants_Constants)
	*p = x
	return p
}

func (x BeamConstants_Constants) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BeamConstants_Constants) Descriptor() protoreflect.EnumDescriptor {
	return file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_enumTypes[0].Descriptor()
}

func (BeamConstants_Constants) Type() protoreflect.EnumType {
	return &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_enumTypes[0]
}

func (x BeamConstants_Constants) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Primitive transforms may not specify composite sub-transforms.
type StandardPTransforms_Primitives int32

const (
	// ParDo is a Beam transform for generic parallel processing. The ParDo
	// processing paradigm is similar to the “Map” phase of a
	// Map/Shuffle/Reduce-style algorithm: a ParDo transform considers each
	// element in the input PCollection, performs some processing function
	// (your user code) on that element, and emits zero, one, or multiple
	// elements to an output PCollection.
	//
	// See https://beam.apache.org/documentation/programming-guide/#pardo
	// for additional details.
	//
	// Payload: ParDoPayload
	StandardPTransforms_PAR_DO StandardPTransforms_Primitives = 0
	// Flatten is a Beam transform for PCollection objects that store the same
	// data type. Flatten merges multiple PCollection objects into a single
	// logical PCollection.
	//
	// See https://beam.apache.org/documentation/programming-guide/#flatten
	// for additional details.
	//
	// Payload: None
	StandardPTransforms_FLATTEN StandardPTransforms_Primitives = 1
	// GroupByKey is a Beam transform for processing collections of key/value
	// pairs. It’s a parallel reduction operation, analogous to the Shuffle
	// phase of a Map/Shuffle/Reduce-style algorithm. The input to GroupByKey is
	// a collection of key/value pairs that represents a multimap, where the
	// collection contains multiple pairs that have the same key, but different
	// values. Given such a collection, you use GroupByKey to collect all of the
	// values associated with each unique key.
	//
	// See https://beam.apache.org/documentation/programming-guide/#groupbykey
	// for additional details.
	//
	// Never defines an environment as the runner is required to implement this
	// transform.
	//
	// Payload: None
	StandardPTransforms_GROUP_BY_KEY StandardPTransforms_Primitives = 2
	// A transform which produces a single empty byte array at the minimum
	// timestamp in the GlobalWindow.
	//
	// Never defines an environment as the runner is required to implement this
	// transform.
	//
	// Payload: None
	StandardPTransforms_IMPULSE StandardPTransforms_Primitives = 3
	// Windowing subdivides a PCollection according to the timestamps of its
	// individual elements. Transforms that aggregate multiple elements, such as
	// GroupByKey and Combine, work implicitly on a per-window basis — they
	// process each PCollection as a succession of multiple, finite windows,
	// though the entire collection itself may be of unbounded size.
	//
	// See https://beam.apache.org/documentation/programming-guide/#windowing
	// for additional details.
	//
	// Payload: WindowIntoPayload
	StandardPTransforms_ASSIGN_WINDOWS StandardPTransforms_Primitives = 4
	// A testing input that generates an unbounded {@link PCollection} of
	// elements, advancing the watermark and processing time as elements are
	// emitted. After all of the specified elements are emitted, ceases to
	// produce output.
	//
	// See https://beam.apache.org/blog/2016/10/20/test-stream.html
	// for additional details.
	//
	// Payload: TestStreamPayload
	StandardPTransforms_TEST_STREAM StandardPTransforms_Primitives = 5
	// Represents mapping of main input window onto side input window.
	//
	// Side input window mapping function:
	// Input: KV<nonce, MainInputWindow>
	// Output: KV<nonce, SideInputWindow>
	//
	// For each main input window, the side input window is returned. The
	// nonce is used by a runner to associate each input with its output.
	// The nonce is represented as an opaque set of bytes.
	//
	// Payload: SideInput#window_mapping_fn FunctionSpec
	StandardPTransforms_MAP_WINDOWS StandardPTransforms_Primitives = 6
	// Used to merge windows during a GroupByKey.
	//
	// Window merging function:
	// Input: KV<nonce, iterable<OriginalWindow>>
	// Output: KV<nonce, KV<iterable<UnmergedOriginalWindow>, iterable<KV<MergedWindow, iterable<ConsumedOriginalWindow>>>>
	//
	// For each set of original windows, a list of all unmerged windows is
	// output alongside a map of merged window to set of consumed windows.
	// All original windows must be contained in either the unmerged original
	// window set or one of the consumed original window sets. Each original
	// window can only be part of one output set. The nonce is used by a runner
	// to associate each input with its output. The nonce is represented as an
	// opaque set of bytes.
	//
	// Payload: WindowingStrategy#window_fn FunctionSpec
	StandardPTransforms_MERGE_WINDOWS StandardPTransforms_Primitives = 7
	// A transform that translates a given element to its human-readable
	// representation.
	//
	// Input: KV<nonce, element>
	// Output: KV<nonce, string>
	//
	// For each given element, the implementation returns the best-effort
	// human-readable representation. When possible, the implementation could
	// call a user-overridable method on the type. For example, Java could
	// call `toString()`, Python could call `str()`, Golang could call
	// `String()`.  The nonce is used by a runner to associate each input with
	// its output. The nonce is represented as an opaque set of bytes.
	//
	// Payload: none
	StandardPTransforms_TO_STRING StandardPTransforms_Primitives = 8
)

// Enum value maps for StandardPTransforms_Primitives.
var (
	StandardPTransforms_Primitives_name = map[int32]string{
		0: "PAR_DO",
		1: "FLATTEN",
		2: "GROUP_BY_KEY",
		3: "IMPULSE",
		4: "ASSIGN_WINDOWS",
		5: "TEST_STREAM",
		6: "MAP_WINDOWS",
		7: "MERGE_WINDOWS",
		8: "TO_STRING",
	}
	StandardPTransforms_Primitives_value = map[string]int32{
		"PAR_DO":         0,
		"FLATTEN":        1,
		"GROUP_BY_KEY":   2,
		"IMPULSE":        3,
		"ASSIGN_WINDOWS": 4,
		"TEST_STREAM":    5,
		"MAP_WINDOWS":    6,
		"MERGE_WINDOWS":  7,
		"TO_STRING":      8,
	}
)

func (x StandardPTransforms_Primitives) Enum() *StandardPTransforms_Primitives {
	p := new(StandardPTransforms_Primitives)
	*p = x
	return p
}

func (x StandardPTransforms_Primitives) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StandardPTransforms_Primitives) Descriptor() protoreflect.EnumDescriptor {
	return file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_enumTypes[1].Descriptor()
}

func (StandardPTransforms_Primitives) Type() protoreflect.EnumType {
	return &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_enumTypes[1]
}

func (x StandardPTransforms_Primitives) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

type StandardPTransforms_DeprecatedPrimitives int32

const (
	// Represents the operation to read a Bounded or Unbounded source.
	// Payload: ReadPayload.
	StandardPTransforms_READ StandardPTransforms_DeprecatedPrimitives = 0
	// Runners should move away from translating `CreatePCollectionView` and treat this as
	// part of the translation for a `ParDo` side input.
	StandardPTransforms_CREATE_VIEW StandardPTransforms_DeprecatedPrimitives = 1
)

// Enum value maps for StandardPTransforms_DeprecatedPrimitives.
var (
	StandardPTransforms_DeprecatedPrimitives_name = map[int32]string{
		0: "READ",
		1: "CREATE_VIEW",
	}
	StandardPTransforms_DeprecatedPrimitives_value = map[string]int32{
		"READ":        0,
		"CREATE_VIEW": 1,
	}
)

func (x StandardPTransforms_DeprecatedPrimitives) Enum() *StandardPTransforms_DeprecatedPrimitives {
	p := new(StandardPTransforms_DeprecatedPrimitives)
	*p = x
	return p
}

func (x StandardPTransforms_DeprecatedPrimitives) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StandardPTransforms_DeprecatedPrimitives) Descriptor() protoreflect.EnumDescriptor {
	return file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_enumTypes[2].Descriptor()
}

func (StandardPTransforms_DeprecatedPrimitives) Type() protoreflect.EnumType {
	return &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_enumTypes[2]
}

func (x StandardPTransforms_DeprecatedPrimitives) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

type StandardPTransforms_Composites int32

const (
	// Represents the Combine.perKey() operation.
	// If this is produced by an SDK, it is assumed that the SDK understands
	// each of CombineComponents.
	// Payload: CombinePayload
	StandardPTransforms_COMBINE_PER_KEY StandardPTransforms_Composites = 0
	// Represents the Combine.globally() operation.
	// If this is produced by an SDK, it is assumed that the SDK understands
	// each of CombineComponents.
	// Payload: CombinePayload
	StandardPTransforms_COMBINE_GLOBALLY StandardPTransforms_Composites = 1
	// Represents the Reshuffle operation.
	StandardPTransforms_RESHUFFLE StandardPTransforms_Composites = 2
	// Less well-known. Payload: WriteFilesPayload.
	StandardPTransforms_WRITE_FILES StandardPTransforms_Composites = 3
	// Payload: PubSubReadPayload.
	StandardPTransforms_PUBSUB_READ StandardPTransforms_Composites = 4
	// Payload: PubSubWritePayload.
	StandardPTransforms_PUBSUB_WRITE StandardPTransforms_Composites = 5
	// Used for pubsub dynamic destinations.
	// Payload: PubSubWritePayload.
	StandardPTransforms_PUBSUB_WRITE_V2 StandardPTransforms_Composites = 7
	// Represents the GroupIntoBatches.WithShardedKey operation.
	// Payload: GroupIntoBatchesPayload
	StandardPTransforms_GROUP_INTO_BATCHES_WITH_SHARDED_KEY StandardPTransforms_Composites = 6
	StandardPTransforms_REDISTRIBUTE_BY_KEY                 StandardPTransforms_Composites = 8
	StandardPTransforms_REDISTRIBUTE_ARBITRARILY            StandardPTransforms_Composites = 9
)

// Enum value maps for StandardPTransforms_Composites.
var (
	StandardPTransforms_Composites_name = map[int32]string{
		0: "COMBINE_PER_KEY",
		1: "COMBINE_GLOBALLY",
		2: "RESHUFFLE",
		3: "WRITE_FILES",
		4: "PUBSUB_READ",
		5: "PUBSUB_WRITE",
		7: "PUBSUB_WRITE_V2",
		6: "GROUP_INTO_BATCHES_WITH_SHARDED_KEY",
		8: "REDISTRIBUTE_BY_KEY",
		9: "REDISTRIBUTE_ARBITRARILY",
	}
	StandardPTransforms_Composites_value = map[string]int32{
		"COMBINE_PER_KEY":                     0,
		"COMBINE_GLOBALLY":                    1,
		"RESHUFFLE":                           2,
		"WRITE_FILES":                         3,
		"PUBSUB_READ":                         4,
		"PUBSUB_WRITE":                        5,
		"PUBSUB_WRITE_V2":                     7,
		"GROUP_INTO_BATCHES_WITH_SHARDED_KEY": 6,
		"REDISTRIBUTE_BY_KEY":                 8,
		"REDISTRIBUTE_ARBITRARILY":            9,
	}
)

func (x StandardPTransforms_Composites) Enum() *StandardPTransforms_Composites {
	p := new(StandardPTransforms_Composites)
	*p = x
	return p
}

func (x StandardPTransforms_Composites) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StandardPTransforms_Composites) Descriptor() protoreflect.EnumDescriptor {
	return file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_enumTypes[3].Descriptor()
}

func (StandardPTransforms_Composites) Type() protoreflect.EnumType {
	return &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_enumTypes[3]
}

func (x StandardPTransforms_Composites) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Payload for all of these: CombinePayload
type StandardPTransforms_CombineComponents int32

const (
	// Represents the Pre-Combine part of a lifted Combine Per Key, as described
	// in the following document:
	// https://s.apache.org/beam-runner-api-combine-model#heading=h.ta0g6ase8z07
	// Payload: CombinePayload
	StandardPTransforms_COMBINE_PER_KEY_PRECOMBINE StandardPTransforms_CombineComponents = 0
	// Represents the Merge Accumulators part of a lifted Combine Per Key, as
	// described in the following document:
	// https://s.apache.org/beam-runner-api-combine-model#heading=h.jco9rvatld5m
	// Payload: CombinePayload
	StandardPTransforms_COMBINE_PER_KEY_MERGE_ACCUMULATORS StandardPTransforms_CombineComponents = 1
	// Represents the Extract Outputs part of a lifted Combine Per Key, as
	// described in the following document:
	// https://s.apache.org/beam-runner-api-combine-model#heading=h.i9i6p8gtl6ku
	// Payload: CombinePayload
	StandardPTransforms_COMBINE_PER_KEY_EXTRACT_OUTPUTS StandardPTransforms_CombineComponents = 2
	// Represents the Combine Grouped Values transform, as described in the
	// following document:
	// https://s.apache.org/beam-runner-api-combine-model#heading=h.aj86ew4v1wk
	// Payload: CombinePayload
	StandardPTransforms_COMBINE_GROUPED_VALUES StandardPTransforms_CombineComponents = 3
	// Represents the Convert To Accumulators transform, as described in the
	// following document:
	// https://s.apache.org/beam-runner-api-combine-model#heading=h.h5697l1scd9x
	// Payload: CombinePayload
	StandardPTransforms_COMBINE_PER_KEY_CONVERT_TO_ACCUMULATORS StandardPTransforms_CombineComponents = 4
)

// Enum value maps for StandardPTransforms_CombineComponents.
var (
	StandardPTransforms_CombineComponents_name = map[int32]string{
		0: "COMBINE_PER_KEY_PRECOMBINE",
		1: "COMBINE_PER_KEY_MERGE_ACCUMULATORS",
		2: "COMBINE_PER_KEY_EXTRACT_OUTPUTS",
		3: "COMBINE_GROUPED_VALUES",
		4: "COMBINE_PER_KEY_CONVERT_TO_ACCUMULATORS",
	}
	StandardPTransforms_CombineComponents_value = map[string]int32{
		"COMBINE_PER_KEY_PRECOMBINE":              0,
		"COMBINE_PER_KEY_MERGE_ACCUMULATORS":      1,
		"COMBINE_PER_KEY_EXTRACT_OUTPUTS":         2,
		"COMBINE_GROUPED_VALUES":                  3,
		"COMBINE_PER_KEY_CONVERT_TO_ACCUMULATORS": 4,
	}
)

func (x StandardPTransforms_CombineComponents) Enum() *StandardPTransforms_CombineComponents {
	p := new(StandardPTransforms_CombineComponents)
	*p = x
	return p
}

func (x StandardPTransforms_CombineComponents) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StandardPTransforms_CombineComponents) Descriptor() protoreflect.EnumDescriptor {
	return file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_enumTypes[4].Descriptor()
}

func (StandardPTransforms_CombineComponents) Type() protoreflect.EnumType {
	return &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_enumTypes[4]
}

func (x StandardPTransforms_CombineComponents) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Payload for all of these: ParDoPayload containing the user's SDF
type StandardPTransforms_SplittableParDoComponents int32

const (
	// Pairs the input element with its initial restriction.
	// Input: element; output: KV(element, restriction).
	StandardPTransforms_PAIR_WITH_RESTRICTION StandardPTransforms_SplittableParDoComponents = 0
	// Splits the restriction of each element/restriction pair and returns the
	// resulting splits, with a corresponding floating point size estimation
	// for each.
	//
	// A reasonable value for size is the number of bytes expected to be
	// produced by this (element, restriction) pair.
	//
	// Input: KV(element, restriction)
	// Output: KV(KV(element, restriction), size))
	StandardPTransforms_SPLIT_AND_SIZE_RESTRICTIONS StandardPTransforms_SplittableParDoComponents = 1
	// Applies the DoFn to every element and restriction.
	//
	// All primary and residuals returned from checkpointing or splitting must
	// have the same type as the input to this transform.
	//
	// Input: KV(KV(element, restriction), size); output: DoFn's output.
	StandardPTransforms_PROCESS_SIZED_ELEMENTS_AND_RESTRICTIONS StandardPTransforms_SplittableParDoComponents = 2
	// Truncates the restriction of each element/restriction pair and returns
	// the finite restriction which will be processed when a pipeline is
	// drained. See
	// https://docs.google.com/document/d/1NExwHlj-2q2WUGhSO4jTu8XGhDPmm3cllSN8IMmWci8/edit#.
	// for additional details about drain.
	//
	// Input: KV(KV(element, restriction), size);
	// Output: KV(KV(element, restriction), size).
	StandardPTransforms_TRUNCATE_SIZED_RESTRICTION StandardPTransforms_SplittableParDoComponents = 3
)

// Enum value maps for StandardPTransforms_SplittableParDoComponents.
var (
	StandardPTransforms_SplittableParDoComponents_name = map[int32]string{
		0: "PAIR_WITH_RESTRICTION",
		1: "SPLIT_AND_SIZE_RESTRICTIONS",
		2: "PROCESS_SIZED_ELEMENTS_AND_RESTRICTIONS",
		3: "TRUNCATE_SIZED_RESTRICTION",
	}
	StandardPTransforms_SplittableParDoComponents_value = map[string]int32{
		"PAIR_WITH_RESTRICTION":                   0,
		"SPLIT_AND_SIZE_RESTRICTIONS":             1,
		"PROCESS_SIZED_ELEMENTS_AND_RESTRICTIONS": 2,
		"TRUNCATE_SIZED_RESTRICTION":              3,
	}
)

func (x StandardPTransforms_SplittableParDoComponents) Enum() *StandardPTransforms_SplittableParDoComponents {
	p := new(StandardPTransforms_SplittableParDoComponents)
	*p = x
	return p
}

func (x StandardPTransforms_SplittableParDoComponents) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StandardPTransforms_SplittableParDoComponents) Descriptor() protoreflect.EnumDescriptor {
	return file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_enumTypes[5].Descriptor()
}

func (StandardPTransforms_SplittableParDoComponents) Type() protoreflect.EnumType {
	return &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_enumTypes[5]
}

func (x StandardPTransforms_SplittableParDoComponents) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Payload for all of these: GroupIntoBatchesPayload
type StandardPTransforms_GroupIntoBatchesComponents int32

const (
	StandardPTransforms_GROUP_INTO_BATCHES StandardPTransforms_GroupIntoBatchesComponents = 0
)

// Enum value maps for StandardPTransforms_GroupIntoBatchesComponents.
var (
	StandardPTransforms_GroupIntoBatchesComponents_name = map[int32]string{
		0: "GROUP_INTO_BATCHES",
	}
	StandardPTransforms_GroupIntoBatchesComponents_value = map[string]int32{
		"GROUP_INTO_BATCHES": 0,
	}
)

func (x StandardPTransforms_GroupIntoBatchesComponents) Enum() *StandardPTransforms_GroupIntoBatchesComponents {
	p := new(StandardPTransforms_GroupIntoBatchesComponents)
	*p = x
	return p
}

func (x StandardPTransforms_GroupIntoBatchesComponents) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StandardPTransforms_GroupIntoBatchesComponents) Descriptor() protoreflect.EnumDescriptor {
	return file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_enumTypes[6].Descriptor()
}

func (StandardPTransforms_GroupIntoBatchesComponents) Type() protoreflect.EnumType {
	return &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_enumTypes[6]
}

func (x StandardPTransforms_GroupIntoBatchesComponents) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

type StandardSideInputTypes_Enum int32

const (
	// Represents a view over a PCollection<V>.
	//
	// StateGetRequests performed on this side input must use
	// StateKey.IterableSideInput.
	StandardSideInputTypes_ITERABLE StandardSideInputTypes_Enum = 0
	// Represents a view over a PCollection<KV<K, V>>.
	//
	// StateGetRequests performed on this side input must use
	// StateKey.MultimapKeysSideInput or StateKey.MultimapSideInput.
	StandardSideInputTypes_MULTIMAP StandardSideInputTypes_Enum = 1
)

// Enum value maps for StandardSideInputTypes_Enum.
var (
	StandardSideInputTypes_Enum_name = map[int32]string{
		0: "ITERABLE",
		1: "MULTIMAP",
	}
	StandardSideInputTypes_Enum_value = map[string]int32{
		"ITERABLE": 0,
		"MULTIMAP": 1,
	}
)

func (x StandardSideInputTypes_Enum) Enum() *StandardSideInputTypes_Enum {
	p := new(StandardSideInputTypes_Enum)
	*p = x
	return p
}

func (x StandardSideInputTypes_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StandardSideInputTypes_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_enumTypes[7].Descriptor()
}

func (StandardSideInputTypes_Enum) Type() protoreflect.EnumType {
	return &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_enumTypes[7]
}

func (x StandardSideInputTypes_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

type StandardUserStateTypes_Enum int32

const (
	// Represents a user state specification that supports a bag.
	//
	// StateRequests performed on this user state must use
	// StateKey.BagUserState.
	StandardUserStateTypes_BAG StandardUserStateTypes_Enum = 0
	// Represents a user state specification that supports a multimap.
	//
	// StateRequests performed on this user state must use
	// StateKey.MultimapKeysUserState or StateKey.MultimapUserState.
	StandardUserStateTypes_MULTIMAP StandardUserStateTypes_Enum = 1
	// Represents a user state specification that supports an ordered list.
	//
	// StateRequests performed on this user state must use
	// StateKey.OrderedListUserState.
	StandardUserStateTypes_ORDERED_LIST StandardUserStateTypes_Enum = 2
)

// Enum value maps for StandardUserStateTypes_Enum.
var (
	StandardUserStateTypes_Enum_name = map[int32]string{
		0: "BAG",
		1: "MULTIMAP",
		2: "ORDERED_LIST",
	}
	StandardUserStateTypes_Enum_value = map[string]int32{
		"BAG":          0,
		"MULTIMAP":     1,
		"ORDERED_LIST": 2,
	}
)

func (x StandardUserStateTypes_Enum) Enum() *StandardUserStateTypes_Enum {
	p := new(StandardUserStateTypes_Enum)
	*p = x
	return p
}

func (x StandardUserStateTypes_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StandardUserStateTypes_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_enumTypes[8].Descriptor()
}

func (StandardUserStateTypes_Enum) Type() protoreflect.EnumType {
	return &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_enumTypes[8]
}

func (x StandardUserStateTypes_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

type IsBounded_Enum int32

const (
	IsBounded_UNSPECIFIED IsBounded_Enum = 0
	IsBounded_UNBOUNDED   IsBounded_Enum = 1
	IsBounded_BOUNDED     IsBounded_Enum = 2
)

// Enum value maps for IsBounded_Enum.
var (
	IsBounded_Enum_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "UNBOUNDED",
		2: "BOUNDED",
	}
	IsBounded_Enum_value = map[string]int32{
		"UNSPECIFIED": 0,
		"UNBOUNDED":   1,
		"BOUNDED":     2,
	}
)

func (x IsBounded_Enum) Enum() *IsBounded_Enum {
	p := new(IsBounded_Enum)
	*p = x
	return p
}

func (x IsBounded_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IsBounded_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_enumTypes[9].Descriptor()
}

func (IsBounded_Enum) Type() protoreflect.EnumType {
	return &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_enumTypes[9]
}

func (x IsBounded_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

type StandardCoders_Enum int32

const (
	// Components: None
	StandardCoders_BYTES StandardCoders_Enum = 0
	// Components: None
	StandardCoders_STRING_UTF8 StandardCoders_Enum = 10
	// Components: The key and value coder, in that order.
	StandardCoders_KV StandardCoders_Enum = 1
	// Components: None
	StandardCoders_BOOL StandardCoders_Enum = 12
	// Variable length Encodes a 64-bit integer.
	// Components: None
	StandardCoders_VARINT StandardCoders_Enum = 2
	// Encodes the floating point value as a big-endian 64-bit integer
	// according to the IEEE 754 double format bit layout.
	// Components: None
	StandardCoders_DOUBLE StandardCoders_Enum = 11
	// Encodes an iterable of elements.
	//
	// The encoding for an iterable [e1...eN] of known length N is
	//
	//	fixed32(N)
	//	encode(e1) encode(e2) encode(e3) ... encode(eN)
	//
	// If the length is unknown, it is batched up into groups of size b1..bM
	// and encoded as
	//
	//	fixed32(-1)
	//	varInt64(b1) encode(e1) encode(e2) ... encode(e_b1)
	//	varInt64(b2) encode(e_(b1+1)) encode(e_(b1+2)) ... encode(e_(b1+b2))
	//	...
	//	varInt64(bM) encode(e_(N-bM+1)) encode(e_(N-bM+2)) ... encode(eN)
	//	varInt64(0)
	//
	// Components: Coder for a single element.
	StandardCoders_ITERABLE StandardCoders_Enum = 3
	// Encodes a timer containing a user key, a dynamic timer tag, a clear bit,
	// a fire timestamp, a hold timestamp, the windows and the paneinfo.
	// The encoding is represented as:
	//
	//	user key - user defined key, uses the component coder.
	//	dynamic timer tag - a string which identifies a timer.
	//	windows - uses component coders.
	//	clear bit - a boolean set for clearing the timer.
	//	fire timestamp - a big endian 8 byte integer representing millis-since-epoch.
	//	  The encoded representation is shifted so that the byte representation of
	//	  negative values are lexicographically ordered before the byte representation
	//	  of positive values. This is typically done by subtracting -9223372036854775808
	//	  from the value and encoding it as a signed big endian integer. Example values:
	//
	//	  -9223372036854775808: 00 00 00 00 00 00 00 00
	//	                  -255: 7F FF FF FF FF FF FF 01
	//	                    -1: 7F FF FF FF FF FF FF FF
	//	                     0: 80 00 00 00 00 00 00 00
	//	                     1: 80 00 00 00 00 00 00 01
	//	                   256: 80 00 00 00 00 00 01 00
	//	   9223372036854775807: FF FF FF FF FF FF FF FF
	//	hold timestamp - similar to the fire timestamp.
	//	paneinfo - similar to the paneinfo of the windowed_value.
	//
	// Components: Coder for the key and windows.
	StandardCoders_TIMER StandardCoders_Enum = 4
	// Components: None
	StandardCoders_INTERVAL_WINDOW StandardCoders_Enum = 5
	// Components: The coder to attach a length prefix to
	StandardCoders_LENGTH_PREFIX StandardCoders_Enum = 6
	// Components: None
	StandardCoders_GLOBAL_WINDOW StandardCoders_Enum = 7
	// Encodes an element, the windows it is in, the timestamp of the element,
	// and the pane of the element. The encoding is represented as:
	// timestamp windows pane element
	//
	//	timestamp - A big endian 8 byte integer representing millis-since-epoch.
	//	  The encoded representation is shifted so that the byte representation
	//	  of negative values are lexicographically ordered before the byte
	//	  representation of positive values. This is typically done by
	//	  subtracting -9223372036854775808 from the value and encoding it as a
	//	  signed big endian integer. Example values:
	//
	//	  -9223372036854775808: 00 00 00 00 00 00 00 00
	//	                  -255: 7F FF FF FF FF FF FF 01
	//	                    -1: 7F FF FF FF FF FF FF FF
	//	                     0: 80 00 00 00 00 00 00 00
	//	                     1: 80 00 00 00 00 00 00 01
	//	                   256: 80 00 00 00 00 00 01 00
	//	   9223372036854775807: FF FF FF FF FF FF FF FF
	//
	//	windows - The windows are encoded using the beam:coder:iterable:v1
	//	  format, where the windows are encoded using the supplied window
	//	  coder.
	//
	//	pane - The first byte of the pane info determines which type of
	//	  encoding is used, as well as the is_first, is_last, and timing
	//	  fields. If this byte is bits [0 1 2 3 4 5 6 7], then:
	//	  * bits [0 1 2 3] determine the encoding as follows:
	//	      0000 - The entire pane info is encoded as a single byte.
	//	             The is_first, is_last, and timing fields are encoded
	//	             as below, and the index and non-speculative index are
	//	             both zero (and hence are not encoded here).
	//	      0001 - The pane info is encoded as this byte plus a single
	//	             VarInt encoed integer representing the pane index. The
	//	             non-speculative index can be derived as follows:
	//	               -1 if the pane is early, otherwise equal to index.
	//	      0010 - The pane info is encoded as this byte plus two VarInt
	//	             encoded integers representing the pane index and
	//	             non-speculative index respectively.
	//	  * bits [4 5] encode the timing as follows:
	//	      00 - early
	//	      01 - on time
	//	      10 - late
	//	      11 - unknown
	//	  * bit 6 is 1 if this is the first pane, 0 otherwise.
	//	  * bit 7 is 1 if this is the last pane, 0 otherwise.
	//
	//	element - The element incoded using the supplied element coder.
	//
	// Components: The element coder and the window coder, in that order.
	StandardCoders_WINDOWED_VALUE StandardCoders_Enum = 8
	// A windowed value coder with parameterized timestamp, windows and pane info.
	// Encodes an element with only the value of the windowed value.
	// Decodes the value and assigns the parameterized timestamp, windows and pane info to the
	// windowed value.
	// Components: The element coder and the window coder, in that order
	// The payload of this coder is an encoded windowed value using the
	// beam:coder:windowed_value:v1 coder parameterized by a beam:coder:bytes:v1
	// element coder and the window coder that this param_windowed_value coder uses.
	StandardCoders_PARAM_WINDOWED_VALUE StandardCoders_Enum = 14
	// Encodes an iterable of elements, some of which may be stored elsewhere.
	//
	// The encoding for a state-backed iterable is the same as that for
	// an iterable, but the final varInt64(0) terminating the set of batches
	// may instead be replaced by
	//
	//	varInt64(-1)
	//	varInt64(len(token))
	//	token
	//
	// where token is an opaque byte string that can be used to fetch the
	// remainder of the iterable (e.g. over the state API).
	//
	// Components: Coder for a single element.
	StandardCoders_STATE_BACKED_ITERABLE StandardCoders_Enum = 9
	// Encodes an arbitrary user defined window and its max timestamp (inclusive).
	// The encoding format is:
	//
	//	maxTimestamp window
	//
	//	maxTimestamp - A big endian 8 byte integer representing millis-since-epoch.
	//	  The encoded representation is shifted so that the byte representation
	//	  of negative values are lexicographically ordered before the byte
	//	  representation of positive values. This is typically done by
	//	  subtracting -9223372036854775808 from the value and encoding it as a
	//	  signed big endian integer. Example values:
	//
	//	  -9223372036854775808: 00 00 00 00 00 00 00 00
	//	                  -255: 7F FF FF FF FF FF FF 01
	//	                    -1: 7F FF FF FF FF FF FF FF
	//	                     0: 80 00 00 00 00 00 00 00
	//	                     1: 80 00 00 00 00 00 00 01
	//	                   256: 80 00 00 00 00 00 01 00
	//	   9223372036854775807: FF FF FF FF FF FF FF FF
	//
	//	window - the window is encoded using the supplied window coder.
	//
	// Components: Coder for the custom window type.
	StandardCoders_CUSTOM_WINDOW StandardCoders_Enum = 16
	// Encodes a "row", an element with a known schema, defined by an
	// instance of Schema from schema.proto.
	//
	// A row is encoded as the concatenation of:
	//   - The number of attributes in the schema, encoded with
	//     beam:coder:varint:v1. This makes it possible to detect certain
	//     allowed schema changes (appending or removing columns) in
	//     long-running streaming pipelines.
	//   - A byte array representing a packed bitset indicating null fields (a
	//     1 indicating a null) encoded with beam:coder:bytes:v1. The unused
	//     bits in the last byte must be set to 0. If there are no nulls an
	//     empty byte array is encoded.
	//     The two-byte bitset (not including the lenghth-prefix) for the row
	//     [NULL, 0, 0, 0, NULL, 0, 0, NULL, 0, NULL] would be
	//     [0b10010001, 0b00000010]
	//   - An encoding for each non-null field, concatenated together.
	//
	// Schema types are mapped to coders as follows:
	//
	//	AtomicType:
	//	  BYTE:      not yet a standard coder (https://github.com/apache/beam/issues/19815)
	//	  INT16:     not yet a standard coder (https://github.com/apache/beam/issues/19815)
	//	  INT32:     beam:coder:varint:v1
	//	  INT64:     beam:coder:varint:v1
	//	  FLOAT:     not yet a standard coder (https://github.com/apache/beam/issues/19815)
	//	  DOUBLE:    beam:coder:double:v1
	//	  STRING:    beam:coder:string_utf8:v1
	//	  BOOLEAN:   beam:coder:bool:v1
	//	  BYTES:     beam:coder:bytes:v1
	//	ArrayType:   beam:coder:iterable:v1 (always has a known length)
	//	MapType:     not a standard coder, specification defined below.
	//	RowType:     beam:coder:row:v1
	//	LogicalType: Uses the coder for its representation.
	//
	// The MapType is encoded by:
	//   - An INT32 representing the size of the map (N)
	//   - Followed by N interleaved keys and values, encoded with their
	//     corresponding coder.
	//
	// Nullable types in container types (ArrayType, MapType) per the
	// encoding described for general Nullable types below.
	//
	// Logical types understood by all SDKs should be defined in schema.proto.
	// Example of well known logical types:
	//
	//	beam:logical_type:schema:v1
	//	- Representation type: BYTES
	//	- A Beam Schema stored as a serialized proto.
	//
	// The payload for RowCoder is an instance of Schema.
	// Components: None
	StandardCoders_ROW StandardCoders_Enum = 13
	// Encodes a user key and a shard id which is an opaque byte string.
	//
	// The encoding for a sharded key consists of a shard id byte string and the
	// encoded user key in the following order:
	//
	//   - shard id using beam:coder:bytes:v1
	//   - encoded user key
	//
	// Examples:
	// user key with an empty shard id
	//
	//	0x00
	//	encode(user_key)
	//
	// user key with a shard id taking up two bytes.
	//
	//	0x02
	//	0x11 0x22
	//	encode(user_key)
	//
	// Components: the user key coder.
	StandardCoders_SHARDED_KEY StandardCoders_Enum = 15
	// Wraps a coder of a potentially null value
	// A Nullable Type is encoded by:
	//   - A one byte null indicator, 0x00 for null values, or 0x01 for present
	//     values.
	//   - For present values the null indicator is followed by the value
	//     encoded with it's corresponding coder.
	//
	// Components: single coder for the value
	StandardCoders_NULLABLE StandardCoders_Enum = 17
)

// Enum value maps for StandardCoders_Enum.
var (
	StandardCoders_Enum_name = map[int32]string{
		0:  "BYTES",
		10: "STRING_UTF8",
		1:  "KV",
		12: "BOOL",
		2:  "VARINT",
		11: "DOUBLE",
		3:  "ITERABLE",
		4:  "TIMER",
		5:  "INTERVAL_WINDOW",
		6:  "LENGTH_PREFIX",
		7:  "GLOBAL_WINDOW",
		8:  "WINDOWED_VALUE",
		14: "PARAM_WINDOWED_VALUE",
		9:  "STATE_BACKED_ITERABLE",
		16: "CUSTOM_WINDOW",
		13: "ROW",
		15: "SHARDED_KEY",
		17: "NULLABLE",
	}
	StandardCoders_Enum_value = map[string]int32{
		"BYTES":                 0,
		"STRING_UTF8":           10,
		"KV":                    1,
		"BOOL":                  12,
		"VARINT":                2,
		"DOUBLE":                11,
		"ITERABLE":              3,
		"TIMER":                 4,
		"INTERVAL_WINDOW":       5,
		"LENGTH_PREFIX":         6,
		"GLOBAL_WINDOW":         7,
		"WINDOWED_VALUE":        8,
		"PARAM_WINDOWED_VALUE":  14,
		"STATE_BACKED_ITERABLE": 9,
		"CUSTOM_WINDOW":         16,
		"ROW":                   13,
		"SHARDED_KEY":           15,
		"NULLABLE":              17,
	}
)

func (x StandardCoders_Enum) Enum() *StandardCoders_Enum {
	p := new(StandardCoders_Enum)
	*p = x
	return p
}

func (x StandardCoders_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StandardCoders_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_enumTypes[10].Descriptor()
}

func (StandardCoders_Enum) Type() protoreflect.EnumType {
	return &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_enumTypes[10]
}

func (x StandardCoders_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

type MergeStatus_Enum int32

const (
	MergeStatus_UNSPECIFIED MergeStatus_Enum = 0
	// The WindowFn does not require merging.
	// Examples: global window, FixedWindows, SlidingWindows
	MergeStatus_NON_MERGING MergeStatus_Enum = 1
	// The WindowFn is merging and the PCollection has not had merging
	// performed.
	// Example: Sessions prior to a GroupByKey
	MergeStatus_NEEDS_MERGE MergeStatus_Enum = 2
	// The WindowFn is merging and the PCollection has had merging occur
	// already.
	// Example: Sessions after a GroupByKey
	MergeStatus_ALREADY_MERGED MergeStatus_Enum = 3
)

// Enum value maps for MergeStatus_Enum.
var (
	MergeStatus_Enum_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "NON_MERGING",
		2: "NEEDS_MERGE",
		3: "ALREADY_MERGED",
	}
	MergeStatus_Enum_value = map[string]int32{
		"UNSPECIFIED":    0,
		"NON_MERGING":    1,
		"NEEDS_MERGE":    2,
		"ALREADY_MERGED": 3,
	}
)

func (x MergeStatus_Enum) Enum() *MergeStatus_Enum {
	p := new(MergeStatus_Enum)
	*p = x
	return p
}

func (x MergeStatus_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MergeStatus_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_enumTypes[11].Descriptor()
}

func (MergeStatus_Enum) Type() protoreflect.EnumType {
	return &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_enumTypes[11]
}

func (x MergeStatus_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

type AccumulationMode_Enum int32

const (
	AccumulationMode_UNSPECIFIED AccumulationMode_Enum = 0
	// The aggregation is discarded when it is output
	AccumulationMode_DISCARDING AccumulationMode_Enum = 1
	// The aggregation is accumulated across outputs
	AccumulationMode_ACCUMULATING AccumulationMode_Enum = 2
	// The aggregation emits retractions when it is output
	AccumulationMode_RETRACTING AccumulationMode_Enum = 3
)

// Enum value maps for AccumulationMode_Enum.
var (
	AccumulationMode_Enum_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "DISCARDING",
		2: "ACCUMULATING",
		3: "RETRACTING",
	}
	AccumulationMode_Enum_value = map[string]int32{
		"UNSPECIFIED":  0,
		"DISCARDING":   1,
		"ACCUMULATING": 2,
		"RETRACTING":   3,
	}
)

func (x AccumulationMode_Enum) Enum() *AccumulationMode_Enum {
	p := new(AccumulationMode_Enum)
	*p = x
	return p
}

func (x AccumulationMode_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccumulationMode_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_enumTypes[12].Descriptor()
}

func (AccumulationMode_Enum) Type() protoreflect.EnumType {
	return &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_enumTypes[12]
}

func (x AccumulationMode_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

type ClosingBehavior_Enum int32

const (
	ClosingBehavior_UNSPECIFIED ClosingBehavior_Enum = 0
	// Emit output when a window expires, whether or not there has been
	// any new data since the last output.
	ClosingBehavior_EMIT_ALWAYS ClosingBehavior_Enum = 1
	// Only emit output when new data has arrives since the last output
	ClosingBehavior_EMIT_IF_NONEMPTY ClosingBehavior_Enum = 2
)

// Enum value maps for ClosingBehavior_Enum.
var (
	ClosingBehavior_Enum_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "EMIT_ALWAYS",
		2: "EMIT_IF_NONEMPTY",
	}
	ClosingBehavior_Enum_value = map[string]int32{
		"UNSPECIFIED":      0,
		"EMIT_ALWAYS":      1,
		"EMIT_IF_NONEMPTY": 2,
	}
)

func (x ClosingBehavior_Enum) Enum() *ClosingBehavior_Enum {
	p := new(ClosingBehavior_Enum)
	*p = x
	return p
}

func (x ClosingBehavior_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClosingBehavior_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_enumTypes[13].Descriptor()
}

func (ClosingBehavior_Enum) Type() protoreflect.EnumType {
	return &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_enumTypes[13]
}

func (x ClosingBehavior_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

type OnTimeBehavior_Enum int32

const (
	OnTimeBehavior_UNSPECIFIED OnTimeBehavior_Enum = 0
	// Always fire the on-time pane. Even if there is no new data since
	// the previous firing, an element will be produced.
	OnTimeBehavior_FIRE_ALWAYS OnTimeBehavior_Enum = 1
	// Only fire the on-time pane if there is new data since the previous firing.
	OnTimeBehavior_FIRE_IF_NONEMPTY OnTimeBehavior_Enum = 2
)

// Enum value maps for OnTimeBehavior_Enum.
var (
	OnTimeBehavior_Enum_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "FIRE_ALWAYS",
		2: "FIRE_IF_NONEMPTY",
	}
	OnTimeBehavior_Enum_value = map[string]int32{
		"UNSPECIFIED":      0,
		"FIRE_ALWAYS":      1,
		"FIRE_IF_NONEMPTY": 2,
	}
)

func (x OnTimeBehavior_Enum) Enum() *OnTimeBehavior_Enum {
	p := new(OnTimeBehavior_Enum)
	*p = x
	return p
}

func (x OnTimeBehavior_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OnTimeBehavior_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_enumTypes[14].Descriptor()
}

func (OnTimeBehavior_Enum) Type() protoreflect.EnumType {
	return &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_enumTypes[14]
}

func (x OnTimeBehavior_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

type OutputTime_Enum int32

const (
	OutputTime_UNSPECIFIED OutputTime_Enum = 0
	// The output has the timestamp of the end of the window.
	OutputTime_END_OF_WINDOW OutputTime_Enum = 1
	// The output has the latest timestamp of the input elements since
	// the last output.
	OutputTime_LATEST_IN_PANE OutputTime_Enum = 2
	// The output has the earliest timestamp of the input elements since
	// the last output.
	OutputTime_EARLIEST_IN_PANE OutputTime_Enum = 3
)

// Enum value maps for OutputTime_Enum.
var (
	OutputTime_Enum_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "END_OF_WINDOW",
		2: "LATEST_IN_PANE",
		3: "EARLIEST_IN_PANE",
	}
	OutputTime_Enum_value = map[string]int32{
		"UNSPECIFIED":      0,
		"END_OF_WINDOW":    1,
		"LATEST_IN_PANE":   2,
		"EARLIEST_IN_PANE": 3,
	}
)

func (x OutputTime_Enum) Enum() *OutputTime_Enum {
	p := new(OutputTime_Enum)
	*p = x
	return p
}

func (x OutputTime_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OutputTime_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_enumTypes[15].Descriptor()
}

func (OutputTime_Enum) Type() protoreflect.EnumType {
	return &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_enumTypes[15]
}

func (x OutputTime_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

type TimeDomain_Enum int32

const (
	TimeDomain_UNSPECIFIED TimeDomain_Enum = 0
	// Event time is time from the perspective of the data
	TimeDomain_EVENT_TIME TimeDomain_Enum = 1
	// Processing time is time from the perspective of the
	// execution of your pipeline
	TimeDomain_PROCESSING_TIME TimeDomain_Enum = 2
)

// Enum value maps for TimeDomain_Enum.
var (
	TimeDomain_Enum_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "EVENT_TIME",
		2: "PROCESSING_TIME",
	}
	TimeDomain_Enum_value = map[string]int32{
		"UNSPECIFIED":     0,
		"EVENT_TIME":      1,
		"PROCESSING_TIME": 2,
	}
)

func (x TimeDomain_Enum) Enum() *TimeDomain_Enum {
	p := new(TimeDomain_Enum)
	*p = x
	return p
}

func (x TimeDomain_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TimeDomain_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_enumTypes[16].Descriptor()
}

func (TimeDomain_Enum) Type() protoreflect.EnumType {
	return &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_enumTypes[16]
}

func (x TimeDomain_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

type StandardArtifacts_Types int32

const (
	// A URN for locally-accessible artifact files.
	// payload: ArtifactFilePayload
	StandardArtifacts_FILE StandardArtifacts_Types = 0
	// A URN for artifacts described by URLs.
	// payload: ArtifactUrlPayload
	StandardArtifacts_URL StandardArtifacts_Types = 1
	// A URN for artifacts embedded in ArtifactInformation proto.
	// payload: EmbeddedFilePayload.
	StandardArtifacts_EMBEDDED StandardArtifacts_Types = 2
	// A URN for Python artifacts hosted on PYPI.
	// payload: PypiPayload
	StandardArtifacts_PYPI StandardArtifacts_Types = 3
	// A URN for Java artifacts hosted on a Maven repository.
	// payload: MavenPayload
	StandardArtifacts_MAVEN StandardArtifacts_Types = 4
	// A URN for deferred artifacts.
	// payload: DeferredArtifactPayload
	StandardArtifacts_DEFERRED StandardArtifacts_Types = 5
)

// Enum value maps for StandardArtifacts_Types.
var (
	StandardArtifacts_Types_name = map[int32]string{
		0: "FILE",
		1: "URL",
		2: "EMBEDDED",
		3: "PYPI",
		4: "MAVEN",
		5: "DEFERRED",
	}
	StandardArtifacts_Types_value = map[string]int32{
		"FILE":     0,
		"URL":      1,
		"EMBEDDED": 2,
		"PYPI":     3,
		"MAVEN":    4,
		"DEFERRED": 5,
	}
)

func (x StandardArtifacts_Types) Enum() *StandardArtifacts_Types {
	p := new(StandardArtifacts_Types)
	*p = x
	return p
}

func (x StandardArtifacts_Types) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StandardArtifacts_Types) Descriptor() protoreflect.EnumDescriptor {
	return file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_enumTypes[17].Descriptor()
}

func (StandardArtifacts_Types) Type() protoreflect.EnumType {
	return &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_enumTypes[17]
}

func (x StandardArtifacts_Types) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

type StandardArtifacts_Roles int32

const (
	// A URN for staging-to role.
	// payload: ArtifactStagingToRolePayload
	StandardArtifacts_STAGING_TO StandardArtifacts_Roles = 0
	// A URN for pip-requirements-file role.
	// payload: None
	StandardArtifacts_PIP_REQUIREMENTS_FILE StandardArtifacts_Roles = 1
	// A URN for the Go worker binary role.
	// This represents the executable for a Go SDK environment.
	// A Go environment may have one such artifact with this role.
	// payload: None
	StandardArtifacts_GO_WORKER_BINARY StandardArtifacts_Roles = 2
)

// Enum value maps for StandardArtifacts_Roles.
var (
	StandardArtifacts_Roles_name = map[int32]string{
		0: "STAGING_TO",
		1: "PIP_REQUIREMENTS_FILE",
		2: "GO_WORKER_BINARY",
	}
	StandardArtifacts_Roles_value = map[string]int32{
		"STAGING_TO":            0,
		"PIP_REQUIREMENTS_FILE": 1,
		"GO_WORKER_BINARY":      2,
	}
)

func (x StandardArtifacts_Roles) Enum() *StandardArtifacts_Roles {
	p := new(StandardArtifacts_Roles)
	*p = x
	return p
}

func (x StandardArtifacts_Roles) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StandardArtifacts_Roles) Descriptor() protoreflect.EnumDescriptor {
	return file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_enumTypes[18].Descriptor()
}

func (StandardArtifacts_Roles) Type() protoreflect.EnumType {
	return &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_enumTypes[18]
}

func (x StandardArtifacts_Roles) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

type StandardEnvironments_Environments int32

const (
	// A managed docker container to run user code.
	// Payload should be DockerPayload.
	StandardEnvironments_DOCKER StandardEnvironments_Environments = 0
	// A managed native process to run user code.
	// Payload should be ProcessPayload.
	StandardEnvironments_PROCESS StandardEnvironments_Environments = 1
	// An external non managed process to run user code.
	// Payload should be ExternalPayload.
	StandardEnvironments_EXTERNAL StandardEnvironments_Environments = 2
	// Used as a stub when context is missing a runner-provided default environment.
	StandardEnvironments_DEFAULT StandardEnvironments_Environments = 3
	// A selection of equivalent fully-specified environments a runner may use.
	// Note that this environment itself does not declare any dependencies or capabilities,
	// as those may differ among the several alternatives.
	// Payload should be AnyOfEnvironmentPayload.
	StandardEnvironments_ANYOF StandardEnvironments_Environments = 4
)

// Enum value maps for StandardEnvironments_Environments.
var (
	StandardEnvironments_Environments_name = map[int32]string{
		0: "DOCKER",
		1: "PROCESS",
		2: "EXTERNAL",
		3: "DEFAULT",
		4: "ANYOF",
	}
	StandardEnvironments_Environments_value = map[string]int32{
		"DOCKER":   0,
		"PROCESS":  1,
		"EXTERNAL": 2,
		"DEFAULT":  3,
		"ANYOF":    4,
	}
)

func (x StandardEnvironments_Environments) Enum() *StandardEnvironments_Environments {
	p := new(StandardEnvironments_Environments)
	*p = x
	return p
}

func (x StandardEnvironments_Environments) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StandardEnvironments_Environments) Descriptor() protoreflect.EnumDescriptor {
	return file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_enumTypes[19].Descriptor()
}

func (StandardEnvironments_Environments) Type() protoreflect.EnumType {
	return &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_enumTypes[19]
}

func (x StandardEnvironments_Environments) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

type StandardProtocols_Enum int32

const (
	// Indicates suport for progress reporting via the legacy Metrics proto.
	StandardProtocols_LEGACY_PROGRESS_REPORTING StandardProtocols_Enum = 0
	// Indicates suport for progress reporting via the new MonitoringInfo proto.
	StandardProtocols_PROGRESS_REPORTING StandardProtocols_Enum = 1
	// Indicates suport for worker status protocol defined at
	// https://s.apache.org/beam-fn-api-harness-status.
	StandardProtocols_WORKER_STATUS StandardProtocols_Enum = 2
	// Indicates this SDK can take advantage of multiple cores when processing
	// concurrent process bundle requests. (Note that all SDKs must process
	// an unbounded number of concurrent process bundle requests; this capability
	// simply indicates this SDK can actually parallelize the work across multiple
	// cores.
	StandardProtocols_MULTI_CORE_BUNDLE_PROCESSING StandardProtocols_Enum = 3
	// Indicates this SDK can cheaply spawn sibling workers (e.g. within the
	// same container) to work around the fact that it cannot take advantage
	// of multiple cores (i.e. MULTI_CORE_BUNDLE_PROCESSING is not set).
	StandardProtocols_SIBLING_WORKERS StandardProtocols_Enum = 5
	// Indicates that this SDK handles the InstructionRequest of type
	// HarnessMonitoringInfosRequest.
	// A request to provide full MonitoringInfo data associated with
	// the entire SDK harness process, not specific to a bundle.
	StandardProtocols_HARNESS_MONITORING_INFOS StandardProtocols_Enum = 4
	// Indicates that this SDK can process elements embedded in the
	// ProcessBundleRequest. See more about the protocol at
	// https://s.apache.org/beam-fn-api-control-data-embedding
	StandardProtocols_CONTROL_REQUEST_ELEMENTS_EMBEDDING StandardProtocols_Enum = 6
	// Indicates that this SDK can cache user state and side inputs across
	// bundle boundaries. This is a hint to runners that runners can rely on the
	// SDKs ability to store the data in memory reducing the amount of memory
	// used overall.
	StandardProtocols_STATE_CACHING StandardProtocols_Enum = 7
	// Indicates that this SDK can sample in-flight elements. These samples can
	// then be queried using the SampleDataRequest. Samples are uniquely associated
	// with a PCollection. Meaning, samples are taken for each PCollection
	// during bundle processing. This is disabled by default and enabled with the
	// `enable_data_sampling` experiment.
	StandardProtocols_DATA_SAMPLING StandardProtocols_Enum = 8
	// Indicates whether the SDK sets the consuming_received_data field on
	// the ProcessBundleProgressResponse messages.
	StandardProtocols_SDK_CONSUMING_RECEIVED_DATA StandardProtocols_Enum = 9
	// Indicates whether the SDK supports ordered list state.
	StandardProtocols_ORDERED_LIST_STATE StandardProtocols_Enum = 10
)

// Enum value maps for StandardProtocols_Enum.
var (
	StandardProtocols_Enum_name = map[int32]string{
		0:  "LEGACY_PROGRESS_REPORTING",
		1:  "PROGRESS_REPORTING",
		2:  "WORKER_STATUS",
		3:  "MULTI_CORE_BUNDLE_PROCESSING",
		5:  "SIBLING_WORKERS",
		4:  "HARNESS_MONITORING_INFOS",
		6:  "CONTROL_REQUEST_ELEMENTS_EMBEDDING",
		7:  "STATE_CACHING",
		8:  "DATA_SAMPLING",
		9:  "SDK_CONSUMING_RECEIVED_DATA",
		10: "ORDERED_LIST_STATE",
	}
	StandardProtocols_Enum_value = map[string]int32{
		"LEGACY_PROGRESS_REPORTING":          0,
		"PROGRESS_REPORTING":                 1,
		"WORKER_STATUS":                      2,
		"MULTI_CORE_BUNDLE_PROCESSING":       3,
		"SIBLING_WORKERS":                    5,
		"HARNESS_MONITORING_INFOS":           4,
		"CONTROL_REQUEST_ELEMENTS_EMBEDDING": 6,
		"STATE_CACHING":                      7,
		"DATA_SAMPLING":                      8,
		"SDK_CONSUMING_RECEIVED_DATA":        9,
		"ORDERED_LIST_STATE":                 10,
	}
)

func (x StandardProtocols_Enum) Enum() *StandardProtocols_Enum {
	p := new(StandardProtocols_Enum)
	*p = x
	return p
}

func (x StandardProtocols_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StandardProtocols_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_enumTypes[20].Descriptor()
}

func (StandardProtocols_Enum) Type() protoreflect.EnumType {
	return &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_enumTypes[20]
}

func (x StandardProtocols_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

type StandardRunnerProtocols_Enum int32

const (
	// Indicates suport the MonitoringInfo short id protocol.
	StandardRunnerProtocols_MONITORING_INFO_SHORT_IDS StandardRunnerProtocols_Enum = 0
	// Indicates that this runner can process elements embedded in the
	// ProcessBundleResponse. See more about the protocol at
	// https://s.apache.org/beam-fn-api-control-data-embedding
	StandardRunnerProtocols_CONTROL_RESPONSE_ELEMENTS_EMBEDDING StandardRunnerProtocols_Enum = 6
	// Indicates that this runner can handle the multimap_keys_values_side_input
	// style read of a multimap side input.
	StandardRunnerProtocols_MULTIMAP_KEYS_VALUES_SIDE_INPUT StandardRunnerProtocols_Enum = 7
)

// Enum value maps for StandardRunnerProtocols_Enum.
var (
	StandardRunnerProtocols_Enum_name = map[int32]string{
		0: "MONITORING_INFO_SHORT_IDS",
		6: "CONTROL_RESPONSE_ELEMENTS_EMBEDDING",
		7: "MULTIMAP_KEYS_VALUES_SIDE_INPUT",
	}
	StandardRunnerProtocols_Enum_value = map[string]int32{
		"MONITORING_INFO_SHORT_IDS":           0,
		"CONTROL_RESPONSE_ELEMENTS_EMBEDDING": 6,
		"MULTIMAP_KEYS_VALUES_SIDE_INPUT":     7,
	}
)

func (x StandardRunnerProtocols_Enum) Enum() *StandardRunnerProtocols_Enum {
	p := new(StandardRunnerProtocols_Enum)
	*p = x
	return p
}

func (x StandardRunnerProtocols_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StandardRunnerProtocols_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_enumTypes[21].Descriptor()
}

func (StandardRunnerProtocols_Enum) Type() protoreflect.EnumType {
	return &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_enumTypes[21]
}

func (x StandardRunnerProtocols_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

type StandardRequirements_Enum int32

const (
	// This requirement indicates the state_specs and timer_family_specs fields of ParDo
	// transform payloads must be inspected.
	StandardRequirements_REQUIRES_STATEFUL_PROCESSING StandardRequirements_Enum = 0
	// This requirement indicates the requests_finalization field of ParDo
	// transform payloads must be inspected.
	StandardRequirements_REQUIRES_BUNDLE_FINALIZATION StandardRequirements_Enum = 1
	// This requirement indicates the requires_stable_input field of ParDo
	// transform payloads must be inspected.
	StandardRequirements_REQUIRES_STABLE_INPUT StandardRequirements_Enum = 2
	// This requirement indicates the requires_time_sorted_input field of ParDo
	// transform payloads must be inspected.
	StandardRequirements_REQUIRES_TIME_SORTED_INPUT StandardRequirements_Enum = 3
	// This requirement indicates the restriction_coder_id field of ParDo
	// transform payloads must be inspected.
	StandardRequirements_REQUIRES_SPLITTABLE_DOFN StandardRequirements_Enum = 4
	// This requirement indicates that the on_window_expiration_timer_family_spec field
	// of ParDo transform payloads must be inspected.
	StandardRequirements_REQUIRES_ON_WINDOW_EXPIRATION StandardRequirements_Enum = 5
)

// Enum value maps for StandardRequirements_Enum.
var (
	StandardRequirements_Enum_name = map[int32]string{
		0: "REQUIRES_STATEFUL_PROCESSING",
		1: "REQUIRES_BUNDLE_FINALIZATION",
		2: "REQUIRES_STABLE_INPUT",
		3: "REQUIRES_TIME_SORTED_INPUT",
		4: "REQUIRES_SPLITTABLE_DOFN",
		5: "REQUIRES_ON_WINDOW_EXPIRATION",
	}
	StandardRequirements_Enum_value = map[string]int32{
		"REQUIRES_STATEFUL_PROCESSING":  0,
		"REQUIRES_BUNDLE_FINALIZATION":  1,
		"REQUIRES_STABLE_INPUT":         2,
		"REQUIRES_TIME_SORTED_INPUT":    3,
		"REQUIRES_SPLITTABLE_DOFN":      4,
		"REQUIRES_ON_WINDOW_EXPIRATION": 5,
	}
)

func (x StandardRequirements_Enum) Enum() *StandardRequirements_Enum {
	p := new(StandardRequirements_Enum)
	*p = x
	return p
}

func (x StandardRequirements_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StandardRequirements_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_enumTypes[22].Descriptor()
}

func (StandardRequirements_Enum) Type() protoreflect.EnumType {
	return &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_enumTypes[22]
}

func (x StandardRequirements_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

type StandardDisplayData_DisplayData int32

const (
	// A string label and value. Has a payload containing an encoded
	// LabelledPayload.
	StandardDisplayData_LABELLED StandardDisplayData_DisplayData = 0
)

// Enum value maps for StandardDisplayData_DisplayData.
var (
	StandardDisplayData_DisplayData_name = map[int32]string{
		0: "LABELLED",
	}
	StandardDisplayData_DisplayData_value = map[string]int32{
		"LABELLED": 0,
	}
)

func (x StandardDisplayData_DisplayData) Enum() *StandardDisplayData_DisplayData {
	p := new(StandardDisplayData_DisplayData)
	*p = x
	return p
}

func (x StandardDisplayData_DisplayData) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StandardDisplayData_DisplayData) Descriptor() protoreflect.EnumDescriptor {
	return file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_enumTypes[23].Descriptor()
}

func (StandardDisplayData_DisplayData) Type() protoreflect.EnumType {
	return &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_enumTypes[23]
}

func (x StandardDisplayData_DisplayData) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

type StandardResourceHints_Enum int32

const (
	// Describes hardware accelerators that are desired to have in the execution environment.
	// Payload: ASCII encoded string with the following format: "type:<type>;count:<n>;<options>" where type
	// is an accelerator sku, count is the number of accelerators per worker, and options are
	// related options flags.
	StandardResourceHints_ACCELERATOR StandardResourceHints_Enum = 0
	// Describes desired minimal available RAM size in transform's execution environment.
	// SDKs should convert the size to bytes, but can allow users to specify human-friendly units (e.g. GiB).
	// Payload: ASCII encoded string of the base 10 representation of an integer number of bytes.
	StandardResourceHints_MIN_RAM_BYTES StandardResourceHints_Enum = 1
	// Describes desired number of CPUs available in transform's execution environment.
	// SDKs should accept and validate a positive integer count.
	// Payload: ASCII encoded string of the base 10 representation of an integer number of CPUs.
	StandardResourceHints_CPU_COUNT StandardResourceHints_Enum = 2
)

// Enum value maps for StandardResourceHints_Enum.
var (
	StandardResourceHints_Enum_name = map[int32]string{
		0: "ACCELERATOR",
		1: "MIN_RAM_BYTES",
		2: "CPU_COUNT",
	}
	StandardResourceHints_Enum_value = map[string]int32{
		"ACCELERATOR":   0,
		"MIN_RAM_BYTES": 1,
		"CPU_COUNT":     2,
	}
)

func (x StandardResourceHints_Enum) Enum() *StandardResourceHints_Enum {
	p := new(StandardResourceHints_Enum)
	*p = x
	return p
}

func (x StandardResourceHints_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StandardResourceHints_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_enumTypes[24].Descriptor()
}

func (StandardResourceHints_Enum) Type() protoreflect.EnumType {
	return &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_enumTypes[24]
}

func (x StandardResourceHints_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

type BeamConstants struct {
	state         protoimpl.MessageState `protogen:"opaque.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BeamConstants) Reset() {
	*x = BeamConstants{}
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BeamConstants) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BeamConstants) ProtoMessage() {}

func (x *BeamConstants) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

type BeamConstants_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

}

func (b0 BeamConstants_builder) Build() *BeamConstants {
	m0 := &BeamConstants{}
	b, x := &b0, m0
	_, _ = b, x
	return m0
}

// A set of mappings from id to message. This is included as an optional field
// on any proto message that may contain references needing resolution.
type Components struct {
	state                          protoimpl.MessageState        `protogen:"opaque.v1"`
	xxx_hidden_Transforms          map[string]*PTransform        `protobuf:"bytes,1,rep,name=transforms,proto3" json:"transforms,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	xxx_hidden_Pcollections        map[string]*PCollection       `protobuf:"bytes,2,rep,name=pcollections,proto3" json:"pcollections,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	xxx_hidden_WindowingStrategies map[string]*WindowingStrategy `protobuf:"bytes,3,rep,name=windowing_strategies,json=windowingStrategies,proto3" json:"windowing_strategies,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	xxx_hidden_Coders              map[string]*Coder             `protobuf:"bytes,4,rep,name=coders,proto3" json:"coders,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	xxx_hidden_Environments        map[string]*Environment       `protobuf:"bytes,5,rep,name=environments,proto3" json:"environments,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields                  protoimpl.UnknownFields
	sizeCache                      protoimpl.SizeCache
}

func (x *Components) Reset() {
	*x = Components{}
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Components) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Components) ProtoMessage() {}

func (x *Components) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Components) GetTransforms() map[string]*PTransform {
	if x != nil {
		return x.xxx_hidden_Transforms
	}
	return nil
}

func (x *Components) GetPcollections() map[string]*PCollection {
	if x != nil {
		return x.xxx_hidden_Pcollections
	}
	return nil
}

func (x *Components) GetWindowingStrategies() map[string]*WindowingStrategy {
	if x != nil {
		return x.xxx_hidden_WindowingStrategies
	}
	return nil
}

func (x *Components) GetCoders() map[string]*Coder {
	if x != nil {
		return x.xxx_hidden_Coders
	}
	return nil
}

func (x *Components) GetEnvironments() map[string]*Environment {
	if x != nil {
		return x.xxx_hidden_Environments
	}
	return nil
}

func (x *Components) SetTransforms(v map[string]*PTransform) {
	x.xxx_hidden_Transforms = v
}

func (x *Components) SetPcollections(v map[string]*PCollection) {
	x.xxx_hidden_Pcollections = v
}

func (x *Components) SetWindowingStrategies(v map[string]*WindowingStrategy) {
	x.xxx_hidden_WindowingStrategies = v
}

func (x *Components) SetCoders(v map[string]*Coder) {
	x.xxx_hidden_Coders = v
}

func (x *Components) SetEnvironments(v map[string]*Environment) {
	x.xxx_hidden_Environments = v
}

type Components_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// (Required) A map from pipeline-scoped id to PTransform.
	//
	// Keys of the transforms map may be used by runners to identify pipeline
	// steps. Hence it's recommended to use strings that are not too long that
	// match regex '[A-Za-z0-9-_]+'.
	Transforms map[string]*PTransform
	// (Required) A map from pipeline-scoped id to PCollection.
	Pcollections map[string]*PCollection
	// (Required) A map from pipeline-scoped id to WindowingStrategy.
	WindowingStrategies map[string]*WindowingStrategy
	// (Required) A map from pipeline-scoped id to Coder.
	Coders map[string]*Coder
	// (Required) A map from pipeline-scoped id to Environment.
	Environments map[string]*Environment
}

func (b0 Components_builder) Build() *Components {
	m0 := &Components{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Transforms = b.Transforms
	x.xxx_hidden_Pcollections = b.Pcollections
	x.xxx_hidden_WindowingStrategies = b.WindowingStrategies
	x.xxx_hidden_Coders = b.Coders
	x.xxx_hidden_Environments = b.Environments
	return m0
}

// A Pipeline is a hierarchical graph of PTransforms, linked
// by PCollections. A typical graph may look like:
//
//	Impulse -> PCollection -> ParDo -> PCollection -> GroupByKey -> ...
//	                                \> PCollection -> ParDo      -> ...
//	                                               \> ParDo      -> ...
//	Impulse -> PCollection -> ParDo -> PCollection -> ...
//
// This is represented by a number of by-reference maps to transforms,
// PCollections, SDK environments, coders, etc., for
// supporting compact reuse and arbitrary graph structure.
type Pipeline struct {
	state                       protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Components       *Components            `protobuf:"bytes,1,opt,name=components,proto3" json:"components,omitempty"`
	xxx_hidden_RootTransformIds []string               `protobuf:"bytes,2,rep,name=root_transform_ids,json=rootTransformIds,proto3" json:"root_transform_ids,omitempty"`
	xxx_hidden_DisplayData      *[]*DisplayData        `protobuf:"bytes,3,rep,name=display_data,json=displayData,proto3" json:"display_data,omitempty"`
	xxx_hidden_Requirements     []string               `protobuf:"bytes,4,rep,name=requirements,proto3" json:"requirements,omitempty"`
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
}

func (x *Pipeline) Reset() {
	*x = Pipeline{}
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Pipeline) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pipeline) ProtoMessage() {}

func (x *Pipeline) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Pipeline) GetComponents() *Components {
	if x != nil {
		return x.xxx_hidden_Components
	}
	return nil
}

func (x *Pipeline) GetRootTransformIds() []string {
	if x != nil {
		return x.xxx_hidden_RootTransformIds
	}
	return nil
}

func (x *Pipeline) GetDisplayData() []*DisplayData {
	if x != nil {
		if x.xxx_hidden_DisplayData != nil {
			return *x.xxx_hidden_DisplayData
		}
	}
	return nil
}

func (x *Pipeline) GetRequirements() []string {
	if x != nil {
		return x.xxx_hidden_Requirements
	}
	return nil
}

func (x *Pipeline) SetComponents(v *Components) {
	x.xxx_hidden_Components = v
}

func (x *Pipeline) SetRootTransformIds(v []string) {
	x.xxx_hidden_RootTransformIds = v
}

func (x *Pipeline) SetDisplayData(v []*DisplayData) {
	x.xxx_hidden_DisplayData = &v
}

func (x *Pipeline) SetRequirements(v []string) {
	x.xxx_hidden_Requirements = v
}

func (x *Pipeline) HasComponents() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Components != nil
}

func (x *Pipeline) ClearComponents() {
	x.xxx_hidden_Components = nil
}

type Pipeline_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// (Required) The coders, UDFs, graph nodes, etc, that make up
	// this pipeline.
	Components *Components
	// (Required) The ids of all PTransforms that are not contained within another
	// PTransform. These must be in shallow topological order, so that traversing
	// them recursively in this order yields a recursively topological traversal.
	RootTransformIds []string
	// (Optional) Static display data for the pipeline. If there is none,
	// it may be omitted.
	DisplayData []*DisplayData
	// (Optional) A set of requirements that the runner MUST understand and be
	// able to faithfully provide in order to execute this pipeline. These
	// may indicate that a runner must inspect new fields on a component or
	// provide additional guarantees when processing specific transforms.
	// A runner should reject any pipelines with unknown requirements.
	Requirements []string
}

func (b0 Pipeline_builder) Build() *Pipeline {
	m0 := &Pipeline{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Components = b.Components
	x.xxx_hidden_RootTransformIds = b.RootTransformIds
	x.xxx_hidden_DisplayData = &b.DisplayData
	x.xxx_hidden_Requirements = b.Requirements
	return m0
}

// Transforms are the operations in your pipeline, and provide a generic
// processing framework. You provide processing logic in the form of a function
// object (colloquially referred to as “user code”), and your user code is
// applied to each element of an input PCollection (or more than one
// PCollection). Depending on the pipeline runner and back-end that you choose,
// many different workers across a cluster may execute instances of your user
// code in parallel. The user code running on each worker generates the output
// elements that are ultimately added to the final output PCollection that the
// transform produces.
//
// The Beam SDKs contain a number of different transforms that you can apply to
// your pipeline’s PCollections. These include general-purpose core transforms,
// such as ParDo or Combine. There are also pre-written composite transforms
// included in the SDKs, which combine one or more of the core transforms in a
// useful processing pattern, such as counting or combining elements in a
// collection. You can also define your own more complex composite transforms to
// fit your pipeline’s exact use case.
type PTransform struct {
	state                    protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_UniqueName    string                 `protobuf:"bytes,5,opt,name=unique_name,json=uniqueName,proto3" json:"unique_name,omitempty"`
	xxx_hidden_Spec          *FunctionSpec          `protobuf:"bytes,1,opt,name=spec,proto3" json:"spec,omitempty"`
	xxx_hidden_Subtransforms []string               `protobuf:"bytes,2,rep,name=subtransforms,proto3" json:"subtransforms,omitempty"`
	xxx_hidden_Inputs        map[string]string      `protobuf:"bytes,3,rep,name=inputs,proto3" json:"inputs,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	xxx_hidden_Outputs       map[string]string      `protobuf:"bytes,4,rep,name=outputs,proto3" json:"outputs,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	xxx_hidden_DisplayData   *[]*DisplayData        `protobuf:"bytes,6,rep,name=display_data,json=displayData,proto3" json:"display_data,omitempty"`
	xxx_hidden_EnvironmentId string                 `protobuf:"bytes,7,opt,name=environment_id,json=environmentId,proto3" json:"environment_id,omitempty"`
	xxx_hidden_Annotations   map[string][]byte      `protobuf:"bytes,8,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *PTransform) Reset() {
	*x = PTransform{}
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PTransform) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PTransform) ProtoMessage() {}

func (x *PTransform) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *PTransform) GetUniqueName() string {
	if x != nil {
		return x.xxx_hidden_UniqueName
	}
	return ""
}

func (x *PTransform) GetSpec() *FunctionSpec {
	if x != nil {
		return x.xxx_hidden_Spec
	}
	return nil
}

func (x *PTransform) GetSubtransforms() []string {
	if x != nil {
		return x.xxx_hidden_Subtransforms
	}
	return nil
}

func (x *PTransform) GetInputs() map[string]string {
	if x != nil {
		return x.xxx_hidden_Inputs
	}
	return nil
}

func (x *PTransform) GetOutputs() map[string]string {
	if x != nil {
		return x.xxx_hidden_Outputs
	}
	return nil
}

func (x *PTransform) GetDisplayData() []*DisplayData {
	if x != nil {
		if x.xxx_hidden_DisplayData != nil {
			return *x.xxx_hidden_DisplayData
		}
	}
	return nil
}

func (x *PTransform) GetEnvironmentId() string {
	if x != nil {
		return x.xxx_hidden_EnvironmentId
	}
	return ""
}

func (x *PTransform) GetAnnotations() map[string][]byte {
	if x != nil {
		return x.xxx_hidden_Annotations
	}
	return nil
}

func (x *PTransform) SetUniqueName(v string) {
	x.xxx_hidden_UniqueName = v
}

func (x *PTransform) SetSpec(v *FunctionSpec) {
	x.xxx_hidden_Spec = v
}

func (x *PTransform) SetSubtransforms(v []string) {
	x.xxx_hidden_Subtransforms = v
}

func (x *PTransform) SetInputs(v map[string]string) {
	x.xxx_hidden_Inputs = v
}

func (x *PTransform) SetOutputs(v map[string]string) {
	x.xxx_hidden_Outputs = v
}

func (x *PTransform) SetDisplayData(v []*DisplayData) {
	x.xxx_hidden_DisplayData = &v
}

func (x *PTransform) SetEnvironmentId(v string) {
	x.xxx_hidden_EnvironmentId = v
}

func (x *PTransform) SetAnnotations(v map[string][]byte) {
	x.xxx_hidden_Annotations = v
}

func (x *PTransform) HasSpec() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Spec != nil
}

func (x *PTransform) ClearSpec() {
	x.xxx_hidden_Spec = nil
}

type PTransform_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// (Required) A unique name for the application node.
	//
	// Ideally, this should be stable over multiple evolutions of a pipeline
	// for the purposes of logging and associating pipeline state with a node,
	// etc.
	//
	// If it is not stable, then the runner decides what will happen. But, most
	// importantly, it must always be here and be unique, even if it is
	// autogenerated.
	UniqueName string
	// (Optional) A URN and payload that, together, fully defined the semantics
	// of this transform.
	//
	// If absent, this must be an "anonymous" composite transform.
	//
	// For primitive transform in the Runner API, this is required, and the
	// payloads are well-defined messages. When the URN indicates ParDo it
	// is a ParDoPayload, and so on. For some special composite transforms,
	// the payload is also officially defined. See StandardPTransforms for
	// details.
	Spec *FunctionSpec
	// (Optional) A list of the ids of transforms that it contains.
	//
	// Primitive transforms (see StandardPTransforms.Primitives) are not allowed
	// to specify subtransforms.
	//
	// Note that a composite transform may have zero subtransforms as long as it
	// only outputs PCollections that are in its inputs.
	Subtransforms []string
	// (Required) A map from local names of inputs (unique only with this map, and
	// likely embedded in the transform payload and serialized user code) to
	// PCollection ids.
	//
	// The payload for this transform may clarify the relationship of these
	// inputs. For example:
	//
	//   - for a Flatten transform they are merged
	//   - for a ParDo transform, some may be side inputs
	//
	// All inputs are recorded here so that the topological ordering of
	// the graph is consistent whether or not the payload is understood.
	Inputs map[string]string
	// (Required) A map from local names of outputs (unique only within this map,
	// and likely embedded in the transform payload and serialized user code)
	// to PCollection ids.
	//
	// The URN or payload for this transform node may clarify the type and
	// relationship of these outputs. For example:
	//
	//   - for a ParDo transform, these are tags on PCollections, which will be
	//     embedded in the DoFn.
	Outputs map[string]string
	// (Optional) Static display data for this PTransform application. If
	// there is none, it may be omitted.
	DisplayData []*DisplayData
	// Environment where the current PTransform should be executed in.
	//
	// Transforms that are required to be implemented by a runner must omit this.
	// All other transforms are required to specify this.
	EnvironmentId string
	// (Optional) A map from URNs designating a type of annotation, to the
	// annotation in binary format. For example, an annotation could indicate
	// that this PTransform has specific privacy properties.
	//
	// A runner MAY ignore types of annotations it doesn't understand. Therefore
	// annotations MUST NOT be used for metadata that can affect correct
	// execution of the transform.
	Annotations map[string][]byte
}

func (b0 PTransform_builder) Build() *PTransform {
	m0 := &PTransform{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_UniqueName = b.UniqueName
	x.xxx_hidden_Spec = b.Spec
	x.xxx_hidden_Subtransforms = b.Subtransforms
	x.xxx_hidden_Inputs = b.Inputs
	x.xxx_hidden_Outputs = b.Outputs
	x.xxx_hidden_DisplayData = &b.DisplayData
	x.xxx_hidden_EnvironmentId = b.EnvironmentId
	x.xxx_hidden_Annotations = b.Annotations
	return m0
}

type StandardPTransforms struct {
	state         protoimpl.MessageState `protogen:"opaque.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StandardPTransforms) Reset() {
	*x = StandardPTransforms{}
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StandardPTransforms) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StandardPTransforms) ProtoMessage() {}

func (x *StandardPTransforms) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

type StandardPTransforms_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

}

func (b0 StandardPTransforms_builder) Build() *StandardPTransforms {
	m0 := &StandardPTransforms{}
	b, x := &b0, m0
	_, _ = b, x
	return m0
}

type StandardSideInputTypes struct {
	state         protoimpl.MessageState `protogen:"opaque.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StandardSideInputTypes) Reset() {
	*x = StandardSideInputTypes{}
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StandardSideInputTypes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StandardSideInputTypes) ProtoMessage() {}

func (x *StandardSideInputTypes) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

type StandardSideInputTypes_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

}

func (b0 StandardSideInputTypes_builder) Build() *StandardSideInputTypes {
	m0 := &StandardSideInputTypes{}
	b, x := &b0, m0
	_, _ = b, x
	return m0
}

type StandardUserStateTypes struct {
	state         protoimpl.MessageState `protogen:"opaque.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StandardUserStateTypes) Reset() {
	*x = StandardUserStateTypes{}
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StandardUserStateTypes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StandardUserStateTypes) ProtoMessage() {}

func (x *StandardUserStateTypes) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

type StandardUserStateTypes_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

}

func (b0 StandardUserStateTypes_builder) Build() *StandardUserStateTypes {
	m0 := &StandardUserStateTypes{}
	b, x := &b0, m0
	_, _ = b, x
	return m0
}

// A PCollection!
type PCollection struct {
	state                          protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_UniqueName          string                 `protobuf:"bytes,1,opt,name=unique_name,json=uniqueName,proto3" json:"unique_name,omitempty"`
	xxx_hidden_CoderId             string                 `protobuf:"bytes,2,opt,name=coder_id,json=coderId,proto3" json:"coder_id,omitempty"`
	xxx_hidden_IsBounded           IsBounded_Enum         `protobuf:"varint,3,opt,name=is_bounded,json=isBounded,proto3,enum=org.apache.beam.model.pipeline.v1.IsBounded_Enum" json:"is_bounded,omitempty"`
	xxx_hidden_WindowingStrategyId string                 `protobuf:"bytes,4,opt,name=windowing_strategy_id,json=windowingStrategyId,proto3" json:"windowing_strategy_id,omitempty"`
	xxx_hidden_DisplayData         *[]*DisplayData        `protobuf:"bytes,5,rep,name=display_data,json=displayData,proto3" json:"display_data,omitempty"`
	unknownFields                  protoimpl.UnknownFields
	sizeCache                      protoimpl.SizeCache
}

func (x *PCollection) Reset() {
	*x = PCollection{}
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PCollection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PCollection) ProtoMessage() {}

func (x *PCollection) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *PCollection) GetUniqueName() string {
	if x != nil {
		return x.xxx_hidden_UniqueName
	}
	return ""
}

func (x *PCollection) GetCoderId() string {
	if x != nil {
		return x.xxx_hidden_CoderId
	}
	return ""
}

func (x *PCollection) GetIsBounded() IsBounded_Enum {
	if x != nil {
		return x.xxx_hidden_IsBounded
	}
	return IsBounded_UNSPECIFIED
}

func (x *PCollection) GetWindowingStrategyId() string {
	if x != nil {
		return x.xxx_hidden_WindowingStrategyId
	}
	return ""
}

func (x *PCollection) GetDisplayData() []*DisplayData {
	if x != nil {
		if x.xxx_hidden_DisplayData != nil {
			return *x.xxx_hidden_DisplayData
		}
	}
	return nil
}

func (x *PCollection) SetUniqueName(v string) {
	x.xxx_hidden_UniqueName = v
}

func (x *PCollection) SetCoderId(v string) {
	x.xxx_hidden_CoderId = v
}

func (x *PCollection) SetIsBounded(v IsBounded_Enum) {
	x.xxx_hidden_IsBounded = v
}

func (x *PCollection) SetWindowingStrategyId(v string) {
	x.xxx_hidden_WindowingStrategyId = v
}

func (x *PCollection) SetDisplayData(v []*DisplayData) {
	x.xxx_hidden_DisplayData = &v
}

type PCollection_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// (Required) A unique name for the PCollection.
	//
	// Ideally, this should be stable over multiple evolutions of a pipeline
	// for the purposes of logging and associating pipeline state with a node,
	// etc.
	//
	// If it is not stable, then the runner decides what will happen. But, most
	// importantly, it must always be here, even if it is autogenerated.
	UniqueName string
	// (Required) The id of the Coder for this PCollection.
	CoderId string
	// (Required) Whether this PCollection is bounded or unbounded
	IsBounded IsBounded_Enum
	// (Required) The id of the windowing strategy for this PCollection.
	WindowingStrategyId string
	// (Optional) Static display data for the PCollection. If there is none,
	// it may be omitted.
	DisplayData []*DisplayData
}

func (b0 PCollection_builder) Build() *PCollection {
	m0 := &PCollection{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_UniqueName = b.UniqueName
	x.xxx_hidden_CoderId = b.CoderId
	x.xxx_hidden_IsBounded = b.IsBounded
	x.xxx_hidden_WindowingStrategyId = b.WindowingStrategyId
	x.xxx_hidden_DisplayData = &b.DisplayData
	return m0
}

// The payload for the primitive ParDo transform.
type ParDoPayload struct {
	state                                        protoimpl.MessageState      `protogen:"opaque.v1"`
	xxx_hidden_DoFn                              *FunctionSpec               `protobuf:"bytes,1,opt,name=do_fn,json=doFn,proto3" json:"do_fn,omitempty"`
	xxx_hidden_SideInputs                        map[string]*SideInput       `protobuf:"bytes,3,rep,name=side_inputs,json=sideInputs,proto3" json:"side_inputs,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	xxx_hidden_StateSpecs                        map[string]*StateSpec       `protobuf:"bytes,4,rep,name=state_specs,json=stateSpecs,proto3" json:"state_specs,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	xxx_hidden_TimerFamilySpecs                  map[string]*TimerFamilySpec `protobuf:"bytes,9,rep,name=timer_family_specs,json=timerFamilySpecs,proto3" json:"timer_family_specs,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	xxx_hidden_RestrictionCoderId                string                      `protobuf:"bytes,7,opt,name=restriction_coder_id,json=restrictionCoderId,proto3" json:"restriction_coder_id,omitempty"`
	xxx_hidden_RequestsFinalization              bool                        `protobuf:"varint,8,opt,name=requests_finalization,json=requestsFinalization,proto3" json:"requests_finalization,omitempty"`
	xxx_hidden_RequiresTimeSortedInput           bool                        `protobuf:"varint,10,opt,name=requires_time_sorted_input,json=requiresTimeSortedInput,proto3" json:"requires_time_sorted_input,omitempty"`
	xxx_hidden_RequiresStableInput               bool                        `protobuf:"varint,11,opt,name=requires_stable_input,json=requiresStableInput,proto3" json:"requires_stable_input,omitempty"`
	xxx_hidden_OnWindowExpirationTimerFamilySpec string                      `protobuf:"bytes,12,opt,name=on_window_expiration_timer_family_spec,json=onWindowExpirationTimerFamilySpec,proto3" json:"on_window_expiration_timer_family_spec,omitempty"`
	unknownFields                                protoimpl.UnknownFields
	sizeCache                                    protoimpl.SizeCache
}

func (x *ParDoPayload) Reset() {
	*x = ParDoPayload{}
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ParDoPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParDoPayload) ProtoMessage() {}

func (x *ParDoPayload) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ParDoPayload) GetDoFn() *FunctionSpec {
	if x != nil {
		return x.xxx_hidden_DoFn
	}
	return nil
}

func (x *ParDoPayload) GetSideInputs() map[string]*SideInput {
	if x != nil {
		return x.xxx_hidden_SideInputs
	}
	return nil
}

func (x *ParDoPayload) GetStateSpecs() map[string]*StateSpec {
	if x != nil {
		return x.xxx_hidden_StateSpecs
	}
	return nil
}

func (x *ParDoPayload) GetTimerFamilySpecs() map[string]*TimerFamilySpec {
	if x != nil {
		return x.xxx_hidden_TimerFamilySpecs
	}
	return nil
}

func (x *ParDoPayload) GetRestrictionCoderId() string {
	if x != nil {
		return x.xxx_hidden_RestrictionCoderId
	}
	return ""
}

func (x *ParDoPayload) GetRequestsFinalization() bool {
	if x != nil {
		return x.xxx_hidden_RequestsFinalization
	}
	return false
}

func (x *ParDoPayload) GetRequiresTimeSortedInput() bool {
	if x != nil {
		return x.xxx_hidden_RequiresTimeSortedInput
	}
	return false
}

func (x *ParDoPayload) GetRequiresStableInput() bool {
	if x != nil {
		return x.xxx_hidden_RequiresStableInput
	}
	return false
}

func (x *ParDoPayload) GetOnWindowExpirationTimerFamilySpec() string {
	if x != nil {
		return x.xxx_hidden_OnWindowExpirationTimerFamilySpec
	}
	return ""
}

func (x *ParDoPayload) SetDoFn(v *FunctionSpec) {
	x.xxx_hidden_DoFn = v
}

func (x *ParDoPayload) SetSideInputs(v map[string]*SideInput) {
	x.xxx_hidden_SideInputs = v
}

func (x *ParDoPayload) SetStateSpecs(v map[string]*StateSpec) {
	x.xxx_hidden_StateSpecs = v
}

func (x *ParDoPayload) SetTimerFamilySpecs(v map[string]*TimerFamilySpec) {
	x.xxx_hidden_TimerFamilySpecs = v
}

func (x *ParDoPayload) SetRestrictionCoderId(v string) {
	x.xxx_hidden_RestrictionCoderId = v
}

func (x *ParDoPayload) SetRequestsFinalization(v bool) {
	x.xxx_hidden_RequestsFinalization = v
}

func (x *ParDoPayload) SetRequiresTimeSortedInput(v bool) {
	x.xxx_hidden_RequiresTimeSortedInput = v
}

func (x *ParDoPayload) SetRequiresStableInput(v bool) {
	x.xxx_hidden_RequiresStableInput = v
}

func (x *ParDoPayload) SetOnWindowExpirationTimerFamilySpec(v string) {
	x.xxx_hidden_OnWindowExpirationTimerFamilySpec = v
}

func (x *ParDoPayload) HasDoFn() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_DoFn != nil
}

func (x *ParDoPayload) ClearDoFn() {
	x.xxx_hidden_DoFn = nil
}

type ParDoPayload_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// (Required) The FunctionSpec of the DoFn.
	DoFn *FunctionSpec
	// (Optional) A mapping of local input names to side inputs, describing
	// the expected access pattern.
	SideInputs map[string]*SideInput
	// (Optional) A mapping of local state names to state specifications.
	// If this is set, the stateful processing requirement should also
	// be placed in the pipeline requirements.
	StateSpecs map[string]*StateSpec
	// (Optional) A mapping of local timer family names to timer family
	// specifications. If this is set, the stateful processing requirement should
	// also be placed in the pipeline requirements.
	TimerFamilySpecs map[string]*TimerFamilySpec
	// (Optional) Only set when this ParDo contains a splittable DoFn.
	// If this is set, the corresponding standard requirement should also
	// be placed in the pipeline requirements.
	RestrictionCoderId string
	// (Optional) Only set when this ParDo can request bundle finalization.
	// If this is set, the corresponding standard requirement should also
	// be placed in the pipeline requirements.
	RequestsFinalization bool
	// Whether this stage requires time sorted input.
	// If this is set, the corresponding standard requirement should also
	// be placed in the pipeline requirements.
	RequiresTimeSortedInput bool
	// Whether this stage requires stable input.
	// If this is set, the corresponding standard requirement should also
	// be placed in the pipeline requirements.
	RequiresStableInput bool
	// If populated, the name of the timer family spec which should be notified
	// on each window expiry.
	// If this is set, the corresponding standard requirement should also
	// be placed in the pipeline requirements.
	OnWindowExpirationTimerFamilySpec string
}

func (b0 ParDoPayload_builder) Build() *ParDoPayload {
	m0 := &ParDoPayload{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_DoFn = b.DoFn
	x.xxx_hidden_SideInputs = b.SideInputs
	x.xxx_hidden_StateSpecs = b.StateSpecs
	x.xxx_hidden_TimerFamilySpecs = b.TimerFamilySpecs
	x.xxx_hidden_RestrictionCoderId = b.RestrictionCoderId
	x.xxx_hidden_RequestsFinalization = b.RequestsFinalization
	x.xxx_hidden_RequiresTimeSortedInput = b.RequiresTimeSortedInput
	x.xxx_hidden_RequiresStableInput = b.RequiresStableInput
	x.xxx_hidden_OnWindowExpirationTimerFamilySpec = b.OnWindowExpirationTimerFamilySpec
	return m0
}

type StateSpec struct {
	state               protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Spec     isStateSpec_Spec       `protobuf_oneof:"spec"`
	xxx_hidden_Protocol *FunctionSpec          `protobuf:"bytes,7,opt,name=protocol,proto3" json:"protocol,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *StateSpec) Reset() {
	*x = StateSpec{}
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StateSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateSpec) ProtoMessage() {}

func (x *StateSpec) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *StateSpec) GetReadModifyWriteSpec() *ReadModifyWriteStateSpec {
	if x != nil {
		if x, ok := x.xxx_hidden_Spec.(*stateSpec_ReadModifyWriteSpec); ok {
			return x.ReadModifyWriteSpec
		}
	}
	return nil
}

func (x *StateSpec) GetBagSpec() *BagStateSpec {
	if x != nil {
		if x, ok := x.xxx_hidden_Spec.(*stateSpec_BagSpec); ok {
			return x.BagSpec
		}
	}
	return nil
}

func (x *StateSpec) GetCombiningSpec() *CombiningStateSpec {
	if x != nil {
		if x, ok := x.xxx_hidden_Spec.(*stateSpec_CombiningSpec); ok {
			return x.CombiningSpec
		}
	}
	return nil
}

func (x *StateSpec) GetMapSpec() *MapStateSpec {
	if x != nil {
		if x, ok := x.xxx_hidden_Spec.(*stateSpec_MapSpec); ok {
			return x.MapSpec
		}
	}
	return nil
}

func (x *StateSpec) GetSetSpec() *SetStateSpec {
	if x != nil {
		if x, ok := x.xxx_hidden_Spec.(*stateSpec_SetSpec); ok {
			return x.SetSpec
		}
	}
	return nil
}

func (x *StateSpec) GetOrderedListSpec() *OrderedListStateSpec {
	if x != nil {
		if x, ok := x.xxx_hidden_Spec.(*stateSpec_OrderedListSpec); ok {
			return x.OrderedListSpec
		}
	}
	return nil
}

func (x *StateSpec) GetMultimapSpec() *MultimapStateSpec {
	if x != nil {
		if x, ok := x.xxx_hidden_Spec.(*stateSpec_MultimapSpec); ok {
			return x.MultimapSpec
		}
	}
	return nil
}

func (x *StateSpec) GetProtocol() *FunctionSpec {
	if x != nil {
		return x.xxx_hidden_Protocol
	}
	return nil
}

func (x *StateSpec) SetReadModifyWriteSpec(v *ReadModifyWriteStateSpec) {
	if v == nil {
		x.xxx_hidden_Spec = nil
		return
	}
	x.xxx_hidden_Spec = &stateSpec_ReadModifyWriteSpec{v}
}

func (x *StateSpec) SetBagSpec(v *BagStateSpec) {
	if v == nil {
		x.xxx_hidden_Spec = nil
		return
	}
	x.xxx_hidden_Spec = &stateSpec_BagSpec{v}
}

func (x *StateSpec) SetCombiningSpec(v *CombiningStateSpec) {
	if v == nil {
		x.xxx_hidden_Spec = nil
		return
	}
	x.xxx_hidden_Spec = &stateSpec_CombiningSpec{v}
}

func (x *StateSpec) SetMapSpec(v *MapStateSpec) {
	if v == nil {
		x.xxx_hidden_Spec = nil
		return
	}
	x.xxx_hidden_Spec = &stateSpec_MapSpec{v}
}

func (x *StateSpec) SetSetSpec(v *SetStateSpec) {
	if v == nil {
		x.xxx_hidden_Spec = nil
		return
	}
	x.xxx_hidden_Spec = &stateSpec_SetSpec{v}
}

func (x *StateSpec) SetOrderedListSpec(v *OrderedListStateSpec) {
	if v == nil {
		x.xxx_hidden_Spec = nil
		return
	}
	x.xxx_hidden_Spec = &stateSpec_OrderedListSpec{v}
}

func (x *StateSpec) SetMultimapSpec(v *MultimapStateSpec) {
	if v == nil {
		x.xxx_hidden_Spec = nil
		return
	}
	x.xxx_hidden_Spec = &stateSpec_MultimapSpec{v}
}

func (x *StateSpec) SetProtocol(v *FunctionSpec) {
	x.xxx_hidden_Protocol = v
}

func (x *StateSpec) HasSpec() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Spec != nil
}

func (x *StateSpec) HasReadModifyWriteSpec() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Spec.(*stateSpec_ReadModifyWriteSpec)
	return ok
}

func (x *StateSpec) HasBagSpec() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Spec.(*stateSpec_BagSpec)
	return ok
}

func (x *StateSpec) HasCombiningSpec() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Spec.(*stateSpec_CombiningSpec)
	return ok
}

func (x *StateSpec) HasMapSpec() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Spec.(*stateSpec_MapSpec)
	return ok
}

func (x *StateSpec) HasSetSpec() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Spec.(*stateSpec_SetSpec)
	return ok
}

func (x *StateSpec) HasOrderedListSpec() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Spec.(*stateSpec_OrderedListSpec)
	return ok
}

func (x *StateSpec) HasMultimapSpec() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Spec.(*stateSpec_MultimapSpec)
	return ok
}

func (x *StateSpec) HasProtocol() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Protocol != nil
}

func (x *StateSpec) ClearSpec() {
	x.xxx_hidden_Spec = nil
}

func (x *StateSpec) ClearReadModifyWriteSpec() {
	if _, ok := x.xxx_hidden_Spec.(*stateSpec_ReadModifyWriteSpec); ok {
		x.xxx_hidden_Spec = nil
	}
}

func (x *StateSpec) ClearBagSpec() {
	if _, ok := x.xxx_hidden_Spec.(*stateSpec_BagSpec); ok {
		x.xxx_hidden_Spec = nil
	}
}

func (x *StateSpec) ClearCombiningSpec() {
	if _, ok := x.xxx_hidden_Spec.(*stateSpec_CombiningSpec); ok {
		x.xxx_hidden_Spec = nil
	}
}

func (x *StateSpec) ClearMapSpec() {
	if _, ok := x.xxx_hidden_Spec.(*stateSpec_MapSpec); ok {
		x.xxx_hidden_Spec = nil
	}
}

func (x *StateSpec) ClearSetSpec() {
	if _, ok := x.xxx_hidden_Spec.(*stateSpec_SetSpec); ok {
		x.xxx_hidden_Spec = nil
	}
}

func (x *StateSpec) ClearOrderedListSpec() {
	if _, ok := x.xxx_hidden_Spec.(*stateSpec_OrderedListSpec); ok {
		x.xxx_hidden_Spec = nil
	}
}

func (x *StateSpec) ClearMultimapSpec() {
	if _, ok := x.xxx_hidden_Spec.(*stateSpec_MultimapSpec); ok {
		x.xxx_hidden_Spec = nil
	}
}

func (x *StateSpec) ClearProtocol() {
	x.xxx_hidden_Protocol = nil
}

const StateSpec_Spec_not_set_case case_StateSpec_Spec = 0
const StateSpec_ReadModifyWriteSpec_case case_StateSpec_Spec = 1
const StateSpec_BagSpec_case case_StateSpec_Spec = 2
const StateSpec_CombiningSpec_case case_StateSpec_Spec = 3
const StateSpec_MapSpec_case case_StateSpec_Spec = 4
const StateSpec_SetSpec_case case_StateSpec_Spec = 5
const StateSpec_OrderedListSpec_case case_StateSpec_Spec = 6
const StateSpec_MultimapSpec_case case_StateSpec_Spec = 8

func (x *StateSpec) WhichSpec() case_StateSpec_Spec {
	if x == nil {
		return StateSpec_Spec_not_set_case
	}
	switch x.xxx_hidden_Spec.(type) {
	case *stateSpec_ReadModifyWriteSpec:
		return StateSpec_ReadModifyWriteSpec_case
	case *stateSpec_BagSpec:
		return StateSpec_BagSpec_case
	case *stateSpec_CombiningSpec:
		return StateSpec_CombiningSpec_case
	case *stateSpec_MapSpec:
		return StateSpec_MapSpec_case
	case *stateSpec_SetSpec:
		return StateSpec_SetSpec_case
	case *stateSpec_OrderedListSpec:
		return StateSpec_OrderedListSpec_case
	case *stateSpec_MultimapSpec:
		return StateSpec_MultimapSpec_case
	default:
		return StateSpec_Spec_not_set_case
	}
}

type StateSpec_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// TODO(BEAM-13930): Deprecate and remove these state specs

	// Fields of oneof xxx_hidden_Spec:
	ReadModifyWriteSpec *ReadModifyWriteStateSpec
	BagSpec             *BagStateSpec
	CombiningSpec       *CombiningStateSpec
	MapSpec             *MapStateSpec
	SetSpec             *SetStateSpec
	OrderedListSpec     *OrderedListStateSpec
	MultimapSpec        *MultimapStateSpec
	// -- end of xxx_hidden_Spec
	// (Required) URN of the protocol required by this state specification to present
	// the desired SDK-specific interface to a UDF.
	//
	// This protocol defines the SDK harness <-> Runner Harness RPC
	// interface for accessing and mutating user state.
	//
	// See StandardUserStateTypes for an enumeration of all user state types
	// defined.
	Protocol *FunctionSpec
}

func (b0 StateSpec_builder) Build() *StateSpec {
	m0 := &StateSpec{}
	b, x := &b0, m0
	_, _ = b, x
	if b.ReadModifyWriteSpec != nil {
		x.xxx_hidden_Spec = &stateSpec_ReadModifyWriteSpec{b.ReadModifyWriteSpec}
	}
	if b.BagSpec != nil {
		x.xxx_hidden_Spec = &stateSpec_BagSpec{b.BagSpec}
	}
	if b.CombiningSpec != nil {
		x.xxx_hidden_Spec = &stateSpec_CombiningSpec{b.CombiningSpec}
	}
	if b.MapSpec != nil {
		x.xxx_hidden_Spec = &stateSpec_MapSpec{b.MapSpec}
	}
	if b.SetSpec != nil {
		x.xxx_hidden_Spec = &stateSpec_SetSpec{b.SetSpec}
	}
	if b.OrderedListSpec != nil {
		x.xxx_hidden_Spec = &stateSpec_OrderedListSpec{b.OrderedListSpec}
	}
	if b.MultimapSpec != nil {
		x.xxx_hidden_Spec = &stateSpec_MultimapSpec{b.MultimapSpec}
	}
	x.xxx_hidden_Protocol = b.Protocol
	return m0
}

type case_StateSpec_Spec protoreflect.FieldNumber

func (x case_StateSpec_Spec) String() string {
	md := file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[9].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type isStateSpec_Spec interface {
	isStateSpec_Spec()
}

type stateSpec_ReadModifyWriteSpec struct {
	ReadModifyWriteSpec *ReadModifyWriteStateSpec `protobuf:"bytes,1,opt,name=read_modify_write_spec,json=readModifyWriteSpec,proto3,oneof"`
}

type stateSpec_BagSpec struct {
	BagSpec *BagStateSpec `protobuf:"bytes,2,opt,name=bag_spec,json=bagSpec,proto3,oneof"`
}

type stateSpec_CombiningSpec struct {
	CombiningSpec *CombiningStateSpec `protobuf:"bytes,3,opt,name=combining_spec,json=combiningSpec,proto3,oneof"`
}

type stateSpec_MapSpec struct {
	MapSpec *MapStateSpec `protobuf:"bytes,4,opt,name=map_spec,json=mapSpec,proto3,oneof"`
}

type stateSpec_SetSpec struct {
	SetSpec *SetStateSpec `protobuf:"bytes,5,opt,name=set_spec,json=setSpec,proto3,oneof"`
}

type stateSpec_OrderedListSpec struct {
	OrderedListSpec *OrderedListStateSpec `protobuf:"bytes,6,opt,name=ordered_list_spec,json=orderedListSpec,proto3,oneof"`
}

type stateSpec_MultimapSpec struct {
	MultimapSpec *MultimapStateSpec `protobuf:"bytes,8,opt,name=multimap_spec,json=multimapSpec,proto3,oneof"`
}

func (*stateSpec_ReadModifyWriteSpec) isStateSpec_Spec() {}

func (*stateSpec_BagSpec) isStateSpec_Spec() {}

func (*stateSpec_CombiningSpec) isStateSpec_Spec() {}

func (*stateSpec_MapSpec) isStateSpec_Spec() {}

func (*stateSpec_SetSpec) isStateSpec_Spec() {}

func (*stateSpec_OrderedListSpec) isStateSpec_Spec() {}

func (*stateSpec_MultimapSpec) isStateSpec_Spec() {}

type ReadModifyWriteStateSpec struct {
	state              protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_CoderId string                 `protobuf:"bytes,1,opt,name=coder_id,json=coderId,proto3" json:"coder_id,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ReadModifyWriteStateSpec) Reset() {
	*x = ReadModifyWriteStateSpec{}
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadModifyWriteStateSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadModifyWriteStateSpec) ProtoMessage() {}

func (x *ReadModifyWriteStateSpec) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ReadModifyWriteStateSpec) GetCoderId() string {
	if x != nil {
		return x.xxx_hidden_CoderId
	}
	return ""
}

func (x *ReadModifyWriteStateSpec) SetCoderId(v string) {
	x.xxx_hidden_CoderId = v
}

type ReadModifyWriteStateSpec_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	CoderId string
}

func (b0 ReadModifyWriteStateSpec_builder) Build() *ReadModifyWriteStateSpec {
	m0 := &ReadModifyWriteStateSpec{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_CoderId = b.CoderId
	return m0
}

type BagStateSpec struct {
	state                     protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_ElementCoderId string                 `protobuf:"bytes,1,opt,name=element_coder_id,json=elementCoderId,proto3" json:"element_coder_id,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *BagStateSpec) Reset() {
	*x = BagStateSpec{}
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BagStateSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BagStateSpec) ProtoMessage() {}

func (x *BagStateSpec) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *BagStateSpec) GetElementCoderId() string {
	if x != nil {
		return x.xxx_hidden_ElementCoderId
	}
	return ""
}

func (x *BagStateSpec) SetElementCoderId(v string) {
	x.xxx_hidden_ElementCoderId = v
}

type BagStateSpec_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	ElementCoderId string
}

func (b0 BagStateSpec_builder) Build() *BagStateSpec {
	m0 := &BagStateSpec{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_ElementCoderId = b.ElementCoderId
	return m0
}

type OrderedListStateSpec struct {
	state                     protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_ElementCoderId string                 `protobuf:"bytes,1,opt,name=element_coder_id,json=elementCoderId,proto3" json:"element_coder_id,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *OrderedListStateSpec) Reset() {
	*x = OrderedListStateSpec{}
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OrderedListStateSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderedListStateSpec) ProtoMessage() {}

func (x *OrderedListStateSpec) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *OrderedListStateSpec) GetElementCoderId() string {
	if x != nil {
		return x.xxx_hidden_ElementCoderId
	}
	return ""
}

func (x *OrderedListStateSpec) SetElementCoderId(v string) {
	x.xxx_hidden_ElementCoderId = v
}

type OrderedListStateSpec_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	ElementCoderId string
}

func (b0 OrderedListStateSpec_builder) Build() *OrderedListStateSpec {
	m0 := &OrderedListStateSpec{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_ElementCoderId = b.ElementCoderId
	return m0
}

type CombiningStateSpec struct {
	state                         protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_AccumulatorCoderId string                 `protobuf:"bytes,1,opt,name=accumulator_coder_id,json=accumulatorCoderId,proto3" json:"accumulator_coder_id,omitempty"`
	xxx_hidden_CombineFn          *FunctionSpec          `protobuf:"bytes,2,opt,name=combine_fn,json=combineFn,proto3" json:"combine_fn,omitempty"`
	unknownFields                 protoimpl.UnknownFields
	sizeCache                     protoimpl.SizeCache
}

func (x *CombiningStateSpec) Reset() {
	*x = CombiningStateSpec{}
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CombiningStateSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CombiningStateSpec) ProtoMessage() {}

func (x *CombiningStateSpec) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *CombiningStateSpec) GetAccumulatorCoderId() string {
	if x != nil {
		return x.xxx_hidden_AccumulatorCoderId
	}
	return ""
}

func (x *CombiningStateSpec) GetCombineFn() *FunctionSpec {
	if x != nil {
		return x.xxx_hidden_CombineFn
	}
	return nil
}

func (x *CombiningStateSpec) SetAccumulatorCoderId(v string) {
	x.xxx_hidden_AccumulatorCoderId = v
}

func (x *CombiningStateSpec) SetCombineFn(v *FunctionSpec) {
	x.xxx_hidden_CombineFn = v
}

func (x *CombiningStateSpec) HasCombineFn() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_CombineFn != nil
}

func (x *CombiningStateSpec) ClearCombineFn() {
	x.xxx_hidden_CombineFn = nil
}

type CombiningStateSpec_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	AccumulatorCoderId string
	CombineFn          *FunctionSpec
}

func (b0 CombiningStateSpec_builder) Build() *CombiningStateSpec {
	m0 := &CombiningStateSpec{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_AccumulatorCoderId = b.AccumulatorCoderId
	x.xxx_hidden_CombineFn = b.CombineFn
	return m0
}

type MapStateSpec struct {
	state                   protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_KeyCoderId   string                 `protobuf:"bytes,1,opt,name=key_coder_id,json=keyCoderId,proto3" json:"key_coder_id,omitempty"`
	xxx_hidden_ValueCoderId string                 `protobuf:"bytes,2,opt,name=value_coder_id,json=valueCoderId,proto3" json:"value_coder_id,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *MapStateSpec) Reset() {
	*x = MapStateSpec{}
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MapStateSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapStateSpec) ProtoMessage() {}

func (x *MapStateSpec) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *MapStateSpec) GetKeyCoderId() string {
	if x != nil {
		return x.xxx_hidden_KeyCoderId
	}
	return ""
}

func (x *MapStateSpec) GetValueCoderId() string {
	if x != nil {
		return x.xxx_hidden_ValueCoderId
	}
	return ""
}

func (x *MapStateSpec) SetKeyCoderId(v string) {
	x.xxx_hidden_KeyCoderId = v
}

func (x *MapStateSpec) SetValueCoderId(v string) {
	x.xxx_hidden_ValueCoderId = v
}

type MapStateSpec_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	KeyCoderId   string
	ValueCoderId string
}

func (b0 MapStateSpec_builder) Build() *MapStateSpec {
	m0 := &MapStateSpec{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_KeyCoderId = b.KeyCoderId
	x.xxx_hidden_ValueCoderId = b.ValueCoderId
	return m0
}

type MultimapStateSpec struct {
	state                   protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_KeyCoderId   string                 `protobuf:"bytes,1,opt,name=key_coder_id,json=keyCoderId,proto3" json:"key_coder_id,omitempty"`
	xxx_hidden_ValueCoderId string                 `protobuf:"bytes,2,opt,name=value_coder_id,json=valueCoderId,proto3" json:"value_coder_id,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *MultimapStateSpec) Reset() {
	*x = MultimapStateSpec{}
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MultimapStateSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultimapStateSpec) ProtoMessage() {}

func (x *MultimapStateSpec) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *MultimapStateSpec) GetKeyCoderId() string {
	if x != nil {
		return x.xxx_hidden_KeyCoderId
	}
	return ""
}

func (x *MultimapStateSpec) GetValueCoderId() string {
	if x != nil {
		return x.xxx_hidden_ValueCoderId
	}
	return ""
}

func (x *MultimapStateSpec) SetKeyCoderId(v string) {
	x.xxx_hidden_KeyCoderId = v
}

func (x *MultimapStateSpec) SetValueCoderId(v string) {
	x.xxx_hidden_ValueCoderId = v
}

type MultimapStateSpec_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	KeyCoderId   string
	ValueCoderId string
}

func (b0 MultimapStateSpec_builder) Build() *MultimapStateSpec {
	m0 := &MultimapStateSpec{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_KeyCoderId = b.KeyCoderId
	x.xxx_hidden_ValueCoderId = b.ValueCoderId
	return m0
}

type SetStateSpec struct {
	state                     protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_ElementCoderId string                 `protobuf:"bytes,1,opt,name=element_coder_id,json=elementCoderId,proto3" json:"element_coder_id,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *SetStateSpec) Reset() {
	*x = SetStateSpec{}
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetStateSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetStateSpec) ProtoMessage() {}

func (x *SetStateSpec) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *SetStateSpec) GetElementCoderId() string {
	if x != nil {
		return x.xxx_hidden_ElementCoderId
	}
	return ""
}

func (x *SetStateSpec) SetElementCoderId(v string) {
	x.xxx_hidden_ElementCoderId = v
}

type SetStateSpec_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	ElementCoderId string
}

func (b0 SetStateSpec_builder) Build() *SetStateSpec {
	m0 := &SetStateSpec{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_ElementCoderId = b.ElementCoderId
	return m0
}

type TimerFamilySpec struct {
	state                         protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_TimeDomain         TimeDomain_Enum        `protobuf:"varint,1,opt,name=time_domain,json=timeDomain,proto3,enum=org.apache.beam.model.pipeline.v1.TimeDomain_Enum" json:"time_domain,omitempty"`
	xxx_hidden_TimerFamilyCoderId string                 `protobuf:"bytes,2,opt,name=timer_family_coder_id,json=timerFamilyCoderId,proto3" json:"timer_family_coder_id,omitempty"`
	unknownFields                 protoimpl.UnknownFields
	sizeCache                     protoimpl.SizeCache
}

func (x *TimerFamilySpec) Reset() {
	*x = TimerFamilySpec{}
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TimerFamilySpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimerFamilySpec) ProtoMessage() {}

func (x *TimerFamilySpec) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *TimerFamilySpec) GetTimeDomain() TimeDomain_Enum {
	if x != nil {
		return x.xxx_hidden_TimeDomain
	}
	return TimeDomain_UNSPECIFIED
}

func (x *TimerFamilySpec) GetTimerFamilyCoderId() string {
	if x != nil {
		return x.xxx_hidden_TimerFamilyCoderId
	}
	return ""
}

func (x *TimerFamilySpec) SetTimeDomain(v TimeDomain_Enum) {
	x.xxx_hidden_TimeDomain = v
}

func (x *TimerFamilySpec) SetTimerFamilyCoderId(v string) {
	x.xxx_hidden_TimerFamilyCoderId = v
}

type TimerFamilySpec_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	TimeDomain         TimeDomain_Enum
	TimerFamilyCoderId string
}

func (b0 TimerFamilySpec_builder) Build() *TimerFamilySpec {
	m0 := &TimerFamilySpec{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_TimeDomain = b.TimeDomain
	x.xxx_hidden_TimerFamilyCoderId = b.TimerFamilyCoderId
	return m0
}

type IsBounded struct {
	state         protoimpl.MessageState `protogen:"opaque.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IsBounded) Reset() {
	*x = IsBounded{}
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IsBounded) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsBounded) ProtoMessage() {}

func (x *IsBounded) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

type IsBounded_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

}

func (b0 IsBounded_builder) Build() *IsBounded {
	m0 := &IsBounded{}
	b, x := &b0, m0
	_, _ = b, x
	return m0
}

// The payload for the primitive Read transform.
type ReadPayload struct {
	state                protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Source    *FunctionSpec          `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	xxx_hidden_IsBounded IsBounded_Enum         `protobuf:"varint,2,opt,name=is_bounded,json=isBounded,proto3,enum=org.apache.beam.model.pipeline.v1.IsBounded_Enum" json:"is_bounded,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *ReadPayload) Reset() {
	*x = ReadPayload{}
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadPayload) ProtoMessage() {}

func (x *ReadPayload) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ReadPayload) GetSource() *FunctionSpec {
	if x != nil {
		return x.xxx_hidden_Source
	}
	return nil
}

func (x *ReadPayload) GetIsBounded() IsBounded_Enum {
	if x != nil {
		return x.xxx_hidden_IsBounded
	}
	return IsBounded_UNSPECIFIED
}

func (x *ReadPayload) SetSource(v *FunctionSpec) {
	x.xxx_hidden_Source = v
}

func (x *ReadPayload) SetIsBounded(v IsBounded_Enum) {
	x.xxx_hidden_IsBounded = v
}

func (x *ReadPayload) HasSource() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Source != nil
}

func (x *ReadPayload) ClearSource() {
	x.xxx_hidden_Source = nil
}

type ReadPayload_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// (Required) The FunctionSpec of the source for this Read.
	Source *FunctionSpec
	// (Required) Whether the source is bounded or unbounded
	IsBounded IsBounded_Enum
}

func (b0 ReadPayload_builder) Build() *ReadPayload {
	m0 := &ReadPayload{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Source = b.Source
	x.xxx_hidden_IsBounded = b.IsBounded
	return m0
}

// The payload for the WindowInto transform.
type WindowIntoPayload struct {
	state               protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_WindowFn *FunctionSpec          `protobuf:"bytes,1,opt,name=window_fn,json=windowFn,proto3" json:"window_fn,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *WindowIntoPayload) Reset() {
	*x = WindowIntoPayload{}
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WindowIntoPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WindowIntoPayload) ProtoMessage() {}

func (x *WindowIntoPayload) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *WindowIntoPayload) GetWindowFn() *FunctionSpec {
	if x != nil {
		return x.xxx_hidden_WindowFn
	}
	return nil
}

func (x *WindowIntoPayload) SetWindowFn(v *FunctionSpec) {
	x.xxx_hidden_WindowFn = v
}

func (x *WindowIntoPayload) HasWindowFn() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_WindowFn != nil
}

func (x *WindowIntoPayload) ClearWindowFn() {
	x.xxx_hidden_WindowFn = nil
}

type WindowIntoPayload_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// (Required) The FunctionSpec of the WindowFn.
	WindowFn *FunctionSpec
}

func (b0 WindowIntoPayload_builder) Build() *WindowIntoPayload {
	m0 := &WindowIntoPayload{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_WindowFn = b.WindowFn
	return m0
}

// The payload for the special-but-not-primitive Combine transform.
type CombinePayload struct {
	state                         protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_CombineFn          *FunctionSpec          `protobuf:"bytes,1,opt,name=combine_fn,json=combineFn,proto3" json:"combine_fn,omitempty"`
	xxx_hidden_AccumulatorCoderId string                 `protobuf:"bytes,2,opt,name=accumulator_coder_id,json=accumulatorCoderId,proto3" json:"accumulator_coder_id,omitempty"`
	unknownFields                 protoimpl.UnknownFields
	sizeCache                     protoimpl.SizeCache
}

func (x *CombinePayload) Reset() {
	*x = CombinePayload{}
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CombinePayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CombinePayload) ProtoMessage() {}

func (x *CombinePayload) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *CombinePayload) GetCombineFn() *FunctionSpec {
	if x != nil {
		return x.xxx_hidden_CombineFn
	}
	return nil
}

func (x *CombinePayload) GetAccumulatorCoderId() string {
	if x != nil {
		return x.xxx_hidden_AccumulatorCoderId
	}
	return ""
}

func (x *CombinePayload) SetCombineFn(v *FunctionSpec) {
	x.xxx_hidden_CombineFn = v
}

func (x *CombinePayload) SetAccumulatorCoderId(v string) {
	x.xxx_hidden_AccumulatorCoderId = v
}

func (x *CombinePayload) HasCombineFn() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_CombineFn != nil
}

func (x *CombinePayload) ClearCombineFn() {
	x.xxx_hidden_CombineFn = nil
}

type CombinePayload_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// (Required) The FunctionSpec of the CombineFn.
	CombineFn *FunctionSpec
	// (Required) A reference to the Coder to use for accumulators of the CombineFn
	AccumulatorCoderId string
}

func (b0 CombinePayload_builder) Build() *CombinePayload {
	m0 := &CombinePayload{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_CombineFn = b.CombineFn
	x.xxx_hidden_AccumulatorCoderId = b.AccumulatorCoderId
	return m0
}

// The payload for the test-only primitive TestStream
type TestStreamPayload struct {
	state               protoimpl.MessageState      `protogen:"opaque.v1"`
	xxx_hidden_CoderId  string                      `protobuf:"bytes,1,opt,name=coder_id,json=coderId,proto3" json:"coder_id,omitempty"`
	xxx_hidden_Events   *[]*TestStreamPayload_Event `protobuf:"bytes,2,rep,name=events,proto3" json:"events,omitempty"`
	xxx_hidden_Endpoint *ApiServiceDescriptor       `protobuf:"bytes,3,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *TestStreamPayload) Reset() {
	*x = TestStreamPayload{}
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestStreamPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestStreamPayload) ProtoMessage() {}

func (x *TestStreamPayload) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *TestStreamPayload) GetCoderId() string {
	if x != nil {
		return x.xxx_hidden_CoderId
	}
	return ""
}

func (x *TestStreamPayload) GetEvents() []*TestStreamPayload_Event {
	if x != nil {
		if x.xxx_hidden_Events != nil {
			return *x.xxx_hidden_Events
		}
	}
	return nil
}

func (x *TestStreamPayload) GetEndpoint() *ApiServiceDescriptor {
	if x != nil {
		return x.xxx_hidden_Endpoint
	}
	return nil
}

func (x *TestStreamPayload) SetCoderId(v string) {
	x.xxx_hidden_CoderId = v
}

func (x *TestStreamPayload) SetEvents(v []*TestStreamPayload_Event) {
	x.xxx_hidden_Events = &v
}

func (x *TestStreamPayload) SetEndpoint(v *ApiServiceDescriptor) {
	x.xxx_hidden_Endpoint = v
}

func (x *TestStreamPayload) HasEndpoint() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Endpoint != nil
}

func (x *TestStreamPayload) ClearEndpoint() {
	x.xxx_hidden_Endpoint = nil
}

type TestStreamPayload_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// (Required) the coder for elements in the TestStream events
	CoderId string
	// (Optional) If specified, the TestStream will replay these events.
	Events []*TestStreamPayload_Event
	// (Optional) If specified, points to a TestStreamService to be
	// used to retrieve events.
	Endpoint *ApiServiceDescriptor
}

func (b0 TestStreamPayload_builder) Build() *TestStreamPayload {
	m0 := &TestStreamPayload{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_CoderId = b.CoderId
	x.xxx_hidden_Events = &b.Events
	x.xxx_hidden_Endpoint = b.Endpoint
	return m0
}

type EventsRequest struct {
	state                protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_OutputIds []string               `protobuf:"bytes,1,rep,name=output_ids,json=outputIds,proto3" json:"output_ids,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *EventsRequest) Reset() {
	*x = EventsRequest{}
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventsRequest) ProtoMessage() {}

func (x *EventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *EventsRequest) GetOutputIds() []string {
	if x != nil {
		return x.xxx_hidden_OutputIds
	}
	return nil
}

func (x *EventsRequest) SetOutputIds(v []string) {
	x.xxx_hidden_OutputIds = v
}

type EventsRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The set of PCollections to read from. These are the PTransform outputs
	// local names. These are a subset of the TestStream's outputs. This allows
	// Interactive Beam to cache many PCollections from a pipeline then replay a
	// subset of them.
	OutputIds []string
}

func (b0 EventsRequest_builder) Build() *EventsRequest {
	m0 := &EventsRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_OutputIds = b.OutputIds
	return m0
}

// The payload for the special-but-not-primitive WriteFiles transform.
type WriteFilesPayload struct {
	state                               protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Sink                     *FunctionSpec          `protobuf:"bytes,1,opt,name=sink,proto3" json:"sink,omitempty"`
	xxx_hidden_FormatFunction           *FunctionSpec          `protobuf:"bytes,2,opt,name=format_function,json=formatFunction,proto3" json:"format_function,omitempty"`
	xxx_hidden_WindowedWrites           bool                   `protobuf:"varint,3,opt,name=windowed_writes,json=windowedWrites,proto3" json:"windowed_writes,omitempty"`
	xxx_hidden_RunnerDeterminedSharding bool                   `protobuf:"varint,4,opt,name=runner_determined_sharding,json=runnerDeterminedSharding,proto3" json:"runner_determined_sharding,omitempty"`
	xxx_hidden_SideInputs               map[string]*SideInput  `protobuf:"bytes,5,rep,name=side_inputs,json=sideInputs,proto3" json:"side_inputs,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	xxx_hidden_AutoSharded              bool                   `protobuf:"varint,6,opt,name=auto_sharded,json=autoSharded,proto3" json:"auto_sharded,omitempty"`
	unknownFields                       protoimpl.UnknownFields
	sizeCache                           protoimpl.SizeCache
}

func (x *WriteFilesPayload) Reset() {
	*x = WriteFilesPayload{}
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WriteFilesPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteFilesPayload) ProtoMessage() {}

func (x *WriteFilesPayload) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *WriteFilesPayload) GetSink() *FunctionSpec {
	if x != nil {
		return x.xxx_hidden_Sink
	}
	return nil
}

func (x *WriteFilesPayload) GetFormatFunction() *FunctionSpec {
	if x != nil {
		return x.xxx_hidden_FormatFunction
	}
	return nil
}

func (x *WriteFilesPayload) GetWindowedWrites() bool {
	if x != nil {
		return x.xxx_hidden_WindowedWrites
	}
	return false
}

func (x *WriteFilesPayload) GetRunnerDeterminedSharding() bool {
	if x != nil {
		return x.xxx_hidden_RunnerDeterminedSharding
	}
	return false
}

func (x *WriteFilesPayload) GetSideInputs() map[string]*SideInput {
	if x != nil {
		return x.xxx_hidden_SideInputs
	}
	return nil
}

func (x *WriteFilesPayload) GetAutoSharded() bool {
	if x != nil {
		return x.xxx_hidden_AutoSharded
	}
	return false
}

func (x *WriteFilesPayload) SetSink(v *FunctionSpec) {
	x.xxx_hidden_Sink = v
}

func (x *WriteFilesPayload) SetFormatFunction(v *FunctionSpec) {
	x.xxx_hidden_FormatFunction = v
}

func (x *WriteFilesPayload) SetWindowedWrites(v bool) {
	x.xxx_hidden_WindowedWrites = v
}

func (x *WriteFilesPayload) SetRunnerDeterminedSharding(v bool) {
	x.xxx_hidden_RunnerDeterminedSharding = v
}

func (x *WriteFilesPayload) SetSideInputs(v map[string]*SideInput) {
	x.xxx_hidden_SideInputs = v
}

func (x *WriteFilesPayload) SetAutoSharded(v bool) {
	x.xxx_hidden_AutoSharded = v
}

func (x *WriteFilesPayload) HasSink() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Sink != nil
}

func (x *WriteFilesPayload) HasFormatFunction() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_FormatFunction != nil
}

func (x *WriteFilesPayload) ClearSink() {
	x.xxx_hidden_Sink = nil
}

func (x *WriteFilesPayload) ClearFormatFunction() {
	x.xxx_hidden_FormatFunction = nil
}

type WriteFilesPayload_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// (Required) The FunctionSpec of the FileBasedSink.
	Sink *FunctionSpec
	// (Required) The format function.
	FormatFunction           *FunctionSpec
	WindowedWrites           bool
	RunnerDeterminedSharding bool
	SideInputs               map[string]*SideInput
	// This is different from runner based sharding. This is done by the runner backend, where as runner_determined_sharding
	// is by the runner translator
	AutoSharded bool
}

func (b0 WriteFilesPayload_builder) Build() *WriteFilesPayload {
	m0 := &WriteFilesPayload{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Sink = b.Sink
	x.xxx_hidden_FormatFunction = b.FormatFunction
	x.xxx_hidden_WindowedWrites = b.WindowedWrites
	x.xxx_hidden_RunnerDeterminedSharding = b.RunnerDeterminedSharding
	x.xxx_hidden_SideInputs = b.SideInputs
	x.xxx_hidden_AutoSharded = b.AutoSharded
	return m0
}

// Payload used by Google Cloud Pub/Sub read transform.
// This can be used by runners that wish to override Beam Pub/Sub read transform
// with a native implementation.
// The SDK should guarantee that only one of topic, subscription,
// topic_runtime_overridden and subscription_runtime_overridden is set.
// The output of PubSubReadPayload should be bytes of serialized PubsubMessage
// proto if with_attributes == true. Otherwise, the bytes is the raw payload.
type PubSubReadPayload struct {
	state                                    protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Topic                         string                 `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	xxx_hidden_Subscription                  string                 `protobuf:"bytes,2,opt,name=subscription,proto3" json:"subscription,omitempty"`
	xxx_hidden_TimestampAttribute            string                 `protobuf:"bytes,3,opt,name=timestamp_attribute,json=timestampAttribute,proto3" json:"timestamp_attribute,omitempty"`
	xxx_hidden_IdAttribute                   string                 `protobuf:"bytes,4,opt,name=id_attribute,json=idAttribute,proto3" json:"id_attribute,omitempty"`
	xxx_hidden_WithAttributes                bool                   `protobuf:"varint,5,opt,name=with_attributes,json=withAttributes,proto3" json:"with_attributes,omitempty"`
	xxx_hidden_TopicRuntimeOverridden        string                 `protobuf:"bytes,6,opt,name=topic_runtime_overridden,json=topicRuntimeOverridden,proto3" json:"topic_runtime_overridden,omitempty"`
	xxx_hidden_SubscriptionRuntimeOverridden string                 `protobuf:"bytes,7,opt,name=subscription_runtime_overridden,json=subscriptionRuntimeOverridden,proto3" json:"subscription_runtime_overridden,omitempty"`
	unknownFields                            protoimpl.UnknownFields
	sizeCache                                protoimpl.SizeCache
}

func (x *PubSubReadPayload) Reset() {
	*x = PubSubReadPayload{}
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PubSubReadPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PubSubReadPayload) ProtoMessage() {}

func (x *PubSubReadPayload) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *PubSubReadPayload) GetTopic() string {
	if x != nil {
		return x.xxx_hidden_Topic
	}
	return ""
}

func (x *PubSubReadPayload) GetSubscription() string {
	if x != nil {
		return x.xxx_hidden_Subscription
	}
	return ""
}

func (x *PubSubReadPayload) GetTimestampAttribute() string {
	if x != nil {
		return x.xxx_hidden_TimestampAttribute
	}
	return ""
}

func (x *PubSubReadPayload) GetIdAttribute() string {
	if x != nil {
		return x.xxx_hidden_IdAttribute
	}
	return ""
}

func (x *PubSubReadPayload) GetWithAttributes() bool {
	if x != nil {
		return x.xxx_hidden_WithAttributes
	}
	return false
}

func (x *PubSubReadPayload) GetTopicRuntimeOverridden() string {
	if x != nil {
		return x.xxx_hidden_TopicRuntimeOverridden
	}
	return ""
}

func (x *PubSubReadPayload) GetSubscriptionRuntimeOverridden() string {
	if x != nil {
		return x.xxx_hidden_SubscriptionRuntimeOverridden
	}
	return ""
}

func (x *PubSubReadPayload) SetTopic(v string) {
	x.xxx_hidden_Topic = v
}

func (x *PubSubReadPayload) SetSubscription(v string) {
	x.xxx_hidden_Subscription = v
}

func (x *PubSubReadPayload) SetTimestampAttribute(v string) {
	x.xxx_hidden_TimestampAttribute = v
}

func (x *PubSubReadPayload) SetIdAttribute(v string) {
	x.xxx_hidden_IdAttribute = v
}

func (x *PubSubReadPayload) SetWithAttributes(v bool) {
	x.xxx_hidden_WithAttributes = v
}

func (x *PubSubReadPayload) SetTopicRuntimeOverridden(v string) {
	x.xxx_hidden_TopicRuntimeOverridden = v
}

func (x *PubSubReadPayload) SetSubscriptionRuntimeOverridden(v string) {
	x.xxx_hidden_SubscriptionRuntimeOverridden = v
}

type PubSubReadPayload_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Topic to read from. Exactly one of topic or subscription should be set.
	// Topic format is: /topics/project_id/subscription_name
	Topic string
	// Subscription to read from. Exactly one of topic or subscription should be set.
	// Subscription format is: /subscriptions/project_id/subscription_name
	Subscription string
	// Attribute that provides element timestamps.
	TimestampAttribute string
	// Attribute to be used for uniquely identifying messages.
	IdAttribute string
	// If true, reads Pub/Sub payload as well as attributes. If false, reads only the payload.
	WithAttributes bool
	// If set, the topic is expected to be provided during runtime.
	TopicRuntimeOverridden string
	// If set, the subscription that is expected to be provided during runtime.
	SubscriptionRuntimeOverridden string
}

func (b0 PubSubReadPayload_builder) Build() *PubSubReadPayload {
	m0 := &PubSubReadPayload{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Topic = b.Topic
	x.xxx_hidden_Subscription = b.Subscription
	x.xxx_hidden_TimestampAttribute = b.TimestampAttribute
	x.xxx_hidden_IdAttribute = b.IdAttribute
	x.xxx_hidden_WithAttributes = b.WithAttributes
	x.xxx_hidden_TopicRuntimeOverridden = b.TopicRuntimeOverridden
	x.xxx_hidden_SubscriptionRuntimeOverridden = b.SubscriptionRuntimeOverridden
	return m0
}

// Payload used by Google Cloud Pub/Sub write transform.
// This can be used by runners that wish to override Beam Pub/Sub write transform
// with a native implementation.
// The SDK should guarantee that only one of topic and topic_runtime_overridden
// is set.
// The output of PubSubWritePayload should be bytes if serialized PubsubMessage
// proto.
type PubSubWritePayload struct {
	state                             protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Topic                  string                 `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	xxx_hidden_TimestampAttribute     string                 `protobuf:"bytes,2,opt,name=timestamp_attribute,json=timestampAttribute,proto3" json:"timestamp_attribute,omitempty"`
	xxx_hidden_IdAttribute            string                 `protobuf:"bytes,3,opt,name=id_attribute,json=idAttribute,proto3" json:"id_attribute,omitempty"`
	xxx_hidden_TopicRuntimeOverridden string                 `protobuf:"bytes,4,opt,name=topic_runtime_overridden,json=topicRuntimeOverridden,proto3" json:"topic_runtime_overridden,omitempty"`
	unknownFields                     protoimpl.UnknownFields
	sizeCache                         protoimpl.SizeCache
}

func (x *PubSubWritePayload) Reset() {
	*x = PubSubWritePayload{}
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PubSubWritePayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PubSubWritePayload) ProtoMessage() {}

func (x *PubSubWritePayload) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *PubSubWritePayload) GetTopic() string {
	if x != nil {
		return x.xxx_hidden_Topic
	}
	return ""
}

func (x *PubSubWritePayload) GetTimestampAttribute() string {
	if x != nil {
		return x.xxx_hidden_TimestampAttribute
	}
	return ""
}

func (x *PubSubWritePayload) GetIdAttribute() string {
	if x != nil {
		return x.xxx_hidden_IdAttribute
	}
	return ""
}

func (x *PubSubWritePayload) GetTopicRuntimeOverridden() string {
	if x != nil {
		return x.xxx_hidden_TopicRuntimeOverridden
	}
	return ""
}

func (x *PubSubWritePayload) SetTopic(v string) {
	x.xxx_hidden_Topic = v
}

func (x *PubSubWritePayload) SetTimestampAttribute(v string) {
	x.xxx_hidden_TimestampAttribute = v
}

func (x *PubSubWritePayload) SetIdAttribute(v string) {
	x.xxx_hidden_IdAttribute = v
}

func (x *PubSubWritePayload) SetTopicRuntimeOverridden(v string) {
	x.xxx_hidden_TopicRuntimeOverridden = v
}

type PubSubWritePayload_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Topic to write to.
	// Topic format is: /topics/project_id/subscription_name
	Topic string
	// Attribute that provides element timestamps.
	TimestampAttribute string
	// Attribute that uniquely identify messages.
	IdAttribute string
	// If set, the topic is expected to be provided during runtime.
	TopicRuntimeOverridden string
}

func (b0 PubSubWritePayload_builder) Build() *PubSubWritePayload {
	m0 := &PubSubWritePayload{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Topic = b.Topic
	x.xxx_hidden_TimestampAttribute = b.TimestampAttribute
	x.xxx_hidden_IdAttribute = b.IdAttribute
	x.xxx_hidden_TopicRuntimeOverridden = b.TopicRuntimeOverridden
	return m0
}

// Payload for GroupIntoBatches composite transform.
type GroupIntoBatchesPayload struct {
	state                                 protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_BatchSize                  int64                  `protobuf:"varint,1,opt,name=batch_size,json=batchSize,proto3" json:"batch_size,omitempty"`
	xxx_hidden_BatchSizeBytes             int64                  `protobuf:"varint,3,opt,name=batch_size_bytes,json=batchSizeBytes,proto3" json:"batch_size_bytes,omitempty"`
	xxx_hidden_MaxBufferingDurationMillis int64                  `protobuf:"varint,2,opt,name=max_buffering_duration_millis,json=maxBufferingDurationMillis,proto3" json:"max_buffering_duration_millis,omitempty"`
	unknownFields                         protoimpl.UnknownFields
	sizeCache                             protoimpl.SizeCache
}

func (x *GroupIntoBatchesPayload) Reset() {
	*x = GroupIntoBatchesPayload{}
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GroupIntoBatchesPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupIntoBatchesPayload) ProtoMessage() {}

func (x *GroupIntoBatchesPayload) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *GroupIntoBatchesPayload) GetBatchSize() int64 {
	if x != nil {
		return x.xxx_hidden_BatchSize
	}
	return 0
}

func (x *GroupIntoBatchesPayload) GetBatchSizeBytes() int64 {
	if x != nil {
		return x.xxx_hidden_BatchSizeBytes
	}
	return 0
}

func (x *GroupIntoBatchesPayload) GetMaxBufferingDurationMillis() int64 {
	if x != nil {
		return x.xxx_hidden_MaxBufferingDurationMillis
	}
	return 0
}

func (x *GroupIntoBatchesPayload) SetBatchSize(v int64) {
	x.xxx_hidden_BatchSize = v
}

func (x *GroupIntoBatchesPayload) SetBatchSizeBytes(v int64) {
	x.xxx_hidden_BatchSizeBytes = v
}

func (x *GroupIntoBatchesPayload) SetMaxBufferingDurationMillis(v int64) {
	x.xxx_hidden_MaxBufferingDurationMillis = v
}

type GroupIntoBatchesPayload_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Max size of a batch.
	BatchSize int64
	// Max byte size of a batch in element.
	BatchSizeBytes int64
	// (Optional) Max duration a batch is allowed to be cached in states.
	MaxBufferingDurationMillis int64
}

func (b0 GroupIntoBatchesPayload_builder) Build() *GroupIntoBatchesPayload {
	m0 := &GroupIntoBatchesPayload{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_BatchSize = b.BatchSize
	x.xxx_hidden_BatchSizeBytes = b.BatchSizeBytes
	x.xxx_hidden_MaxBufferingDurationMillis = b.MaxBufferingDurationMillis
	return m0
}

type RedistributePayload struct {
	state                      protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_AllowDuplicates bool                   `protobuf:"varint,1,opt,name=allow_duplicates,json=allowDuplicates,proto3" json:"allow_duplicates,omitempty"`
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *RedistributePayload) Reset() {
	*x = RedistributePayload{}
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RedistributePayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedistributePayload) ProtoMessage() {}

func (x *RedistributePayload) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *RedistributePayload) GetAllowDuplicates() bool {
	if x != nil {
		return x.xxx_hidden_AllowDuplicates
	}
	return false
}

func (x *RedistributePayload) SetAllowDuplicates(v bool) {
	x.xxx_hidden_AllowDuplicates = v
}

type RedistributePayload_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	AllowDuplicates bool
}

func (b0 RedistributePayload_builder) Build() *RedistributePayload {
	m0 := &RedistributePayload{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_AllowDuplicates = b.AllowDuplicates
	return m0
}

// A coder, the binary format for serialization and deserialization of data in
// a pipeline.
type Coder struct {
	state                        protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Spec              *FunctionSpec          `protobuf:"bytes,1,opt,name=spec,proto3" json:"spec,omitempty"`
	xxx_hidden_ComponentCoderIds []string               `protobuf:"bytes,2,rep,name=component_coder_ids,json=componentCoderIds,proto3" json:"component_coder_ids,omitempty"`
	unknownFields                protoimpl.UnknownFields
	sizeCache                    protoimpl.SizeCache
}

func (x *Coder) Reset() {
	*x = Coder{}
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Coder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Coder) ProtoMessage() {}

func (x *Coder) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Coder) GetSpec() *FunctionSpec {
	if x != nil {
		return x.xxx_hidden_Spec
	}
	return nil
}

func (x *Coder) GetComponentCoderIds() []string {
	if x != nil {
		return x.xxx_hidden_ComponentCoderIds
	}
	return nil
}

func (x *Coder) SetSpec(v *FunctionSpec) {
	x.xxx_hidden_Spec = v
}

func (x *Coder) SetComponentCoderIds(v []string) {
	x.xxx_hidden_ComponentCoderIds = v
}

func (x *Coder) HasSpec() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Spec != nil
}

func (x *Coder) ClearSpec() {
	x.xxx_hidden_Spec = nil
}

type Coder_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// (Required) A specification for the coder, as a URN plus parameters. This
	// may be a cross-language agreed-upon format, or it may be a "custom coder"
	// that can only be used by a particular SDK. It does not include component
	// coders, as it is beneficial for these to be comprehensible to a runner
	// regardless of whether the binary format is agreed-upon.
	Spec *FunctionSpec
	// (Optional) If this coder is parametric, such as ListCoder(VarIntCoder),
	// this is a list of the components. In order for encodings to be identical,
	// the FunctionSpec and all components must be identical, recursively.
	ComponentCoderIds []string
}

func (b0 Coder_builder) Build() *Coder {
	m0 := &Coder{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Spec = b.Spec
	x.xxx_hidden_ComponentCoderIds = b.ComponentCoderIds
	return m0
}

type StandardCoders struct {
	state         protoimpl.MessageState `protogen:"opaque.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StandardCoders) Reset() {
	*x = StandardCoders{}
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StandardCoders) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StandardCoders) ProtoMessage() {}

func (x *StandardCoders) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

type StandardCoders_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

}

func (b0 StandardCoders_builder) Build() *StandardCoders {
	m0 := &StandardCoders{}
	b, x := &b0, m0
	_, _ = b, x
	return m0
}

// A windowing strategy describes the window function, triggering, allowed
// lateness, and accumulation mode for a PCollection.
//
// TODO: consider inlining field on PCollection
type WindowingStrategy struct {
	state                         protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_WindowFn           *FunctionSpec          `protobuf:"bytes,1,opt,name=window_fn,json=windowFn,proto3" json:"window_fn,omitempty"`
	xxx_hidden_MergeStatus        MergeStatus_Enum       `protobuf:"varint,2,opt,name=merge_status,json=mergeStatus,proto3,enum=org.apache.beam.model.pipeline.v1.MergeStatus_Enum" json:"merge_status,omitempty"`
	xxx_hidden_WindowCoderId      string                 `protobuf:"bytes,3,opt,name=window_coder_id,json=windowCoderId,proto3" json:"window_coder_id,omitempty"`
	xxx_hidden_Trigger            *Trigger               `protobuf:"bytes,4,opt,name=trigger,proto3" json:"trigger,omitempty"`
	xxx_hidden_AccumulationMode   AccumulationMode_Enum  `protobuf:"varint,5,opt,name=accumulation_mode,json=accumulationMode,proto3,enum=org.apache.beam.model.pipeline.v1.AccumulationMode_Enum" json:"accumulation_mode,omitempty"`
	xxx_hidden_OutputTime         OutputTime_Enum        `protobuf:"varint,6,opt,name=output_time,json=outputTime,proto3,enum=org.apache.beam.model.pipeline.v1.OutputTime_Enum" json:"output_time,omitempty"`
	xxx_hidden_ClosingBehavior    ClosingBehavior_Enum   `protobuf:"varint,7,opt,name=closing_behavior,json=closingBehavior,proto3,enum=org.apache.beam.model.pipeline.v1.ClosingBehavior_Enum" json:"closing_behavior,omitempty"`
	xxx_hidden_AllowedLateness    int64                  `protobuf:"varint,8,opt,name=allowed_lateness,json=allowedLateness,proto3" json:"allowed_lateness,omitempty"`
	xxx_hidden_OnTimeBehavior     OnTimeBehavior_Enum    `protobuf:"varint,9,opt,name=on_time_behavior,json=onTimeBehavior,proto3,enum=org.apache.beam.model.pipeline.v1.OnTimeBehavior_Enum" json:"on_time_behavior,omitempty"`
	xxx_hidden_AssignsToOneWindow bool                   `protobuf:"varint,10,opt,name=assigns_to_one_window,json=assignsToOneWindow,proto3" json:"assigns_to_one_window,omitempty"`
	xxx_hidden_EnvironmentId      string                 `protobuf:"bytes,11,opt,name=environment_id,json=environmentId,proto3" json:"environment_id,omitempty"`
	unknownFields                 protoimpl.UnknownFields
	sizeCache                     protoimpl.SizeCache
}

func (x *WindowingStrategy) Reset() {
	*x = WindowingStrategy{}
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WindowingStrategy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WindowingStrategy) ProtoMessage() {}

func (x *WindowingStrategy) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *WindowingStrategy) GetWindowFn() *FunctionSpec {
	if x != nil {
		return x.xxx_hidden_WindowFn
	}
	return nil
}

func (x *WindowingStrategy) GetMergeStatus() MergeStatus_Enum {
	if x != nil {
		return x.xxx_hidden_MergeStatus
	}
	return MergeStatus_UNSPECIFIED
}

func (x *WindowingStrategy) GetWindowCoderId() string {
	if x != nil {
		return x.xxx_hidden_WindowCoderId
	}
	return ""
}

func (x *WindowingStrategy) GetTrigger() *Trigger {
	if x != nil {
		return x.xxx_hidden_Trigger
	}
	return nil
}

func (x *WindowingStrategy) GetAccumulationMode() AccumulationMode_Enum {
	if x != nil {
		return x.xxx_hidden_AccumulationMode
	}
	return AccumulationMode_UNSPECIFIED
}

func (x *WindowingStrategy) GetOutputTime() OutputTime_Enum {
	if x != nil {
		return x.xxx_hidden_OutputTime
	}
	return OutputTime_UNSPECIFIED
}

func (x *WindowingStrategy) GetClosingBehavior() ClosingBehavior_Enum {
	if x != nil {
		return x.xxx_hidden_ClosingBehavior
	}
	return ClosingBehavior_UNSPECIFIED
}

func (x *WindowingStrategy) GetAllowedLateness() int64 {
	if x != nil {
		return x.xxx_hidden_AllowedLateness
	}
	return 0
}

func (x *WindowingStrategy) GetOnTimeBehavior() OnTimeBehavior_Enum {
	if x != nil {
		return x.xxx_hidden_OnTimeBehavior
	}
	return OnTimeBehavior_UNSPECIFIED
}

func (x *WindowingStrategy) GetAssignsToOneWindow() bool {
	if x != nil {
		return x.xxx_hidden_AssignsToOneWindow
	}
	return false
}

func (x *WindowingStrategy) GetEnvironmentId() string {
	if x != nil {
		return x.xxx_hidden_EnvironmentId
	}
	return ""
}

func (x *WindowingStrategy) SetWindowFn(v *FunctionSpec) {
	x.xxx_hidden_WindowFn = v
}

func (x *WindowingStrategy) SetMergeStatus(v MergeStatus_Enum) {
	x.xxx_hidden_MergeStatus = v
}

func (x *WindowingStrategy) SetWindowCoderId(v string) {
	x.xxx_hidden_WindowCoderId = v
}

func (x *WindowingStrategy) SetTrigger(v *Trigger) {
	x.xxx_hidden_Trigger = v
}

func (x *WindowingStrategy) SetAccumulationMode(v AccumulationMode_Enum) {
	x.xxx_hidden_AccumulationMode = v
}

func (x *WindowingStrategy) SetOutputTime(v OutputTime_Enum) {
	x.xxx_hidden_OutputTime = v
}

func (x *WindowingStrategy) SetClosingBehavior(v ClosingBehavior_Enum) {
	x.xxx_hidden_ClosingBehavior = v
}

func (x *WindowingStrategy) SetAllowedLateness(v int64) {
	x.xxx_hidden_AllowedLateness = v
}

func (x *WindowingStrategy) SetOnTimeBehavior(v OnTimeBehavior_Enum) {
	x.xxx_hidden_OnTimeBehavior = v
}

func (x *WindowingStrategy) SetAssignsToOneWindow(v bool) {
	x.xxx_hidden_AssignsToOneWindow = v
}

func (x *WindowingStrategy) SetEnvironmentId(v string) {
	x.xxx_hidden_EnvironmentId = v
}

func (x *WindowingStrategy) HasWindowFn() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_WindowFn != nil
}

func (x *WindowingStrategy) HasTrigger() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Trigger != nil
}

func (x *WindowingStrategy) ClearWindowFn() {
	x.xxx_hidden_WindowFn = nil
}

func (x *WindowingStrategy) ClearTrigger() {
	x.xxx_hidden_Trigger = nil
}

type WindowingStrategy_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// (Required) The FunctionSpec of the UDF that assigns windows,
	// merges windows, and shifts timestamps before they are
	// combined according to the OutputTime.
	WindowFn *FunctionSpec
	// (Required) Whether or not the window fn is merging.
	//
	// This knowledge is required for many optimizations.
	MergeStatus MergeStatus_Enum
	// (Required) The coder for the windows of this PCollection.
	WindowCoderId string
	// (Required) The trigger to use when grouping this PCollection.
	Trigger *Trigger
	// (Required) The accumulation mode indicates whether new panes are a full
	// replacement for prior panes or whether they are deltas to be combined
	// with other panes (the combine should correspond to whatever the upstream
	// grouping transform is).
	AccumulationMode AccumulationMode_Enum
	// (Required) The OutputTime specifies, for a grouping transform, how to
	// compute the aggregate timestamp. The window_fn will first possibly shift
	// it later, then the OutputTime takes the max, min, or ignores it and takes
	// the end of window.
	//
	// This is actually only for input to grouping transforms, but since they
	// may be introduced in runner-specific ways, it is carried along with the
	// windowing strategy.
	OutputTime OutputTime_Enum
	// (Required) Indicate when output should be omitted upon window expiration.
	ClosingBehavior ClosingBehavior_Enum
	// (Required) The duration, in milliseconds, beyond the end of a window at
	// which the window becomes droppable.
	AllowedLateness int64
	// (Required) Indicate whether empty on-time panes should be omitted.
	OnTimeBehavior OnTimeBehavior_Enum
	// (Required) Whether or not the window fn assigns inputs to exactly one window
	//
	// This knowledge is required for some optimizations
	AssignsToOneWindow bool
	// (Optional) Environment where the current window_fn should be applied in.
	// Runner that executes the pipeline may choose to override this if needed.
	// If not specified, environment will be decided by the runner.
	EnvironmentId string
}

func (b0 WindowingStrategy_builder) Build() *WindowingStrategy {
	m0 := &WindowingStrategy{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_WindowFn = b.WindowFn
	x.xxx_hidden_MergeStatus = b.MergeStatus
	x.xxx_hidden_WindowCoderId = b.WindowCoderId
	x.xxx_hidden_Trigger = b.Trigger
	x.xxx_hidden_AccumulationMode = b.AccumulationMode
	x.xxx_hidden_OutputTime = b.OutputTime
	x.xxx_hidden_ClosingBehavior = b.ClosingBehavior
	x.xxx_hidden_AllowedLateness = b.AllowedLateness
	x.xxx_hidden_OnTimeBehavior = b.OnTimeBehavior
	x.xxx_hidden_AssignsToOneWindow = b.AssignsToOneWindow
	x.xxx_hidden_EnvironmentId = b.EnvironmentId
	return m0
}

// Whether or not a PCollection's WindowFn is non-merging, merging, or
// merging-but-already-merged, in which case a subsequent GroupByKey is almost
// always going to do something the user does not want
type MergeStatus struct {
	state         protoimpl.MessageState `protogen:"opaque.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MergeStatus) Reset() {
	*x = MergeStatus{}
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MergeStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MergeStatus) ProtoMessage() {}

func (x *MergeStatus) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

type MergeStatus_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

}

func (b0 MergeStatus_builder) Build() *MergeStatus {
	m0 := &MergeStatus{}
	b, x := &b0, m0
	_, _ = b, x
	return m0
}

// Whether or not subsequent outputs of aggregations should be entire
// replacement values or just the aggregation of inputs received since
// the prior output.
type AccumulationMode struct {
	state         protoimpl.MessageState `protogen:"opaque.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AccumulationMode) Reset() {
	*x = AccumulationMode{}
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccumulationMode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccumulationMode) ProtoMessage() {}

func (x *AccumulationMode) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

type AccumulationMode_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

}

func (b0 AccumulationMode_builder) Build() *AccumulationMode {
	m0 := &AccumulationMode{}
	b, x := &b0, m0
	_, _ = b, x
	return m0
}

// Controls whether or not an aggregating transform should output data
// when a window expires.
type ClosingBehavior struct {
	state         protoimpl.MessageState `protogen:"opaque.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClosingBehavior) Reset() {
	*x = ClosingBehavior{}
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClosingBehavior) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClosingBehavior) ProtoMessage() {}

func (x *ClosingBehavior) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

type ClosingBehavior_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

}

func (b0 ClosingBehavior_builder) Build() *ClosingBehavior {
	m0 := &ClosingBehavior{}
	b, x := &b0, m0
	_, _ = b, x
	return m0
}

// Controls whether or not an aggregating transform should output data
// when an on-time pane is empty.
type OnTimeBehavior struct {
	state         protoimpl.MessageState `protogen:"opaque.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OnTimeBehavior) Reset() {
	*x = OnTimeBehavior{}
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OnTimeBehavior) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnTimeBehavior) ProtoMessage() {}

func (x *OnTimeBehavior) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

type OnTimeBehavior_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

}

func (b0 OnTimeBehavior_builder) Build() *OnTimeBehavior {
	m0 := &OnTimeBehavior{}
	b, x := &b0, m0
	_, _ = b, x
	return m0
}

// When a number of windowed, timestamped inputs are aggregated, the timestamp
// for the resulting output.
type OutputTime struct {
	state         protoimpl.MessageState `protogen:"opaque.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OutputTime) Reset() {
	*x = OutputTime{}
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OutputTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutputTime) ProtoMessage() {}

func (x *OutputTime) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

type OutputTime_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

}

func (b0 OutputTime_builder) Build() *OutputTime {
	m0 := &OutputTime{}
	b, x := &b0, m0
	_, _ = b, x
	return m0
}

// The different time domains in the Beam model.
type TimeDomain struct {
	state         protoimpl.MessageState `protogen:"opaque.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TimeDomain) Reset() {
	*x = TimeDomain{}
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TimeDomain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeDomain) ProtoMessage() {}

func (x *TimeDomain) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

type TimeDomain_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

}

func (b0 TimeDomain_builder) Build() *TimeDomain {
	m0 := &TimeDomain{}
	b, x := &b0, m0
	_, _ = b, x
	return m0
}

// A small DSL for expressing when to emit new aggregations
// from a GroupByKey or CombinePerKey
//
// A trigger is described in terms of when it is _ready_ to permit output.
type Trigger struct {
	state              protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Trigger isTrigger_Trigger      `protobuf_oneof:"trigger"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *Trigger) Reset() {
	*x = Trigger{}
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Trigger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trigger) ProtoMessage() {}

func (x *Trigger) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Trigger) GetAfterAll() *Trigger_AfterAll {
	if x != nil {
		if x, ok := x.xxx_hidden_Trigger.(*trigger_AfterAll_); ok {
			return x.AfterAll
		}
	}
	return nil
}

func (x *Trigger) GetAfterAny() *Trigger_AfterAny {
	if x != nil {
		if x, ok := x.xxx_hidden_Trigger.(*trigger_AfterAny_); ok {
			return x.AfterAny
		}
	}
	return nil
}

func (x *Trigger) GetAfterEach() *Trigger_AfterEach {
	if x != nil {
		if x, ok := x.xxx_hidden_Trigger.(*trigger_AfterEach_); ok {
			return x.AfterEach
		}
	}
	return nil
}

func (x *Trigger) GetAfterEndOfWindow() *Trigger_AfterEndOfWindow {
	if x != nil {
		if x, ok := x.xxx_hidden_Trigger.(*trigger_AfterEndOfWindow_); ok {
			return x.AfterEndOfWindow
		}
	}
	return nil
}

func (x *Trigger) GetAfterProcessingTime() *Trigger_AfterProcessingTime {
	if x != nil {
		if x, ok := x.xxx_hidden_Trigger.(*trigger_AfterProcessingTime_); ok {
			return x.AfterProcessingTime
		}
	}
	return nil
}

func (x *Trigger) GetAfterSynchronizedProcessingTime() *Trigger_AfterSynchronizedProcessingTime {
	if x != nil {
		if x, ok := x.xxx_hidden_Trigger.(*trigger_AfterSynchronizedProcessingTime_); ok {
			return x.AfterSynchronizedProcessingTime
		}
	}
	return nil
}

func (x *Trigger) GetAlways() *Trigger_Always {
	if x != nil {
		if x, ok := x.xxx_hidden_Trigger.(*trigger_Always_); ok {
			return x.Always
		}
	}
	return nil
}

func (x *Trigger) GetDefault() *Trigger_Default {
	if x != nil {
		if x, ok := x.xxx_hidden_Trigger.(*trigger_Default_); ok {
			return x.Default
		}
	}
	return nil
}

func (x *Trigger) GetElementCount() *Trigger_ElementCount {
	if x != nil {
		if x, ok := x.xxx_hidden_Trigger.(*trigger_ElementCount_); ok {
			return x.ElementCount
		}
	}
	return nil
}

func (x *Trigger) GetNever() *Trigger_Never {
	if x != nil {
		if x, ok := x.xxx_hidden_Trigger.(*trigger_Never_); ok {
			return x.Never
		}
	}
	return nil
}

func (x *Trigger) GetOrFinally() *Trigger_OrFinally {
	if x != nil {
		if x, ok := x.xxx_hidden_Trigger.(*trigger_OrFinally_); ok {
			return x.OrFinally
		}
	}
	return nil
}

func (x *Trigger) GetRepeat() *Trigger_Repeat {
	if x != nil {
		if x, ok := x.xxx_hidden_Trigger.(*trigger_Repeat_); ok {
			return x.Repeat
		}
	}
	return nil
}

func (x *Trigger) SetAfterAll(v *Trigger_AfterAll) {
	if v == nil {
		x.xxx_hidden_Trigger = nil
		return
	}
	x.xxx_hidden_Trigger = &trigger_AfterAll_{v}
}

func (x *Trigger) SetAfterAny(v *Trigger_AfterAny) {
	if v == nil {
		x.xxx_hidden_Trigger = nil
		return
	}
	x.xxx_hidden_Trigger = &trigger_AfterAny_{v}
}

func (x *Trigger) SetAfterEach(v *Trigger_AfterEach) {
	if v == nil {
		x.xxx_hidden_Trigger = nil
		return
	}
	x.xxx_hidden_Trigger = &trigger_AfterEach_{v}
}

func (x *Trigger) SetAfterEndOfWindow(v *Trigger_AfterEndOfWindow) {
	if v == nil {
		x.xxx_hidden_Trigger = nil
		return
	}
	x.xxx_hidden_Trigger = &trigger_AfterEndOfWindow_{v}
}

func (x *Trigger) SetAfterProcessingTime(v *Trigger_AfterProcessingTime) {
	if v == nil {
		x.xxx_hidden_Trigger = nil
		return
	}
	x.xxx_hidden_Trigger = &trigger_AfterProcessingTime_{v}
}

func (x *Trigger) SetAfterSynchronizedProcessingTime(v *Trigger_AfterSynchronizedProcessingTime) {
	if v == nil {
		x.xxx_hidden_Trigger = nil
		return
	}
	x.xxx_hidden_Trigger = &trigger_AfterSynchronizedProcessingTime_{v}
}

func (x *Trigger) SetAlways(v *Trigger_Always) {
	if v == nil {
		x.xxx_hidden_Trigger = nil
		return
	}
	x.xxx_hidden_Trigger = &trigger_Always_{v}
}

func (x *Trigger) SetDefault(v *Trigger_Default) {
	if v == nil {
		x.xxx_hidden_Trigger = nil
		return
	}
	x.xxx_hidden_Trigger = &trigger_Default_{v}
}

func (x *Trigger) SetElementCount(v *Trigger_ElementCount) {
	if v == nil {
		x.xxx_hidden_Trigger = nil
		return
	}
	x.xxx_hidden_Trigger = &trigger_ElementCount_{v}
}

func (x *Trigger) SetNever(v *Trigger_Never) {
	if v == nil {
		x.xxx_hidden_Trigger = nil
		return
	}
	x.xxx_hidden_Trigger = &trigger_Never_{v}
}

func (x *Trigger) SetOrFinally(v *Trigger_OrFinally) {
	if v == nil {
		x.xxx_hidden_Trigger = nil
		return
	}
	x.xxx_hidden_Trigger = &trigger_OrFinally_{v}
}

func (x *Trigger) SetRepeat(v *Trigger_Repeat) {
	if v == nil {
		x.xxx_hidden_Trigger = nil
		return
	}
	x.xxx_hidden_Trigger = &trigger_Repeat_{v}
}

func (x *Trigger) HasTrigger() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Trigger != nil
}

func (x *Trigger) HasAfterAll() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Trigger.(*trigger_AfterAll_)
	return ok
}

func (x *Trigger) HasAfterAny() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Trigger.(*trigger_AfterAny_)
	return ok
}

func (x *Trigger) HasAfterEach() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Trigger.(*trigger_AfterEach_)
	return ok
}

func (x *Trigger) HasAfterEndOfWindow() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Trigger.(*trigger_AfterEndOfWindow_)
	return ok
}

func (x *Trigger) HasAfterProcessingTime() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Trigger.(*trigger_AfterProcessingTime_)
	return ok
}

func (x *Trigger) HasAfterSynchronizedProcessingTime() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Trigger.(*trigger_AfterSynchronizedProcessingTime_)
	return ok
}

func (x *Trigger) HasAlways() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Trigger.(*trigger_Always_)
	return ok
}

func (x *Trigger) HasDefault() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Trigger.(*trigger_Default_)
	return ok
}

func (x *Trigger) HasElementCount() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Trigger.(*trigger_ElementCount_)
	return ok
}

func (x *Trigger) HasNever() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Trigger.(*trigger_Never_)
	return ok
}

func (x *Trigger) HasOrFinally() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Trigger.(*trigger_OrFinally_)
	return ok
}

func (x *Trigger) HasRepeat() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Trigger.(*trigger_Repeat_)
	return ok
}

func (x *Trigger) ClearTrigger() {
	x.xxx_hidden_Trigger = nil
}

func (x *Trigger) ClearAfterAll() {
	if _, ok := x.xxx_hidden_Trigger.(*trigger_AfterAll_); ok {
		x.xxx_hidden_Trigger = nil
	}
}

func (x *Trigger) ClearAfterAny() {
	if _, ok := x.xxx_hidden_Trigger.(*trigger_AfterAny_); ok {
		x.xxx_hidden_Trigger = nil
	}
}

func (x *Trigger) ClearAfterEach() {
	if _, ok := x.xxx_hidden_Trigger.(*trigger_AfterEach_); ok {
		x.xxx_hidden_Trigger = nil
	}
}

func (x *Trigger) ClearAfterEndOfWindow() {
	if _, ok := x.xxx_hidden_Trigger.(*trigger_AfterEndOfWindow_); ok {
		x.xxx_hidden_Trigger = nil
	}
}

func (x *Trigger) ClearAfterProcessingTime() {
	if _, ok := x.xxx_hidden_Trigger.(*trigger_AfterProcessingTime_); ok {
		x.xxx_hidden_Trigger = nil
	}
}

func (x *Trigger) ClearAfterSynchronizedProcessingTime() {
	if _, ok := x.xxx_hidden_Trigger.(*trigger_AfterSynchronizedProcessingTime_); ok {
		x.xxx_hidden_Trigger = nil
	}
}

func (x *Trigger) ClearAlways() {
	if _, ok := x.xxx_hidden_Trigger.(*trigger_Always_); ok {
		x.xxx_hidden_Trigger = nil
	}
}

func (x *Trigger) ClearDefault() {
	if _, ok := x.xxx_hidden_Trigger.(*trigger_Default_); ok {
		x.xxx_hidden_Trigger = nil
	}
}

func (x *Trigger) ClearElementCount() {
	if _, ok := x.xxx_hidden_Trigger.(*trigger_ElementCount_); ok {
		x.xxx_hidden_Trigger = nil
	}
}

func (x *Trigger) ClearNever() {
	if _, ok := x.xxx_hidden_Trigger.(*trigger_Never_); ok {
		x.xxx_hidden_Trigger = nil
	}
}

func (x *Trigger) ClearOrFinally() {
	if _, ok := x.xxx_hidden_Trigger.(*trigger_OrFinally_); ok {
		x.xxx_hidden_Trigger = nil
	}
}

func (x *Trigger) ClearRepeat() {
	if _, ok := x.xxx_hidden_Trigger.(*trigger_Repeat_); ok {
		x.xxx_hidden_Trigger = nil
	}
}

const Trigger_Trigger_not_set_case case_Trigger_Trigger = 0
const Trigger_AfterAll_case case_Trigger_Trigger = 1
const Trigger_AfterAny_case case_Trigger_Trigger = 2
const Trigger_AfterEach_case case_Trigger_Trigger = 3
const Trigger_AfterEndOfWindow_case case_Trigger_Trigger = 4
const Trigger_AfterProcessingTime_case case_Trigger_Trigger = 5
const Trigger_AfterSynchronizedProcessingTime_case case_Trigger_Trigger = 6
const Trigger_Always_case case_Trigger_Trigger = 12
const Trigger_Default_case case_Trigger_Trigger = 7
const Trigger_ElementCount_case case_Trigger_Trigger = 8
const Trigger_Never_case case_Trigger_Trigger = 9
const Trigger_OrFinally_case case_Trigger_Trigger = 10
const Trigger_Repeat_case case_Trigger_Trigger = 11

func (x *Trigger) WhichTrigger() case_Trigger_Trigger {
	if x == nil {
		return Trigger_Trigger_not_set_case
	}
	switch x.xxx_hidden_Trigger.(type) {
	case *trigger_AfterAll_:
		return Trigger_AfterAll_case
	case *trigger_AfterAny_:
		return Trigger_AfterAny_case
	case *trigger_AfterEach_:
		return Trigger_AfterEach_case
	case *trigger_AfterEndOfWindow_:
		return Trigger_AfterEndOfWindow_case
	case *trigger_AfterProcessingTime_:
		return Trigger_AfterProcessingTime_case
	case *trigger_AfterSynchronizedProcessingTime_:
		return Trigger_AfterSynchronizedProcessingTime_case
	case *trigger_Always_:
		return Trigger_Always_case
	case *trigger_Default_:
		return Trigger_Default_case
	case *trigger_ElementCount_:
		return Trigger_ElementCount_case
	case *trigger_Never_:
		return Trigger_Never_case
	case *trigger_OrFinally_:
		return Trigger_OrFinally_case
	case *trigger_Repeat_:
		return Trigger_Repeat_case
	default:
		return Trigger_Trigger_not_set_case
	}
}

type Trigger_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The full disjoint union of possible triggers.

	// Fields of oneof xxx_hidden_Trigger:
	AfterAll                        *Trigger_AfterAll
	AfterAny                        *Trigger_AfterAny
	AfterEach                       *Trigger_AfterEach
	AfterEndOfWindow                *Trigger_AfterEndOfWindow
	AfterProcessingTime             *Trigger_AfterProcessingTime
	AfterSynchronizedProcessingTime *Trigger_AfterSynchronizedProcessingTime
	Always                          *Trigger_Always
	Default                         *Trigger_Default
	ElementCount                    *Trigger_ElementCount
	Never                           *Trigger_Never
	OrFinally                       *Trigger_OrFinally
	Repeat                          *Trigger_Repeat
	// -- end of xxx_hidden_Trigger
}

func (b0 Trigger_builder) Build() *Trigger {
	m0 := &Trigger{}
	b, x := &b0, m0
	_, _ = b, x
	if b.AfterAll != nil {
		x.xxx_hidden_Trigger = &trigger_AfterAll_{b.AfterAll}
	}
	if b.AfterAny != nil {
		x.xxx_hidden_Trigger = &trigger_AfterAny_{b.AfterAny}
	}
	if b.AfterEach != nil {
		x.xxx_hidden_Trigger = &trigger_AfterEach_{b.AfterEach}
	}
	if b.AfterEndOfWindow != nil {
		x.xxx_hidden_Trigger = &trigger_AfterEndOfWindow_{b.AfterEndOfWindow}
	}
	if b.AfterProcessingTime != nil {
		x.xxx_hidden_Trigger = &trigger_AfterProcessingTime_{b.AfterProcessingTime}
	}
	if b.AfterSynchronizedProcessingTime != nil {
		x.xxx_hidden_Trigger = &trigger_AfterSynchronizedProcessingTime_{b.AfterSynchronizedProcessingTime}
	}
	if b.Always != nil {
		x.xxx_hidden_Trigger = &trigger_Always_{b.Always}
	}
	if b.Default != nil {
		x.xxx_hidden_Trigger = &trigger_Default_{b.Default}
	}
	if b.ElementCount != nil {
		x.xxx_hidden_Trigger = &trigger_ElementCount_{b.ElementCount}
	}
	if b.Never != nil {
		x.xxx_hidden_Trigger = &trigger_Never_{b.Never}
	}
	if b.OrFinally != nil {
		x.xxx_hidden_Trigger = &trigger_OrFinally_{b.OrFinally}
	}
	if b.Repeat != nil {
		x.xxx_hidden_Trigger = &trigger_Repeat_{b.Repeat}
	}
	return m0
}

type case_Trigger_Trigger protoreflect.FieldNumber

func (x case_Trigger_Trigger) String() string {
	md := file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[38].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type isTrigger_Trigger interface {
	isTrigger_Trigger()
}

type trigger_AfterAll_ struct {
	AfterAll *Trigger_AfterAll `protobuf:"bytes,1,opt,name=after_all,json=afterAll,proto3,oneof"`
}

type trigger_AfterAny_ struct {
	AfterAny *Trigger_AfterAny `protobuf:"bytes,2,opt,name=after_any,json=afterAny,proto3,oneof"`
}

type trigger_AfterEach_ struct {
	AfterEach *Trigger_AfterEach `protobuf:"bytes,3,opt,name=after_each,json=afterEach,proto3,oneof"`
}

type trigger_AfterEndOfWindow_ struct {
	AfterEndOfWindow *Trigger_AfterEndOfWindow `protobuf:"bytes,4,opt,name=after_end_of_window,json=afterEndOfWindow,proto3,oneof"`
}

type trigger_AfterProcessingTime_ struct {
	AfterProcessingTime *Trigger_AfterProcessingTime `protobuf:"bytes,5,opt,name=after_processing_time,json=afterProcessingTime,proto3,oneof"`
}

type trigger_AfterSynchronizedProcessingTime_ struct {
	AfterSynchronizedProcessingTime *Trigger_AfterSynchronizedProcessingTime `protobuf:"bytes,6,opt,name=after_synchronized_processing_time,json=afterSynchronizedProcessingTime,proto3,oneof"`
}

type trigger_Always_ struct {
	Always *Trigger_Always `protobuf:"bytes,12,opt,name=always,proto3,oneof"`
}

type trigger_Default_ struct {
	Default *Trigger_Default `protobuf:"bytes,7,opt,name=default,proto3,oneof"`
}

type trigger_ElementCount_ struct {
	ElementCount *Trigger_ElementCount `protobuf:"bytes,8,opt,name=element_count,json=elementCount,proto3,oneof"`
}

type trigger_Never_ struct {
	Never *Trigger_Never `protobuf:"bytes,9,opt,name=never,proto3,oneof"`
}

type trigger_OrFinally_ struct {
	OrFinally *Trigger_OrFinally `protobuf:"bytes,10,opt,name=or_finally,json=orFinally,proto3,oneof"`
}

type trigger_Repeat_ struct {
	Repeat *Trigger_Repeat `protobuf:"bytes,11,opt,name=repeat,proto3,oneof"`
}

func (*trigger_AfterAll_) isTrigger_Trigger() {}

func (*trigger_AfterAny_) isTrigger_Trigger() {}

func (*trigger_AfterEach_) isTrigger_Trigger() {}

func (*trigger_AfterEndOfWindow_) isTrigger_Trigger() {}

func (*trigger_AfterProcessingTime_) isTrigger_Trigger() {}

func (*trigger_AfterSynchronizedProcessingTime_) isTrigger_Trigger() {}

func (*trigger_Always_) isTrigger_Trigger() {}

func (*trigger_Default_) isTrigger_Trigger() {}

func (*trigger_ElementCount_) isTrigger_Trigger() {}

func (*trigger_Never_) isTrigger_Trigger() {}

func (*trigger_OrFinally_) isTrigger_Trigger() {}

func (*trigger_Repeat_) isTrigger_Trigger() {}

// A specification for a transformation on a timestamp.
//
// Primarily used by AfterProcessingTime triggers to transform
// the arrival time of input to a target time for firing.
type TimestampTransform struct {
	state                         protoimpl.MessageState                  `protogen:"opaque.v1"`
	xxx_hidden_TimestampTransform isTimestampTransform_TimestampTransform `protobuf_oneof:"timestamp_transform"`
	unknownFields                 protoimpl.UnknownFields
	sizeCache                     protoimpl.SizeCache
}

func (x *TimestampTransform) Reset() {
	*x = TimestampTransform{}
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TimestampTransform) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimestampTransform) ProtoMessage() {}

func (x *TimestampTransform) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *TimestampTransform) GetDelay() *TimestampTransform_Delay {
	if x != nil {
		if x, ok := x.xxx_hidden_TimestampTransform.(*timestampTransform_Delay_); ok {
			return x.Delay
		}
	}
	return nil
}

func (x *TimestampTransform) GetAlignTo() *TimestampTransform_AlignTo {
	if x != nil {
		if x, ok := x.xxx_hidden_TimestampTransform.(*timestampTransform_AlignTo_); ok {
			return x.AlignTo
		}
	}
	return nil
}

func (x *TimestampTransform) SetDelay(v *TimestampTransform_Delay) {
	if v == nil {
		x.xxx_hidden_TimestampTransform = nil
		return
	}
	x.xxx_hidden_TimestampTransform = &timestampTransform_Delay_{v}
}

func (x *TimestampTransform) SetAlignTo(v *TimestampTransform_AlignTo) {
	if v == nil {
		x.xxx_hidden_TimestampTransform = nil
		return
	}
	x.xxx_hidden_TimestampTransform = &timestampTransform_AlignTo_{v}
}

func (x *TimestampTransform) HasTimestampTransform() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_TimestampTransform != nil
}

func (x *TimestampTransform) HasDelay() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_TimestampTransform.(*timestampTransform_Delay_)
	return ok
}

func (x *TimestampTransform) HasAlignTo() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_TimestampTransform.(*timestampTransform_AlignTo_)
	return ok
}

func (x *TimestampTransform) ClearTimestampTransform() {
	x.xxx_hidden_TimestampTransform = nil
}

func (x *TimestampTransform) ClearDelay() {
	if _, ok := x.xxx_hidden_TimestampTransform.(*timestampTransform_Delay_); ok {
		x.xxx_hidden_TimestampTransform = nil
	}
}

func (x *TimestampTransform) ClearAlignTo() {
	if _, ok := x.xxx_hidden_TimestampTransform.(*timestampTransform_AlignTo_); ok {
		x.xxx_hidden_TimestampTransform = nil
	}
}

const TimestampTransform_TimestampTransform_not_set_case case_TimestampTransform_TimestampTransform = 0
const TimestampTransform_Delay_case case_TimestampTransform_TimestampTransform = 1
const TimestampTransform_AlignTo_case case_TimestampTransform_TimestampTransform = 2

func (x *TimestampTransform) WhichTimestampTransform() case_TimestampTransform_TimestampTransform {
	if x == nil {
		return TimestampTransform_TimestampTransform_not_set_case
	}
	switch x.xxx_hidden_TimestampTransform.(type) {
	case *timestampTransform_Delay_:
		return TimestampTransform_Delay_case
	case *timestampTransform_AlignTo_:
		return TimestampTransform_AlignTo_case
	default:
		return TimestampTransform_TimestampTransform_not_set_case
	}
}

type TimestampTransform_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Fields of oneof xxx_hidden_TimestampTransform:
	Delay   *TimestampTransform_Delay
	AlignTo *TimestampTransform_AlignTo
	// -- end of xxx_hidden_TimestampTransform
}

func (b0 TimestampTransform_builder) Build() *TimestampTransform {
	m0 := &TimestampTransform{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Delay != nil {
		x.xxx_hidden_TimestampTransform = &timestampTransform_Delay_{b.Delay}
	}
	if b.AlignTo != nil {
		x.xxx_hidden_TimestampTransform = &timestampTransform_AlignTo_{b.AlignTo}
	}
	return m0
}

type case_TimestampTransform_TimestampTransform protoreflect.FieldNumber

func (x case_TimestampTransform_TimestampTransform) String() string {
	md := file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[39].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type isTimestampTransform_TimestampTransform interface {
	isTimestampTransform_TimestampTransform()
}

type timestampTransform_Delay_ struct {
	Delay *TimestampTransform_Delay `protobuf:"bytes,1,opt,name=delay,proto3,oneof"`
}

type timestampTransform_AlignTo_ struct {
	AlignTo *TimestampTransform_AlignTo `protobuf:"bytes,2,opt,name=align_to,json=alignTo,proto3,oneof"`
}

func (*timestampTransform_Delay_) isTimestampTransform_TimestampTransform() {}

func (*timestampTransform_AlignTo_) isTimestampTransform_TimestampTransform() {}

// A specification for how to "side input" a PCollection.
type SideInput struct {
	state                      protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_AccessPattern   *FunctionSpec          `protobuf:"bytes,1,opt,name=access_pattern,json=accessPattern,proto3" json:"access_pattern,omitempty"`
	xxx_hidden_ViewFn          *FunctionSpec          `protobuf:"bytes,2,opt,name=view_fn,json=viewFn,proto3" json:"view_fn,omitempty"`
	xxx_hidden_WindowMappingFn *FunctionSpec          `protobuf:"bytes,3,opt,name=window_mapping_fn,json=windowMappingFn,proto3" json:"window_mapping_fn,omitempty"`
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *SideInput) Reset() {
	*x = SideInput{}
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SideInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SideInput) ProtoMessage() {}

func (x *SideInput) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *SideInput) GetAccessPattern() *FunctionSpec {
	if x != nil {
		return x.xxx_hidden_AccessPattern
	}
	return nil
}

func (x *SideInput) GetViewFn() *FunctionSpec {
	if x != nil {
		return x.xxx_hidden_ViewFn
	}
	return nil
}

func (x *SideInput) GetWindowMappingFn() *FunctionSpec {
	if x != nil {
		return x.xxx_hidden_WindowMappingFn
	}
	return nil
}

func (x *SideInput) SetAccessPattern(v *FunctionSpec) {
	x.xxx_hidden_AccessPattern = v
}

func (x *SideInput) SetViewFn(v *FunctionSpec) {
	x.xxx_hidden_ViewFn = v
}

func (x *SideInput) SetWindowMappingFn(v *FunctionSpec) {
	x.xxx_hidden_WindowMappingFn = v
}

func (x *SideInput) HasAccessPattern() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_AccessPattern != nil
}

func (x *SideInput) HasViewFn() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_ViewFn != nil
}

func (x *SideInput) HasWindowMappingFn() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_WindowMappingFn != nil
}

func (x *SideInput) ClearAccessPattern() {
	x.xxx_hidden_AccessPattern = nil
}

func (x *SideInput) ClearViewFn() {
	x.xxx_hidden_ViewFn = nil
}

func (x *SideInput) ClearWindowMappingFn() {
	x.xxx_hidden_WindowMappingFn = nil
}

type SideInput_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// (Required) URN of the access pattern required by the `view_fn` to present
	// the desired SDK-specific interface to a UDF.
	//
	// This access pattern defines the SDK harness <-> Runner Harness RPC
	// interface for accessing a side input.
	//
	// See StandardSideInputTypes for an enumeration of all side input types
	// defined.
	AccessPattern *FunctionSpec
	// (Required) The FunctionSpec of the UDF that adapts a particular
	// access_pattern to a user-facing view type.
	//
	// For example, View.asSingleton() may include a `view_fn` that adapts a
	// specially-designed multimap to a single value per window.
	ViewFn *FunctionSpec
	// (Required) The FunctionSpec of the UDF that maps a main input window
	// to a side input window.
	//
	// For example, when the main input is in fixed windows of one hour, this
	// can specify that the side input should be accessed according to the day
	// in which that hour falls.
	WindowMappingFn *FunctionSpec
}

func (b0 SideInput_builder) Build() *SideInput {
	m0 := &SideInput{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_AccessPattern = b.AccessPattern
	x.xxx_hidden_ViewFn = b.ViewFn
	x.xxx_hidden_WindowMappingFn = b.WindowMappingFn
	return m0
}

type StandardArtifacts struct {
	state         protoimpl.MessageState `protogen:"opaque.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StandardArtifacts) Reset() {
	*x = StandardArtifacts{}
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StandardArtifacts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StandardArtifacts) ProtoMessage() {}

func (x *StandardArtifacts) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

type StandardArtifacts_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

}

func (b0 StandardArtifacts_builder) Build() *StandardArtifacts {
	m0 := &StandardArtifacts{}
	b, x := &b0, m0
	_, _ = b, x
	return m0
}

type ArtifactFilePayload struct {
	state             protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Path   string                 `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	xxx_hidden_Sha256 string                 `protobuf:"bytes,2,opt,name=sha256,proto3" json:"sha256,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ArtifactFilePayload) Reset() {
	*x = ArtifactFilePayload{}
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArtifactFilePayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtifactFilePayload) ProtoMessage() {}

func (x *ArtifactFilePayload) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ArtifactFilePayload) GetPath() string {
	if x != nil {
		return x.xxx_hidden_Path
	}
	return ""
}

func (x *ArtifactFilePayload) GetSha256() string {
	if x != nil {
		return x.xxx_hidden_Sha256
	}
	return ""
}

func (x *ArtifactFilePayload) SetPath(v string) {
	x.xxx_hidden_Path = v
}

func (x *ArtifactFilePayload) SetSha256(v string) {
	x.xxx_hidden_Sha256 = v
}

type ArtifactFilePayload_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// a string for an artifact file path e.g. "/tmp/foo.jar"
	Path string
	// The hex-encoded sha256 checksum of the artifact.
	Sha256 string
}

func (b0 ArtifactFilePayload_builder) Build() *ArtifactFilePayload {
	m0 := &ArtifactFilePayload{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Path = b.Path
	x.xxx_hidden_Sha256 = b.Sha256
	return m0
}

type ArtifactUrlPayload struct {
	state             protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Url    string                 `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	xxx_hidden_Sha256 string                 `protobuf:"bytes,2,opt,name=sha256,proto3" json:"sha256,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ArtifactUrlPayload) Reset() {
	*x = ArtifactUrlPayload{}
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArtifactUrlPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtifactUrlPayload) ProtoMessage() {}

func (x *ArtifactUrlPayload) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ArtifactUrlPayload) GetUrl() string {
	if x != nil {
		return x.xxx_hidden_Url
	}
	return ""
}

func (x *ArtifactUrlPayload) GetSha256() string {
	if x != nil {
		return x.xxx_hidden_Sha256
	}
	return ""
}

func (x *ArtifactUrlPayload) SetUrl(v string) {
	x.xxx_hidden_Url = v
}

func (x *ArtifactUrlPayload) SetSha256(v string) {
	x.xxx_hidden_Sha256 = v
}

type ArtifactUrlPayload_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// a string for an artifact URL e.g. "https://.../foo.jar" or "gs://tmp/foo.jar"
	Url string
	// (Optional) The hex-encoded sha256 checksum of the artifact if available.
	Sha256 string
}

func (b0 ArtifactUrlPayload_builder) Build() *ArtifactUrlPayload {
	m0 := &ArtifactUrlPayload{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Url = b.Url
	x.xxx_hidden_Sha256 = b.Sha256
	return m0
}

type EmbeddedFilePayload struct {
	state           protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Data []byte                 `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *EmbeddedFilePayload) Reset() {
	*x = EmbeddedFilePayload{}
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EmbeddedFilePayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmbeddedFilePayload) ProtoMessage() {}

func (x *EmbeddedFilePayload) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *EmbeddedFilePayload) GetData() []byte {
	if x != nil {
		return x.xxx_hidden_Data
	}
	return nil
}

func (x *EmbeddedFilePayload) SetData(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.xxx_hidden_Data = v
}

type EmbeddedFilePayload_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// raw data bytes for an embedded artifact
	Data []byte
}

func (b0 EmbeddedFilePayload_builder) Build() *EmbeddedFilePayload {
	m0 := &EmbeddedFilePayload{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Data = b.Data
	return m0
}

type PyPIPayload struct {
	state                 protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_ArtifactId string                 `protobuf:"bytes,1,opt,name=artifact_id,json=artifactId,proto3" json:"artifact_id,omitempty"`
	xxx_hidden_Version    string                 `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *PyPIPayload) Reset() {
	*x = PyPIPayload{}
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PyPIPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PyPIPayload) ProtoMessage() {}

func (x *PyPIPayload) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *PyPIPayload) GetArtifactId() string {
	if x != nil {
		return x.xxx_hidden_ArtifactId
	}
	return ""
}

func (x *PyPIPayload) GetVersion() string {
	if x != nil {
		return x.xxx_hidden_Version
	}
	return ""
}

func (x *PyPIPayload) SetArtifactId(v string) {
	x.xxx_hidden_ArtifactId = v
}

func (x *PyPIPayload) SetVersion(v string) {
	x.xxx_hidden_Version = v
}

type PyPIPayload_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Pypi compatible artifact id e.g. "apache-beam"
	ArtifactId string
	// Pypi compatible version string.
	Version string
}

func (b0 PyPIPayload_builder) Build() *PyPIPayload {
	m0 := &PyPIPayload{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_ArtifactId = b.ArtifactId
	x.xxx_hidden_Version = b.Version
	return m0
}

type MavenPayload struct {
	state                    protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Artifact      string                 `protobuf:"bytes,1,opt,name=artifact,proto3" json:"artifact,omitempty"`
	xxx_hidden_RepositoryUrl string                 `protobuf:"bytes,2,opt,name=repository_url,json=repositoryUrl,proto3" json:"repository_url,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *MavenPayload) Reset() {
	*x = MavenPayload{}
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MavenPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MavenPayload) ProtoMessage() {}

func (x *MavenPayload) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *MavenPayload) GetArtifact() string {
	if x != nil {
		return x.xxx_hidden_Artifact
	}
	return ""
}

func (x *MavenPayload) GetRepositoryUrl() string {
	if x != nil {
		return x.xxx_hidden_RepositoryUrl
	}
	return ""
}

func (x *MavenPayload) SetArtifact(v string) {
	x.xxx_hidden_Artifact = v
}

func (x *MavenPayload) SetRepositoryUrl(v string) {
	x.xxx_hidden_RepositoryUrl = v
}

type MavenPayload_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// A string specifying Maven artifact.
	// The standard format is "groupId:artifactId:version[:packaging[:classifier]]"
	Artifact string
	// (Optional) Repository URL. If not specified, Maven central is used by default.
	RepositoryUrl string
}

func (b0 MavenPayload_builder) Build() *MavenPayload {
	m0 := &MavenPayload{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Artifact = b.Artifact
	x.xxx_hidden_RepositoryUrl = b.RepositoryUrl
	return m0
}

type DeferredArtifactPayload struct {
	state           protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Key  string                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	xxx_hidden_Data []byte                 `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *DeferredArtifactPayload) Reset() {
	*x = DeferredArtifactPayload{}
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeferredArtifactPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeferredArtifactPayload) ProtoMessage() {}

func (x *DeferredArtifactPayload) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *DeferredArtifactPayload) GetKey() string {
	if x != nil {
		return x.xxx_hidden_Key
	}
	return ""
}

func (x *DeferredArtifactPayload) GetData() []byte {
	if x != nil {
		return x.xxx_hidden_Data
	}
	return nil
}

func (x *DeferredArtifactPayload) SetKey(v string) {
	x.xxx_hidden_Key = v
}

func (x *DeferredArtifactPayload) SetData(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.xxx_hidden_Data = v
}

type DeferredArtifactPayload_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// A unique string identifier assigned by the creator of this payload. The creator may use this key to confirm
	// whether they can parse the data.
	Key string
	// Data for deferred artifacts. Interpretation of bytes is delegated to the creator of this payload.
	Data []byte
}

func (b0 DeferredArtifactPayload_builder) Build() *DeferredArtifactPayload {
	m0 := &DeferredArtifactPayload{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Key = b.Key
	x.xxx_hidden_Data = b.Data
	return m0
}

type ArtifactStagingToRolePayload struct {
	state                 protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_StagedName string                 `protobuf:"bytes,1,opt,name=staged_name,json=stagedName,proto3" json:"staged_name,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *ArtifactStagingToRolePayload) Reset() {
	*x = ArtifactStagingToRolePayload{}
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArtifactStagingToRolePayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtifactStagingToRolePayload) ProtoMessage() {}

func (x *ArtifactStagingToRolePayload) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ArtifactStagingToRolePayload) GetStagedName() string {
	if x != nil {
		return x.xxx_hidden_StagedName
	}
	return ""
}

func (x *ArtifactStagingToRolePayload) SetStagedName(v string) {
	x.xxx_hidden_StagedName = v
}

type ArtifactStagingToRolePayload_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// A generated staged name (relative path under staging directory).
	StagedName string
}

func (b0 ArtifactStagingToRolePayload_builder) Build() *ArtifactStagingToRolePayload {
	m0 := &ArtifactStagingToRolePayload{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_StagedName = b.StagedName
	return m0
}

type ArtifactInformation struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_TypeUrn     string                 `protobuf:"bytes,1,opt,name=type_urn,json=typeUrn,proto3" json:"type_urn,omitempty"`
	xxx_hidden_TypePayload []byte                 `protobuf:"bytes,2,opt,name=type_payload,json=typePayload,proto3" json:"type_payload,omitempty"`
	xxx_hidden_RoleUrn     string                 `protobuf:"bytes,3,opt,name=role_urn,json=roleUrn,proto3" json:"role_urn,omitempty"`
	xxx_hidden_RolePayload []byte                 `protobuf:"bytes,4,opt,name=role_payload,json=rolePayload,proto3" json:"role_payload,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *ArtifactInformation) Reset() {
	*x = ArtifactInformation{}
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArtifactInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtifactInformation) ProtoMessage() {}

func (x *ArtifactInformation) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ArtifactInformation) GetTypeUrn() string {
	if x != nil {
		return x.xxx_hidden_TypeUrn
	}
	return ""
}

func (x *ArtifactInformation) GetTypePayload() []byte {
	if x != nil {
		return x.xxx_hidden_TypePayload
	}
	return nil
}

func (x *ArtifactInformation) GetRoleUrn() string {
	if x != nil {
		return x.xxx_hidden_RoleUrn
	}
	return ""
}

func (x *ArtifactInformation) GetRolePayload() []byte {
	if x != nil {
		return x.xxx_hidden_RolePayload
	}
	return nil
}

func (x *ArtifactInformation) SetTypeUrn(v string) {
	x.xxx_hidden_TypeUrn = v
}

func (x *ArtifactInformation) SetTypePayload(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.xxx_hidden_TypePayload = v
}

func (x *ArtifactInformation) SetRoleUrn(v string) {
	x.xxx_hidden_RoleUrn = v
}

func (x *ArtifactInformation) SetRolePayload(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.xxx_hidden_RolePayload = v
}

type ArtifactInformation_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// A URN that describes the type of artifact
	TypeUrn     string
	TypePayload []byte
	// A URN that describes the role of artifact
	RoleUrn     string
	RolePayload []byte
}

func (b0 ArtifactInformation_builder) Build() *ArtifactInformation {
	m0 := &ArtifactInformation{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_TypeUrn = b.TypeUrn
	x.xxx_hidden_TypePayload = b.TypePayload
	x.xxx_hidden_RoleUrn = b.RoleUrn
	x.xxx_hidden_RolePayload = b.RolePayload
	return m0
}

// An environment for executing UDFs. By default, an SDK container URL, but
// can also be a process forked by a command, or an externally managed process.
type Environment struct {
	state                    protoimpl.MessageState  `protogen:"opaque.v1"`
	xxx_hidden_Urn           string                  `protobuf:"bytes,2,opt,name=urn,proto3" json:"urn,omitempty"`
	xxx_hidden_Payload       []byte                  `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
	xxx_hidden_DisplayData   *[]*DisplayData         `protobuf:"bytes,4,rep,name=display_data,json=displayData,proto3" json:"display_data,omitempty"`
	xxx_hidden_Capabilities  []string                `protobuf:"bytes,5,rep,name=capabilities,proto3" json:"capabilities,omitempty"`
	xxx_hidden_Dependencies  *[]*ArtifactInformation `protobuf:"bytes,6,rep,name=dependencies,proto3" json:"dependencies,omitempty"`
	xxx_hidden_ResourceHints map[string][]byte       `protobuf:"bytes,7,rep,name=resource_hints,json=resourceHints,proto3" json:"resource_hints,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *Environment) Reset() {
	*x = Environment{}
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Environment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Environment) ProtoMessage() {}

func (x *Environment) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Environment) GetUrn() string {
	if x != nil {
		return x.xxx_hidden_Urn
	}
	return ""
}

func (x *Environment) GetPayload() []byte {
	if x != nil {
		return x.xxx_hidden_Payload
	}
	return nil
}

func (x *Environment) GetDisplayData() []*DisplayData {
	if x != nil {
		if x.xxx_hidden_DisplayData != nil {
			return *x.xxx_hidden_DisplayData
		}
	}
	return nil
}

func (x *Environment) GetCapabilities() []string {
	if x != nil {
		return x.xxx_hidden_Capabilities
	}
	return nil
}

func (x *Environment) GetDependencies() []*ArtifactInformation {
	if x != nil {
		if x.xxx_hidden_Dependencies != nil {
			return *x.xxx_hidden_Dependencies
		}
	}
	return nil
}

func (x *Environment) GetResourceHints() map[string][]byte {
	if x != nil {
		return x.xxx_hidden_ResourceHints
	}
	return nil
}

func (x *Environment) SetUrn(v string) {
	x.xxx_hidden_Urn = v
}

func (x *Environment) SetPayload(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.xxx_hidden_Payload = v
}

func (x *Environment) SetDisplayData(v []*DisplayData) {
	x.xxx_hidden_DisplayData = &v
}

func (x *Environment) SetCapabilities(v []string) {
	x.xxx_hidden_Capabilities = v
}

func (x *Environment) SetDependencies(v []*ArtifactInformation) {
	x.xxx_hidden_Dependencies = &v
}

func (x *Environment) SetResourceHints(v map[string][]byte) {
	x.xxx_hidden_ResourceHints = v
}

type Environment_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// (Required) The URN of the payload
	Urn string
	// (Optional) The data specifying any parameters to the URN. If
	// the URN does not require any arguments, this may be omitted.
	Payload []byte
	// (Optional) Static display data for the environment. If there is none,
	// it may be omitted.
	DisplayData []*DisplayData
	// (Optional) A set of capabilities this environment supports. This is
	// typically a list of common URNs designating coders, transforms, etc. that
	// this environment understands (and a runner MAY use) despite not
	// appearing in the pipeline proto. This may also be used to indicate
	// support of optional protocols not tied to a concrete component.
	Capabilities []string
	// (Optional) artifact dependency information used for executing UDFs in this environment.
	Dependencies []*ArtifactInformation
	// (Optional) A mapping of resource URNs to requested values.  The encoding
	// of the values is specified by the URN.  Resource hints are advisory;
	// a runner is free to ignore resource hints that it does not understand.
	ResourceHints map[string][]byte
}

func (b0 Environment_builder) Build() *Environment {
	m0 := &Environment{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Urn = b.Urn
	x.xxx_hidden_Payload = b.Payload
	x.xxx_hidden_DisplayData = &b.DisplayData
	x.xxx_hidden_Capabilities = b.Capabilities
	x.xxx_hidden_Dependencies = &b.Dependencies
	x.xxx_hidden_ResourceHints = b.ResourceHints
	return m0
}

type StandardEnvironments struct {
	state         protoimpl.MessageState `protogen:"opaque.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StandardEnvironments) Reset() {
	*x = StandardEnvironments{}
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StandardEnvironments) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StandardEnvironments) ProtoMessage() {}

func (x *StandardEnvironments) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

type StandardEnvironments_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

}

func (b0 StandardEnvironments_builder) Build() *StandardEnvironments {
	m0 := &StandardEnvironments{}
	b, x := &b0, m0
	_, _ = b, x
	return m0
}

// The payload of a Docker image
type DockerPayload struct {
	state                     protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_ContainerImage string                 `protobuf:"bytes,1,opt,name=container_image,json=containerImage,proto3" json:"container_image,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *DockerPayload) Reset() {
	*x = DockerPayload{}
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DockerPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DockerPayload) ProtoMessage() {}

func (x *DockerPayload) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *DockerPayload) GetContainerImage() string {
	if x != nil {
		return x.xxx_hidden_ContainerImage
	}
	return ""
}

func (x *DockerPayload) SetContainerImage(v string) {
	x.xxx_hidden_ContainerImage = v
}

type DockerPayload_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	ContainerImage string
}

func (b0 DockerPayload_builder) Build() *DockerPayload {
	m0 := &DockerPayload{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_ContainerImage = b.ContainerImage
	return m0
}

type ProcessPayload struct {
	state              protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Os      string                 `protobuf:"bytes,1,opt,name=os,proto3" json:"os,omitempty"`
	xxx_hidden_Arch    string                 `protobuf:"bytes,2,opt,name=arch,proto3" json:"arch,omitempty"`
	xxx_hidden_Command string                 `protobuf:"bytes,3,opt,name=command,proto3" json:"command,omitempty"`
	xxx_hidden_Env     map[string]string      `protobuf:"bytes,4,rep,name=env,proto3" json:"env,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ProcessPayload) Reset() {
	*x = ProcessPayload{}
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProcessPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessPayload) ProtoMessage() {}

func (x *ProcessPayload) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ProcessPayload) GetOs() string {
	if x != nil {
		return x.xxx_hidden_Os
	}
	return ""
}

func (x *ProcessPayload) GetArch() string {
	if x != nil {
		return x.xxx_hidden_Arch
	}
	return ""
}

func (x *ProcessPayload) GetCommand() string {
	if x != nil {
		return x.xxx_hidden_Command
	}
	return ""
}

func (x *ProcessPayload) GetEnv() map[string]string {
	if x != nil {
		return x.xxx_hidden_Env
	}
	return nil
}

func (x *ProcessPayload) SetOs(v string) {
	x.xxx_hidden_Os = v
}

func (x *ProcessPayload) SetArch(v string) {
	x.xxx_hidden_Arch = v
}

func (x *ProcessPayload) SetCommand(v string) {
	x.xxx_hidden_Command = v
}

func (x *ProcessPayload) SetEnv(v map[string]string) {
	x.xxx_hidden_Env = v
}

type ProcessPayload_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Os      string
	Arch    string
	Command string
	Env     map[string]string
}

func (b0 ProcessPayload_builder) Build() *ProcessPayload {
	m0 := &ProcessPayload{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Os = b.Os
	x.xxx_hidden_Arch = b.Arch
	x.xxx_hidden_Command = b.Command
	x.xxx_hidden_Env = b.Env
	return m0
}

type ExternalPayload struct {
	state               protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Endpoint *ApiServiceDescriptor  `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	xxx_hidden_Params   map[string]string      `protobuf:"bytes,2,rep,name=params,proto3" json:"params,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *ExternalPayload) Reset() {
	*x = ExternalPayload{}
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExternalPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalPayload) ProtoMessage() {}

func (x *ExternalPayload) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ExternalPayload) GetEndpoint() *ApiServiceDescriptor {
	if x != nil {
		return x.xxx_hidden_Endpoint
	}
	return nil
}

func (x *ExternalPayload) GetParams() map[string]string {
	if x != nil {
		return x.xxx_hidden_Params
	}
	return nil
}

func (x *ExternalPayload) SetEndpoint(v *ApiServiceDescriptor) {
	x.xxx_hidden_Endpoint = v
}

func (x *ExternalPayload) SetParams(v map[string]string) {
	x.xxx_hidden_Params = v
}

func (x *ExternalPayload) HasEndpoint() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Endpoint != nil
}

func (x *ExternalPayload) ClearEndpoint() {
	x.xxx_hidden_Endpoint = nil
}

type ExternalPayload_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Endpoint *ApiServiceDescriptor
	Params   map[string]string
}

func (b0 ExternalPayload_builder) Build() *ExternalPayload {
	m0 := &ExternalPayload{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Endpoint = b.Endpoint
	x.xxx_hidden_Params = b.Params
	return m0
}

type AnyOfEnvironmentPayload struct {
	state                   protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Environments *[]*Environment        `protobuf:"bytes,1,rep,name=environments,proto3" json:"environments,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *AnyOfEnvironmentPayload) Reset() {
	*x = AnyOfEnvironmentPayload{}
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AnyOfEnvironmentPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnyOfEnvironmentPayload) ProtoMessage() {}

func (x *AnyOfEnvironmentPayload) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *AnyOfEnvironmentPayload) GetEnvironments() []*Environment {
	if x != nil {
		if x.xxx_hidden_Environments != nil {
			return *x.xxx_hidden_Environments
		}
	}
	return nil
}

func (x *AnyOfEnvironmentPayload) SetEnvironments(v []*Environment) {
	x.xxx_hidden_Environments = &v
}

type AnyOfEnvironmentPayload_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Each is fully contained (with their own dependencies, capabilities, etc.)
	Environments []*Environment
}

func (b0 AnyOfEnvironmentPayload_builder) Build() *AnyOfEnvironmentPayload {
	m0 := &AnyOfEnvironmentPayload{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Environments = &b.Environments
	return m0
}

// These URNs are used to indicate capabilities of environments that cannot
// simply be expressed as a component (such as a Coder or PTransform) that this
// environment understands.
type StandardProtocols struct {
	state         protoimpl.MessageState `protogen:"opaque.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StandardProtocols) Reset() {
	*x = StandardProtocols{}
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StandardProtocols) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StandardProtocols) ProtoMessage() {}

func (x *StandardProtocols) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

type StandardProtocols_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

}

func (b0 StandardProtocols_builder) Build() *StandardProtocols {
	m0 := &StandardProtocols{}
	b, x := &b0, m0
	_, _ = b, x
	return m0
}

// These URNs are used to indicate capabilities of runner that an environment
// may take advantage of when interacting with this runner.
type StandardRunnerProtocols struct {
	state         protoimpl.MessageState `protogen:"opaque.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StandardRunnerProtocols) Reset() {
	*x = StandardRunnerProtocols{}
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StandardRunnerProtocols) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StandardRunnerProtocols) ProtoMessage() {}

func (x *StandardRunnerProtocols) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

type StandardRunnerProtocols_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

}

func (b0 StandardRunnerProtocols_builder) Build() *StandardRunnerProtocols {
	m0 := &StandardRunnerProtocols{}
	b, x := &b0, m0
	_, _ = b, x
	return m0
}

// These URNs are used to indicate requirements of a pipeline that cannot
// simply be expressed as a component (such as a Coder or PTransform) that the
// runner must understand. In many cases, this indicates a particular field
// of a transform must be inspected and respected (which allows new fields
// to be added in a forwards-compatible way).
type StandardRequirements struct {
	state         protoimpl.MessageState `protogen:"opaque.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StandardRequirements) Reset() {
	*x = StandardRequirements{}
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StandardRequirements) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StandardRequirements) ProtoMessage() {}

func (x *StandardRequirements) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

type StandardRequirements_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

}

func (b0 StandardRequirements_builder) Build() *StandardRequirements {
	m0 := &StandardRequirements{}
	b, x := &b0, m0
	_, _ = b, x
	return m0
}

// A URN along with a parameter object whose schema is determined by the
// URN.
//
// This structure is reused in two distinct, but compatible, ways:
//
//  1. This can be a specification of the function over PCollections
//     that a PTransform computes.
//  2. This can be a specification of a user-defined function, possibly
//     SDK-specific. (external to this message must be adequate context
//     to indicate the environment in which the UDF can be understood).
//
// Though not explicit in this proto, there are two possibilities
// for the relationship of a runner to this specification that
// one should bear in mind:
//
//  1. The runner understands the URN. For example, it might be
//     a well-known URN like "beam:transform:Top" or
//     "beam:window_fn:FixedWindows" with
//     an agreed-upon payload (e.g. a number or duration,
//     respectively).
//  2. The runner does not understand the URN. It might be an
//     SDK specific URN such as "beam:dofn:javasdk:1.0"
//     that indicates to the SDK what the payload is,
//     such as a serialized Java DoFn from a particular
//     version of the Beam Java SDK. The payload will often
//     then be an opaque message such as bytes in a
//     language-specific serialization format.
type FunctionSpec struct {
	state              protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Urn     string                 `protobuf:"bytes,1,opt,name=urn,proto3" json:"urn,omitempty"`
	xxx_hidden_Payload []byte                 `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *FunctionSpec) Reset() {
	*x = FunctionSpec{}
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[59]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FunctionSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionSpec) ProtoMessage() {}

func (x *FunctionSpec) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[59]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *FunctionSpec) GetUrn() string {
	if x != nil {
		return x.xxx_hidden_Urn
	}
	return ""
}

func (x *FunctionSpec) GetPayload() []byte {
	if x != nil {
		return x.xxx_hidden_Payload
	}
	return nil
}

func (x *FunctionSpec) SetUrn(v string) {
	x.xxx_hidden_Urn = v
}

func (x *FunctionSpec) SetPayload(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.xxx_hidden_Payload = v
}

type FunctionSpec_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// (Required) A URN that describes the accompanying payload.
	// For any URN that is not recognized (by whomever is inspecting
	// it) the parameter payload should be treated as opaque and
	// passed as-is.
	Urn string
	// (Optional) The data specifying any parameters to the URN. If
	// the URN does not require any arguments, this may be omitted.
	Payload []byte
}

func (b0 FunctionSpec_builder) Build() *FunctionSpec {
	m0 := &FunctionSpec{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Urn = b.Urn
	x.xxx_hidden_Payload = b.Payload
	return m0
}

// A set of well known URNs describing display data.
//
// All descriptions must contain how the value should be classified and how it
// is encoded. Note that some types are logical types which convey contextual
// information about the pipeline in addition to an encoding while others only
// specify the encoding itself.
type StandardDisplayData struct {
	state         protoimpl.MessageState `protogen:"opaque.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StandardDisplayData) Reset() {
	*x = StandardDisplayData{}
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[60]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StandardDisplayData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StandardDisplayData) ProtoMessage() {}

func (x *StandardDisplayData) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[60]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

type StandardDisplayData_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

}

func (b0 StandardDisplayData_builder) Build() *StandardDisplayData {
	m0 := &StandardDisplayData{}
	b, x := &b0, m0
	_, _ = b, x
	return m0
}

type LabelledPayload struct {
	state                protoimpl.MessageState  `protogen:"opaque.v1"`
	xxx_hidden_Label     string                  `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	xxx_hidden_Value     isLabelledPayload_Value `protobuf_oneof:"value"`
	xxx_hidden_Key       string                  `protobuf:"bytes,6,opt,name=key,proto3" json:"key,omitempty"`
	xxx_hidden_Namespace string                  `protobuf:"bytes,7,opt,name=namespace,proto3" json:"namespace,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *LabelledPayload) Reset() {
	*x = LabelledPayload{}
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[61]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LabelledPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LabelledPayload) ProtoMessage() {}

func (x *LabelledPayload) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[61]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *LabelledPayload) GetLabel() string {
	if x != nil {
		return x.xxx_hidden_Label
	}
	return ""
}

func (x *LabelledPayload) GetStringValue() string {
	if x != nil {
		if x, ok := x.xxx_hidden_Value.(*labelledPayload_StringValue); ok {
			return x.StringValue
		}
	}
	return ""
}

func (x *LabelledPayload) GetBoolValue() bool {
	if x != nil {
		if x, ok := x.xxx_hidden_Value.(*labelledPayload_BoolValue); ok {
			return x.BoolValue
		}
	}
	return false
}

func (x *LabelledPayload) GetDoubleValue() float64 {
	if x != nil {
		if x, ok := x.xxx_hidden_Value.(*labelledPayload_DoubleValue); ok {
			return x.DoubleValue
		}
	}
	return 0
}

func (x *LabelledPayload) GetIntValue() int64 {
	if x != nil {
		if x, ok := x.xxx_hidden_Value.(*labelledPayload_IntValue); ok {
			return x.IntValue
		}
	}
	return 0
}

func (x *LabelledPayload) GetKey() string {
	if x != nil {
		return x.xxx_hidden_Key
	}
	return ""
}

func (x *LabelledPayload) GetNamespace() string {
	if x != nil {
		return x.xxx_hidden_Namespace
	}
	return ""
}

func (x *LabelledPayload) SetLabel(v string) {
	x.xxx_hidden_Label = v
}

func (x *LabelledPayload) SetStringValue(v string) {
	x.xxx_hidden_Value = &labelledPayload_StringValue{v}
}

func (x *LabelledPayload) SetBoolValue(v bool) {
	x.xxx_hidden_Value = &labelledPayload_BoolValue{v}
}

func (x *LabelledPayload) SetDoubleValue(v float64) {
	x.xxx_hidden_Value = &labelledPayload_DoubleValue{v}
}

func (x *LabelledPayload) SetIntValue(v int64) {
	x.xxx_hidden_Value = &labelledPayload_IntValue{v}
}

func (x *LabelledPayload) SetKey(v string) {
	x.xxx_hidden_Key = v
}

func (x *LabelledPayload) SetNamespace(v string) {
	x.xxx_hidden_Namespace = v
}

func (x *LabelledPayload) HasValue() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Value != nil
}

func (x *LabelledPayload) HasStringValue() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Value.(*labelledPayload_StringValue)
	return ok
}

func (x *LabelledPayload) HasBoolValue() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Value.(*labelledPayload_BoolValue)
	return ok
}

func (x *LabelledPayload) HasDoubleValue() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Value.(*labelledPayload_DoubleValue)
	return ok
}

func (x *LabelledPayload) HasIntValue() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Value.(*labelledPayload_IntValue)
	return ok
}

func (x *LabelledPayload) ClearValue() {
	x.xxx_hidden_Value = nil
}

func (x *LabelledPayload) ClearStringValue() {
	if _, ok := x.xxx_hidden_Value.(*labelledPayload_StringValue); ok {
		x.xxx_hidden_Value = nil
	}
}

func (x *LabelledPayload) ClearBoolValue() {
	if _, ok := x.xxx_hidden_Value.(*labelledPayload_BoolValue); ok {
		x.xxx_hidden_Value = nil
	}
}

func (x *LabelledPayload) ClearDoubleValue() {
	if _, ok := x.xxx_hidden_Value.(*labelledPayload_DoubleValue); ok {
		x.xxx_hidden_Value = nil
	}
}

func (x *LabelledPayload) ClearIntValue() {
	if _, ok := x.xxx_hidden_Value.(*labelledPayload_IntValue); ok {
		x.xxx_hidden_Value = nil
	}
}

const LabelledPayload_Value_not_set_case case_LabelledPayload_Value = 0
const LabelledPayload_StringValue_case case_LabelledPayload_Value = 2
const LabelledPayload_BoolValue_case case_LabelledPayload_Value = 3
const LabelledPayload_DoubleValue_case case_LabelledPayload_Value = 4
const LabelledPayload_IntValue_case case_LabelledPayload_Value = 5

func (x *LabelledPayload) WhichValue() case_LabelledPayload_Value {
	if x == nil {
		return LabelledPayload_Value_not_set_case
	}
	switch x.xxx_hidden_Value.(type) {
	case *labelledPayload_StringValue:
		return LabelledPayload_StringValue_case
	case *labelledPayload_BoolValue:
		return LabelledPayload_BoolValue_case
	case *labelledPayload_DoubleValue:
		return LabelledPayload_DoubleValue_case
	case *labelledPayload_IntValue:
		return LabelledPayload_IntValue_case
	default:
		return LabelledPayload_Value_not_set_case
	}
}

type LabelledPayload_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// (Required) A human readable label for the value.
	Label string
	// (Required) A value which will be displayed to the user.

	// Fields of oneof xxx_hidden_Value:
	StringValue *string
	BoolValue   *bool
	DoubleValue *float64
	IntValue    *int64
	// -- end of xxx_hidden_Value
	// (Required) The key identifies the actual content of the metadata.
	Key string
	// (Required) The namespace describes the context that specified the key.
	Namespace string
}

func (b0 LabelledPayload_builder) Build() *LabelledPayload {
	m0 := &LabelledPayload{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Label = b.Label
	if b.StringValue != nil {
		x.xxx_hidden_Value = &labelledPayload_StringValue{*b.StringValue}
	}
	if b.BoolValue != nil {
		x.xxx_hidden_Value = &labelledPayload_BoolValue{*b.BoolValue}
	}
	if b.DoubleValue != nil {
		x.xxx_hidden_Value = &labelledPayload_DoubleValue{*b.DoubleValue}
	}
	if b.IntValue != nil {
		x.xxx_hidden_Value = &labelledPayload_IntValue{*b.IntValue}
	}
	x.xxx_hidden_Key = b.Key
	x.xxx_hidden_Namespace = b.Namespace
	return m0
}

type case_LabelledPayload_Value protoreflect.FieldNumber

func (x case_LabelledPayload_Value) String() string {
	md := file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[61].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type isLabelledPayload_Value interface {
	isLabelledPayload_Value()
}

type labelledPayload_StringValue struct {
	StringValue string `protobuf:"bytes,2,opt,name=string_value,json=stringValue,proto3,oneof"`
}

type labelledPayload_BoolValue struct {
	BoolValue bool `protobuf:"varint,3,opt,name=bool_value,json=boolValue,proto3,oneof"`
}

type labelledPayload_DoubleValue struct {
	DoubleValue float64 `protobuf:"fixed64,4,opt,name=double_value,json=doubleValue,proto3,oneof"`
}

type labelledPayload_IntValue struct {
	IntValue int64 `protobuf:"varint,5,opt,name=int_value,json=intValue,proto3,oneof"`
}

func (*labelledPayload_StringValue) isLabelledPayload_Value() {}

func (*labelledPayload_BoolValue) isLabelledPayload_Value() {}

func (*labelledPayload_DoubleValue) isLabelledPayload_Value() {}

func (*labelledPayload_IntValue) isLabelledPayload_Value() {}

// Static display data associated with a pipeline component. Display data is
// useful for pipeline runners IOs and diagnostic dashboards to display details
// about annotated components.
type DisplayData struct {
	state              protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Urn     string                 `protobuf:"bytes,1,opt,name=urn,proto3" json:"urn,omitempty"`
	xxx_hidden_Payload []byte                 `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *DisplayData) Reset() {
	*x = DisplayData{}
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[62]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DisplayData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisplayData) ProtoMessage() {}

func (x *DisplayData) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[62]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *DisplayData) GetUrn() string {
	if x != nil {
		return x.xxx_hidden_Urn
	}
	return ""
}

func (x *DisplayData) GetPayload() []byte {
	if x != nil {
		return x.xxx_hidden_Payload
	}
	return nil
}

func (x *DisplayData) SetUrn(v string) {
	x.xxx_hidden_Urn = v
}

func (x *DisplayData) SetPayload(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.xxx_hidden_Payload = v
}

type DisplayData_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// A key used to describe the type of display data. See StandardDisplayData
	// for the set of well known urns describing how the payload is meant to be
	// interpreted.
	Urn string
	// (Optional) The data specifying any parameters to the URN. If
	// the URN does not require any arguments, this may be omitted.
	Payload []byte
}

func (b0 DisplayData_builder) Build() *DisplayData {
	m0 := &DisplayData{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Urn = b.Urn
	x.xxx_hidden_Payload = b.Payload
	return m0
}

// A disjoint union of all the things that may contain references
// that require Components to resolve.
type MessageWithComponents struct {
	state                 protoimpl.MessageState       `protogen:"opaque.v1"`
	xxx_hidden_Components *Components                  `protobuf:"bytes,1,opt,name=components,proto3" json:"components,omitempty"`
	xxx_hidden_Root       isMessageWithComponents_Root `protobuf_oneof:"root"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *MessageWithComponents) Reset() {
	*x = MessageWithComponents{}
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[63]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MessageWithComponents) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageWithComponents) ProtoMessage() {}

func (x *MessageWithComponents) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[63]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *MessageWithComponents) GetComponents() *Components {
	if x != nil {
		return x.xxx_hidden_Components
	}
	return nil
}

func (x *MessageWithComponents) GetCoder() *Coder {
	if x != nil {
		if x, ok := x.xxx_hidden_Root.(*messageWithComponents_Coder); ok {
			return x.Coder
		}
	}
	return nil
}

func (x *MessageWithComponents) GetCombinePayload() *CombinePayload {
	if x != nil {
		if x, ok := x.xxx_hidden_Root.(*messageWithComponents_CombinePayload); ok {
			return x.CombinePayload
		}
	}
	return nil
}

func (x *MessageWithComponents) GetFunctionSpec() *FunctionSpec {
	if x != nil {
		if x, ok := x.xxx_hidden_Root.(*messageWithComponents_FunctionSpec); ok {
			return x.FunctionSpec
		}
	}
	return nil
}

func (x *MessageWithComponents) GetParDoPayload() *ParDoPayload {
	if x != nil {
		if x, ok := x.xxx_hidden_Root.(*messageWithComponents_ParDoPayload); ok {
			return x.ParDoPayload
		}
	}
	return nil
}

func (x *MessageWithComponents) GetPtransform() *PTransform {
	if x != nil {
		if x, ok := x.xxx_hidden_Root.(*messageWithComponents_Ptransform); ok {
			return x.Ptransform
		}
	}
	return nil
}

func (x *MessageWithComponents) GetPcollection() *PCollection {
	if x != nil {
		if x, ok := x.xxx_hidden_Root.(*messageWithComponents_Pcollection); ok {
			return x.Pcollection
		}
	}
	return nil
}

func (x *MessageWithComponents) GetReadPayload() *ReadPayload {
	if x != nil {
		if x, ok := x.xxx_hidden_Root.(*messageWithComponents_ReadPayload); ok {
			return x.ReadPayload
		}
	}
	return nil
}

func (x *MessageWithComponents) GetSideInput() *SideInput {
	if x != nil {
		if x, ok := x.xxx_hidden_Root.(*messageWithComponents_SideInput); ok {
			return x.SideInput
		}
	}
	return nil
}

func (x *MessageWithComponents) GetWindowIntoPayload() *WindowIntoPayload {
	if x != nil {
		if x, ok := x.xxx_hidden_Root.(*messageWithComponents_WindowIntoPayload); ok {
			return x.WindowIntoPayload
		}
	}
	return nil
}

func (x *MessageWithComponents) GetWindowingStrategy() *WindowingStrategy {
	if x != nil {
		if x, ok := x.xxx_hidden_Root.(*messageWithComponents_WindowingStrategy); ok {
			return x.WindowingStrategy
		}
	}
	return nil
}

func (x *MessageWithComponents) SetComponents(v *Components) {
	x.xxx_hidden_Components = v
}

func (x *MessageWithComponents) SetCoder(v *Coder) {
	if v == nil {
		x.xxx_hidden_Root = nil
		return
	}
	x.xxx_hidden_Root = &messageWithComponents_Coder{v}
}

func (x *MessageWithComponents) SetCombinePayload(v *CombinePayload) {
	if v == nil {
		x.xxx_hidden_Root = nil
		return
	}
	x.xxx_hidden_Root = &messageWithComponents_CombinePayload{v}
}

func (x *MessageWithComponents) SetFunctionSpec(v *FunctionSpec) {
	if v == nil {
		x.xxx_hidden_Root = nil
		return
	}
	x.xxx_hidden_Root = &messageWithComponents_FunctionSpec{v}
}

func (x *MessageWithComponents) SetParDoPayload(v *ParDoPayload) {
	if v == nil {
		x.xxx_hidden_Root = nil
		return
	}
	x.xxx_hidden_Root = &messageWithComponents_ParDoPayload{v}
}

func (x *MessageWithComponents) SetPtransform(v *PTransform) {
	if v == nil {
		x.xxx_hidden_Root = nil
		return
	}
	x.xxx_hidden_Root = &messageWithComponents_Ptransform{v}
}

func (x *MessageWithComponents) SetPcollection(v *PCollection) {
	if v == nil {
		x.xxx_hidden_Root = nil
		return
	}
	x.xxx_hidden_Root = &messageWithComponents_Pcollection{v}
}

func (x *MessageWithComponents) SetReadPayload(v *ReadPayload) {
	if v == nil {
		x.xxx_hidden_Root = nil
		return
	}
	x.xxx_hidden_Root = &messageWithComponents_ReadPayload{v}
}

func (x *MessageWithComponents) SetSideInput(v *SideInput) {
	if v == nil {
		x.xxx_hidden_Root = nil
		return
	}
	x.xxx_hidden_Root = &messageWithComponents_SideInput{v}
}

func (x *MessageWithComponents) SetWindowIntoPayload(v *WindowIntoPayload) {
	if v == nil {
		x.xxx_hidden_Root = nil
		return
	}
	x.xxx_hidden_Root = &messageWithComponents_WindowIntoPayload{v}
}

func (x *MessageWithComponents) SetWindowingStrategy(v *WindowingStrategy) {
	if v == nil {
		x.xxx_hidden_Root = nil
		return
	}
	x.xxx_hidden_Root = &messageWithComponents_WindowingStrategy{v}
}

func (x *MessageWithComponents) HasComponents() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Components != nil
}

func (x *MessageWithComponents) HasRoot() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Root != nil
}

func (x *MessageWithComponents) HasCoder() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Root.(*messageWithComponents_Coder)
	return ok
}

func (x *MessageWithComponents) HasCombinePayload() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Root.(*messageWithComponents_CombinePayload)
	return ok
}

func (x *MessageWithComponents) HasFunctionSpec() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Root.(*messageWithComponents_FunctionSpec)
	return ok
}

func (x *MessageWithComponents) HasParDoPayload() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Root.(*messageWithComponents_ParDoPayload)
	return ok
}

func (x *MessageWithComponents) HasPtransform() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Root.(*messageWithComponents_Ptransform)
	return ok
}

func (x *MessageWithComponents) HasPcollection() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Root.(*messageWithComponents_Pcollection)
	return ok
}

func (x *MessageWithComponents) HasReadPayload() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Root.(*messageWithComponents_ReadPayload)
	return ok
}

func (x *MessageWithComponents) HasSideInput() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Root.(*messageWithComponents_SideInput)
	return ok
}

func (x *MessageWithComponents) HasWindowIntoPayload() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Root.(*messageWithComponents_WindowIntoPayload)
	return ok
}

func (x *MessageWithComponents) HasWindowingStrategy() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Root.(*messageWithComponents_WindowingStrategy)
	return ok
}

func (x *MessageWithComponents) ClearComponents() {
	x.xxx_hidden_Components = nil
}

func (x *MessageWithComponents) ClearRoot() {
	x.xxx_hidden_Root = nil
}

func (x *MessageWithComponents) ClearCoder() {
	if _, ok := x.xxx_hidden_Root.(*messageWithComponents_Coder); ok {
		x.xxx_hidden_Root = nil
	}
}

func (x *MessageWithComponents) ClearCombinePayload() {
	if _, ok := x.xxx_hidden_Root.(*messageWithComponents_CombinePayload); ok {
		x.xxx_hidden_Root = nil
	}
}

func (x *MessageWithComponents) ClearFunctionSpec() {
	if _, ok := x.xxx_hidden_Root.(*messageWithComponents_FunctionSpec); ok {
		x.xxx_hidden_Root = nil
	}
}

func (x *MessageWithComponents) ClearParDoPayload() {
	if _, ok := x.xxx_hidden_Root.(*messageWithComponents_ParDoPayload); ok {
		x.xxx_hidden_Root = nil
	}
}

func (x *MessageWithComponents) ClearPtransform() {
	if _, ok := x.xxx_hidden_Root.(*messageWithComponents_Ptransform); ok {
		x.xxx_hidden_Root = nil
	}
}

func (x *MessageWithComponents) ClearPcollection() {
	if _, ok := x.xxx_hidden_Root.(*messageWithComponents_Pcollection); ok {
		x.xxx_hidden_Root = nil
	}
}

func (x *MessageWithComponents) ClearReadPayload() {
	if _, ok := x.xxx_hidden_Root.(*messageWithComponents_ReadPayload); ok {
		x.xxx_hidden_Root = nil
	}
}

func (x *MessageWithComponents) ClearSideInput() {
	if _, ok := x.xxx_hidden_Root.(*messageWithComponents_SideInput); ok {
		x.xxx_hidden_Root = nil
	}
}

func (x *MessageWithComponents) ClearWindowIntoPayload() {
	if _, ok := x.xxx_hidden_Root.(*messageWithComponents_WindowIntoPayload); ok {
		x.xxx_hidden_Root = nil
	}
}

func (x *MessageWithComponents) ClearWindowingStrategy() {
	if _, ok := x.xxx_hidden_Root.(*messageWithComponents_WindowingStrategy); ok {
		x.xxx_hidden_Root = nil
	}
}

const MessageWithComponents_Root_not_set_case case_MessageWithComponents_Root = 0
const MessageWithComponents_Coder_case case_MessageWithComponents_Root = 2
const MessageWithComponents_CombinePayload_case case_MessageWithComponents_Root = 3
const MessageWithComponents_FunctionSpec_case case_MessageWithComponents_Root = 4
const MessageWithComponents_ParDoPayload_case case_MessageWithComponents_Root = 6
const MessageWithComponents_Ptransform_case case_MessageWithComponents_Root = 7
const MessageWithComponents_Pcollection_case case_MessageWithComponents_Root = 8
const MessageWithComponents_ReadPayload_case case_MessageWithComponents_Root = 9
const MessageWithComponents_SideInput_case case_MessageWithComponents_Root = 11
const MessageWithComponents_WindowIntoPayload_case case_MessageWithComponents_Root = 12
const MessageWithComponents_WindowingStrategy_case case_MessageWithComponents_Root = 13

func (x *MessageWithComponents) WhichRoot() case_MessageWithComponents_Root {
	if x == nil {
		return MessageWithComponents_Root_not_set_case
	}
	switch x.xxx_hidden_Root.(type) {
	case *messageWithComponents_Coder:
		return MessageWithComponents_Coder_case
	case *messageWithComponents_CombinePayload:
		return MessageWithComponents_CombinePayload_case
	case *messageWithComponents_FunctionSpec:
		return MessageWithComponents_FunctionSpec_case
	case *messageWithComponents_ParDoPayload:
		return MessageWithComponents_ParDoPayload_case
	case *messageWithComponents_Ptransform:
		return MessageWithComponents_Ptransform_case
	case *messageWithComponents_Pcollection:
		return MessageWithComponents_Pcollection_case
	case *messageWithComponents_ReadPayload:
		return MessageWithComponents_ReadPayload_case
	case *messageWithComponents_SideInput:
		return MessageWithComponents_SideInput_case
	case *messageWithComponents_WindowIntoPayload:
		return MessageWithComponents_WindowIntoPayload_case
	case *messageWithComponents_WindowingStrategy:
		return MessageWithComponents_WindowingStrategy_case
	default:
		return MessageWithComponents_Root_not_set_case
	}
}

type MessageWithComponents_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// (Optional) The by-reference components of the root message,
	// enabling a standalone message.
	//
	// If this is absent, it is expected that there are no
	// references.
	Components *Components
	// (Required) The root message that may contain pointers
	// that should be resolved by looking inside components.

	// Fields of oneof xxx_hidden_Root:
	Coder             *Coder
	CombinePayload    *CombinePayload
	FunctionSpec      *FunctionSpec
	ParDoPayload      *ParDoPayload
	Ptransform        *PTransform
	Pcollection       *PCollection
	ReadPayload       *ReadPayload
	SideInput         *SideInput
	WindowIntoPayload *WindowIntoPayload
	WindowingStrategy *WindowingStrategy
	// -- end of xxx_hidden_Root
}

func (b0 MessageWithComponents_builder) Build() *MessageWithComponents {
	m0 := &MessageWithComponents{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Components = b.Components
	if b.Coder != nil {
		x.xxx_hidden_Root = &messageWithComponents_Coder{b.Coder}
	}
	if b.CombinePayload != nil {
		x.xxx_hidden_Root = &messageWithComponents_CombinePayload{b.CombinePayload}
	}
	if b.FunctionSpec != nil {
		x.xxx_hidden_Root = &messageWithComponents_FunctionSpec{b.FunctionSpec}
	}
	if b.ParDoPayload != nil {
		x.xxx_hidden_Root = &messageWithComponents_ParDoPayload{b.ParDoPayload}
	}
	if b.Ptransform != nil {
		x.xxx_hidden_Root = &messageWithComponents_Ptransform{b.Ptransform}
	}
	if b.Pcollection != nil {
		x.xxx_hidden_Root = &messageWithComponents_Pcollection{b.Pcollection}
	}
	if b.ReadPayload != nil {
		x.xxx_hidden_Root = &messageWithComponents_ReadPayload{b.ReadPayload}
	}
	if b.SideInput != nil {
		x.xxx_hidden_Root = &messageWithComponents_SideInput{b.SideInput}
	}
	if b.WindowIntoPayload != nil {
		x.xxx_hidden_Root = &messageWithComponents_WindowIntoPayload{b.WindowIntoPayload}
	}
	if b.WindowingStrategy != nil {
		x.xxx_hidden_Root = &messageWithComponents_WindowingStrategy{b.WindowingStrategy}
	}
	return m0
}

type case_MessageWithComponents_Root protoreflect.FieldNumber

func (x case_MessageWithComponents_Root) String() string {
	md := file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[63].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type isMessageWithComponents_Root interface {
	isMessageWithComponents_Root()
}

type messageWithComponents_Coder struct {
	Coder *Coder `protobuf:"bytes,2,opt,name=coder,proto3,oneof"`
}

type messageWithComponents_CombinePayload struct {
	CombinePayload *CombinePayload `protobuf:"bytes,3,opt,name=combine_payload,json=combinePayload,proto3,oneof"`
}

type messageWithComponents_FunctionSpec struct {
	FunctionSpec *FunctionSpec `protobuf:"bytes,4,opt,name=function_spec,json=functionSpec,proto3,oneof"`
}

type messageWithComponents_ParDoPayload struct {
	ParDoPayload *ParDoPayload `protobuf:"bytes,6,opt,name=par_do_payload,json=parDoPayload,proto3,oneof"`
}

type messageWithComponents_Ptransform struct {
	Ptransform *PTransform `protobuf:"bytes,7,opt,name=ptransform,proto3,oneof"`
}

type messageWithComponents_Pcollection struct {
	Pcollection *PCollection `protobuf:"bytes,8,opt,name=pcollection,proto3,oneof"`
}

type messageWithComponents_ReadPayload struct {
	ReadPayload *ReadPayload `protobuf:"bytes,9,opt,name=read_payload,json=readPayload,proto3,oneof"`
}

type messageWithComponents_SideInput struct {
	SideInput *SideInput `protobuf:"bytes,11,opt,name=side_input,json=sideInput,proto3,oneof"`
}

type messageWithComponents_WindowIntoPayload struct {
	WindowIntoPayload *WindowIntoPayload `protobuf:"bytes,12,opt,name=window_into_payload,json=windowIntoPayload,proto3,oneof"`
}

type messageWithComponents_WindowingStrategy struct {
	WindowingStrategy *WindowingStrategy `protobuf:"bytes,13,opt,name=windowing_strategy,json=windowingStrategy,proto3,oneof"`
}

func (*messageWithComponents_Coder) isMessageWithComponents_Root() {}

func (*messageWithComponents_CombinePayload) isMessageWithComponents_Root() {}

func (*messageWithComponents_FunctionSpec) isMessageWithComponents_Root() {}

func (*messageWithComponents_ParDoPayload) isMessageWithComponents_Root() {}

func (*messageWithComponents_Ptransform) isMessageWithComponents_Root() {}

func (*messageWithComponents_Pcollection) isMessageWithComponents_Root() {}

func (*messageWithComponents_ReadPayload) isMessageWithComponents_Root() {}

func (*messageWithComponents_SideInput) isMessageWithComponents_Root() {}

func (*messageWithComponents_WindowIntoPayload) isMessageWithComponents_Root() {}

func (*messageWithComponents_WindowingStrategy) isMessageWithComponents_Root() {}

// The payload for an executable stage. This will eventually be passed to an SDK in the form of a
// ProcessBundleDescriptor.
type ExecutableStagePayload struct {
	state                        protoimpl.MessageState                      `protogen:"opaque.v1"`
	xxx_hidden_Environment       *Environment                                `protobuf:"bytes,1,opt,name=environment,proto3" json:"environment,omitempty"`
	xxx_hidden_WireCoderSettings *[]*ExecutableStagePayload_WireCoderSetting `protobuf:"bytes,9,rep,name=wire_coder_settings,json=wireCoderSettings,proto3" json:"wire_coder_settings,omitempty"`
	xxx_hidden_Input             string                                      `protobuf:"bytes,2,opt,name=input,proto3" json:"input,omitempty"`
	xxx_hidden_SideInputs        *[]*ExecutableStagePayload_SideInputId      `protobuf:"bytes,3,rep,name=side_inputs,json=sideInputs,proto3" json:"side_inputs,omitempty"`
	xxx_hidden_Transforms        []string                                    `protobuf:"bytes,4,rep,name=transforms,proto3" json:"transforms,omitempty"`
	xxx_hidden_Outputs           []string                                    `protobuf:"bytes,5,rep,name=outputs,proto3" json:"outputs,omitempty"`
	xxx_hidden_Components        *Components                                 `protobuf:"bytes,6,opt,name=components,proto3" json:"components,omitempty"`
	xxx_hidden_UserStates        *[]*ExecutableStagePayload_UserStateId      `protobuf:"bytes,7,rep,name=user_states,json=userStates,proto3" json:"user_states,omitempty"`
	xxx_hidden_Timers            *[]*ExecutableStagePayload_TimerId          `protobuf:"bytes,8,rep,name=timers,proto3" json:"timers,omitempty"`
	xxx_hidden_TimerFamilies     *[]*ExecutableStagePayload_TimerFamilyId    `protobuf:"bytes,10,rep,name=timerFamilies,proto3" json:"timerFamilies,omitempty"`
	unknownFields                protoimpl.UnknownFields
	sizeCache                    protoimpl.SizeCache
}

func (x *ExecutableStagePayload) Reset() {
	*x = ExecutableStagePayload{}
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[64]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecutableStagePayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutableStagePayload) ProtoMessage() {}

func (x *ExecutableStagePayload) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[64]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ExecutableStagePayload) GetEnvironment() *Environment {
	if x != nil {
		return x.xxx_hidden_Environment
	}
	return nil
}

func (x *ExecutableStagePayload) GetWireCoderSettings() []*ExecutableStagePayload_WireCoderSetting {
	if x != nil {
		if x.xxx_hidden_WireCoderSettings != nil {
			return *x.xxx_hidden_WireCoderSettings
		}
	}
	return nil
}

func (x *ExecutableStagePayload) GetInput() string {
	if x != nil {
		return x.xxx_hidden_Input
	}
	return ""
}

func (x *ExecutableStagePayload) GetSideInputs() []*ExecutableStagePayload_SideInputId {
	if x != nil {
		if x.xxx_hidden_SideInputs != nil {
			return *x.xxx_hidden_SideInputs
		}
	}
	return nil
}

func (x *ExecutableStagePayload) GetTransforms() []string {
	if x != nil {
		return x.xxx_hidden_Transforms
	}
	return nil
}

func (x *ExecutableStagePayload) GetOutputs() []string {
	if x != nil {
		return x.xxx_hidden_Outputs
	}
	return nil
}

func (x *ExecutableStagePayload) GetComponents() *Components {
	if x != nil {
		return x.xxx_hidden_Components
	}
	return nil
}

func (x *ExecutableStagePayload) GetUserStates() []*ExecutableStagePayload_UserStateId {
	if x != nil {
		if x.xxx_hidden_UserStates != nil {
			return *x.xxx_hidden_UserStates
		}
	}
	return nil
}

func (x *ExecutableStagePayload) GetTimers() []*ExecutableStagePayload_TimerId {
	if x != nil {
		if x.xxx_hidden_Timers != nil {
			return *x.xxx_hidden_Timers
		}
	}
	return nil
}

func (x *ExecutableStagePayload) GetTimerFamilies() []*ExecutableStagePayload_TimerFamilyId {
	if x != nil {
		if x.xxx_hidden_TimerFamilies != nil {
			return *x.xxx_hidden_TimerFamilies
		}
	}
	return nil
}

func (x *ExecutableStagePayload) SetEnvironment(v *Environment) {
	x.xxx_hidden_Environment = v
}

func (x *ExecutableStagePayload) SetWireCoderSettings(v []*ExecutableStagePayload_WireCoderSetting) {
	x.xxx_hidden_WireCoderSettings = &v
}

func (x *ExecutableStagePayload) SetInput(v string) {
	x.xxx_hidden_Input = v
}

func (x *ExecutableStagePayload) SetSideInputs(v []*ExecutableStagePayload_SideInputId) {
	x.xxx_hidden_SideInputs = &v
}

func (x *ExecutableStagePayload) SetTransforms(v []string) {
	x.xxx_hidden_Transforms = v
}

func (x *ExecutableStagePayload) SetOutputs(v []string) {
	x.xxx_hidden_Outputs = v
}

func (x *ExecutableStagePayload) SetComponents(v *Components) {
	x.xxx_hidden_Components = v
}

func (x *ExecutableStagePayload) SetUserStates(v []*ExecutableStagePayload_UserStateId) {
	x.xxx_hidden_UserStates = &v
}

func (x *ExecutableStagePayload) SetTimers(v []*ExecutableStagePayload_TimerId) {
	x.xxx_hidden_Timers = &v
}

func (x *ExecutableStagePayload) SetTimerFamilies(v []*ExecutableStagePayload_TimerFamilyId) {
	x.xxx_hidden_TimerFamilies = &v
}

func (x *ExecutableStagePayload) HasEnvironment() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Environment != nil
}

func (x *ExecutableStagePayload) HasComponents() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Components != nil
}

func (x *ExecutableStagePayload) ClearEnvironment() {
	x.xxx_hidden_Environment = nil
}

func (x *ExecutableStagePayload) ClearComponents() {
	x.xxx_hidden_Components = nil
}

type ExecutableStagePayload_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// (Required) Environment in which this stage executes.
	//
	// We use an environment rather than environment id
	// because ExecutableStages use environments directly. This may change in the future.
	Environment *Environment
	// The wire coder settings of this executable stage
	WireCoderSettings []*ExecutableStagePayload_WireCoderSetting
	// (Required) Input PCollection id. This must be present as a value in the inputs of any
	// PTransform the ExecutableStagePayload is the payload of.
	Input string
	// The side inputs required for this executable stage. Each side input of each PTransform within
	// this ExecutableStagePayload must be represented within this field.
	SideInputs []*ExecutableStagePayload_SideInputId
	// PTransform ids contained within this executable stage. This must contain at least one
	// PTransform id.
	Transforms []string
	// Output PCollection ids. This must be equal to the values of the outputs of any
	// PTransform the ExecutableStagePayload is the payload of.
	Outputs []string
	// (Required) The components for the Executable Stage. This must contain all of the Transforms
	// in transforms, and the closure of all of the components they recognize.
	Components *Components
	// The user states required for this executable stage. Each user state of each PTransform within
	// this ExecutableStagePayload must be represented within this field.
	UserStates []*ExecutableStagePayload_UserStateId
	// The timers required for this executable stage. Each timer of each PTransform within
	// this ExecutableStagePayload must be represented within this field.
	Timers []*ExecutableStagePayload_TimerId
	// The timerfamilies required for this executable stage. Each timer familyof each PTransform within
	// this ExecutableStagePayload must be represented within this field.
	TimerFamilies []*ExecutableStagePayload_TimerFamilyId
}

func (b0 ExecutableStagePayload_builder) Build() *ExecutableStagePayload {
	m0 := &ExecutableStagePayload{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Environment = b.Environment
	x.xxx_hidden_WireCoderSettings = &b.WireCoderSettings
	x.xxx_hidden_Input = b.Input
	x.xxx_hidden_SideInputs = &b.SideInputs
	x.xxx_hidden_Transforms = b.Transforms
	x.xxx_hidden_Outputs = b.Outputs
	x.xxx_hidden_Components = b.Components
	x.xxx_hidden_UserStates = &b.UserStates
	x.xxx_hidden_Timers = &b.Timers
	x.xxx_hidden_TimerFamilies = &b.TimerFamilies
	return m0
}

// See https://beam.apache.org/documentation/runtime/resource-hints/ for additional documentation
// on the behavior of StandardResourceHint.
type StandardResourceHints struct {
	state         protoimpl.MessageState `protogen:"opaque.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StandardResourceHints) Reset() {
	*x = StandardResourceHints{}
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[65]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StandardResourceHints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StandardResourceHints) ProtoMessage() {}

func (x *StandardResourceHints) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[65]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

type StandardResourceHints_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

}

func (b0 StandardResourceHints_builder) Build() *StandardResourceHints {
	m0 := &StandardResourceHints{}
	b, x := &b0, m0
	_, _ = b, x
	return m0
}

type TestStreamPayload_Event struct {
	state            protoimpl.MessageState          `protogen:"opaque.v1"`
	xxx_hidden_Event isTestStreamPayload_Event_Event `protobuf_oneof:"event"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *TestStreamPayload_Event) Reset() {
	*x = TestStreamPayload_Event{}
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[77]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestStreamPayload_Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestStreamPayload_Event) ProtoMessage() {}

func (x *TestStreamPayload_Event) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[77]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *TestStreamPayload_Event) GetWatermarkEvent() *TestStreamPayload_Event_AdvanceWatermark {
	if x != nil {
		if x, ok := x.xxx_hidden_Event.(*testStreamPayload_Event_WatermarkEvent); ok {
			return x.WatermarkEvent
		}
	}
	return nil
}

func (x *TestStreamPayload_Event) GetProcessingTimeEvent() *TestStreamPayload_Event_AdvanceProcessingTime {
	if x != nil {
		if x, ok := x.xxx_hidden_Event.(*testStreamPayload_Event_ProcessingTimeEvent); ok {
			return x.ProcessingTimeEvent
		}
	}
	return nil
}

func (x *TestStreamPayload_Event) GetElementEvent() *TestStreamPayload_Event_AddElements {
	if x != nil {
		if x, ok := x.xxx_hidden_Event.(*testStreamPayload_Event_ElementEvent); ok {
			return x.ElementEvent
		}
	}
	return nil
}

func (x *TestStreamPayload_Event) SetWatermarkEvent(v *TestStreamPayload_Event_AdvanceWatermark) {
	if v == nil {
		x.xxx_hidden_Event = nil
		return
	}
	x.xxx_hidden_Event = &testStreamPayload_Event_WatermarkEvent{v}
}

func (x *TestStreamPayload_Event) SetProcessingTimeEvent(v *TestStreamPayload_Event_AdvanceProcessingTime) {
	if v == nil {
		x.xxx_hidden_Event = nil
		return
	}
	x.xxx_hidden_Event = &testStreamPayload_Event_ProcessingTimeEvent{v}
}

func (x *TestStreamPayload_Event) SetElementEvent(v *TestStreamPayload_Event_AddElements) {
	if v == nil {
		x.xxx_hidden_Event = nil
		return
	}
	x.xxx_hidden_Event = &testStreamPayload_Event_ElementEvent{v}
}

func (x *TestStreamPayload_Event) HasEvent() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Event != nil
}

func (x *TestStreamPayload_Event) HasWatermarkEvent() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Event.(*testStreamPayload_Event_WatermarkEvent)
	return ok
}

func (x *TestStreamPayload_Event) HasProcessingTimeEvent() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Event.(*testStreamPayload_Event_ProcessingTimeEvent)
	return ok
}

func (x *TestStreamPayload_Event) HasElementEvent() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Event.(*testStreamPayload_Event_ElementEvent)
	return ok
}

func (x *TestStreamPayload_Event) ClearEvent() {
	x.xxx_hidden_Event = nil
}

func (x *TestStreamPayload_Event) ClearWatermarkEvent() {
	if _, ok := x.xxx_hidden_Event.(*testStreamPayload_Event_WatermarkEvent); ok {
		x.xxx_hidden_Event = nil
	}
}

func (x *TestStreamPayload_Event) ClearProcessingTimeEvent() {
	if _, ok := x.xxx_hidden_Event.(*testStreamPayload_Event_ProcessingTimeEvent); ok {
		x.xxx_hidden_Event = nil
	}
}

func (x *TestStreamPayload_Event) ClearElementEvent() {
	if _, ok := x.xxx_hidden_Event.(*testStreamPayload_Event_ElementEvent); ok {
		x.xxx_hidden_Event = nil
	}
}

const TestStreamPayload_Event_Event_not_set_case case_TestStreamPayload_Event_Event = 0
const TestStreamPayload_Event_WatermarkEvent_case case_TestStreamPayload_Event_Event = 1
const TestStreamPayload_Event_ProcessingTimeEvent_case case_TestStreamPayload_Event_Event = 2
const TestStreamPayload_Event_ElementEvent_case case_TestStreamPayload_Event_Event = 3

func (x *TestStreamPayload_Event) WhichEvent() case_TestStreamPayload_Event_Event {
	if x == nil {
		return TestStreamPayload_Event_Event_not_set_case
	}
	switch x.xxx_hidden_Event.(type) {
	case *testStreamPayload_Event_WatermarkEvent:
		return TestStreamPayload_Event_WatermarkEvent_case
	case *testStreamPayload_Event_ProcessingTimeEvent:
		return TestStreamPayload_Event_ProcessingTimeEvent_case
	case *testStreamPayload_Event_ElementEvent:
		return TestStreamPayload_Event_ElementEvent_case
	default:
		return TestStreamPayload_Event_Event_not_set_case
	}
}

type TestStreamPayload_Event_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Fields of oneof xxx_hidden_Event:
	WatermarkEvent      *TestStreamPayload_Event_AdvanceWatermark
	ProcessingTimeEvent *TestStreamPayload_Event_AdvanceProcessingTime
	ElementEvent        *TestStreamPayload_Event_AddElements
	// -- end of xxx_hidden_Event
}

func (b0 TestStreamPayload_Event_builder) Build() *TestStreamPayload_Event {
	m0 := &TestStreamPayload_Event{}
	b, x := &b0, m0
	_, _ = b, x
	if b.WatermarkEvent != nil {
		x.xxx_hidden_Event = &testStreamPayload_Event_WatermarkEvent{b.WatermarkEvent}
	}
	if b.ProcessingTimeEvent != nil {
		x.xxx_hidden_Event = &testStreamPayload_Event_ProcessingTimeEvent{b.ProcessingTimeEvent}
	}
	if b.ElementEvent != nil {
		x.xxx_hidden_Event = &testStreamPayload_Event_ElementEvent{b.ElementEvent}
	}
	return m0
}

type case_TestStreamPayload_Event_Event protoreflect.FieldNumber

func (x case_TestStreamPayload_Event_Event) String() string {
	md := file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[77].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type isTestStreamPayload_Event_Event interface {
	isTestStreamPayload_Event_Event()
}

type testStreamPayload_Event_WatermarkEvent struct {
	WatermarkEvent *TestStreamPayload_Event_AdvanceWatermark `protobuf:"bytes,1,opt,name=watermark_event,json=watermarkEvent,proto3,oneof"`
}

type testStreamPayload_Event_ProcessingTimeEvent struct {
	ProcessingTimeEvent *TestStreamPayload_Event_AdvanceProcessingTime `protobuf:"bytes,2,opt,name=processing_time_event,json=processingTimeEvent,proto3,oneof"`
}

type testStreamPayload_Event_ElementEvent struct {
	ElementEvent *TestStreamPayload_Event_AddElements `protobuf:"bytes,3,opt,name=element_event,json=elementEvent,proto3,oneof"`
}

func (*testStreamPayload_Event_WatermarkEvent) isTestStreamPayload_Event_Event() {}

func (*testStreamPayload_Event_ProcessingTimeEvent) isTestStreamPayload_Event_Event() {}

func (*testStreamPayload_Event_ElementEvent) isTestStreamPayload_Event_Event() {}

// A single element inside of the TestStream.
type TestStreamPayload_TimestampedElement struct {
	state                     protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_EncodedElement []byte                 `protobuf:"bytes,1,opt,name=encoded_element,json=encodedElement,proto3" json:"encoded_element,omitempty"`
	xxx_hidden_Timestamp      int64                  `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *TestStreamPayload_TimestampedElement) Reset() {
	*x = TestStreamPayload_TimestampedElement{}
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[78]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestStreamPayload_TimestampedElement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestStreamPayload_TimestampedElement) ProtoMessage() {}

func (x *TestStreamPayload_TimestampedElement) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[78]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *TestStreamPayload_TimestampedElement) GetEncodedElement() []byte {
	if x != nil {
		return x.xxx_hidden_EncodedElement
	}
	return nil
}

func (x *TestStreamPayload_TimestampedElement) GetTimestamp() int64 {
	if x != nil {
		return x.xxx_hidden_Timestamp
	}
	return 0
}

func (x *TestStreamPayload_TimestampedElement) SetEncodedElement(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.xxx_hidden_EncodedElement = v
}

func (x *TestStreamPayload_TimestampedElement) SetTimestamp(v int64) {
	x.xxx_hidden_Timestamp = v
}

type TestStreamPayload_TimestampedElement_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// (Required) The element encoded. Currently the TestStream only supports
	// encoding primitives.
	EncodedElement []byte
	// (Required) The event timestamp in millisecond of this element.
	Timestamp int64
}

func (b0 TestStreamPayload_TimestampedElement_builder) Build() *TestStreamPayload_TimestampedElement {
	m0 := &TestStreamPayload_TimestampedElement{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_EncodedElement = b.EncodedElement
	x.xxx_hidden_Timestamp = b.Timestamp
	return m0
}

// Advances the watermark to the specified timestamp.
type TestStreamPayload_Event_AdvanceWatermark struct {
	state                   protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_NewWatermark int64                  `protobuf:"varint,1,opt,name=new_watermark,json=newWatermark,proto3" json:"new_watermark,omitempty"`
	xxx_hidden_Tag          string                 `protobuf:"bytes,2,opt,name=tag,proto3" json:"tag,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *TestStreamPayload_Event_AdvanceWatermark) Reset() {
	*x = TestStreamPayload_Event_AdvanceWatermark{}
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[79]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestStreamPayload_Event_AdvanceWatermark) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestStreamPayload_Event_AdvanceWatermark) ProtoMessage() {}

func (x *TestStreamPayload_Event_AdvanceWatermark) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[79]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *TestStreamPayload_Event_AdvanceWatermark) GetNewWatermark() int64 {
	if x != nil {
		return x.xxx_hidden_NewWatermark
	}
	return 0
}

func (x *TestStreamPayload_Event_AdvanceWatermark) GetTag() string {
	if x != nil {
		return x.xxx_hidden_Tag
	}
	return ""
}

func (x *TestStreamPayload_Event_AdvanceWatermark) SetNewWatermark(v int64) {
	x.xxx_hidden_NewWatermark = v
}

func (x *TestStreamPayload_Event_AdvanceWatermark) SetTag(v string) {
	x.xxx_hidden_Tag = v
}

type TestStreamPayload_Event_AdvanceWatermark_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// (Required) The watermark in millisecond to advance to.
	NewWatermark int64
	// (Optional) The output watermark tag for a PCollection. If unspecified
	// or with an empty string, this will default to the Main PCollection
	// Output
	Tag string
}

func (b0 TestStreamPayload_Event_AdvanceWatermark_builder) Build() *TestStreamPayload_Event_AdvanceWatermark {
	m0 := &TestStreamPayload_Event_AdvanceWatermark{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_NewWatermark = b.NewWatermark
	x.xxx_hidden_Tag = b.Tag
	return m0
}

// Advances the processing time clock by the specified amount.
type TestStreamPayload_Event_AdvanceProcessingTime struct {
	state                      protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_AdvanceDuration int64                  `protobuf:"varint,1,opt,name=advance_duration,json=advanceDuration,proto3" json:"advance_duration,omitempty"`
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *TestStreamPayload_Event_AdvanceProcessingTime) Reset() {
	*x = TestStreamPayload_Event_AdvanceProcessingTime{}
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[80]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestStreamPayload_Event_AdvanceProcessingTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestStreamPayload_Event_AdvanceProcessingTime) ProtoMessage() {}

func (x *TestStreamPayload_Event_AdvanceProcessingTime) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[80]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *TestStreamPayload_Event_AdvanceProcessingTime) GetAdvanceDuration() int64 {
	if x != nil {
		return x.xxx_hidden_AdvanceDuration
	}
	return 0
}

func (x *TestStreamPayload_Event_AdvanceProcessingTime) SetAdvanceDuration(v int64) {
	x.xxx_hidden_AdvanceDuration = v
}

type TestStreamPayload_Event_AdvanceProcessingTime_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// (Required) The duration in millisecond to advance by.
	AdvanceDuration int64
}

func (b0 TestStreamPayload_Event_AdvanceProcessingTime_builder) Build() *TestStreamPayload_Event_AdvanceProcessingTime {
	m0 := &TestStreamPayload_Event_AdvanceProcessingTime{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_AdvanceDuration = b.AdvanceDuration
	return m0
}

// Adds elements to the stream to be emitted.
type TestStreamPayload_Event_AddElements struct {
	state               protoimpl.MessageState                   `protogen:"opaque.v1"`
	xxx_hidden_Elements *[]*TestStreamPayload_TimestampedElement `protobuf:"bytes,1,rep,name=elements,proto3" json:"elements,omitempty"`
	xxx_hidden_Tag      string                                   `protobuf:"bytes,3,opt,name=tag,proto3" json:"tag,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *TestStreamPayload_Event_AddElements) Reset() {
	*x = TestStreamPayload_Event_AddElements{}
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[81]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestStreamPayload_Event_AddElements) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestStreamPayload_Event_AddElements) ProtoMessage() {}

func (x *TestStreamPayload_Event_AddElements) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[81]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *TestStreamPayload_Event_AddElements) GetElements() []*TestStreamPayload_TimestampedElement {
	if x != nil {
		if x.xxx_hidden_Elements != nil {
			return *x.xxx_hidden_Elements
		}
	}
	return nil
}

func (x *TestStreamPayload_Event_AddElements) GetTag() string {
	if x != nil {
		return x.xxx_hidden_Tag
	}
	return ""
}

func (x *TestStreamPayload_Event_AddElements) SetElements(v []*TestStreamPayload_TimestampedElement) {
	x.xxx_hidden_Elements = &v
}

func (x *TestStreamPayload_Event_AddElements) SetTag(v string) {
	x.xxx_hidden_Tag = v
}

type TestStreamPayload_Event_AddElements_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// (Required) The elements to add to the TestStream.
	Elements []*TestStreamPayload_TimestampedElement
	// (Optional) The output PCollection tag to add these elements to. If
	// unspecified or with an empty string, this will default to the Main
	// PCollection Output.
	Tag string
}

func (b0 TestStreamPayload_Event_AddElements_builder) Build() *TestStreamPayload_Event_AddElements {
	m0 := &TestStreamPayload_Event_AddElements{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Elements = &b.Elements
	x.xxx_hidden_Tag = b.Tag
	return m0
}

// Ready when all subtriggers are ready.
type Trigger_AfterAll struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Subtriggers *[]*Trigger            `protobuf:"bytes,1,rep,name=subtriggers,proto3" json:"subtriggers,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *Trigger_AfterAll) Reset() {
	*x = Trigger_AfterAll{}
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[83]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Trigger_AfterAll) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trigger_AfterAll) ProtoMessage() {}

func (x *Trigger_AfterAll) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[83]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Trigger_AfterAll) GetSubtriggers() []*Trigger {
	if x != nil {
		if x.xxx_hidden_Subtriggers != nil {
			return *x.xxx_hidden_Subtriggers
		}
	}
	return nil
}

func (x *Trigger_AfterAll) SetSubtriggers(v []*Trigger) {
	x.xxx_hidden_Subtriggers = &v
}

type Trigger_AfterAll_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Subtriggers []*Trigger
}

func (b0 Trigger_AfterAll_builder) Build() *Trigger_AfterAll {
	m0 := &Trigger_AfterAll{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Subtriggers = &b.Subtriggers
	return m0
}

// Ready when any subtrigger is ready.
type Trigger_AfterAny struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Subtriggers *[]*Trigger            `protobuf:"bytes,1,rep,name=subtriggers,proto3" json:"subtriggers,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *Trigger_AfterAny) Reset() {
	*x = Trigger_AfterAny{}
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[84]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Trigger_AfterAny) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trigger_AfterAny) ProtoMessage() {}

func (x *Trigger_AfterAny) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[84]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Trigger_AfterAny) GetSubtriggers() []*Trigger {
	if x != nil {
		if x.xxx_hidden_Subtriggers != nil {
			return *x.xxx_hidden_Subtriggers
		}
	}
	return nil
}

func (x *Trigger_AfterAny) SetSubtriggers(v []*Trigger) {
	x.xxx_hidden_Subtriggers = &v
}

type Trigger_AfterAny_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Subtriggers []*Trigger
}

func (b0 Trigger_AfterAny_builder) Build() *Trigger_AfterAny {
	m0 := &Trigger_AfterAny{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Subtriggers = &b.Subtriggers
	return m0
}

// Starting with the first subtrigger, ready when the _current_ subtrigger
// is ready. After output, advances the current trigger by one.
type Trigger_AfterEach struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Subtriggers *[]*Trigger            `protobuf:"bytes,1,rep,name=subtriggers,proto3" json:"subtriggers,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *Trigger_AfterEach) Reset() {
	*x = Trigger_AfterEach{}
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[85]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Trigger_AfterEach) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trigger_AfterEach) ProtoMessage() {}

func (x *Trigger_AfterEach) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[85]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Trigger_AfterEach) GetSubtriggers() []*Trigger {
	if x != nil {
		if x.xxx_hidden_Subtriggers != nil {
			return *x.xxx_hidden_Subtriggers
		}
	}
	return nil
}

func (x *Trigger_AfterEach) SetSubtriggers(v []*Trigger) {
	x.xxx_hidden_Subtriggers = &v
}

type Trigger_AfterEach_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Subtriggers []*Trigger
}

func (b0 Trigger_AfterEach_builder) Build() *Trigger_AfterEach {
	m0 := &Trigger_AfterEach{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Subtriggers = &b.Subtriggers
	return m0
}

// Ready after the input watermark is past the end of the window.
//
// May have implicitly-repeated subtriggers for early and late firings.
// When the end of the window is reached, the trigger transitions between
// the subtriggers.
type Trigger_AfterEndOfWindow struct {
	state                   protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_EarlyFirings *Trigger               `protobuf:"bytes,1,opt,name=early_firings,json=earlyFirings,proto3" json:"early_firings,omitempty"`
	xxx_hidden_LateFirings  *Trigger               `protobuf:"bytes,2,opt,name=late_firings,json=lateFirings,proto3" json:"late_firings,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *Trigger_AfterEndOfWindow) Reset() {
	*x = Trigger_AfterEndOfWindow{}
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[86]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Trigger_AfterEndOfWindow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trigger_AfterEndOfWindow) ProtoMessage() {}

func (x *Trigger_AfterEndOfWindow) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[86]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Trigger_AfterEndOfWindow) GetEarlyFirings() *Trigger {
	if x != nil {
		return x.xxx_hidden_EarlyFirings
	}
	return nil
}

func (x *Trigger_AfterEndOfWindow) GetLateFirings() *Trigger {
	if x != nil {
		return x.xxx_hidden_LateFirings
	}
	return nil
}

func (x *Trigger_AfterEndOfWindow) SetEarlyFirings(v *Trigger) {
	x.xxx_hidden_EarlyFirings = v
}

func (x *Trigger_AfterEndOfWindow) SetLateFirings(v *Trigger) {
	x.xxx_hidden_LateFirings = v
}

func (x *Trigger_AfterEndOfWindow) HasEarlyFirings() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_EarlyFirings != nil
}

func (x *Trigger_AfterEndOfWindow) HasLateFirings() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_LateFirings != nil
}

func (x *Trigger_AfterEndOfWindow) ClearEarlyFirings() {
	x.xxx_hidden_EarlyFirings = nil
}

func (x *Trigger_AfterEndOfWindow) ClearLateFirings() {
	x.xxx_hidden_LateFirings = nil
}

type Trigger_AfterEndOfWindow_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// (Optional) A trigger governing output prior to the end of the window.
	EarlyFirings *Trigger
	// (Optional) A trigger governing output after the end of the window.
	LateFirings *Trigger
}

func (b0 Trigger_AfterEndOfWindow_builder) Build() *Trigger_AfterEndOfWindow {
	m0 := &Trigger_AfterEndOfWindow{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_EarlyFirings = b.EarlyFirings
	x.xxx_hidden_LateFirings = b.LateFirings
	return m0
}

// After input arrives, ready when the specified delay has passed.
type Trigger_AfterProcessingTime struct {
	state                          protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_TimestampTransforms *[]*TimestampTransform `protobuf:"bytes,1,rep,name=timestamp_transforms,json=timestampTransforms,proto3" json:"timestamp_transforms,omitempty"`
	unknownFields                  protoimpl.UnknownFields
	sizeCache                      protoimpl.SizeCache
}

func (x *Trigger_AfterProcessingTime) Reset() {
	*x = Trigger_AfterProcessingTime{}
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[87]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Trigger_AfterProcessingTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trigger_AfterProcessingTime) ProtoMessage() {}

func (x *Trigger_AfterProcessingTime) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[87]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Trigger_AfterProcessingTime) GetTimestampTransforms() []*TimestampTransform {
	if x != nil {
		if x.xxx_hidden_TimestampTransforms != nil {
			return *x.xxx_hidden_TimestampTransforms
		}
	}
	return nil
}

func (x *Trigger_AfterProcessingTime) SetTimestampTransforms(v []*TimestampTransform) {
	x.xxx_hidden_TimestampTransforms = &v
}

type Trigger_AfterProcessingTime_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// (Required) The transforms to apply to an arriving element's timestamp,
	// in order
	TimestampTransforms []*TimestampTransform
}

func (b0 Trigger_AfterProcessingTime_builder) Build() *Trigger_AfterProcessingTime {
	m0 := &Trigger_AfterProcessingTime{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_TimestampTransforms = &b.TimestampTransforms
	return m0
}

// Ready whenever upstream processing time has all caught up with
// the arrival time of an input element
type Trigger_AfterSynchronizedProcessingTime struct {
	state         protoimpl.MessageState `protogen:"opaque.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Trigger_AfterSynchronizedProcessingTime) Reset() {
	*x = Trigger_AfterSynchronizedProcessingTime{}
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[88]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Trigger_AfterSynchronizedProcessingTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trigger_AfterSynchronizedProcessingTime) ProtoMessage() {}

func (x *Trigger_AfterSynchronizedProcessingTime) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[88]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

type Trigger_AfterSynchronizedProcessingTime_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

}

func (b0 Trigger_AfterSynchronizedProcessingTime_builder) Build() *Trigger_AfterSynchronizedProcessingTime {
	m0 := &Trigger_AfterSynchronizedProcessingTime{}
	b, x := &b0, m0
	_, _ = b, x
	return m0
}

// The default trigger. Equivalent to Repeat { AfterEndOfWindow } but
// specially denoted to indicate the user did not alter the triggering.
type Trigger_Default struct {
	state         protoimpl.MessageState `protogen:"opaque.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Trigger_Default) Reset() {
	*x = Trigger_Default{}
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[89]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Trigger_Default) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trigger_Default) ProtoMessage() {}

func (x *Trigger_Default) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[89]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

type Trigger_Default_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

}

func (b0 Trigger_Default_builder) Build() *Trigger_Default {
	m0 := &Trigger_Default{}
	b, x := &b0, m0
	_, _ = b, x
	return m0
}

// Ready whenever the requisite number of input elements have arrived
type Trigger_ElementCount struct {
	state                   protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_ElementCount int32                  `protobuf:"varint,1,opt,name=element_count,json=elementCount,proto3" json:"element_count,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *Trigger_ElementCount) Reset() {
	*x = Trigger_ElementCount{}
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[90]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Trigger_ElementCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trigger_ElementCount) ProtoMessage() {}

func (x *Trigger_ElementCount) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[90]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Trigger_ElementCount) GetElementCount() int32 {
	if x != nil {
		return x.xxx_hidden_ElementCount
	}
	return 0
}

func (x *Trigger_ElementCount) SetElementCount(v int32) {
	x.xxx_hidden_ElementCount = v
}

type Trigger_ElementCount_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	ElementCount int32
}

func (b0 Trigger_ElementCount_builder) Build() *Trigger_ElementCount {
	m0 := &Trigger_ElementCount{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_ElementCount = b.ElementCount
	return m0
}

// Never ready. There will only be an ON_TIME output and a final
// output at window expiration.
type Trigger_Never struct {
	state         protoimpl.MessageState `protogen:"opaque.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Trigger_Never) Reset() {
	*x = Trigger_Never{}
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[91]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Trigger_Never) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trigger_Never) ProtoMessage() {}

func (x *Trigger_Never) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[91]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

type Trigger_Never_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

}

func (b0 Trigger_Never_builder) Build() *Trigger_Never {
	m0 := &Trigger_Never{}
	b, x := &b0, m0
	_, _ = b, x
	return m0
}

// Always ready. This can also be expressed as ElementCount(1) but
// is more explicit.
type Trigger_Always struct {
	state         protoimpl.MessageState `protogen:"opaque.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Trigger_Always) Reset() {
	*x = Trigger_Always{}
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[92]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Trigger_Always) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trigger_Always) ProtoMessage() {}

func (x *Trigger_Always) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[92]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

type Trigger_Always_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

}

func (b0 Trigger_Always_builder) Build() *Trigger_Always {
	m0 := &Trigger_Always{}
	b, x := &b0, m0
	_, _ = b, x
	return m0
}

// Ready whenever either of its subtriggers are ready, but finishes output
// when the finally subtrigger fires.
type Trigger_OrFinally struct {
	state              protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Main    *Trigger               `protobuf:"bytes,1,opt,name=main,proto3" json:"main,omitempty"`
	xxx_hidden_Finally *Trigger               `protobuf:"bytes,2,opt,name=finally,proto3" json:"finally,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *Trigger_OrFinally) Reset() {
	*x = Trigger_OrFinally{}
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[93]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Trigger_OrFinally) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trigger_OrFinally) ProtoMessage() {}

func (x *Trigger_OrFinally) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[93]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Trigger_OrFinally) GetMain() *Trigger {
	if x != nil {
		return x.xxx_hidden_Main
	}
	return nil
}

func (x *Trigger_OrFinally) GetFinally() *Trigger {
	if x != nil {
		return x.xxx_hidden_Finally
	}
	return nil
}

func (x *Trigger_OrFinally) SetMain(v *Trigger) {
	x.xxx_hidden_Main = v
}

func (x *Trigger_OrFinally) SetFinally(v *Trigger) {
	x.xxx_hidden_Finally = v
}

func (x *Trigger_OrFinally) HasMain() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Main != nil
}

func (x *Trigger_OrFinally) HasFinally() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Finally != nil
}

func (x *Trigger_OrFinally) ClearMain() {
	x.xxx_hidden_Main = nil
}

func (x *Trigger_OrFinally) ClearFinally() {
	x.xxx_hidden_Finally = nil
}

type Trigger_OrFinally_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// (Required) Trigger governing main output; may fire repeatedly.
	Main *Trigger
	// (Required) Trigger governing termination of output.
	Finally *Trigger
}

func (b0 Trigger_OrFinally_builder) Build() *Trigger_OrFinally {
	m0 := &Trigger_OrFinally{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Main = b.Main
	x.xxx_hidden_Finally = b.Finally
	return m0
}

// Ready whenever the subtrigger is ready; resets state when the subtrigger
// completes.
type Trigger_Repeat struct {
	state                 protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Subtrigger *Trigger               `protobuf:"bytes,1,opt,name=subtrigger,proto3" json:"subtrigger,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *Trigger_Repeat) Reset() {
	*x = Trigger_Repeat{}
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[94]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Trigger_Repeat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trigger_Repeat) ProtoMessage() {}

func (x *Trigger_Repeat) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[94]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Trigger_Repeat) GetSubtrigger() *Trigger {
	if x != nil {
		return x.xxx_hidden_Subtrigger
	}
	return nil
}

func (x *Trigger_Repeat) SetSubtrigger(v *Trigger) {
	x.xxx_hidden_Subtrigger = v
}

func (x *Trigger_Repeat) HasSubtrigger() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Subtrigger != nil
}

func (x *Trigger_Repeat) ClearSubtrigger() {
	x.xxx_hidden_Subtrigger = nil
}

type Trigger_Repeat_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// (Require) Trigger that is run repeatedly.
	Subtrigger *Trigger
}

func (b0 Trigger_Repeat_builder) Build() *Trigger_Repeat {
	m0 := &Trigger_Repeat{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Subtrigger = b.Subtrigger
	return m0
}

type TimestampTransform_Delay struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_DelayMillis int64                  `protobuf:"varint,1,opt,name=delay_millis,json=delayMillis,proto3" json:"delay_millis,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *TimestampTransform_Delay) Reset() {
	*x = TimestampTransform_Delay{}
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[95]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TimestampTransform_Delay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimestampTransform_Delay) ProtoMessage() {}

func (x *TimestampTransform_Delay) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[95]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *TimestampTransform_Delay) GetDelayMillis() int64 {
	if x != nil {
		return x.xxx_hidden_DelayMillis
	}
	return 0
}

func (x *TimestampTransform_Delay) SetDelayMillis(v int64) {
	x.xxx_hidden_DelayMillis = v
}

type TimestampTransform_Delay_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// (Required) The delay, in milliseconds.
	DelayMillis int64
}

func (b0 TimestampTransform_Delay_builder) Build() *TimestampTransform_Delay {
	m0 := &TimestampTransform_Delay{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_DelayMillis = b.DelayMillis
	return m0
}

type TimestampTransform_AlignTo struct {
	state             protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Period int64                  `protobuf:"varint,3,opt,name=period,proto3" json:"period,omitempty"`
	xxx_hidden_Offset int64                  `protobuf:"varint,4,opt,name=offset,proto3" json:"offset,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *TimestampTransform_AlignTo) Reset() {
	*x = TimestampTransform_AlignTo{}
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[96]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TimestampTransform_AlignTo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimestampTransform_AlignTo) ProtoMessage() {}

func (x *TimestampTransform_AlignTo) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[96]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *TimestampTransform_AlignTo) GetPeriod() int64 {
	if x != nil {
		return x.xxx_hidden_Period
	}
	return 0
}

func (x *TimestampTransform_AlignTo) GetOffset() int64 {
	if x != nil {
		return x.xxx_hidden_Offset
	}
	return 0
}

func (x *TimestampTransform_AlignTo) SetPeriod(v int64) {
	x.xxx_hidden_Period = v
}

func (x *TimestampTransform_AlignTo) SetOffset(v int64) {
	x.xxx_hidden_Offset = v
}

type TimestampTransform_AlignTo_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// (Required) A duration to which delays should be quantized
	// in milliseconds.
	Period int64
	// (Required) An offset from 0 for the quantization specified by
	// alignment_size, in milliseconds
	Offset int64
}

func (b0 TimestampTransform_AlignTo_builder) Build() *TimestampTransform_AlignTo {
	m0 := &TimestampTransform_AlignTo{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Period = b.Period
	x.xxx_hidden_Offset = b.Offset
	return m0
}

// A reference to a side input. Side inputs are uniquely identified by PTransform id and
// local name.
type ExecutableStagePayload_SideInputId struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_TransformId string                 `protobuf:"bytes,1,opt,name=transform_id,json=transformId,proto3" json:"transform_id,omitempty"`
	xxx_hidden_LocalName   string                 `protobuf:"bytes,2,opt,name=local_name,json=localName,proto3" json:"local_name,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *ExecutableStagePayload_SideInputId) Reset() {
	*x = ExecutableStagePayload_SideInputId{}
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[100]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecutableStagePayload_SideInputId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutableStagePayload_SideInputId) ProtoMessage() {}

func (x *ExecutableStagePayload_SideInputId) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[100]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ExecutableStagePayload_SideInputId) GetTransformId() string {
	if x != nil {
		return x.xxx_hidden_TransformId
	}
	return ""
}

func (x *ExecutableStagePayload_SideInputId) GetLocalName() string {
	if x != nil {
		return x.xxx_hidden_LocalName
	}
	return ""
}

func (x *ExecutableStagePayload_SideInputId) SetTransformId(v string) {
	x.xxx_hidden_TransformId = v
}

func (x *ExecutableStagePayload_SideInputId) SetLocalName(v string) {
	x.xxx_hidden_LocalName = v
}

type ExecutableStagePayload_SideInputId_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// (Required) The id of the PTransform that references this side input.
	TransformId string
	// (Required) The local name of this side input from the PTransform that references it.
	LocalName string
}

func (b0 ExecutableStagePayload_SideInputId_builder) Build() *ExecutableStagePayload_SideInputId {
	m0 := &ExecutableStagePayload_SideInputId{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_TransformId = b.TransformId
	x.xxx_hidden_LocalName = b.LocalName
	return m0
}

// A reference to user state. User states are uniquely identified by PTransform id and
// local name.
type ExecutableStagePayload_UserStateId struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_TransformId string                 `protobuf:"bytes,1,opt,name=transform_id,json=transformId,proto3" json:"transform_id,omitempty"`
	xxx_hidden_LocalName   string                 `protobuf:"bytes,2,opt,name=local_name,json=localName,proto3" json:"local_name,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *ExecutableStagePayload_UserStateId) Reset() {
	*x = ExecutableStagePayload_UserStateId{}
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[101]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecutableStagePayload_UserStateId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutableStagePayload_UserStateId) ProtoMessage() {}

func (x *ExecutableStagePayload_UserStateId) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[101]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ExecutableStagePayload_UserStateId) GetTransformId() string {
	if x != nil {
		return x.xxx_hidden_TransformId
	}
	return ""
}

func (x *ExecutableStagePayload_UserStateId) GetLocalName() string {
	if x != nil {
		return x.xxx_hidden_LocalName
	}
	return ""
}

func (x *ExecutableStagePayload_UserStateId) SetTransformId(v string) {
	x.xxx_hidden_TransformId = v
}

func (x *ExecutableStagePayload_UserStateId) SetLocalName(v string) {
	x.xxx_hidden_LocalName = v
}

type ExecutableStagePayload_UserStateId_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// (Required) The id of the PTransform that references this user state.
	TransformId string
	// (Required) The local name of this user state for the PTransform that references it.
	LocalName string
}

func (b0 ExecutableStagePayload_UserStateId_builder) Build() *ExecutableStagePayload_UserStateId {
	m0 := &ExecutableStagePayload_UserStateId{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_TransformId = b.TransformId
	x.xxx_hidden_LocalName = b.LocalName
	return m0
}

// A reference to a timer. Timers are uniquely identified by PTransform id and
// local name.
type ExecutableStagePayload_TimerId struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_TransformId string                 `protobuf:"bytes,1,opt,name=transform_id,json=transformId,proto3" json:"transform_id,omitempty"`
	xxx_hidden_LocalName   string                 `protobuf:"bytes,2,opt,name=local_name,json=localName,proto3" json:"local_name,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *ExecutableStagePayload_TimerId) Reset() {
	*x = ExecutableStagePayload_TimerId{}
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[102]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecutableStagePayload_TimerId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutableStagePayload_TimerId) ProtoMessage() {}

func (x *ExecutableStagePayload_TimerId) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[102]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ExecutableStagePayload_TimerId) GetTransformId() string {
	if x != nil {
		return x.xxx_hidden_TransformId
	}
	return ""
}

func (x *ExecutableStagePayload_TimerId) GetLocalName() string {
	if x != nil {
		return x.xxx_hidden_LocalName
	}
	return ""
}

func (x *ExecutableStagePayload_TimerId) SetTransformId(v string) {
	x.xxx_hidden_TransformId = v
}

func (x *ExecutableStagePayload_TimerId) SetLocalName(v string) {
	x.xxx_hidden_LocalName = v
}

type ExecutableStagePayload_TimerId_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// (Required) The id of the PTransform that references this timer.
	TransformId string
	// (Required) The local name of this timer for the PTransform that references it.
	LocalName string
}

func (b0 ExecutableStagePayload_TimerId_builder) Build() *ExecutableStagePayload_TimerId {
	m0 := &ExecutableStagePayload_TimerId{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_TransformId = b.TransformId
	x.xxx_hidden_LocalName = b.LocalName
	return m0
}

// A reference to a timer. Timers are uniquely identified by PTransform id and
// local name.
type ExecutableStagePayload_TimerFamilyId struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_TransformId string                 `protobuf:"bytes,1,opt,name=transform_id,json=transformId,proto3" json:"transform_id,omitempty"`
	xxx_hidden_LocalName   string                 `protobuf:"bytes,2,opt,name=local_name,json=localName,proto3" json:"local_name,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *ExecutableStagePayload_TimerFamilyId) Reset() {
	*x = ExecutableStagePayload_TimerFamilyId{}
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[103]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecutableStagePayload_TimerFamilyId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutableStagePayload_TimerFamilyId) ProtoMessage() {}

func (x *ExecutableStagePayload_TimerFamilyId) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[103]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ExecutableStagePayload_TimerFamilyId) GetTransformId() string {
	if x != nil {
		return x.xxx_hidden_TransformId
	}
	return ""
}

func (x *ExecutableStagePayload_TimerFamilyId) GetLocalName() string {
	if x != nil {
		return x.xxx_hidden_LocalName
	}
	return ""
}

func (x *ExecutableStagePayload_TimerFamilyId) SetTransformId(v string) {
	x.xxx_hidden_TransformId = v
}

func (x *ExecutableStagePayload_TimerFamilyId) SetLocalName(v string) {
	x.xxx_hidden_LocalName = v
}

type ExecutableStagePayload_TimerFamilyId_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// (Required) The id of the PTransform that references this timer family.
	TransformId string
	// (Required) The local name of this timer family for the PTransform that references it.
	LocalName string
}

func (b0 ExecutableStagePayload_TimerFamilyId_builder) Build() *ExecutableStagePayload_TimerFamilyId {
	m0 := &ExecutableStagePayload_TimerFamilyId{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_TransformId = b.TransformId
	x.xxx_hidden_LocalName = b.LocalName
	return m0
}

// Settings that decide the coder type of wire coder.
type ExecutableStagePayload_WireCoderSetting struct {
	state              protoimpl.MessageState                           `protogen:"opaque.v1"`
	xxx_hidden_Urn     string                                           `protobuf:"bytes,1,opt,name=urn,proto3" json:"urn,omitempty"`
	xxx_hidden_Payload []byte                                           `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	xxx_hidden_Target  isExecutableStagePayload_WireCoderSetting_Target `protobuf_oneof:"target"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ExecutableStagePayload_WireCoderSetting) Reset() {
	*x = ExecutableStagePayload_WireCoderSetting{}
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[104]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecutableStagePayload_WireCoderSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutableStagePayload_WireCoderSetting) ProtoMessage() {}

func (x *ExecutableStagePayload_WireCoderSetting) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[104]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ExecutableStagePayload_WireCoderSetting) GetUrn() string {
	if x != nil {
		return x.xxx_hidden_Urn
	}
	return ""
}

func (x *ExecutableStagePayload_WireCoderSetting) GetPayload() []byte {
	if x != nil {
		return x.xxx_hidden_Payload
	}
	return nil
}

func (x *ExecutableStagePayload_WireCoderSetting) GetInputOrOutputId() string {
	if x != nil {
		if x, ok := x.xxx_hidden_Target.(*executableStagePayload_WireCoderSetting_InputOrOutputId); ok {
			return x.InputOrOutputId
		}
	}
	return ""
}

func (x *ExecutableStagePayload_WireCoderSetting) GetTimer() *ExecutableStagePayload_TimerId {
	if x != nil {
		if x, ok := x.xxx_hidden_Target.(*executableStagePayload_WireCoderSetting_Timer); ok {
			return x.Timer
		}
	}
	return nil
}

func (x *ExecutableStagePayload_WireCoderSetting) SetUrn(v string) {
	x.xxx_hidden_Urn = v
}

func (x *ExecutableStagePayload_WireCoderSetting) SetPayload(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.xxx_hidden_Payload = v
}

func (x *ExecutableStagePayload_WireCoderSetting) SetInputOrOutputId(v string) {
	x.xxx_hidden_Target = &executableStagePayload_WireCoderSetting_InputOrOutputId{v}
}

func (x *ExecutableStagePayload_WireCoderSetting) SetTimer(v *ExecutableStagePayload_TimerId) {
	if v == nil {
		x.xxx_hidden_Target = nil
		return
	}
	x.xxx_hidden_Target = &executableStagePayload_WireCoderSetting_Timer{v}
}

func (x *ExecutableStagePayload_WireCoderSetting) HasTarget() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Target != nil
}

func (x *ExecutableStagePayload_WireCoderSetting) HasInputOrOutputId() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Target.(*executableStagePayload_WireCoderSetting_InputOrOutputId)
	return ok
}

func (x *ExecutableStagePayload_WireCoderSetting) HasTimer() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Target.(*executableStagePayload_WireCoderSetting_Timer)
	return ok
}

func (x *ExecutableStagePayload_WireCoderSetting) ClearTarget() {
	x.xxx_hidden_Target = nil
}

func (x *ExecutableStagePayload_WireCoderSetting) ClearInputOrOutputId() {
	if _, ok := x.xxx_hidden_Target.(*executableStagePayload_WireCoderSetting_InputOrOutputId); ok {
		x.xxx_hidden_Target = nil
	}
}

func (x *ExecutableStagePayload_WireCoderSetting) ClearTimer() {
	if _, ok := x.xxx_hidden_Target.(*executableStagePayload_WireCoderSetting_Timer); ok {
		x.xxx_hidden_Target = nil
	}
}

const ExecutableStagePayload_WireCoderSetting_Target_not_set_case case_ExecutableStagePayload_WireCoderSetting_Target = 0
const ExecutableStagePayload_WireCoderSetting_InputOrOutputId_case case_ExecutableStagePayload_WireCoderSetting_Target = 3
const ExecutableStagePayload_WireCoderSetting_Timer_case case_ExecutableStagePayload_WireCoderSetting_Target = 4

func (x *ExecutableStagePayload_WireCoderSetting) WhichTarget() case_ExecutableStagePayload_WireCoderSetting_Target {
	if x == nil {
		return ExecutableStagePayload_WireCoderSetting_Target_not_set_case
	}
	switch x.xxx_hidden_Target.(type) {
	case *executableStagePayload_WireCoderSetting_InputOrOutputId:
		return ExecutableStagePayload_WireCoderSetting_InputOrOutputId_case
	case *executableStagePayload_WireCoderSetting_Timer:
		return ExecutableStagePayload_WireCoderSetting_Timer_case
	default:
		return ExecutableStagePayload_WireCoderSetting_Target_not_set_case
	}
}

type ExecutableStagePayload_WireCoderSetting_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// (Required) The URN of the wire coder.
	// Note that only windowed value coder or parameterized windowed value coder are supported.
	Urn string
	// (Optional) The data specifying any parameters to the URN. If
	// the URN is beam:coder:windowed_value:v1, this may be omitted. If the URN is
	// beam:coder:param_windowed_value:v1, the payload is an encoded windowed
	// value using the beam:coder:windowed_value:v1 coder parameterized by
	// a beam:coder:bytes:v1 element coder and the window coder that this
	// param_windowed_value coder uses.
	Payload []byte
	// (Required) The target(PCollection or Timer) this setting applies to.

	// Fields of oneof xxx_hidden_Target:
	// The input or output PCollection id this setting applies to.
	InputOrOutputId *string
	// The timer id this setting applies to.
	Timer *ExecutableStagePayload_TimerId
	// -- end of xxx_hidden_Target
}

func (b0 ExecutableStagePayload_WireCoderSetting_builder) Build() *ExecutableStagePayload_WireCoderSetting {
	m0 := &ExecutableStagePayload_WireCoderSetting{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Urn = b.Urn
	x.xxx_hidden_Payload = b.Payload
	if b.InputOrOutputId != nil {
		x.xxx_hidden_Target = &executableStagePayload_WireCoderSetting_InputOrOutputId{*b.InputOrOutputId}
	}
	if b.Timer != nil {
		x.xxx_hidden_Target = &executableStagePayload_WireCoderSetting_Timer{b.Timer}
	}
	return m0
}

type case_ExecutableStagePayload_WireCoderSetting_Target protoreflect.FieldNumber

func (x case_ExecutableStagePayload_WireCoderSetting_Target) String() string {
	md := file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[104].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type isExecutableStagePayload_WireCoderSetting_Target interface {
	isExecutableStagePayload_WireCoderSetting_Target()
}

type executableStagePayload_WireCoderSetting_InputOrOutputId struct {
	// The input or output PCollection id this setting applies to.
	InputOrOutputId string `protobuf:"bytes,3,opt,name=input_or_output_id,json=inputOrOutputId,proto3,oneof"`
}

type executableStagePayload_WireCoderSetting_Timer struct {
	// The timer id this setting applies to.
	Timer *ExecutableStagePayload_TimerId `protobuf:"bytes,4,opt,name=timer,proto3,oneof"`
}

func (*executableStagePayload_WireCoderSetting_InputOrOutputId) isExecutableStagePayload_WireCoderSetting_Target() {
}

func (*executableStagePayload_WireCoderSetting_Timer) isExecutableStagePayload_WireCoderSetting_Target() {
}

var file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*descriptorpb.EnumValueOptions)(nil),
		ExtensionType: (*string)(nil),
		Field:         185324356,
		Name:          "org.apache.beam.model.pipeline.v1.beam_urn",
		Tag:           "bytes,185324356,opt,name=beam_urn",
		Filename:      "org/apache/beam/model/pipeline/v1/beam_runner_api.proto",
	},
	{
		ExtendedType:  (*descriptorpb.EnumValueOptions)(nil),
		ExtensionType: (*string)(nil),
		Field:         185324357,
		Name:          "org.apache.beam.model.pipeline.v1.beam_constant",
		Tag:           "bytes,185324357,opt,name=beam_constant",
		Filename:      "org/apache/beam/model/pipeline/v1/beam_runner_api.proto",
	},
}

// Extension fields to descriptorpb.EnumValueOptions.
var (
	// An extension to be used for specifying the standard URN of various
	// pipeline entities, e.g. transforms, functions, coders etc.
	// Code should refer to the URNs of those entities by extracting
	// it from the (beam_urn) extension, rather than by hard-coding
	// the URN.
	//
	// The recommended pattern for declaring it is (exemplified by coders):
	//
	//	message StandardCoders {
	//	  enum Enum {
	//	    BYTES = 0 [(beam_urn) = "beam:coder:bytes:v1"];
	//	    ...
	//	  }
	//	}
	//
	// If there are multiple categories of entities of this type, use the
	// following pattern (exemplified by PTransforms):
	//
	//	message StandardPTransforms {
	//	  enum Primitives {
	//	    ...
	//	  }
	//	  enum Composites {
	//	    ...
	//	  }
	//	}
	//
	// optional string beam_urn = 185324356;
	E_BeamUrn = &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_extTypes[0]
	// A value to store other constants
	//
	// optional string beam_constant = 185324357;
	E_BeamConstant = &file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_extTypes[1]
)

var File_org_apache_beam_model_pipeline_v1_beam_runner_api_proto protoreflect.FileDescriptor

var file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_rawDesc = []byte{
	0x0a, 0x37, 0x6f, 0x72, 0x67, 0x2f, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2f, 0x62, 0x65, 0x61,
	0x6d, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x2f, 0x76, 0x31, 0x2f, 0x62, 0x65, 0x61, 0x6d, 0x5f, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x21, 0x6f, 0x72, 0x67, 0x2e, 0x61,
	0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x31, 0x6f, 0x72,
	0x67, 0x2f, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2f, 0x62, 0x65, 0x61, 0x6d, 0x2f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2f, 0x76, 0x31, 0x2f,
	0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xc2, 0x01, 0x0a, 0x0d, 0x42, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x74, 0x73, 0x22, 0xb0, 0x01, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74,
	0x73, 0x12, 0x31, 0x0a, 0x14, 0x4d, 0x49, 0x4e, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x54, 0x41,
	0x4d, 0x50, 0x5f, 0x4d, 0x49, 0x4c, 0x4c, 0x49, 0x53, 0x10, 0x00, 0x1a, 0x17, 0xaa, 0xb4, 0xfa,
	0xc2, 0x05, 0x11, 0x2d, 0x39, 0x32, 0x32, 0x33, 0x33, 0x37, 0x32, 0x30, 0x33, 0x36, 0x38, 0x35,
	0x34, 0x37, 0x37, 0x35, 0x12, 0x30, 0x0a, 0x14, 0x4d, 0x41, 0x58, 0x5f, 0x54, 0x49, 0x4d, 0x45,
	0x53, 0x54, 0x41, 0x4d, 0x50, 0x5f, 0x4d, 0x49, 0x4c, 0x4c, 0x49, 0x53, 0x10, 0x01, 0x1a, 0x16,
	0xaa, 0xb4, 0xfa, 0xc2, 0x05, 0x10, 0x39, 0x32, 0x32, 0x33, 0x33, 0x37, 0x32, 0x30, 0x33, 0x36,
	0x38, 0x35, 0x34, 0x37, 0x37, 0x35, 0x12, 0x3e, 0x0a, 0x22, 0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c,
	0x5f, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x54, 0x49, 0x4d, 0x45,
	0x53, 0x54, 0x41, 0x4d, 0x50, 0x5f, 0x4d, 0x49, 0x4c, 0x4c, 0x49, 0x53, 0x10, 0x02, 0x1a, 0x16,
	0xaa, 0xb4, 0xfa, 0xc2, 0x05, 0x10, 0x39, 0x32, 0x32, 0x33, 0x33, 0x37, 0x31, 0x39, 0x35, 0x30,
	0x34, 0x35, 0x34, 0x37, 0x37, 0x35, 0x22, 0xb6, 0x08, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x5d, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f,
	0x72, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x6f, 0x72, 0x67, 0x2e,
	0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f,
	0x72, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x6f, 0x72, 0x6d, 0x73, 0x12, 0x63, 0x0a, 0x0c, 0x70, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x6f, 0x72, 0x67,
	0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x50, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x70, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x79, 0x0a, 0x14, 0x77, 0x69, 0x6e,
	0x64, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x69, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70,
	0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x69, 0x6e, 0x67,
	0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x13, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x69, 0x65, 0x73, 0x12, 0x51, 0x0a, 0x06, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68,
	0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x06, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x73, 0x12, 0x63, 0x0a, 0x0c, 0x65, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e,
	0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x45, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c,
	0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0x6c, 0x0a, 0x0f,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x43, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65,
	0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x6f, 0x0a, 0x11, 0x50, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x44, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65,
	0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x7c, 0x0a, 0x18, 0x57,
	0x69, 0x6e, 0x64, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x69,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x4a, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61,
	0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x69, 0x6e,
	0x64, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x63, 0x0a, 0x0b, 0x43, 0x6f, 0x64,
	0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3e, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x72, 0x67, 0x2e,
	0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x6f,
	0x0a, 0x11, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x44, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68,
	0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xfe, 0x01, 0x0a, 0x08, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x4d, 0x0a, 0x0a,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65,
	0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x52,
	0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x72,
	0x6f, 0x6f, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x72, 0x6f, 0x6f, 0x74, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x73, 0x12, 0x51, 0x0a, 0x0c, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61,
	0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x22, 0x0a, 0x0c,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x22, 0xd4, 0x05, 0x0a, 0x0a, 0x50, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x12,
	0x1f, 0x0a, 0x0b, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x43, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x52,
	0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x75,
	0x62, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x12, 0x51, 0x0a, 0x06, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x6f, 0x72,
	0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x54,
	0x0a, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x3a, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61,
	0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x73, 0x12, 0x51, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6f, 0x72, 0x67,
	0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x60,
	0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65,
	0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f,
	0x72, 0x6d, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x1a, 0x39, 0x0a, 0x0b, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3a, 0x0a, 0x0c, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x41, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xdb, 0x11, 0x0a, 0x13, 0x53, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x72, 0x64, 0x50, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x22,
	0xdb, 0x03, 0x0a, 0x0a, 0x50, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x73, 0x12, 0x29,
	0x0a, 0x06, 0x50, 0x41, 0x52, 0x5f, 0x44, 0x4f, 0x10, 0x00, 0x1a, 0x1d, 0xa2, 0xb4, 0xfa, 0xc2,
	0x05, 0x17, 0x62, 0x65, 0x61, 0x6d, 0x3a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d,
	0x3a, 0x70, 0x61, 0x72, 0x64, 0x6f, 0x3a, 0x76, 0x31, 0x12, 0x2c, 0x0a, 0x07, 0x46, 0x4c, 0x41,
	0x54, 0x54, 0x45, 0x4e, 0x10, 0x01, 0x1a, 0x1f, 0xa2, 0xb4, 0xfa, 0xc2, 0x05, 0x19, 0x62, 0x65,
	0x61, 0x6d, 0x3a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x3a, 0x66, 0x6c, 0x61,
	0x74, 0x74, 0x65, 0x6e, 0x3a, 0x76, 0x31, 0x12, 0x36, 0x0a, 0x0c, 0x47, 0x52, 0x4f, 0x55, 0x50,
	0x5f, 0x42, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x10, 0x02, 0x1a, 0x24, 0xa2, 0xb4, 0xfa, 0xc2, 0x05,
	0x1e, 0x62, 0x65, 0x61, 0x6d, 0x3a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x3a,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x3a, 0x76, 0x31, 0x12,
	0x2c, 0x0a, 0x07, 0x49, 0x4d, 0x50, 0x55, 0x4c, 0x53, 0x45, 0x10, 0x03, 0x1a, 0x1f, 0xa2, 0xb4,
	0xfa, 0xc2, 0x05, 0x19, 0x62, 0x65, 0x61, 0x6d, 0x3a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f,
	0x72, 0x6d, 0x3a, 0x69, 0x6d, 0x70, 0x75, 0x6c, 0x73, 0x65, 0x3a, 0x76, 0x31, 0x12, 0x37, 0x0a,
	0x0e, 0x41, 0x53, 0x53, 0x49, 0x47, 0x4e, 0x5f, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x53, 0x10,
	0x04, 0x1a, 0x23, 0xa2, 0xb4, 0xfa, 0xc2, 0x05, 0x1d, 0x62, 0x65, 0x61, 0x6d, 0x3a, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x3a, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x69,
	0x6e, 0x74, 0x6f, 0x3a, 0x76, 0x31, 0x12, 0x33, 0x0a, 0x0b, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x53,
	0x54, 0x52, 0x45, 0x41, 0x4d, 0x10, 0x05, 0x1a, 0x22, 0xa2, 0xb4, 0xfa, 0xc2, 0x05, 0x1c, 0x62,
	0x65, 0x61, 0x6d, 0x3a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x3a, 0x74, 0x65,
	0x73, 0x74, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x3a, 0x76, 0x31, 0x12, 0x34, 0x0a, 0x0b, 0x4d,
	0x41, 0x50, 0x5f, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x53, 0x10, 0x06, 0x1a, 0x23, 0xa2, 0xb4,
	0xfa, 0xc2, 0x05, 0x1d, 0x62, 0x65, 0x61, 0x6d, 0x3a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f,
	0x72, 0x6d, 0x3a, 0x6d, 0x61, 0x70, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x3a, 0x76,
	0x31, 0x12, 0x38, 0x0a, 0x0d, 0x4d, 0x45, 0x52, 0x47, 0x45, 0x5f, 0x57, 0x49, 0x4e, 0x44, 0x4f,
	0x57, 0x53, 0x10, 0x07, 0x1a, 0x25, 0xa2, 0xb4, 0xfa, 0xc2, 0x05, 0x1f, 0x62, 0x65, 0x61, 0x6d,
	0x3a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x3a, 0x6d, 0x65, 0x72, 0x67, 0x65,
	0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x3a, 0x76, 0x31, 0x12, 0x30, 0x0a, 0x09, 0x54,
	0x4f, 0x5f, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x08, 0x1a, 0x21, 0xa2, 0xb4, 0xfa, 0xc2,
	0x05, 0x1b, 0x62, 0x65, 0x61, 0x6d, 0x3a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d,
	0x3a, 0x74, 0x6f, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x76, 0x31, 0x22, 0x74, 0x0a,
	0x14, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x50, 0x72, 0x69, 0x6d, 0x69,
	0x74, 0x69, 0x76, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x04, 0x52, 0x45, 0x41, 0x44, 0x10, 0x00, 0x1a,
	0x1c, 0xa2, 0xb4, 0xfa, 0xc2, 0x05, 0x16, 0x62, 0x65, 0x61, 0x6d, 0x3a, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x6f, 0x72, 0x6d, 0x3a, 0x72, 0x65, 0x61, 0x64, 0x3a, 0x76, 0x31, 0x12, 0x34, 0x0a,
	0x0b, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x10, 0x01, 0x1a, 0x23,
	0xa2, 0xb4, 0xfa, 0xc2, 0x05, 0x1d, 0x62, 0x65, 0x61, 0x6d, 0x3a, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x6f, 0x72, 0x6d, 0x3a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x69, 0x65, 0x77,
	0x3a, 0x76, 0x31, 0x22, 0x97, 0x05, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x65, 0x73, 0x12, 0x3c, 0x0a, 0x0f, 0x43, 0x4f, 0x4d, 0x42, 0x49, 0x4e, 0x45, 0x5f, 0x50, 0x45,
	0x52, 0x5f, 0x4b, 0x45, 0x59, 0x10, 0x00, 0x1a, 0x27, 0xa2, 0xb4, 0xfa, 0xc2, 0x05, 0x21, 0x62,
	0x65, 0x61, 0x6d, 0x3a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x3a, 0x63, 0x6f,
	0x6d, 0x62, 0x69, 0x6e, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x3a, 0x76, 0x31,
	0x12, 0x3e, 0x0a, 0x10, 0x43, 0x4f, 0x4d, 0x42, 0x49, 0x4e, 0x45, 0x5f, 0x47, 0x4c, 0x4f, 0x42,
	0x41, 0x4c, 0x4c, 0x59, 0x10, 0x01, 0x1a, 0x28, 0xa2, 0xb4, 0xfa, 0xc2, 0x05, 0x22, 0x62, 0x65,
	0x61, 0x6d, 0x3a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x3a, 0x63, 0x6f, 0x6d,
	0x62, 0x69, 0x6e, 0x65, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x6c, 0x79, 0x3a, 0x76, 0x31,
	0x12, 0x30, 0x0a, 0x09, 0x52, 0x45, 0x53, 0x48, 0x55, 0x46, 0x46, 0x4c, 0x45, 0x10, 0x02, 0x1a,
	0x21, 0xa2, 0xb4, 0xfa, 0xc2, 0x05, 0x1b, 0x62, 0x65, 0x61, 0x6d, 0x3a, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x6f, 0x72, 0x6d, 0x3a, 0x72, 0x65, 0x73, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x3a,
	0x76, 0x31, 0x12, 0x34, 0x0a, 0x0b, 0x57, 0x52, 0x49, 0x54, 0x45, 0x5f, 0x46, 0x49, 0x4c, 0x45,
	0x53, 0x10, 0x03, 0x1a, 0x23, 0xa2, 0xb4, 0xfa, 0xc2, 0x05, 0x1d, 0x62, 0x65, 0x61, 0x6d, 0x3a,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x3a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f,
	0x66, 0x69, 0x6c, 0x65, 0x73, 0x3a, 0x76, 0x31, 0x12, 0x34, 0x0a, 0x0b, 0x50, 0x55, 0x42, 0x53,
	0x55, 0x42, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x10, 0x04, 0x1a, 0x23, 0xa2, 0xb4, 0xfa, 0xc2, 0x05,
	0x1d, 0x62, 0x65, 0x61, 0x6d, 0x3a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x3a,
	0x70, 0x75, 0x62, 0x73, 0x75, 0x62, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x3a, 0x76, 0x31, 0x12, 0x36,
	0x0a, 0x0c, 0x50, 0x55, 0x42, 0x53, 0x55, 0x42, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x10, 0x05,
	0x1a, 0x24, 0xa2, 0xb4, 0xfa, 0xc2, 0x05, 0x1e, 0x62, 0x65, 0x61, 0x6d, 0x3a, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x3a, 0x70, 0x75, 0x62, 0x73, 0x75, 0x62, 0x5f, 0x77, 0x72,
	0x69, 0x74, 0x65, 0x3a, 0x76, 0x31, 0x12, 0x39, 0x0a, 0x0f, 0x50, 0x55, 0x42, 0x53, 0x55, 0x42,
	0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x5f, 0x56, 0x32, 0x10, 0x07, 0x1a, 0x24, 0xa2, 0xb4, 0xfa,
	0xc2, 0x05, 0x1e, 0x62, 0x65, 0x61, 0x6d, 0x3a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72,
	0x6d, 0x3a, 0x70, 0x75, 0x62, 0x73, 0x75, 0x62, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x3a, 0x76,
	0x32, 0x12, 0x64, 0x0a, 0x23, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x49, 0x4e, 0x54, 0x4f, 0x5f,
	0x42, 0x41, 0x54, 0x43, 0x48, 0x45, 0x53, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x53, 0x48, 0x41,
	0x52, 0x44, 0x45, 0x44, 0x5f, 0x4b, 0x45, 0x59, 0x10, 0x06, 0x1a, 0x3b, 0xa2, 0xb4, 0xfa, 0xc2,
	0x05, 0x35, 0x62, 0x65, 0x61, 0x6d, 0x3a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d,
	0x3a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x6f, 0x5f, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x64, 0x65, 0x64,
	0x5f, 0x6b, 0x65, 0x79, 0x3a, 0x76, 0x31, 0x12, 0x44, 0x0a, 0x13, 0x52, 0x45, 0x44, 0x49, 0x53,
	0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x5f, 0x42, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x10, 0x08,
	0x1a, 0x2b, 0xa2, 0xb4, 0xfa, 0xc2, 0x05, 0x25, 0x62, 0x65, 0x61, 0x6d, 0x3a, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x3a, 0x72, 0x65, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x3a, 0x76, 0x31, 0x12, 0x4e, 0x0a,
	0x18, 0x52, 0x45, 0x44, 0x49, 0x53, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x5f, 0x41, 0x52,
	0x42, 0x49, 0x54, 0x52, 0x41, 0x52, 0x49, 0x4c, 0x59, 0x10, 0x09, 0x1a, 0x30, 0xa2, 0xb4, 0xfa,
	0xc2, 0x05, 0x2a, 0x62, 0x65, 0x61, 0x6d, 0x3a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72,
	0x6d, 0x3a, 0x72, 0x65, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x61,
	0x72, 0x62, 0x69, 0x74, 0x72, 0x61, 0x72, 0x69, 0x6c, 0x79, 0x3a, 0x76, 0x31, 0x22, 0xe3, 0x03,
	0x0a, 0x11, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x52, 0x0a, 0x1a, 0x43, 0x4f, 0x4d, 0x42, 0x49, 0x4e, 0x45, 0x5f, 0x50,
	0x45, 0x52, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x50, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x42, 0x49, 0x4e,
	0x45, 0x10, 0x00, 0x1a, 0x32, 0xa2, 0xb4, 0xfa, 0xc2, 0x05, 0x2c, 0x62, 0x65, 0x61, 0x6d, 0x3a,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x3a, 0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e,
	0x65, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x72, 0x65, 0x63, 0x6f, 0x6d,
	0x62, 0x69, 0x6e, 0x65, 0x3a, 0x76, 0x31, 0x12, 0x62, 0x0a, 0x22, 0x43, 0x4f, 0x4d, 0x42, 0x49,
	0x4e, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x45, 0x52, 0x47, 0x45,
	0x5f, 0x41, 0x43, 0x43, 0x55, 0x4d, 0x55, 0x4c, 0x41, 0x54, 0x4f, 0x52, 0x53, 0x10, 0x01, 0x1a,
	0x3a, 0xa2, 0xb4, 0xfa, 0xc2, 0x05, 0x34, 0x62, 0x65, 0x61, 0x6d, 0x3a, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x6f, 0x72, 0x6d, 0x3a, 0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x5f, 0x70, 0x65,
	0x72, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x75,
	0x6d, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x3a, 0x76, 0x31, 0x12, 0x5c, 0x0a, 0x1f, 0x43,
	0x4f, 0x4d, 0x42, 0x49, 0x4e, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x45,
	0x58, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54, 0x53, 0x10, 0x02,
	0x1a, 0x37, 0xa2, 0xb4, 0xfa, 0xc2, 0x05, 0x31, 0x62, 0x65, 0x61, 0x6d, 0x3a, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x3a, 0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x5f, 0x70,
	0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x3a, 0x76, 0x31, 0x12, 0x4a, 0x0a, 0x16, 0x43, 0x4f, 0x4d,
	0x42, 0x49, 0x4e, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x45, 0x44, 0x5f, 0x56, 0x41, 0x4c,
	0x55, 0x45, 0x53, 0x10, 0x03, 0x1a, 0x2e, 0xa2, 0xb4, 0xfa, 0xc2, 0x05, 0x28, 0x62, 0x65, 0x61,
	0x6d, 0x3a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x3a, 0x63, 0x6f, 0x6d, 0x62,
	0x69, 0x6e, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x3a, 0x76, 0x31, 0x12, 0x6c, 0x0a, 0x27, 0x43, 0x4f, 0x4d, 0x42, 0x49, 0x4e, 0x45,
	0x5f, 0x50, 0x45, 0x52, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x56, 0x45, 0x52, 0x54,
	0x5f, 0x54, 0x4f, 0x5f, 0x41, 0x43, 0x43, 0x55, 0x4d, 0x55, 0x4c, 0x41, 0x54, 0x4f, 0x52, 0x53,
	0x10, 0x04, 0x1a, 0x3f, 0xa2, 0xb4, 0xfa, 0xc2, 0x05, 0x39, 0x62, 0x65, 0x61, 0x6d, 0x3a, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x3a, 0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65,
	0x5f, 0x70, 0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74,
	0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x73,
	0x3a, 0x76, 0x31, 0x22, 0x8d, 0x03, 0x0a, 0x19, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x50, 0x61, 0x72, 0x44, 0x6f, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x4c, 0x0a, 0x15, 0x50, 0x41, 0x49, 0x52, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x52,
	0x45, 0x53, 0x54, 0x52, 0x49, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x00, 0x1a, 0x31, 0xa2, 0xb4,
	0xfa, 0xc2, 0x05, 0x2b, 0x62, 0x65, 0x61, 0x6d, 0x3a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f,
	0x72, 0x6d, 0x3a, 0x73, 0x64, 0x66, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x5f, 0x77, 0x69, 0x74, 0x68,
	0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x76, 0x31, 0x12,
	0x58, 0x0a, 0x1b, 0x53, 0x50, 0x4c, 0x49, 0x54, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x53, 0x49, 0x5a,
	0x45, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x52, 0x49, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x01,
	0x1a, 0x37, 0xa2, 0xb4, 0xfa, 0xc2, 0x05, 0x31, 0x62, 0x65, 0x61, 0x6d, 0x3a, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x3a, 0x73, 0x64, 0x66, 0x5f, 0x73, 0x70, 0x6c, 0x69, 0x74,
	0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x76, 0x31, 0x12, 0x6f, 0x0a, 0x27, 0x50, 0x52, 0x4f,
	0x43, 0x45, 0x53, 0x53, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x44, 0x5f, 0x45, 0x4c, 0x45, 0x4d, 0x45,
	0x4e, 0x54, 0x53, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x52, 0x49, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x53, 0x10, 0x02, 0x1a, 0x42, 0xa2, 0xb4, 0xfa, 0xc2, 0x05, 0x3c, 0x62, 0x65,
	0x61, 0x6d, 0x3a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x3a, 0x73, 0x64, 0x66,
	0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x76, 0x31, 0x12, 0x57, 0x0a, 0x1a, 0x54, 0x52,
	0x55, 0x4e, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x44, 0x5f, 0x52, 0x45, 0x53,
	0x54, 0x52, 0x49, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x1a, 0x37, 0xa2, 0xb4, 0xfa, 0xc2,
	0x05, 0x31, 0x62, 0x65, 0x61, 0x6d, 0x3a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d,
	0x3a, 0x73, 0x64, 0x66, 0x5f, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x3a, 0x76, 0x31, 0x22, 0x60, 0x0a, 0x1a, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x74, 0x6f,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x42, 0x0a, 0x12, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x49, 0x4e, 0x54, 0x4f, 0x5f,
	0x42, 0x41, 0x54, 0x43, 0x48, 0x45, 0x53, 0x10, 0x00, 0x1a, 0x2a, 0xa2, 0xb4, 0xfa, 0xc2, 0x05,
	0x24, 0x62, 0x65, 0x61, 0x6d, 0x3a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x3a,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x6f, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x73, 0x3a, 0x76, 0x31, 0x22, 0x82, 0x01, 0x0a, 0x16, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61,
	0x72, 0x64, 0x53, 0x69, 0x64, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x22, 0x68, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x2f, 0x0a, 0x08, 0x49, 0x54, 0x45, 0x52,
	0x41, 0x42, 0x4c, 0x45, 0x10, 0x00, 0x1a, 0x21, 0xa2, 0xb4, 0xfa, 0xc2, 0x05, 0x1b, 0x62, 0x65,
	0x61, 0x6d, 0x3a, 0x73, 0x69, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x3a, 0x69, 0x74,
	0x65, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x3a, 0x76, 0x31, 0x12, 0x2f, 0x0a, 0x08, 0x4d, 0x55, 0x4c,
	0x54, 0x49, 0x4d, 0x41, 0x50, 0x10, 0x01, 0x1a, 0x21, 0xa2, 0xb4, 0xfa, 0xc2, 0x05, 0x1b, 0x62,
	0x65, 0x61, 0x6d, 0x3a, 0x73, 0x69, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x3a, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x3a, 0x76, 0x31, 0x22, 0xb2, 0x01, 0x0a, 0x16, 0x53,
	0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x22, 0x97, 0x01, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x25,
	0x0a, 0x03, 0x42, 0x41, 0x47, 0x10, 0x00, 0x1a, 0x1c, 0xa2, 0xb4, 0xfa, 0xc2, 0x05, 0x16, 0x62,
	0x65, 0x61, 0x6d, 0x3a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x3a, 0x62,
	0x61, 0x67, 0x3a, 0x76, 0x31, 0x12, 0x2f, 0x0a, 0x08, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x4d, 0x41,
	0x50, 0x10, 0x01, 0x1a, 0x21, 0xa2, 0xb4, 0xfa, 0xc2, 0x05, 0x1b, 0x62, 0x65, 0x61, 0x6d, 0x3a,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x3a, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x6d, 0x61, 0x70, 0x3a, 0x76, 0x31, 0x12, 0x37, 0x0a, 0x0c, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x45,
	0x44, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x02, 0x1a, 0x25, 0xa2, 0xb4, 0xfa, 0xc2, 0x05, 0x1f,
	0x62, 0x65, 0x61, 0x6d, 0x3a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x3a,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x3a, 0x76, 0x31, 0x22,
	0xa2, 0x02, 0x0a, 0x0b, 0x50, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1f, 0x0a, 0x0b, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x50, 0x0a, 0x0a, 0x69,
	0x73, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x31, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61,
	0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x73, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x2e, 0x45, 0x6e,
	0x75, 0x6d, 0x52, 0x09, 0x69, 0x73, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x12, 0x32, 0x0a,
	0x15, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x77, 0x69,
	0x6e, 0x64, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x49,
	0x64, 0x12, 0x51, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70,
	0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x44, 0x61, 0x74, 0x61, 0x22, 0x91, 0x08, 0x0a, 0x0c, 0x50, 0x61, 0x72, 0x44, 0x6f, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x44, 0x0a, 0x05, 0x64, 0x6f, 0x5f, 0x66, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68,
	0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x64, 0x6f, 0x46, 0x6e, 0x12, 0x60, 0x0a, 0x0b, 0x73,
	0x69, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x3f, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65,
	0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x44, 0x6f, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x2e, 0x53, 0x69, 0x64, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0a, 0x73, 0x69, 0x64, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x60, 0x0a,
	0x0b, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e,
	0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x44, 0x6f, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x70, 0x65, 0x63, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x53, 0x70, 0x65, 0x63, 0x73, 0x12,
	0x73, 0x0a, 0x12, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x5f, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x5f,
	0x73, 0x70, 0x65, 0x63, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x6f, 0x72,
	0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x61, 0x72, 0x44, 0x6f, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x72, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x53, 0x70, 0x65, 0x63, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x10, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x53,
	0x70, 0x65, 0x63, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x15, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x73, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x46,
	0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x1a, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x6f, 0x72,
	0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x17, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x6f, 0x72,
	0x74, 0x65, 0x64, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x73, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x51, 0x0a, 0x26,
	0x6f, 0x6e, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x5f, 0x66, 0x61, 0x6d, 0x69, 0x6c,
	0x79, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x21, 0x6f, 0x6e,
	0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x72, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x53, 0x70, 0x65, 0x63, 0x1a,
	0x6b, 0x0a, 0x0f, 0x53, 0x69, 0x64, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x42, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65,
	0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x64, 0x65, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x6b, 0x0a, 0x0f,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x70, 0x65, 0x63, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x42, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65,
	0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x77, 0x0a, 0x15, 0x54, 0x69, 0x6d,
	0x65, 0x72, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x53, 0x70, 0x65, 0x63, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x48, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65,
	0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x46, 0x61, 0x6d,
	0x69, 0x6c, 0x79, 0x53, 0x70, 0x65, 0x63, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x4a, 0x04, 0x08, 0x06, 0x10, 0x07, 0x22, 0xe2, 0x05, 0x0a, 0x09, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x72, 0x0a, 0x16, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x63,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61,
	0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x4d,
	0x6f, 0x64, 0x69, 0x66, 0x79, 0x57, 0x72, 0x69, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53,
	0x70, 0x65, 0x63, 0x48, 0x00, 0x52, 0x13, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x79, 0x57, 0x72, 0x69, 0x74, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x4c, 0x0a, 0x08, 0x62, 0x61,
	0x67, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6f,
	0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x42, 0x61, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x70, 0x65, 0x63, 0x48, 0x00, 0x52,
	0x07, 0x62, 0x61, 0x67, 0x53, 0x70, 0x65, 0x63, 0x12, 0x5e, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x62,
	0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x35, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65,
	0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x53, 0x70, 0x65, 0x63, 0x48, 0x00, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x62, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x53, 0x70, 0x65, 0x63, 0x12, 0x4c, 0x0a, 0x08, 0x6d, 0x61, 0x70, 0x5f,
	0x73, 0x70, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6f, 0x72, 0x67,
	0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x70, 0x65, 0x63, 0x48, 0x00, 0x52, 0x07, 0x6d,
	0x61, 0x70, 0x53, 0x70, 0x65, 0x63, 0x12, 0x4c, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x70,
	0x65, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61,
	0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x70, 0x65, 0x63, 0x48, 0x00, 0x52, 0x07, 0x73, 0x65, 0x74,
	0x53, 0x70, 0x65, 0x63, 0x12, 0x65, 0x0a, 0x11, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x64, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61,
	0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x53, 0x70, 0x65, 0x63, 0x48, 0x00, 0x52, 0x0f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x70, 0x65, 0x63, 0x12, 0x5b, 0x0a, 0x0d, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e,
	0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x53, 0x70, 0x65, 0x63, 0x48, 0x00, 0x52, 0x0c, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x6d, 0x61, 0x70, 0x53, 0x70, 0x65, 0x63, 0x12, 0x4b, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6f, 0x72, 0x67,
	0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x52, 0x08, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x42, 0x06, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x22, 0x35, 0x0a,
	0x18, 0x52, 0x65, 0x61, 0x64, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x57, 0x72, 0x69, 0x74, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x6f, 0x64,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x64,
	0x65, 0x72, 0x49, 0x64, 0x22, 0x38, 0x0a, 0x0c, 0x42, 0x61, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x53, 0x70, 0x65, 0x63, 0x12, 0x28, 0x0a, 0x10, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0x40,
	0x0a, 0x14, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x28, 0x0a, 0x10, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x72, 0x49, 0x64,
	0x22, 0x96, 0x01, 0x0a, 0x12, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x30, 0x0a, 0x14, 0x61, 0x63, 0x63, 0x75, 0x6d,
	0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x61, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74,
	0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x4e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d,
	0x62, 0x69, 0x6e, 0x65, 0x5f, 0x66, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x52, 0x09,
	0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x46, 0x6e, 0x22, 0x56, 0x0a, 0x0c, 0x4d, 0x61, 0x70,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x20, 0x0a, 0x0c, 0x6b, 0x65, 0x79,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x6b, 0x65, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x72, 0x49,
	0x64, 0x22, 0x5b, 0x0a, 0x11, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x20, 0x0a, 0x0c, 0x6b, 0x65, 0x79, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6b, 0x65,
	0x79, 0x43, 0x6f, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0x38,
	0x0a, 0x0c, 0x53, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x28,
	0x0a, 0x10, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0x99, 0x01, 0x0a, 0x0f, 0x54, 0x69, 0x6d,
	0x65, 0x72, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x53, 0x70, 0x65, 0x63, 0x12, 0x53, 0x0a, 0x0b,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x32, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62,
	0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x12, 0x31, 0x0a, 0x15, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x5f, 0x66, 0x61, 0x6d, 0x69, 0x6c,
	0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x43, 0x6f, 0x64,
	0x65, 0x72, 0x49, 0x64, 0x22, 0x40, 0x0a, 0x09, 0x49, 0x73, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x65,
	0x64, 0x22, 0x33, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x4e,
	0x42, 0x4f, 0x55, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x4f, 0x55,
	0x4e, 0x44, 0x45, 0x44, 0x10, 0x02, 0x22, 0xa8, 0x01, 0x0a, 0x0b, 0x52, 0x65, 0x61, 0x64, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x47, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61,
	0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x50, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65,
	0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x73, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x65,
	0x64, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x09, 0x69, 0x73, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x65,
	0x64, 0x22, 0x61, 0x0a, 0x11, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x49, 0x6e, 0x74, 0x6f, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x4c, 0x0a, 0x09, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77,
	0x5f, 0x66, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6f, 0x72, 0x67, 0x2e,
	0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x52, 0x08, 0x77, 0x69, 0x6e, 0x64,
	0x6f, 0x77, 0x46, 0x6e, 0x22, 0x92, 0x01, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x4e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x62, 0x69,
	0x6e, 0x65, 0x5f, 0x66, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6f, 0x72,
	0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x52, 0x09, 0x63, 0x6f,
	0x6d, 0x62, 0x69, 0x6e, 0x65, 0x46, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x61, 0x63, 0x63, 0x75, 0x6d,
	0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x61, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74,
	0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0xcd, 0x07, 0x0a, 0x11, 0x54, 0x65,
	0x73, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x52, 0x0a, 0x06, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x6f, 0x72, 0x67,
	0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x65, 0x73, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x53,
	0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65,
	0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x69, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x1a, 0x96, 0x05, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x76, 0x0a,
	0x0f, 0x77, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61,
	0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x2e, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x57, 0x61, 0x74, 0x65, 0x72, 0x6d,
	0x61, 0x72, 0x6b, 0x48, 0x00, 0x52, 0x0e, 0x77, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x86, 0x01, 0x0a, 0x15, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x50, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63,
	0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x2e, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x13, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x6d,
	0x0a, 0x0d, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63,
	0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x2e, 0x41, 0x64, 0x64, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x48, 0x00, 0x52,
	0x0c, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x1a, 0x49, 0x0a,
	0x10, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x57, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72,
	0x6b, 0x12, 0x23, 0x0a, 0x0d, 0x6e, 0x65, 0x77, 0x5f, 0x77, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61,
	0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6e, 0x65, 0x77, 0x57, 0x61, 0x74,
	0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x1a, 0x42, 0x0a, 0x15, 0x41, 0x64, 0x76, 0x61,
	0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x61, 0x64, 0x76,
	0x61, 0x6e, 0x63, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x84, 0x01, 0x0a,
	0x0b, 0x41, 0x64, 0x64, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x63, 0x0a, 0x08,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x47,
	0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x65, 0x64,
	0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x74, 0x61, 0x67, 0x42, 0x07, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x1a, 0x5b, 0x0a, 0x12,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x65, 0x64, 0x45, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x5f, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x65, 0x6e, 0x63,
	0x6f, 0x64, 0x65, 0x64, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x2e, 0x0a, 0x0d, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x49, 0x64, 0x73, 0x22, 0x90, 0x04, 0x0a, 0x11, 0x57, 0x72,
	0x69, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12,
	0x43, 0x0a, 0x04, 0x73, 0x69, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04,
	0x73, 0x69, 0x6e, 0x6b, 0x12, 0x58, 0x0a, 0x0f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x66,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x52, 0x0e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27,
	0x0a, 0x0f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x65,
	0x64, 0x57, 0x72, 0x69, 0x74, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x1a, 0x72, 0x75, 0x6e, 0x6e, 0x65,
	0x72, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x73, 0x68, 0x61,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x72, 0x75, 0x6e,
	0x6e, 0x65, 0x72, 0x44, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x53, 0x68, 0x61,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x65, 0x0a, 0x0b, 0x73, 0x69, 0x64, 0x65, 0x5f, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x6f, 0x72, 0x67,
	0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x57,
	0x72, 0x69, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x2e, 0x53, 0x69, 0x64, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0a, 0x73, 0x69, 0x64, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c,
	0x61, 0x75, 0x74, 0x6f, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x64, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x61, 0x75, 0x74, 0x6f, 0x53, 0x68, 0x61, 0x72, 0x64, 0x65, 0x64, 0x1a,
	0x6b, 0x0a, 0x0f, 0x53, 0x69, 0x64, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x42, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65,
	0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x64, 0x65, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xcc, 0x02, 0x0a,
	0x11, 0x50, 0x75, 0x62, 0x53, 0x75, 0x62, 0x52, 0x65, 0x61, 0x64, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x13,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x69, 0x64, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x12, 0x27, 0x0a, 0x0f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x77, 0x69, 0x74, 0x68, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x18, 0x74, 0x6f, 0x70,
	0x69, 0x63, 0x5f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72,
	0x69, 0x64, 0x64, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x74, 0x6f, 0x70,
	0x69, 0x63, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64,
	0x64, 0x65, 0x6e, 0x12, 0x46, 0x0a, 0x1f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6f, 0x76, 0x65, 0x72,
	0x72, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1d, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x22, 0xb8, 0x01, 0x0a, 0x12,
	0x50, 0x75, 0x62, 0x53, 0x75, 0x62, 0x57, 0x72, 0x69, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x2f, 0x0a, 0x13, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x64, 0x5f,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x69, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x18,
	0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6f, 0x76,
	0x65, 0x72, 0x72, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16,
	0x74, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x4f, 0x76, 0x65, 0x72,
	0x72, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x22, 0xa5, 0x01, 0x0a, 0x17, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x6e, 0x74, 0x6f, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x62, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x1d, 0x6d,
	0x61, 0x78, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x1a, 0x6d, 0x61, 0x78, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x69, 0x6e, 0x67,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x22, 0x40,
	0x0a, 0x13, 0x52, 0x65, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x64,
	0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73,
	0x22, 0x7c, 0x0a, 0x05, 0x43, 0x6f, 0x64, 0x65, 0x72, 0x12, 0x43, 0x0a, 0x04, 0x73, 0x70, 0x65,
	0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70,
	0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x2e,
	0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x72, 0x49, 0x64, 0x73, 0x22, 0xf5,
	0x06, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x72,
	0x73, 0x22, 0xe2, 0x06, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x24, 0x0a, 0x05, 0x42, 0x59,
	0x54, 0x45, 0x53, 0x10, 0x00, 0x1a, 0x19, 0xa2, 0xb4, 0xfa, 0xc2, 0x05, 0x13, 0x62, 0x65, 0x61,
	0x6d, 0x3a, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x3a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x3a, 0x76, 0x31,
	0x12, 0x30, 0x0a, 0x0b, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x55, 0x54, 0x46, 0x38, 0x10,
	0x0a, 0x1a, 0x1f, 0xa2, 0xb4, 0xfa, 0xc2, 0x05, 0x19, 0x62, 0x65, 0x61, 0x6d, 0x3a, 0x63, 0x6f,
	0x64, 0x65, 0x72, 0x3a, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x74, 0x66, 0x38, 0x3a,
	0x76, 0x31, 0x12, 0x1e, 0x0a, 0x02, 0x4b, 0x56, 0x10, 0x01, 0x1a, 0x16, 0xa2, 0xb4, 0xfa, 0xc2,
	0x05, 0x10, 0x62, 0x65, 0x61, 0x6d, 0x3a, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x3a, 0x6b, 0x76, 0x3a,
	0x76, 0x31, 0x12, 0x22, 0x0a, 0x04, 0x42, 0x4f, 0x4f, 0x4c, 0x10, 0x0c, 0x1a, 0x18, 0xa2, 0xb4,
	0xfa, 0xc2, 0x05, 0x12, 0x62, 0x65, 0x61, 0x6d, 0x3a, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x3a, 0x62,
	0x6f, 0x6f, 0x6c, 0x3a, 0x76, 0x31, 0x12, 0x26, 0x0a, 0x06, 0x56, 0x41, 0x52, 0x49, 0x4e, 0x54,
	0x10, 0x02, 0x1a, 0x1a, 0xa2, 0xb4, 0xfa, 0xc2, 0x05, 0x14, 0x62, 0x65, 0x61, 0x6d, 0x3a, 0x63,
	0x6f, 0x64, 0x65, 0x72, 0x3a, 0x76, 0x61, 0x72, 0x69, 0x6e, 0x74, 0x3a, 0x76, 0x31, 0x12, 0x26,
	0x0a, 0x06, 0x44, 0x4f, 0x55, 0x42, 0x4c, 0x45, 0x10, 0x0b, 0x1a, 0x1a, 0xa2, 0xb4, 0xfa, 0xc2,
	0x05, 0x14, 0x62, 0x65, 0x61, 0x6d, 0x3a, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x3a, 0x64, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x3a, 0x76, 0x31, 0x12, 0x2a, 0x0a, 0x08, 0x49, 0x54, 0x45, 0x52, 0x41, 0x42,
	0x4c, 0x45, 0x10, 0x03, 0x1a, 0x1c, 0xa2, 0xb4, 0xfa, 0xc2, 0x05, 0x16, 0x62, 0x65, 0x61, 0x6d,
	0x3a, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x3a, 0x69, 0x74, 0x65, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x3a,
	0x76, 0x31, 0x12, 0x24, 0x0a, 0x05, 0x54, 0x49, 0x4d, 0x45, 0x52, 0x10, 0x04, 0x1a, 0x19, 0xa2,
	0xb4, 0xfa, 0xc2, 0x05, 0x13, 0x62, 0x65, 0x61, 0x6d, 0x3a, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x3a,
	0x74, 0x69, 0x6d, 0x65, 0x72, 0x3a, 0x76, 0x31, 0x12, 0x38, 0x0a, 0x0f, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x56, 0x41, 0x4c, 0x5f, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x10, 0x05, 0x1a, 0x23, 0xa2,
	0xb4, 0xfa, 0xc2, 0x05, 0x1d, 0x62, 0x65, 0x61, 0x6d, 0x3a, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x3a,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x3a,
	0x76, 0x31, 0x12, 0x34, 0x0a, 0x0d, 0x4c, 0x45, 0x4e, 0x47, 0x54, 0x48, 0x5f, 0x50, 0x52, 0x45,
	0x46, 0x49, 0x58, 0x10, 0x06, 0x1a, 0x21, 0xa2, 0xb4, 0xfa, 0xc2, 0x05, 0x1b, 0x62, 0x65, 0x61,
	0x6d, 0x3a, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x3a, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x3a, 0x76, 0x31, 0x12, 0x34, 0x0a, 0x0d, 0x47, 0x4c, 0x4f, 0x42,
	0x41, 0x4c, 0x5f, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x10, 0x07, 0x1a, 0x21, 0xa2, 0xb4, 0xfa,
	0xc2, 0x05, 0x1b, 0x62, 0x65, 0x61, 0x6d, 0x3a, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x3a, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x3a, 0x76, 0x31, 0x12, 0x36,
	0x0a, 0x0e, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x45, 0x44, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45,
	0x10, 0x08, 0x1a, 0x22, 0xa2, 0xb4, 0xfa, 0xc2, 0x05, 0x1c, 0x62, 0x65, 0x61, 0x6d, 0x3a, 0x63,
	0x6f, 0x64, 0x65, 0x72, 0x3a, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x76, 0x31, 0x12, 0x42, 0x0a, 0x14, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f,
	0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x45, 0x44, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0x0e,
	0x1a, 0x28, 0xa2, 0xb4, 0xfa, 0xc2, 0x05, 0x22, 0x62, 0x65, 0x61, 0x6d, 0x3a, 0x63, 0x6f, 0x64,
	0x65, 0x72, 0x3a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x65,
	0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x76, 0x31, 0x12, 0x44, 0x0a, 0x15, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x45, 0x44, 0x5f, 0x49, 0x54, 0x45, 0x52, 0x41,
	0x42, 0x4c, 0x45, 0x10, 0x09, 0x1a, 0x29, 0xa2, 0xb4, 0xfa, 0xc2, 0x05, 0x23, 0x62, 0x65, 0x61,
	0x6d, 0x3a, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x3a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x61,
	0x63, 0x6b, 0x65, 0x64, 0x5f, 0x69, 0x74, 0x65, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x3a, 0x76, 0x31,
	0x12, 0x34, 0x0a, 0x0d, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x57, 0x49, 0x4e, 0x44, 0x4f,
	0x57, 0x10, 0x10, 0x1a, 0x21, 0xa2, 0xb4, 0xfa, 0xc2, 0x05, 0x1b, 0x62, 0x65, 0x61, 0x6d, 0x3a,
	0x63, 0x6f, 0x64, 0x65, 0x72, 0x3a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x77, 0x69, 0x6e,
	0x64, 0x6f, 0x77, 0x3a, 0x76, 0x31, 0x12, 0x20, 0x0a, 0x03, 0x52, 0x4f, 0x57, 0x10, 0x0d, 0x1a,
	0x17, 0xa2, 0xb4, 0xfa, 0xc2, 0x05, 0x11, 0x62, 0x65, 0x61, 0x6d, 0x3a, 0x63, 0x6f, 0x64, 0x65,
	0x72, 0x3a, 0x72, 0x6f, 0x77, 0x3a, 0x76, 0x31, 0x12, 0x30, 0x0a, 0x0b, 0x53, 0x48, 0x41, 0x52,
	0x44, 0x45, 0x44, 0x5f, 0x4b, 0x45, 0x59, 0x10, 0x0f, 0x1a, 0x1f, 0xa2, 0xb4, 0xfa, 0xc2, 0x05,
	0x19, 0x62, 0x65, 0x61, 0x6d, 0x3a, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x3a, 0x73, 0x68, 0x61, 0x72,
	0x64, 0x65, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x3a, 0x76, 0x31, 0x12, 0x2a, 0x0a, 0x08, 0x4e, 0x55,
	0x4c, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x11, 0x1a, 0x1c, 0xa2, 0xb4, 0xfa, 0xc2, 0x05, 0x16,
	0x62, 0x65, 0x61, 0x6d, 0x3a, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x3a, 0x6e, 0x75, 0x6c, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x3a, 0x76, 0x31, 0x22, 0xae, 0x06, 0x0a, 0x11, 0x57, 0x69, 0x6e, 0x64, 0x6f,
	0x77, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x4c, 0x0a, 0x09,
	0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x66, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61,
	0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63,
	0x52, 0x08, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x46, 0x6e, 0x12, 0x56, 0x0a, 0x0c, 0x6d, 0x65,
	0x72, 0x67, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x33, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65,
	0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0b, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x69, 0x6e,
	0x64, 0x6f, 0x77, 0x43, 0x6f, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x07, 0x74, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x72,
	0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x07, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x12, 0x65, 0x0a, 0x11, 0x61, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x6f, 0x72,
	0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65,
	0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x10, 0x61, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x53, 0x0a, 0x0b, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x6f,
	0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d,
	0x52, 0x0a, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x62, 0x0a, 0x10,
	0x63, 0x6c, 0x6f, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61,
	0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x69,
	0x6e, 0x67, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52,
	0x0f, 0x63, 0x6c, 0x6f, 0x73, 0x69, 0x6e, 0x67, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72,
	0x12, 0x29, 0x0a, 0x10, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x6c, 0x61, 0x74, 0x65,
	0x6e, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x60, 0x0a, 0x10, 0x6f,
	0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63,
	0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0e, 0x6f,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x12, 0x31, 0x0a,
	0x15, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x6f, 0x6e, 0x65, 0x5f,
	0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x61, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x73, 0x54, 0x6f, 0x4f, 0x6e, 0x65, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77,
	0x12, 0x25, 0x0a, 0x0e, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x5c, 0x0a, 0x0b, 0x4d, 0x65, 0x72, 0x67, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x4d, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f,
	0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x0f, 0x0a, 0x0b, 0x4e, 0x4f, 0x4e, 0x5f, 0x4d, 0x45, 0x52, 0x47, 0x49, 0x4e, 0x47, 0x10, 0x01,
	0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x45, 0x45, 0x44, 0x53, 0x5f, 0x4d, 0x45, 0x52, 0x47, 0x45, 0x10,
	0x02, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x4d, 0x45, 0x52,
	0x47, 0x45, 0x44, 0x10, 0x03, 0x22, 0x5d, 0x0a, 0x10, 0x41, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0x49, 0x0a, 0x04, 0x45, 0x6e, 0x75,
	0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x49, 0x53, 0x43, 0x41, 0x52, 0x44, 0x49, 0x4e, 0x47,
	0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x43, 0x43, 0x55, 0x4d, 0x55, 0x4c, 0x41, 0x54, 0x49,
	0x4e, 0x47, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x45, 0x54, 0x52, 0x41, 0x43, 0x54, 0x49,
	0x4e, 0x47, 0x10, 0x03, 0x22, 0x51, 0x0a, 0x0f, 0x43, 0x6c, 0x6f, 0x73, 0x69, 0x6e, 0x67, 0x42,
	0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x22, 0x3e, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12,
	0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x4d, 0x49, 0x54, 0x5f, 0x41, 0x4c, 0x57, 0x41, 0x59, 0x53, 0x10,
	0x01, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4d, 0x49, 0x54, 0x5f, 0x49, 0x46, 0x5f, 0x4e, 0x4f, 0x4e,
	0x45, 0x4d, 0x50, 0x54, 0x59, 0x10, 0x02, 0x22, 0x50, 0x0a, 0x0e, 0x4f, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x22, 0x3e, 0x0a, 0x04, 0x45, 0x6e, 0x75,
	0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x49, 0x52, 0x45, 0x5f, 0x41, 0x4c, 0x57, 0x41, 0x59,
	0x53, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x46, 0x49, 0x52, 0x45, 0x5f, 0x49, 0x46, 0x5f, 0x4e,
	0x4f, 0x4e, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x10, 0x02, 0x22, 0x62, 0x0a, 0x0a, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x54, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12,
	0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x11, 0x0a, 0x0d, 0x45, 0x4e, 0x44, 0x5f, 0x4f, 0x46, 0x5f, 0x57, 0x49, 0x4e, 0x44, 0x4f,
	0x57, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x4c, 0x41, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x49, 0x4e,
	0x5f, 0x50, 0x41, 0x4e, 0x45, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x41, 0x52, 0x4c, 0x49,
	0x45, 0x53, 0x54, 0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x41, 0x4e, 0x45, 0x10, 0x03, 0x22, 0x6e, 0x0a,
	0x0a, 0x54, 0x69, 0x6d, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x22, 0x60, 0x0a, 0x04, 0x45,
	0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x49,
	0x4d, 0x45, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x49,
	0x4e, 0x47, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x02, 0x22, 0x04, 0x08, 0x03, 0x10, 0x03, 0x2a,
	0x1c, 0x53, 0x59, 0x4e, 0x43, 0x48, 0x52, 0x4f, 0x4e, 0x49, 0x5a, 0x45, 0x44, 0x5f, 0x50, 0x52,
	0x4f, 0x43, 0x45, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x22, 0xa3, 0x10,
	0x0a, 0x07, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x52, 0x0a, 0x09, 0x61, 0x66, 0x74,
	0x65, 0x72, 0x5f, 0x61, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6f,
	0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x2e, 0x41, 0x66, 0x74, 0x65, 0x72, 0x41, 0x6c,
	0x6c, 0x48, 0x00, 0x52, 0x08, 0x61, 0x66, 0x74, 0x65, 0x72, 0x41, 0x6c, 0x6c, 0x12, 0x52, 0x0a,
	0x09, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x6e, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x33, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65,
	0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x2e, 0x41, 0x66, 0x74,
	0x65, 0x72, 0x41, 0x6e, 0x79, 0x48, 0x00, 0x52, 0x08, 0x61, 0x66, 0x74, 0x65, 0x72, 0x41, 0x6e,
	0x79, 0x12, 0x55, 0x0a, 0x0a, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x65, 0x61, 0x63, 0x68, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63,
	0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x2e, 0x41, 0x66, 0x74, 0x65, 0x72, 0x45, 0x61, 0x63, 0x68, 0x48, 0x00, 0x52, 0x09, 0x61,
	0x66, 0x74, 0x65, 0x72, 0x45, 0x61, 0x63, 0x68, 0x12, 0x6c, 0x0a, 0x13, 0x61, 0x66, 0x74, 0x65,
	0x72, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x6f, 0x66, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63,
	0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x2e, 0x41, 0x66, 0x74, 0x65, 0x72, 0x45, 0x6e, 0x64, 0x4f, 0x66, 0x57, 0x69, 0x6e, 0x64,
	0x6f, 0x77, 0x48, 0x00, 0x52, 0x10, 0x61, 0x66, 0x74, 0x65, 0x72, 0x45, 0x6e, 0x64, 0x4f, 0x66,
	0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12, 0x74, 0x0a, 0x15, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63,
	0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x2e, 0x41, 0x66, 0x74, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x13, 0x61, 0x66, 0x74, 0x65, 0x72, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x99, 0x01, 0x0a,
	0x22, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69,
	0x7a, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x6f, 0x72, 0x67, 0x2e,
	0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x2e, 0x41, 0x66, 0x74, 0x65, 0x72, 0x53, 0x79, 0x6e, 0x63, 0x68,
	0x72, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x1f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x53, 0x79,
	0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4b, 0x0a, 0x06, 0x61, 0x6c, 0x77, 0x61,
	0x79, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61,
	0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x2e, 0x41, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x48, 0x00, 0x52, 0x06, 0x61,
	0x6c, 0x77, 0x61, 0x79, 0x73, 0x12, 0x4e, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61,
	0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x07, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x5e, 0x0a, 0x0d, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x48, 0x0a, 0x05, 0x6e, 0x65, 0x76, 0x65, 0x72, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68,
	0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x2e, 0x4e, 0x65, 0x76, 0x65, 0x72, 0x48, 0x00, 0x52, 0x05, 0x6e, 0x65, 0x76, 0x65, 0x72, 0x12,
	0x55, 0x0a, 0x0a, 0x6f, 0x72, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x6c, 0x79, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65,
	0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x2e,
	0x4f, 0x72, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x6c, 0x79, 0x48, 0x00, 0x52, 0x09, 0x6f, 0x72, 0x46,
	0x69, 0x6e, 0x61, 0x6c, 0x6c, 0x79, 0x12, 0x4b, 0x0a, 0x06, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61,
	0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x70,
	0x65, 0x61, 0x74, 0x1a, 0x58, 0x0a, 0x08, 0x41, 0x66, 0x74, 0x65, 0x72, 0x41, 0x6c, 0x6c, 0x12,
	0x4c, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68,
	0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x52, 0x0b, 0x73, 0x75, 0x62, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x1a, 0x58, 0x0a,
	0x08, 0x41, 0x66, 0x74, 0x65, 0x72, 0x41, 0x6e, 0x79, 0x12, 0x4c, 0x0a, 0x0b, 0x73, 0x75, 0x62,
	0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x74,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x1a, 0x59, 0x0a, 0x09, 0x41, 0x66, 0x74, 0x65, 0x72,
	0x45, 0x61, 0x63, 0x68, 0x12, 0x4c, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x74, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x72, 0x67, 0x2e,
	0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x73, 0x1a, 0xb2, 0x01, 0x0a, 0x10, 0x41, 0x66, 0x74, 0x65, 0x72, 0x45, 0x6e, 0x64, 0x4f,
	0x66, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12, 0x4f, 0x0a, 0x0d, 0x65, 0x61, 0x72, 0x6c, 0x79,
	0x5f, 0x66, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x0c, 0x65, 0x61, 0x72, 0x6c,
	0x79, 0x46, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x4d, 0x0a, 0x0c, 0x6c, 0x61, 0x74, 0x65,
	0x5f, 0x66, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x0b, 0x6c, 0x61, 0x74, 0x65,
	0x46, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x1a, 0x7f, 0x0a, 0x13, 0x41, 0x66, 0x74, 0x65, 0x72,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x68,
	0x0a, 0x14, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6f,
	0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x6f, 0x72, 0x6d, 0x52, 0x13, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x1a, 0x21, 0x0a, 0x1f, 0x41, 0x66, 0x74, 0x65,
	0x72, 0x53, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x64, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x09, 0x0a, 0x07, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x1a, 0x33, 0x0a, 0x0c, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x07, 0x0a, 0x05, 0x4e,
	0x65, 0x76, 0x65, 0x72, 0x1a, 0x08, 0x0a, 0x06, 0x41, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x1a, 0x91,
	0x01, 0x0a, 0x09, 0x4f, 0x72, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x6c, 0x79, 0x12, 0x3e, 0x0a, 0x04,
	0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x72, 0x67,
	0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x04, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x44, 0x0a, 0x07,
	0x66, 0x69, 0x6e, 0x61, 0x6c, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x07, 0x66, 0x69, 0x6e, 0x61, 0x6c,
	0x6c, 0x79, 0x1a, 0x54, 0x0a, 0x06, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x12, 0x4a, 0x0a, 0x0a,
	0x73, 0x75, 0x62, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65,
	0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x0a, 0x73, 0x75,
	0x62, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x42, 0x09, 0x0a, 0x07, 0x74, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x22, 0xc3, 0x02, 0x0a, 0x12, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x53, 0x0a, 0x05, 0x64, 0x65,
	0x6c, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x6f, 0x72, 0x67, 0x2e,
	0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d,
	0x2e, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x48, 0x00, 0x52, 0x05, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x12,
	0x5a, 0x0a, 0x08, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x5f, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3d, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62,
	0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x54, 0x6f,
	0x48, 0x00, 0x52, 0x07, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x54, 0x6f, 0x1a, 0x2a, 0x0a, 0x05, 0x44,
	0x65, 0x6c, 0x61, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x6d, 0x69,
	0x6c, 0x6c, 0x69, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x64, 0x65, 0x6c, 0x61,
	0x79, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x1a, 0x39, 0x0a, 0x07, 0x41, 0x6c, 0x69, 0x67, 0x6e,
	0x54, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x42, 0x15, 0x0a, 0x13, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x22, 0x8a, 0x02, 0x0a, 0x09, 0x53, 0x69,
	0x64, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x56, 0x0a, 0x0e, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61,
	0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63,
	0x52, 0x0d, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12,
	0x48, 0x0a, 0x07, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x66, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65,
	0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65,
	0x63, 0x52, 0x06, 0x76, 0x69, 0x65, 0x77, 0x46, 0x6e, 0x12, 0x5b, 0x0a, 0x11, 0x77, 0x69, 0x6e,
	0x64, 0x6f, 0x77, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68,
	0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x70, 0x65, 0x63, 0x52, 0x0f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x4d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x46, 0x6e, 0x22, 0x89, 0x04, 0x0a, 0x11, 0x53, 0x74, 0x61, 0x6e, 0x64,
	0x61, 0x72, 0x64, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x22, 0x9f, 0x02, 0x0a,
	0x05, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x04, 0x46, 0x49, 0x4c, 0x45, 0x10, 0x00,
	0x1a, 0x20, 0xa2, 0xb4, 0xfa, 0xc2, 0x05, 0x1a, 0x62, 0x65, 0x61, 0x6d, 0x3a, 0x61, 0x72, 0x74,
	0x69, 0x66, 0x61, 0x63, 0x74, 0x3a, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x66, 0x69, 0x6c, 0x65, 0x3a,
	0x76, 0x31, 0x12, 0x28, 0x0a, 0x03, 0x55, 0x52, 0x4c, 0x10, 0x01, 0x1a, 0x1f, 0xa2, 0xb4, 0xfa,
	0xc2, 0x05, 0x19, 0x62, 0x65, 0x61, 0x6d, 0x3a, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74,
	0x3a, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x75, 0x72, 0x6c, 0x3a, 0x76, 0x31, 0x12, 0x32, 0x0a, 0x08,
	0x45, 0x4d, 0x42, 0x45, 0x44, 0x44, 0x45, 0x44, 0x10, 0x02, 0x1a, 0x24, 0xa2, 0xb4, 0xfa, 0xc2,
	0x05, 0x1e, 0x62, 0x65, 0x61, 0x6d, 0x3a, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x3a,
	0x74, 0x79, 0x70, 0x65, 0x3a, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x3a, 0x76, 0x31,
	0x12, 0x2a, 0x0a, 0x04, 0x50, 0x59, 0x50, 0x49, 0x10, 0x03, 0x1a, 0x20, 0xa2, 0xb4, 0xfa, 0xc2,
	0x05, 0x1a, 0x62, 0x65, 0x61, 0x6d, 0x3a, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x3a,
	0x74, 0x79, 0x70, 0x65, 0x3a, 0x70, 0x79, 0x70, 0x69, 0x3a, 0x76, 0x31, 0x12, 0x2c, 0x0a, 0x05,
	0x4d, 0x41, 0x56, 0x45, 0x4e, 0x10, 0x04, 0x1a, 0x21, 0xa2, 0xb4, 0xfa, 0xc2, 0x05, 0x1b, 0x62,
	0x65, 0x61, 0x6d, 0x3a, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x3a, 0x74, 0x79, 0x70,
	0x65, 0x3a, 0x6d, 0x61, 0x76, 0x65, 0x6e, 0x3a, 0x76, 0x31, 0x12, 0x32, 0x0a, 0x08, 0x44, 0x45,
	0x46, 0x45, 0x52, 0x52, 0x45, 0x44, 0x10, 0x05, 0x1a, 0x24, 0xa2, 0xb4, 0xfa, 0xc2, 0x05, 0x1e,
	0x62, 0x65, 0x61, 0x6d, 0x3a, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x3a, 0x74, 0x79,
	0x70, 0x65, 0x3a, 0x64, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x3a, 0x76, 0x31, 0x22, 0xd1,
	0x01, 0x0a, 0x05, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x0a, 0x53, 0x54, 0x41, 0x47,
	0x49, 0x4e, 0x47, 0x5f, 0x54, 0x4f, 0x10, 0x00, 0x1a, 0x26, 0xa2, 0xb4, 0xfa, 0xc2, 0x05, 0x20,
	0x62, 0x65, 0x61, 0x6d, 0x3a, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x3a, 0x72, 0x6f,
	0x6c, 0x65, 0x3a, 0x73, 0x74, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x3a, 0x76, 0x31,
	0x12, 0x4c, 0x0a, 0x15, 0x50, 0x49, 0x50, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x4d,
	0x45, 0x4e, 0x54, 0x53, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0x31, 0xa2, 0xb4, 0xfa,
	0xc2, 0x05, 0x2b, 0x62, 0x65, 0x61, 0x6d, 0x3a, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74,
	0x3a, 0x72, 0x6f, 0x6c, 0x65, 0x3a, 0x70, 0x69, 0x70, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x3a, 0x76, 0x31, 0x12, 0x42,
	0x0a, 0x10, 0x47, 0x4f, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x45, 0x52, 0x5f, 0x42, 0x49, 0x4e, 0x41,
	0x52, 0x59, 0x10, 0x02, 0x1a, 0x2c, 0xa2, 0xb4, 0xfa, 0xc2, 0x05, 0x26, 0x62, 0x65, 0x61, 0x6d,
	0x3a, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x3a, 0x72, 0x6f, 0x6c, 0x65, 0x3a, 0x67,
	0x6f, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x3a,
	0x76, 0x31, 0x22, 0x41, 0x0a, 0x13, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x46, 0x69,
	0x6c, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x68, 0x61, 0x32, 0x35, 0x36, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x68, 0x61, 0x32, 0x35, 0x36, 0x22, 0x3e, 0x0a, 0x12, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63,
	0x74, 0x55, 0x72, 0x6c, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x68, 0x61, 0x32, 0x35, 0x36, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x68, 0x61, 0x32, 0x35, 0x36, 0x22, 0x29, 0x0a, 0x13, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65,
	0x64, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x48, 0x0a, 0x0b, 0x50, 0x79, 0x50, 0x49, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x51, 0x0a, 0x0c, 0x4d, 0x61,
	0x76, 0x65, 0x6e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x72,
	0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x72,
	0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x55, 0x72, 0x6c, 0x22, 0x3f, 0x0a,
	0x17, 0x44, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63,
	0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x3f,
	0x0a, 0x1c, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x53, 0x74, 0x61, 0x67, 0x69, 0x6e,
	0x67, 0x54, 0x6f, 0x52, 0x6f, 0x6c, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x74, 0x61, 0x67, 0x65, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x67, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0x91, 0x01, 0x0a, 0x13, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x75, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x79, 0x70, 0x65, 0x55,
	0x72, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x74, 0x79, 0x70, 0x65, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x75, 0x72,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x6f, 0x6c, 0x65, 0x55, 0x72, 0x6e,
	0x12, 0x21, 0x0a, 0x0c, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x72, 0x6f, 0x6c, 0x65, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x22, 0xbe, 0x03, 0x0a, 0x0b, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x75, 0x72, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12,
	0x51, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63,
	0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x5a, 0x0a, 0x0c, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64,
	0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6f,
	0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69,
	0x65, 0x73, 0x12, 0x68, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x68,
	0x69, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x6f, 0x72, 0x67,
	0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x48, 0x69, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x69, 0x6e, 0x74, 0x73, 0x1a, 0x40, 0x0a, 0x12,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x69, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x4a, 0x04,
	0x08, 0x01, 0x10, 0x02, 0x22, 0xeb, 0x01, 0x0a, 0x14, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72,
	0x64, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xd2, 0x01,
	0x0a, 0x0c, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x24,
	0x0a, 0x06, 0x44, 0x4f, 0x43, 0x4b, 0x45, 0x52, 0x10, 0x00, 0x1a, 0x18, 0xa2, 0xb4, 0xfa, 0xc2,
	0x05, 0x12, 0x62, 0x65, 0x61, 0x6d, 0x3a, 0x65, 0x6e, 0x76, 0x3a, 0x64, 0x6f, 0x63, 0x6b, 0x65,
	0x72, 0x3a, 0x76, 0x31, 0x12, 0x26, 0x0a, 0x07, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x10,
	0x01, 0x1a, 0x19, 0xa2, 0xb4, 0xfa, 0xc2, 0x05, 0x13, 0x62, 0x65, 0x61, 0x6d, 0x3a, 0x65, 0x6e,
	0x76, 0x3a, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x3a, 0x76, 0x31, 0x12, 0x28, 0x0a, 0x08,
	0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x10, 0x02, 0x1a, 0x1a, 0xa2, 0xb4, 0xfa, 0xc2,
	0x05, 0x14, 0x62, 0x65, 0x61, 0x6d, 0x3a, 0x65, 0x6e, 0x76, 0x3a, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x3a, 0x76, 0x31, 0x12, 0x26, 0x0a, 0x07, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c,
	0x54, 0x10, 0x03, 0x1a, 0x19, 0xa2, 0xb4, 0xfa, 0xc2, 0x05, 0x13, 0x62, 0x65, 0x61, 0x6d, 0x3a,
	0x65, 0x6e, 0x76, 0x3a, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a, 0x76, 0x31, 0x12, 0x22,
	0x0a, 0x05, 0x41, 0x4e, 0x59, 0x4f, 0x46, 0x10, 0x04, 0x1a, 0x17, 0xa2, 0xb4, 0xfa, 0xc2, 0x05,
	0x11, 0x62, 0x65, 0x61, 0x6d, 0x3a, 0x65, 0x6e, 0x76, 0x3a, 0x61, 0x6e, 0x79, 0x6f, 0x66, 0x3a,
	0x76, 0x31, 0x22, 0x38, 0x0a, 0x0d, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x22, 0xd4, 0x01, 0x0a,
	0x0e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12,
	0x0e, 0x0a, 0x02, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x6f, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x61, 0x72, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61,
	0x72, 0x63, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x4c, 0x0a,
	0x03, 0x65, 0x6e, 0x76, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x6f, 0x72, 0x67,
	0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x45, 0x6e,
	0x76, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x65, 0x6e, 0x76, 0x1a, 0x36, 0x0a, 0x08, 0x45,
	0x6e, 0x76, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xf9, 0x01, 0x0a, 0x0f, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x53, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2e,
	0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70,
	0x69, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x6f, 0x72, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x56, 0x0a, 0x06,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x6f,
	0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x6d, 0x0a, 0x17, 0x41, 0x6e, 0x79, 0x4f, 0x66, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x52, 0x0a, 0x0c, 0x65, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65,
	0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x0c, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xb2,
	0x06, 0x0a, 0x11, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x73, 0x22, 0x9c, 0x06, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x48, 0x0a,
	0x19, 0x4c, 0x45, 0x47, 0x41, 0x43, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53,
	0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x1a, 0x29, 0xa2, 0xb4,
	0xfa, 0xc2, 0x05, 0x23, 0x62, 0x65, 0x61, 0x6d, 0x3a, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x3a, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x3a, 0x76, 0x30, 0x12, 0x41, 0x0a, 0x12, 0x50, 0x52, 0x4f, 0x47, 0x52,
	0x45, 0x53, 0x53, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x1a,
	0x29, 0xa2, 0xb4, 0xfa, 0xc2, 0x05, 0x23, 0x62, 0x65, 0x61, 0x6d, 0x3a, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x3a, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x3a, 0x76, 0x31, 0x12, 0x37, 0x0a, 0x0d, 0x57, 0x4f,
	0x52, 0x4b, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x02, 0x1a, 0x24, 0xa2,
	0xb4, 0xfa, 0xc2, 0x05, 0x1e, 0x62, 0x65, 0x61, 0x6d, 0x3a, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x3a, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x3a, 0x76, 0x31, 0x12, 0x55, 0x0a, 0x1c, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x5f, 0x43, 0x4f, 0x52,
	0x45, 0x5f, 0x42, 0x55, 0x4e, 0x44, 0x4c, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53,
	0x49, 0x4e, 0x47, 0x10, 0x03, 0x1a, 0x33, 0xa2, 0xb4, 0xfa, 0xc2, 0x05, 0x2d, 0x62, 0x65, 0x61,
	0x6d, 0x3a, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x3a, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x5f, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x3a, 0x76, 0x31, 0x12, 0x3b, 0x0a, 0x0f, 0x53, 0x49,
	0x42, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x45, 0x52, 0x53, 0x10, 0x05, 0x1a,
	0x26, 0xa2, 0xb4, 0xfa, 0xc2, 0x05, 0x20, 0x62, 0x65, 0x61, 0x6d, 0x3a, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x3a, 0x73, 0x69, 0x62, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x77, 0x6f, 0x72,
	0x6b, 0x65, 0x72, 0x73, 0x3a, 0x76, 0x31, 0x12, 0x4d, 0x0a, 0x18, 0x48, 0x41, 0x52, 0x4e, 0x45,
	0x53, 0x53, 0x5f, 0x4d, 0x4f, 0x4e, 0x49, 0x54, 0x4f, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x49, 0x4e,
	0x46, 0x4f, 0x53, 0x10, 0x04, 0x1a, 0x2f, 0xa2, 0xb4, 0xfa, 0xc2, 0x05, 0x29, 0x62, 0x65, 0x61,
	0x6d, 0x3a, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x3a, 0x68, 0x61, 0x72, 0x6e, 0x65,
	0x73, 0x73, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x73, 0x3a, 0x76, 0x31, 0x12, 0x61, 0x0a, 0x22, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f,
	0x4c, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e,
	0x54, 0x53, 0x5f, 0x45, 0x4d, 0x42, 0x45, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x06, 0x1a, 0x39,
	0xa2, 0xb4, 0xfa, 0xc2, 0x05, 0x33, 0x62, 0x65, 0x61, 0x6d, 0x3a, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x3a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x65, 0x6d, 0x62,
	0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x3a, 0x76, 0x31, 0x12, 0x37, 0x0a, 0x0d, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x43, 0x41, 0x43, 0x48, 0x49, 0x4e, 0x47, 0x10, 0x07, 0x1a, 0x24, 0xa2, 0xb4,
	0xfa, 0xc2, 0x05, 0x1e, 0x62, 0x65, 0x61, 0x6d, 0x3a, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x3a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x3a,
	0x76, 0x31, 0x12, 0x37, 0x0a, 0x0d, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x41, 0x4d, 0x50, 0x4c,
	0x49, 0x4e, 0x47, 0x10, 0x08, 0x1a, 0x24, 0xa2, 0xb4, 0xfa, 0xc2, 0x05, 0x1e, 0x62, 0x65, 0x61,
	0x6d, 0x3a, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x3a, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x3a, 0x76, 0x31, 0x12, 0x53, 0x0a, 0x1b, 0x53,
	0x44, 0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x55, 0x4d, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x45, 0x43,
	0x45, 0x49, 0x56, 0x45, 0x44, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x10, 0x09, 0x1a, 0x32, 0xa2, 0xb4,
	0xfa, 0xc2, 0x05, 0x2c, 0x62, 0x65, 0x61, 0x6d, 0x3a, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x3a, 0x73, 0x64, 0x6b, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x69, 0x6e, 0x67, 0x5f,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x76, 0x31,
	0x12, 0x41, 0x0a, 0x12, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x4c, 0x49, 0x53, 0x54,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0x0a, 0x1a, 0x29, 0xa2, 0xb4, 0xfa, 0xc2, 0x05, 0x23,
	0x62, 0x65, 0x61, 0x6d, 0x3a, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x3a, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x3a, 0x76, 0x31, 0x22, 0xb5, 0x02, 0x0a, 0x17, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64,
	0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x22,
	0x99, 0x02, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x4f, 0x0a, 0x19, 0x4d, 0x4f, 0x4e, 0x49,
	0x54, 0x4f, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x53, 0x48, 0x4f, 0x52,
	0x54, 0x5f, 0x49, 0x44, 0x53, 0x10, 0x00, 0x1a, 0x30, 0xa2, 0xb4, 0xfa, 0xc2, 0x05, 0x2a, 0x62,
	0x65, 0x61, 0x6d, 0x3a, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x3a, 0x6d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x73, 0x68, 0x6f,
	0x72, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x3a, 0x76, 0x31, 0x12, 0x63, 0x0a, 0x23, 0x43, 0x4f, 0x4e,
	0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x45, 0x4c,
	0x45, 0x4d, 0x45, 0x4e, 0x54, 0x53, 0x5f, 0x45, 0x4d, 0x42, 0x45, 0x44, 0x44, 0x49, 0x4e, 0x47,
	0x10, 0x06, 0x1a, 0x3a, 0xa2, 0xb4, 0xfa, 0xc2, 0x05, 0x34, 0x62, 0x65, 0x61, 0x6d, 0x3a, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x3a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x5f, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x3a, 0x76, 0x31, 0x12, 0x5b,
	0x0a, 0x1f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x4d, 0x41, 0x50, 0x5f, 0x4b, 0x45, 0x59, 0x53, 0x5f,
	0x56, 0x41, 0x4c, 0x55, 0x45, 0x53, 0x5f, 0x53, 0x49, 0x44, 0x45, 0x5f, 0x49, 0x4e, 0x50, 0x55,
	0x54, 0x10, 0x07, 0x1a, 0x36, 0xa2, 0xb4, 0xfa, 0xc2, 0x05, 0x30, 0x62, 0x65, 0x61, 0x6d, 0x3a,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x3a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61,
	0x70, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x5f, 0x73, 0x69,
	0x64, 0x65, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x3a, 0x76, 0x31, 0x22, 0xff, 0x03, 0x0a, 0x14,
	0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x22, 0xe6, 0x03, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x4a, 0x0a,
	0x1c, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x46,
	0x55, 0x4c, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x1a,
	0x28, 0xa2, 0xb4, 0xfa, 0xc2, 0x05, 0x22, 0x62, 0x65, 0x61, 0x6d, 0x3a, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x3a, 0x70, 0x61, 0x72, 0x64, 0x6f, 0x3a, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x66, 0x75, 0x6c, 0x3a, 0x76, 0x31, 0x12, 0x4e, 0x0a, 0x1c, 0x52, 0x45, 0x51,
	0x55, 0x49, 0x52, 0x45, 0x53, 0x5f, 0x42, 0x55, 0x4e, 0x44, 0x4c, 0x45, 0x5f, 0x46, 0x49, 0x4e,
	0x41, 0x4c, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x1a, 0x2c, 0xa2, 0xb4, 0xfa,
	0xc2, 0x05, 0x26, 0x62, 0x65, 0x61, 0x6d, 0x3a, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x3a, 0x70, 0x61, 0x72, 0x64, 0x6f, 0x3a, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x76, 0x31, 0x12, 0x47, 0x0a, 0x15, 0x52, 0x45, 0x51,
	0x55, 0x49, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x49, 0x4e, 0x50,
	0x55, 0x54, 0x10, 0x02, 0x1a, 0x2c, 0xa2, 0xb4, 0xfa, 0xc2, 0x05, 0x26, 0x62, 0x65, 0x61, 0x6d,
	0x3a, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x3a, 0x70, 0x61, 0x72,
	0x64, 0x6f, 0x3a, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x3a,
	0x76, 0x31, 0x12, 0x51, 0x0a, 0x1a, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x53, 0x5f, 0x54,
	0x49, 0x4d, 0x45, 0x5f, 0x53, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54,
	0x10, 0x03, 0x1a, 0x31, 0xa2, 0xb4, 0xfa, 0xc2, 0x05, 0x2b, 0x62, 0x65, 0x61, 0x6d, 0x3a, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x3a, 0x70, 0x61, 0x72, 0x64, 0x6f,
	0x3a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x3a, 0x76, 0x31, 0x12, 0x4d, 0x0a, 0x18, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45,
	0x53, 0x5f, 0x53, 0x50, 0x4c, 0x49, 0x54, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x44, 0x4f, 0x46,
	0x4e, 0x10, 0x04, 0x1a, 0x2f, 0xa2, 0xb4, 0xfa, 0xc2, 0x05, 0x29, 0x62, 0x65, 0x61, 0x6d, 0x3a,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x3a, 0x70, 0x61, 0x72, 0x64,
	0x6f, 0x3a, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x6f, 0x66,
	0x6e, 0x3a, 0x76, 0x31, 0x12, 0x57, 0x0a, 0x1d, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x53,
	0x5f, 0x4f, 0x4e, 0x5f, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x05, 0x1a, 0x34, 0xa2, 0xb4, 0xfa, 0xc2, 0x05, 0x2e, 0x62,
	0x65, 0x61, 0x6d, 0x3a, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x3a,
	0x70, 0x61, 0x72, 0x64, 0x6f, 0x3a, 0x6f, 0x6e, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x76, 0x31, 0x22, 0x3a, 0x0a,
	0x0c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6e, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x57, 0x0a, 0x13, 0x53, 0x74, 0x61,
	0x6e, 0x64, 0x61, 0x72, 0x64, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x44, 0x61, 0x74, 0x61,
	0x22, 0x40, 0x0a, 0x0b, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x31, 0x0a, 0x08, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x00, 0x1a, 0x23, 0xa2,
	0xb4, 0xfa, 0xc2, 0x05, 0x1d, 0x62, 0x65, 0x61, 0x6d, 0x3a, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x3a,
	0x76, 0x31, 0x22, 0xea, 0x01, 0x0a, 0x0f, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x23, 0x0a, 0x0c,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x08, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x39, 0x0a, 0x0b, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6e,
	0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0xd7, 0x07, 0x0a, 0x15, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x4d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61,
	0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x40, 0x0a, 0x05, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e,
	0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x72, 0x48, 0x00, 0x52, 0x05,
	0x63, 0x6f, 0x64, 0x65, 0x72, 0x12, 0x5c, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65,
	0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x48, 0x00, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x12, 0x56, 0x0a, 0x0d, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x70, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6f, 0x72, 0x67,
	0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x48, 0x00, 0x52, 0x0c, 0x66,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x12, 0x57, 0x0a, 0x0e, 0x70,
	0x61, 0x72, 0x5f, 0x64, 0x6f, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65,
	0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x44, 0x6f, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x48, 0x00, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x44, 0x6f, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x12, 0x4f, 0x0a, 0x0a, 0x70, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f,
	0x72, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61,
	0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x52, 0x0a, 0x0b, 0x70, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6f, 0x72, 0x67,
	0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x53, 0x0a, 0x0c, 0x72, 0x65, 0x61,
	0x64, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61,
	0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48,
	0x00, 0x52, 0x0b, 0x72, 0x65, 0x61, 0x64, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x4d,
	0x0a, 0x0a, 0x73, 0x69, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e,
	0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x64, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x48, 0x00, 0x52, 0x09, 0x73, 0x69, 0x64, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x66, 0x0a,
	0x13, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x69, 0x6e, 0x74, 0x6f, 0x5f, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6f, 0x72, 0x67,
	0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x57,
	0x69, 0x6e, 0x64, 0x6f, 0x77, 0x49, 0x6e, 0x74, 0x6f, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x48, 0x00, 0x52, 0x11, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x49, 0x6e, 0x74, 0x6f, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x65, 0x0a, 0x12, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x69,
	0x6e, 0x67, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x34, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62,
	0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x53,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x48, 0x00, 0x52, 0x11, 0x77, 0x69, 0x6e, 0x64, 0x6f,
	0x77, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x42, 0x06, 0x0a, 0x04,
	0x72, 0x6f, 0x6f, 0x74, 0x22, 0xb6, 0x0a, 0x0a, 0x16, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12,
	0x50, 0x0a, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68,
	0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x7a, 0x0a, 0x13, 0x77, 0x69, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x5f,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4a,
	0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61,
	0x67, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x57, 0x69, 0x72, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x11, 0x77, 0x69, 0x72, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x12, 0x66, 0x0a, 0x0b, 0x73, 0x69, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61,
	0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x2e, 0x53, 0x69, 0x64, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x49, 0x64, 0x52,
	0x0a, 0x73, 0x69, 0x64, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x73, 0x12, 0x4d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6f, 0x72, 0x67, 0x2e,
	0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x66, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x6f, 0x72, 0x67, 0x2e,
	0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x64,
	0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x59, 0x0a, 0x06,
	0x74, 0x69, 0x6d, 0x65, 0x72, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x6f,
	0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x52,
	0x06, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x73, 0x12, 0x6d, 0x0a, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x72,
	0x46, 0x61, 0x6d, 0x69, 0x6c, 0x69, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x47,
	0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61,
	0x67, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x46,
	0x61, 0x6d, 0x69, 0x6c, 0x79, 0x49, 0x64, 0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x46, 0x61,
	0x6d, 0x69, 0x6c, 0x69, 0x65, 0x73, 0x1a, 0x4f, 0x0a, 0x0b, 0x53, 0x69, 0x64, 0x65, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f,
	0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x4f, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x4b, 0x0a, 0x07, 0x54, 0x69, 0x6d, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x51, 0x0a, 0x0d, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x46, 0x61,
	0x6d, 0x69, 0x6c, 0x79, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0xd2, 0x01, 0x0a, 0x10, 0x57, 0x69, 0x72,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6e, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x5f, 0x6f, 0x72, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x4f, 0x72,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x49, 0x64, 0x12, 0x59, 0x0a, 0x05, 0x74, 0x69, 0x6d, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70,
	0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x48, 0x00, 0x52, 0x05, 0x74, 0x69,
	0x6d, 0x65, 0x72, 0x42, 0x08, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0xc2, 0x01,
	0x0a, 0x15, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x48, 0x69, 0x6e, 0x74, 0x73, 0x22, 0xa8, 0x01, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d,
	0x12, 0x34, 0x0a, 0x0b, 0x41, 0x43, 0x43, 0x45, 0x4c, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x10,
	0x00, 0x1a, 0x23, 0xa2, 0xb4, 0xfa, 0xc2, 0x05, 0x1d, 0x62, 0x65, 0x61, 0x6d, 0x3a, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x3a, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x3a, 0x76, 0x31, 0x12, 0x38, 0x0a, 0x0d, 0x4d, 0x49, 0x4e, 0x5f, 0x52, 0x41,
	0x4d, 0x5f, 0x42, 0x59, 0x54, 0x45, 0x53, 0x10, 0x01, 0x1a, 0x25, 0xa2, 0xb4, 0xfa, 0xc2, 0x05,
	0x1f, 0x62, 0x65, 0x61, 0x6d, 0x3a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x3a,
	0x6d, 0x69, 0x6e, 0x5f, 0x72, 0x61, 0x6d, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x3a, 0x76, 0x31,
	0x12, 0x30, 0x0a, 0x09, 0x43, 0x50, 0x55, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x02, 0x1a,
	0x21, 0xa2, 0xb4, 0xfa, 0xc2, 0x05, 0x1b, 0x62, 0x65, 0x61, 0x6d, 0x3a, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x3a, 0x63, 0x70, 0x75, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x3a,
	0x76, 0x31, 0x32, 0x8f, 0x01, 0x0a, 0x11, 0x54, 0x65, 0x73, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x7a, 0x0a, 0x06, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x30, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e,
	0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68,
	0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x22, 0x00, 0x30, 0x01, 0x3a, 0x3f, 0x0a, 0x08, 0x62, 0x65, 0x61, 0x6d, 0x5f, 0x75, 0x72, 0x6e,
	0x12, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0xc4, 0xa6, 0xaf, 0x58, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x65,
	0x61, 0x6d, 0x55, 0x72, 0x6e, 0x3a, 0x49, 0x0a, 0x0d, 0x62, 0x65, 0x61, 0x6d, 0x5f, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xc5, 0xa6, 0xaf, 0x58, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x62, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74,
	0x42, 0x78, 0x0a, 0x21, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62,
	0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x2e, 0x76, 0x31, 0x42, 0x09, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x41, 0x70, 0x69,
	0x5a, 0x48, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x70, 0x61,
	0x63, 0x68, 0x65, 0x2f, 0x62, 0x65, 0x61, 0x6d, 0x2f, 0x73, 0x64, 0x6b, 0x73, 0x2f, 0x76, 0x32,
	0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x62, 0x65, 0x61, 0x6d, 0x2f, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x76, 0x31, 0x3b, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_enumTypes = make([]protoimpl.EnumInfo, 25)
var file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes = make([]protoimpl.MessageInfo, 105)
var file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_goTypes = []any{
	(BeamConstants_Constants)(0),                        // 0: org.apache.beam.model.pipeline.v1.BeamConstants.Constants
	(StandardPTransforms_Primitives)(0),                 // 1: org.apache.beam.model.pipeline.v1.StandardPTransforms.Primitives
	(StandardPTransforms_DeprecatedPrimitives)(0),       // 2: org.apache.beam.model.pipeline.v1.StandardPTransforms.DeprecatedPrimitives
	(StandardPTransforms_Composites)(0),                 // 3: org.apache.beam.model.pipeline.v1.StandardPTransforms.Composites
	(StandardPTransforms_CombineComponents)(0),          // 4: org.apache.beam.model.pipeline.v1.StandardPTransforms.CombineComponents
	(StandardPTransforms_SplittableParDoComponents)(0),  // 5: org.apache.beam.model.pipeline.v1.StandardPTransforms.SplittableParDoComponents
	(StandardPTransforms_GroupIntoBatchesComponents)(0), // 6: org.apache.beam.model.pipeline.v1.StandardPTransforms.GroupIntoBatchesComponents
	(StandardSideInputTypes_Enum)(0),                    // 7: org.apache.beam.model.pipeline.v1.StandardSideInputTypes.Enum
	(StandardUserStateTypes_Enum)(0),                    // 8: org.apache.beam.model.pipeline.v1.StandardUserStateTypes.Enum
	(IsBounded_Enum)(0),                                 // 9: org.apache.beam.model.pipeline.v1.IsBounded.Enum
	(StandardCoders_Enum)(0),                            // 10: org.apache.beam.model.pipeline.v1.StandardCoders.Enum
	(MergeStatus_Enum)(0),                               // 11: org.apache.beam.model.pipeline.v1.MergeStatus.Enum
	(AccumulationMode_Enum)(0),                          // 12: org.apache.beam.model.pipeline.v1.AccumulationMode.Enum
	(ClosingBehavior_Enum)(0),                           // 13: org.apache.beam.model.pipeline.v1.ClosingBehavior.Enum
	(OnTimeBehavior_Enum)(0),                            // 14: org.apache.beam.model.pipeline.v1.OnTimeBehavior.Enum
	(OutputTime_Enum)(0),                                // 15: org.apache.beam.model.pipeline.v1.OutputTime.Enum
	(TimeDomain_Enum)(0),                                // 16: org.apache.beam.model.pipeline.v1.TimeDomain.Enum
	(StandardArtifacts_Types)(0),                        // 17: org.apache.beam.model.pipeline.v1.StandardArtifacts.Types
	(StandardArtifacts_Roles)(0),                        // 18: org.apache.beam.model.pipeline.v1.StandardArtifacts.Roles
	(StandardEnvironments_Environments)(0),              // 19: org.apache.beam.model.pipeline.v1.StandardEnvironments.Environments
	(StandardProtocols_Enum)(0),                         // 20: org.apache.beam.model.pipeline.v1.StandardProtocols.Enum
	(StandardRunnerProtocols_Enum)(0),                   // 21: org.apache.beam.model.pipeline.v1.StandardRunnerProtocols.Enum
	(StandardRequirements_Enum)(0),                      // 22: org.apache.beam.model.pipeline.v1.StandardRequirements.Enum
	(StandardDisplayData_DisplayData)(0),                // 23: org.apache.beam.model.pipeline.v1.StandardDisplayData.DisplayData
	(StandardResourceHints_Enum)(0),                     // 24: org.apache.beam.model.pipeline.v1.StandardResourceHints.Enum
	(*BeamConstants)(nil),                               // 25: org.apache.beam.model.pipeline.v1.BeamConstants
	(*Components)(nil),                                  // 26: org.apache.beam.model.pipeline.v1.Components
	(*Pipeline)(nil),                                    // 27: org.apache.beam.model.pipeline.v1.Pipeline
	(*PTransform)(nil),                                  // 28: org.apache.beam.model.pipeline.v1.PTransform
	(*StandardPTransforms)(nil),                         // 29: org.apache.beam.model.pipeline.v1.StandardPTransforms
	(*StandardSideInputTypes)(nil),                      // 30: org.apache.beam.model.pipeline.v1.StandardSideInputTypes
	(*StandardUserStateTypes)(nil),                      // 31: org.apache.beam.model.pipeline.v1.StandardUserStateTypes
	(*PCollection)(nil),                                 // 32: org.apache.beam.model.pipeline.v1.PCollection
	(*ParDoPayload)(nil),                                // 33: org.apache.beam.model.pipeline.v1.ParDoPayload
	(*StateSpec)(nil),                                   // 34: org.apache.beam.model.pipeline.v1.StateSpec
	(*ReadModifyWriteStateSpec)(nil),                    // 35: org.apache.beam.model.pipeline.v1.ReadModifyWriteStateSpec
	(*BagStateSpec)(nil),                                // 36: org.apache.beam.model.pipeline.v1.BagStateSpec
	(*OrderedListStateSpec)(nil),                        // 37: org.apache.beam.model.pipeline.v1.OrderedListStateSpec
	(*CombiningStateSpec)(nil),                          // 38: org.apache.beam.model.pipeline.v1.CombiningStateSpec
	(*MapStateSpec)(nil),                                // 39: org.apache.beam.model.pipeline.v1.MapStateSpec
	(*MultimapStateSpec)(nil),                           // 40: org.apache.beam.model.pipeline.v1.MultimapStateSpec
	(*SetStateSpec)(nil),                                // 41: org.apache.beam.model.pipeline.v1.SetStateSpec
	(*TimerFamilySpec)(nil),                             // 42: org.apache.beam.model.pipeline.v1.TimerFamilySpec
	(*IsBounded)(nil),                                   // 43: org.apache.beam.model.pipeline.v1.IsBounded
	(*ReadPayload)(nil),                                 // 44: org.apache.beam.model.pipeline.v1.ReadPayload
	(*WindowIntoPayload)(nil),                           // 45: org.apache.beam.model.pipeline.v1.WindowIntoPayload
	(*CombinePayload)(nil),                              // 46: org.apache.beam.model.pipeline.v1.CombinePayload
	(*TestStreamPayload)(nil),                           // 47: org.apache.beam.model.pipeline.v1.TestStreamPayload
	(*EventsRequest)(nil),                               // 48: org.apache.beam.model.pipeline.v1.EventsRequest
	(*WriteFilesPayload)(nil),                           // 49: org.apache.beam.model.pipeline.v1.WriteFilesPayload
	(*PubSubReadPayload)(nil),                           // 50: org.apache.beam.model.pipeline.v1.PubSubReadPayload
	(*PubSubWritePayload)(nil),                          // 51: org.apache.beam.model.pipeline.v1.PubSubWritePayload
	(*GroupIntoBatchesPayload)(nil),                     // 52: org.apache.beam.model.pipeline.v1.GroupIntoBatchesPayload
	(*RedistributePayload)(nil),                         // 53: org.apache.beam.model.pipeline.v1.RedistributePayload
	(*Coder)(nil),                                       // 54: org.apache.beam.model.pipeline.v1.Coder
	(*StandardCoders)(nil),                              // 55: org.apache.beam.model.pipeline.v1.StandardCoders
	(*WindowingStrategy)(nil),                           // 56: org.apache.beam.model.pipeline.v1.WindowingStrategy
	(*MergeStatus)(nil),                                 // 57: org.apache.beam.model.pipeline.v1.MergeStatus
	(*AccumulationMode)(nil),                            // 58: org.apache.beam.model.pipeline.v1.AccumulationMode
	(*ClosingBehavior)(nil),                             // 59: org.apache.beam.model.pipeline.v1.ClosingBehavior
	(*OnTimeBehavior)(nil),                              // 60: org.apache.beam.model.pipeline.v1.OnTimeBehavior
	(*OutputTime)(nil),                                  // 61: org.apache.beam.model.pipeline.v1.OutputTime
	(*TimeDomain)(nil),                                  // 62: org.apache.beam.model.pipeline.v1.TimeDomain
	(*Trigger)(nil),                                     // 63: org.apache.beam.model.pipeline.v1.Trigger
	(*TimestampTransform)(nil),                          // 64: org.apache.beam.model.pipeline.v1.TimestampTransform
	(*SideInput)(nil),                                   // 65: org.apache.beam.model.pipeline.v1.SideInput
	(*StandardArtifacts)(nil),                           // 66: org.apache.beam.model.pipeline.v1.StandardArtifacts
	(*ArtifactFilePayload)(nil),                         // 67: org.apache.beam.model.pipeline.v1.ArtifactFilePayload
	(*ArtifactUrlPayload)(nil),                          // 68: org.apache.beam.model.pipeline.v1.ArtifactUrlPayload
	(*EmbeddedFilePayload)(nil),                         // 69: org.apache.beam.model.pipeline.v1.EmbeddedFilePayload
	(*PyPIPayload)(nil),                                 // 70: org.apache.beam.model.pipeline.v1.PyPIPayload
	(*MavenPayload)(nil),                                // 71: org.apache.beam.model.pipeline.v1.MavenPayload
	(*DeferredArtifactPayload)(nil),                     // 72: org.apache.beam.model.pipeline.v1.DeferredArtifactPayload
	(*ArtifactStagingToRolePayload)(nil),                // 73: org.apache.beam.model.pipeline.v1.ArtifactStagingToRolePayload
	(*ArtifactInformation)(nil),                         // 74: org.apache.beam.model.pipeline.v1.ArtifactInformation
	(*Environment)(nil),                                 // 75: org.apache.beam.model.pipeline.v1.Environment
	(*StandardEnvironments)(nil),                        // 76: org.apache.beam.model.pipeline.v1.StandardEnvironments
	(*DockerPayload)(nil),                               // 77: org.apache.beam.model.pipeline.v1.DockerPayload
	(*ProcessPayload)(nil),                              // 78: org.apache.beam.model.pipeline.v1.ProcessPayload
	(*ExternalPayload)(nil),                             // 79: org.apache.beam.model.pipeline.v1.ExternalPayload
	(*AnyOfEnvironmentPayload)(nil),                     // 80: org.apache.beam.model.pipeline.v1.AnyOfEnvironmentPayload
	(*StandardProtocols)(nil),                           // 81: org.apache.beam.model.pipeline.v1.StandardProtocols
	(*StandardRunnerProtocols)(nil),                     // 82: org.apache.beam.model.pipeline.v1.StandardRunnerProtocols
	(*StandardRequirements)(nil),                        // 83: org.apache.beam.model.pipeline.v1.StandardRequirements
	(*FunctionSpec)(nil),                                // 84: org.apache.beam.model.pipeline.v1.FunctionSpec
	(*StandardDisplayData)(nil),                         // 85: org.apache.beam.model.pipeline.v1.StandardDisplayData
	(*LabelledPayload)(nil),                             // 86: org.apache.beam.model.pipeline.v1.LabelledPayload
	(*DisplayData)(nil),                                 // 87: org.apache.beam.model.pipeline.v1.DisplayData
	(*MessageWithComponents)(nil),                       // 88: org.apache.beam.model.pipeline.v1.MessageWithComponents
	(*ExecutableStagePayload)(nil),                      // 89: org.apache.beam.model.pipeline.v1.ExecutableStagePayload
	(*StandardResourceHints)(nil),                       // 90: org.apache.beam.model.pipeline.v1.StandardResourceHints
	nil,                                                 // 91: org.apache.beam.model.pipeline.v1.Components.TransformsEntry
	nil,                                                 // 92: org.apache.beam.model.pipeline.v1.Components.PcollectionsEntry
	nil,                                                 // 93: org.apache.beam.model.pipeline.v1.Components.WindowingStrategiesEntry
	nil,                                                 // 94: org.apache.beam.model.pipeline.v1.Components.CodersEntry
	nil,                                                 // 95: org.apache.beam.model.pipeline.v1.Components.EnvironmentsEntry
	nil,                                                 // 96: org.apache.beam.model.pipeline.v1.PTransform.InputsEntry
	nil,                                                 // 97: org.apache.beam.model.pipeline.v1.PTransform.OutputsEntry
	nil,                                                 // 98: org.apache.beam.model.pipeline.v1.PTransform.AnnotationsEntry
	nil,                                                 // 99: org.apache.beam.model.pipeline.v1.ParDoPayload.SideInputsEntry
	nil,                                                 // 100: org.apache.beam.model.pipeline.v1.ParDoPayload.StateSpecsEntry
	nil,                                                 // 101: org.apache.beam.model.pipeline.v1.ParDoPayload.TimerFamilySpecsEntry
	(*TestStreamPayload_Event)(nil),                     // 102: org.apache.beam.model.pipeline.v1.TestStreamPayload.Event
	(*TestStreamPayload_TimestampedElement)(nil),        // 103: org.apache.beam.model.pipeline.v1.TestStreamPayload.TimestampedElement
	(*TestStreamPayload_Event_AdvanceWatermark)(nil),    // 104: org.apache.beam.model.pipeline.v1.TestStreamPayload.Event.AdvanceWatermark
	(*TestStreamPayload_Event_AdvanceProcessingTime)(nil), // 105: org.apache.beam.model.pipeline.v1.TestStreamPayload.Event.AdvanceProcessingTime
	(*TestStreamPayload_Event_AddElements)(nil),           // 106: org.apache.beam.model.pipeline.v1.TestStreamPayload.Event.AddElements
	nil,                                             // 107: org.apache.beam.model.pipeline.v1.WriteFilesPayload.SideInputsEntry
	(*Trigger_AfterAll)(nil),                        // 108: org.apache.beam.model.pipeline.v1.Trigger.AfterAll
	(*Trigger_AfterAny)(nil),                        // 109: org.apache.beam.model.pipeline.v1.Trigger.AfterAny
	(*Trigger_AfterEach)(nil),                       // 110: org.apache.beam.model.pipeline.v1.Trigger.AfterEach
	(*Trigger_AfterEndOfWindow)(nil),                // 111: org.apache.beam.model.pipeline.v1.Trigger.AfterEndOfWindow
	(*Trigger_AfterProcessingTime)(nil),             // 112: org.apache.beam.model.pipeline.v1.Trigger.AfterProcessingTime
	(*Trigger_AfterSynchronizedProcessingTime)(nil), // 113: org.apache.beam.model.pipeline.v1.Trigger.AfterSynchronizedProcessingTime
	(*Trigger_Default)(nil),                         // 114: org.apache.beam.model.pipeline.v1.Trigger.Default
	(*Trigger_ElementCount)(nil),                    // 115: org.apache.beam.model.pipeline.v1.Trigger.ElementCount
	(*Trigger_Never)(nil),                           // 116: org.apache.beam.model.pipeline.v1.Trigger.Never
	(*Trigger_Always)(nil),                          // 117: org.apache.beam.model.pipeline.v1.Trigger.Always
	(*Trigger_OrFinally)(nil),                       // 118: org.apache.beam.model.pipeline.v1.Trigger.OrFinally
	(*Trigger_Repeat)(nil),                          // 119: org.apache.beam.model.pipeline.v1.Trigger.Repeat
	(*TimestampTransform_Delay)(nil),                // 120: org.apache.beam.model.pipeline.v1.TimestampTransform.Delay
	(*TimestampTransform_AlignTo)(nil),              // 121: org.apache.beam.model.pipeline.v1.TimestampTransform.AlignTo
	nil,                                             // 122: org.apache.beam.model.pipeline.v1.Environment.ResourceHintsEntry
	nil,                                             // 123: org.apache.beam.model.pipeline.v1.ProcessPayload.EnvEntry
	nil,                                             // 124: org.apache.beam.model.pipeline.v1.ExternalPayload.ParamsEntry
	(*ExecutableStagePayload_SideInputId)(nil),      // 125: org.apache.beam.model.pipeline.v1.ExecutableStagePayload.SideInputId
	(*ExecutableStagePayload_UserStateId)(nil),      // 126: org.apache.beam.model.pipeline.v1.ExecutableStagePayload.UserStateId
	(*ExecutableStagePayload_TimerId)(nil),          // 127: org.apache.beam.model.pipeline.v1.ExecutableStagePayload.TimerId
	(*ExecutableStagePayload_TimerFamilyId)(nil),    // 128: org.apache.beam.model.pipeline.v1.ExecutableStagePayload.TimerFamilyId
	(*ExecutableStagePayload_WireCoderSetting)(nil), // 129: org.apache.beam.model.pipeline.v1.ExecutableStagePayload.WireCoderSetting
	(*ApiServiceDescriptor)(nil),                    // 130: org.apache.beam.model.pipeline.v1.ApiServiceDescriptor
	(*descriptorpb.EnumValueOptions)(nil),           // 131: google.protobuf.EnumValueOptions
}
var file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_depIdxs = []int32{
	91,  // 0: org.apache.beam.model.pipeline.v1.Components.transforms:type_name -> org.apache.beam.model.pipeline.v1.Components.TransformsEntry
	92,  // 1: org.apache.beam.model.pipeline.v1.Components.pcollections:type_name -> org.apache.beam.model.pipeline.v1.Components.PcollectionsEntry
	93,  // 2: org.apache.beam.model.pipeline.v1.Components.windowing_strategies:type_name -> org.apache.beam.model.pipeline.v1.Components.WindowingStrategiesEntry
	94,  // 3: org.apache.beam.model.pipeline.v1.Components.coders:type_name -> org.apache.beam.model.pipeline.v1.Components.CodersEntry
	95,  // 4: org.apache.beam.model.pipeline.v1.Components.environments:type_name -> org.apache.beam.model.pipeline.v1.Components.EnvironmentsEntry
	26,  // 5: org.apache.beam.model.pipeline.v1.Pipeline.components:type_name -> org.apache.beam.model.pipeline.v1.Components
	87,  // 6: org.apache.beam.model.pipeline.v1.Pipeline.display_data:type_name -> org.apache.beam.model.pipeline.v1.DisplayData
	84,  // 7: org.apache.beam.model.pipeline.v1.PTransform.spec:type_name -> org.apache.beam.model.pipeline.v1.FunctionSpec
	96,  // 8: org.apache.beam.model.pipeline.v1.PTransform.inputs:type_name -> org.apache.beam.model.pipeline.v1.PTransform.InputsEntry
	97,  // 9: org.apache.beam.model.pipeline.v1.PTransform.outputs:type_name -> org.apache.beam.model.pipeline.v1.PTransform.OutputsEntry
	87,  // 10: org.apache.beam.model.pipeline.v1.PTransform.display_data:type_name -> org.apache.beam.model.pipeline.v1.DisplayData
	98,  // 11: org.apache.beam.model.pipeline.v1.PTransform.annotations:type_name -> org.apache.beam.model.pipeline.v1.PTransform.AnnotationsEntry
	9,   // 12: org.apache.beam.model.pipeline.v1.PCollection.is_bounded:type_name -> org.apache.beam.model.pipeline.v1.IsBounded.Enum
	87,  // 13: org.apache.beam.model.pipeline.v1.PCollection.display_data:type_name -> org.apache.beam.model.pipeline.v1.DisplayData
	84,  // 14: org.apache.beam.model.pipeline.v1.ParDoPayload.do_fn:type_name -> org.apache.beam.model.pipeline.v1.FunctionSpec
	99,  // 15: org.apache.beam.model.pipeline.v1.ParDoPayload.side_inputs:type_name -> org.apache.beam.model.pipeline.v1.ParDoPayload.SideInputsEntry
	100, // 16: org.apache.beam.model.pipeline.v1.ParDoPayload.state_specs:type_name -> org.apache.beam.model.pipeline.v1.ParDoPayload.StateSpecsEntry
	101, // 17: org.apache.beam.model.pipeline.v1.ParDoPayload.timer_family_specs:type_name -> org.apache.beam.model.pipeline.v1.ParDoPayload.TimerFamilySpecsEntry
	35,  // 18: org.apache.beam.model.pipeline.v1.StateSpec.read_modify_write_spec:type_name -> org.apache.beam.model.pipeline.v1.ReadModifyWriteStateSpec
	36,  // 19: org.apache.beam.model.pipeline.v1.StateSpec.bag_spec:type_name -> org.apache.beam.model.pipeline.v1.BagStateSpec
	38,  // 20: org.apache.beam.model.pipeline.v1.StateSpec.combining_spec:type_name -> org.apache.beam.model.pipeline.v1.CombiningStateSpec
	39,  // 21: org.apache.beam.model.pipeline.v1.StateSpec.map_spec:type_name -> org.apache.beam.model.pipeline.v1.MapStateSpec
	41,  // 22: org.apache.beam.model.pipeline.v1.StateSpec.set_spec:type_name -> org.apache.beam.model.pipeline.v1.SetStateSpec
	37,  // 23: org.apache.beam.model.pipeline.v1.StateSpec.ordered_list_spec:type_name -> org.apache.beam.model.pipeline.v1.OrderedListStateSpec
	40,  // 24: org.apache.beam.model.pipeline.v1.StateSpec.multimap_spec:type_name -> org.apache.beam.model.pipeline.v1.MultimapStateSpec
	84,  // 25: org.apache.beam.model.pipeline.v1.StateSpec.protocol:type_name -> org.apache.beam.model.pipeline.v1.FunctionSpec
	84,  // 26: org.apache.beam.model.pipeline.v1.CombiningStateSpec.combine_fn:type_name -> org.apache.beam.model.pipeline.v1.FunctionSpec
	16,  // 27: org.apache.beam.model.pipeline.v1.TimerFamilySpec.time_domain:type_name -> org.apache.beam.model.pipeline.v1.TimeDomain.Enum
	84,  // 28: org.apache.beam.model.pipeline.v1.ReadPayload.source:type_name -> org.apache.beam.model.pipeline.v1.FunctionSpec
	9,   // 29: org.apache.beam.model.pipeline.v1.ReadPayload.is_bounded:type_name -> org.apache.beam.model.pipeline.v1.IsBounded.Enum
	84,  // 30: org.apache.beam.model.pipeline.v1.WindowIntoPayload.window_fn:type_name -> org.apache.beam.model.pipeline.v1.FunctionSpec
	84,  // 31: org.apache.beam.model.pipeline.v1.CombinePayload.combine_fn:type_name -> org.apache.beam.model.pipeline.v1.FunctionSpec
	102, // 32: org.apache.beam.model.pipeline.v1.TestStreamPayload.events:type_name -> org.apache.beam.model.pipeline.v1.TestStreamPayload.Event
	130, // 33: org.apache.beam.model.pipeline.v1.TestStreamPayload.endpoint:type_name -> org.apache.beam.model.pipeline.v1.ApiServiceDescriptor
	84,  // 34: org.apache.beam.model.pipeline.v1.WriteFilesPayload.sink:type_name -> org.apache.beam.model.pipeline.v1.FunctionSpec
	84,  // 35: org.apache.beam.model.pipeline.v1.WriteFilesPayload.format_function:type_name -> org.apache.beam.model.pipeline.v1.FunctionSpec
	107, // 36: org.apache.beam.model.pipeline.v1.WriteFilesPayload.side_inputs:type_name -> org.apache.beam.model.pipeline.v1.WriteFilesPayload.SideInputsEntry
	84,  // 37: org.apache.beam.model.pipeline.v1.Coder.spec:type_name -> org.apache.beam.model.pipeline.v1.FunctionSpec
	84,  // 38: org.apache.beam.model.pipeline.v1.WindowingStrategy.window_fn:type_name -> org.apache.beam.model.pipeline.v1.FunctionSpec
	11,  // 39: org.apache.beam.model.pipeline.v1.WindowingStrategy.merge_status:type_name -> org.apache.beam.model.pipeline.v1.MergeStatus.Enum
	63,  // 40: org.apache.beam.model.pipeline.v1.WindowingStrategy.trigger:type_name -> org.apache.beam.model.pipeline.v1.Trigger
	12,  // 41: org.apache.beam.model.pipeline.v1.WindowingStrategy.accumulation_mode:type_name -> org.apache.beam.model.pipeline.v1.AccumulationMode.Enum
	15,  // 42: org.apache.beam.model.pipeline.v1.WindowingStrategy.output_time:type_name -> org.apache.beam.model.pipeline.v1.OutputTime.Enum
	13,  // 43: org.apache.beam.model.pipeline.v1.WindowingStrategy.closing_behavior:type_name -> org.apache.beam.model.pipeline.v1.ClosingBehavior.Enum
	14,  // 44: org.apache.beam.model.pipeline.v1.WindowingStrategy.on_time_behavior:type_name -> org.apache.beam.model.pipeline.v1.OnTimeBehavior.Enum
	108, // 45: org.apache.beam.model.pipeline.v1.Trigger.after_all:type_name -> org.apache.beam.model.pipeline.v1.Trigger.AfterAll
	109, // 46: org.apache.beam.model.pipeline.v1.Trigger.after_any:type_name -> org.apache.beam.model.pipeline.v1.Trigger.AfterAny
	110, // 47: org.apache.beam.model.pipeline.v1.Trigger.after_each:type_name -> org.apache.beam.model.pipeline.v1.Trigger.AfterEach
	111, // 48: org.apache.beam.model.pipeline.v1.Trigger.after_end_of_window:type_name -> org.apache.beam.model.pipeline.v1.Trigger.AfterEndOfWindow
	112, // 49: org.apache.beam.model.pipeline.v1.Trigger.after_processing_time:type_name -> org.apache.beam.model.pipeline.v1.Trigger.AfterProcessingTime
	113, // 50: org.apache.beam.model.pipeline.v1.Trigger.after_synchronized_processing_time:type_name -> org.apache.beam.model.pipeline.v1.Trigger.AfterSynchronizedProcessingTime
	117, // 51: org.apache.beam.model.pipeline.v1.Trigger.always:type_name -> org.apache.beam.model.pipeline.v1.Trigger.Always
	114, // 52: org.apache.beam.model.pipeline.v1.Trigger.default:type_name -> org.apache.beam.model.pipeline.v1.Trigger.Default
	115, // 53: org.apache.beam.model.pipeline.v1.Trigger.element_count:type_name -> org.apache.beam.model.pipeline.v1.Trigger.ElementCount
	116, // 54: org.apache.beam.model.pipeline.v1.Trigger.never:type_name -> org.apache.beam.model.pipeline.v1.Trigger.Never
	118, // 55: org.apache.beam.model.pipeline.v1.Trigger.or_finally:type_name -> org.apache.beam.model.pipeline.v1.Trigger.OrFinally
	119, // 56: org.apache.beam.model.pipeline.v1.Trigger.repeat:type_name -> org.apache.beam.model.pipeline.v1.Trigger.Repeat
	120, // 57: org.apache.beam.model.pipeline.v1.TimestampTransform.delay:type_name -> org.apache.beam.model.pipeline.v1.TimestampTransform.Delay
	121, // 58: org.apache.beam.model.pipeline.v1.TimestampTransform.align_to:type_name -> org.apache.beam.model.pipeline.v1.TimestampTransform.AlignTo
	84,  // 59: org.apache.beam.model.pipeline.v1.SideInput.access_pattern:type_name -> org.apache.beam.model.pipeline.v1.FunctionSpec
	84,  // 60: org.apache.beam.model.pipeline.v1.SideInput.view_fn:type_name -> org.apache.beam.model.pipeline.v1.FunctionSpec
	84,  // 61: org.apache.beam.model.pipeline.v1.SideInput.window_mapping_fn:type_name -> org.apache.beam.model.pipeline.v1.FunctionSpec
	87,  // 62: org.apache.beam.model.pipeline.v1.Environment.display_data:type_name -> org.apache.beam.model.pipeline.v1.DisplayData
	74,  // 63: org.apache.beam.model.pipeline.v1.Environment.dependencies:type_name -> org.apache.beam.model.pipeline.v1.ArtifactInformation
	122, // 64: org.apache.beam.model.pipeline.v1.Environment.resource_hints:type_name -> org.apache.beam.model.pipeline.v1.Environment.ResourceHintsEntry
	123, // 65: org.apache.beam.model.pipeline.v1.ProcessPayload.env:type_name -> org.apache.beam.model.pipeline.v1.ProcessPayload.EnvEntry
	130, // 66: org.apache.beam.model.pipeline.v1.ExternalPayload.endpoint:type_name -> org.apache.beam.model.pipeline.v1.ApiServiceDescriptor
	124, // 67: org.apache.beam.model.pipeline.v1.ExternalPayload.params:type_name -> org.apache.beam.model.pipeline.v1.ExternalPayload.ParamsEntry
	75,  // 68: org.apache.beam.model.pipeline.v1.AnyOfEnvironmentPayload.environments:type_name -> org.apache.beam.model.pipeline.v1.Environment
	26,  // 69: org.apache.beam.model.pipeline.v1.MessageWithComponents.components:type_name -> org.apache.beam.model.pipeline.v1.Components
	54,  // 70: org.apache.beam.model.pipeline.v1.MessageWithComponents.coder:type_name -> org.apache.beam.model.pipeline.v1.Coder
	46,  // 71: org.apache.beam.model.pipeline.v1.MessageWithComponents.combine_payload:type_name -> org.apache.beam.model.pipeline.v1.CombinePayload
	84,  // 72: org.apache.beam.model.pipeline.v1.MessageWithComponents.function_spec:type_name -> org.apache.beam.model.pipeline.v1.FunctionSpec
	33,  // 73: org.apache.beam.model.pipeline.v1.MessageWithComponents.par_do_payload:type_name -> org.apache.beam.model.pipeline.v1.ParDoPayload
	28,  // 74: org.apache.beam.model.pipeline.v1.MessageWithComponents.ptransform:type_name -> org.apache.beam.model.pipeline.v1.PTransform
	32,  // 75: org.apache.beam.model.pipeline.v1.MessageWithComponents.pcollection:type_name -> org.apache.beam.model.pipeline.v1.PCollection
	44,  // 76: org.apache.beam.model.pipeline.v1.MessageWithComponents.read_payload:type_name -> org.apache.beam.model.pipeline.v1.ReadPayload
	65,  // 77: org.apache.beam.model.pipeline.v1.MessageWithComponents.side_input:type_name -> org.apache.beam.model.pipeline.v1.SideInput
	45,  // 78: org.apache.beam.model.pipeline.v1.MessageWithComponents.window_into_payload:type_name -> org.apache.beam.model.pipeline.v1.WindowIntoPayload
	56,  // 79: org.apache.beam.model.pipeline.v1.MessageWithComponents.windowing_strategy:type_name -> org.apache.beam.model.pipeline.v1.WindowingStrategy
	75,  // 80: org.apache.beam.model.pipeline.v1.ExecutableStagePayload.environment:type_name -> org.apache.beam.model.pipeline.v1.Environment
	129, // 81: org.apache.beam.model.pipeline.v1.ExecutableStagePayload.wire_coder_settings:type_name -> org.apache.beam.model.pipeline.v1.ExecutableStagePayload.WireCoderSetting
	125, // 82: org.apache.beam.model.pipeline.v1.ExecutableStagePayload.side_inputs:type_name -> org.apache.beam.model.pipeline.v1.ExecutableStagePayload.SideInputId
	26,  // 83: org.apache.beam.model.pipeline.v1.ExecutableStagePayload.components:type_name -> org.apache.beam.model.pipeline.v1.Components
	126, // 84: org.apache.beam.model.pipeline.v1.ExecutableStagePayload.user_states:type_name -> org.apache.beam.model.pipeline.v1.ExecutableStagePayload.UserStateId
	127, // 85: org.apache.beam.model.pipeline.v1.ExecutableStagePayload.timers:type_name -> org.apache.beam.model.pipeline.v1.ExecutableStagePayload.TimerId
	128, // 86: org.apache.beam.model.pipeline.v1.ExecutableStagePayload.timerFamilies:type_name -> org.apache.beam.model.pipeline.v1.ExecutableStagePayload.TimerFamilyId
	28,  // 87: org.apache.beam.model.pipeline.v1.Components.TransformsEntry.value:type_name -> org.apache.beam.model.pipeline.v1.PTransform
	32,  // 88: org.apache.beam.model.pipeline.v1.Components.PcollectionsEntry.value:type_name -> org.apache.beam.model.pipeline.v1.PCollection
	56,  // 89: org.apache.beam.model.pipeline.v1.Components.WindowingStrategiesEntry.value:type_name -> org.apache.beam.model.pipeline.v1.WindowingStrategy
	54,  // 90: org.apache.beam.model.pipeline.v1.Components.CodersEntry.value:type_name -> org.apache.beam.model.pipeline.v1.Coder
	75,  // 91: org.apache.beam.model.pipeline.v1.Components.EnvironmentsEntry.value:type_name -> org.apache.beam.model.pipeline.v1.Environment
	65,  // 92: org.apache.beam.model.pipeline.v1.ParDoPayload.SideInputsEntry.value:type_name -> org.apache.beam.model.pipeline.v1.SideInput
	34,  // 93: org.apache.beam.model.pipeline.v1.ParDoPayload.StateSpecsEntry.value:type_name -> org.apache.beam.model.pipeline.v1.StateSpec
	42,  // 94: org.apache.beam.model.pipeline.v1.ParDoPayload.TimerFamilySpecsEntry.value:type_name -> org.apache.beam.model.pipeline.v1.TimerFamilySpec
	104, // 95: org.apache.beam.model.pipeline.v1.TestStreamPayload.Event.watermark_event:type_name -> org.apache.beam.model.pipeline.v1.TestStreamPayload.Event.AdvanceWatermark
	105, // 96: org.apache.beam.model.pipeline.v1.TestStreamPayload.Event.processing_time_event:type_name -> org.apache.beam.model.pipeline.v1.TestStreamPayload.Event.AdvanceProcessingTime
	106, // 97: org.apache.beam.model.pipeline.v1.TestStreamPayload.Event.element_event:type_name -> org.apache.beam.model.pipeline.v1.TestStreamPayload.Event.AddElements
	103, // 98: org.apache.beam.model.pipeline.v1.TestStreamPayload.Event.AddElements.elements:type_name -> org.apache.beam.model.pipeline.v1.TestStreamPayload.TimestampedElement
	65,  // 99: org.apache.beam.model.pipeline.v1.WriteFilesPayload.SideInputsEntry.value:type_name -> org.apache.beam.model.pipeline.v1.SideInput
	63,  // 100: org.apache.beam.model.pipeline.v1.Trigger.AfterAll.subtriggers:type_name -> org.apache.beam.model.pipeline.v1.Trigger
	63,  // 101: org.apache.beam.model.pipeline.v1.Trigger.AfterAny.subtriggers:type_name -> org.apache.beam.model.pipeline.v1.Trigger
	63,  // 102: org.apache.beam.model.pipeline.v1.Trigger.AfterEach.subtriggers:type_name -> org.apache.beam.model.pipeline.v1.Trigger
	63,  // 103: org.apache.beam.model.pipeline.v1.Trigger.AfterEndOfWindow.early_firings:type_name -> org.apache.beam.model.pipeline.v1.Trigger
	63,  // 104: org.apache.beam.model.pipeline.v1.Trigger.AfterEndOfWindow.late_firings:type_name -> org.apache.beam.model.pipeline.v1.Trigger
	64,  // 105: org.apache.beam.model.pipeline.v1.Trigger.AfterProcessingTime.timestamp_transforms:type_name -> org.apache.beam.model.pipeline.v1.TimestampTransform
	63,  // 106: org.apache.beam.model.pipeline.v1.Trigger.OrFinally.main:type_name -> org.apache.beam.model.pipeline.v1.Trigger
	63,  // 107: org.apache.beam.model.pipeline.v1.Trigger.OrFinally.finally:type_name -> org.apache.beam.model.pipeline.v1.Trigger
	63,  // 108: org.apache.beam.model.pipeline.v1.Trigger.Repeat.subtrigger:type_name -> org.apache.beam.model.pipeline.v1.Trigger
	127, // 109: org.apache.beam.model.pipeline.v1.ExecutableStagePayload.WireCoderSetting.timer:type_name -> org.apache.beam.model.pipeline.v1.ExecutableStagePayload.TimerId
	131, // 110: org.apache.beam.model.pipeline.v1.beam_urn:extendee -> google.protobuf.EnumValueOptions
	131, // 111: org.apache.beam.model.pipeline.v1.beam_constant:extendee -> google.protobuf.EnumValueOptions
	48,  // 112: org.apache.beam.model.pipeline.v1.TestStreamService.Events:input_type -> org.apache.beam.model.pipeline.v1.EventsRequest
	102, // 113: org.apache.beam.model.pipeline.v1.TestStreamService.Events:output_type -> org.apache.beam.model.pipeline.v1.TestStreamPayload.Event
	113, // [113:114] is the sub-list for method output_type
	112, // [112:113] is the sub-list for method input_type
	112, // [112:112] is the sub-list for extension type_name
	110, // [110:112] is the sub-list for extension extendee
	0,   // [0:110] is the sub-list for field type_name
}

func init() { file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_init() }
func file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_init() {
	if File_org_apache_beam_model_pipeline_v1_beam_runner_api_proto != nil {
		return
	}
	file_org_apache_beam_model_pipeline_v1_endpoints_proto_init()
	file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[9].OneofWrappers = []any{
		(*stateSpec_ReadModifyWriteSpec)(nil),
		(*stateSpec_BagSpec)(nil),
		(*stateSpec_CombiningSpec)(nil),
		(*stateSpec_MapSpec)(nil),
		(*stateSpec_SetSpec)(nil),
		(*stateSpec_OrderedListSpec)(nil),
		(*stateSpec_MultimapSpec)(nil),
	}
	file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[38].OneofWrappers = []any{
		(*trigger_AfterAll_)(nil),
		(*trigger_AfterAny_)(nil),
		(*trigger_AfterEach_)(nil),
		(*trigger_AfterEndOfWindow_)(nil),
		(*trigger_AfterProcessingTime_)(nil),
		(*trigger_AfterSynchronizedProcessingTime_)(nil),
		(*trigger_Always_)(nil),
		(*trigger_Default_)(nil),
		(*trigger_ElementCount_)(nil),
		(*trigger_Never_)(nil),
		(*trigger_OrFinally_)(nil),
		(*trigger_Repeat_)(nil),
	}
	file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[39].OneofWrappers = []any{
		(*timestampTransform_Delay_)(nil),
		(*timestampTransform_AlignTo_)(nil),
	}
	file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[61].OneofWrappers = []any{
		(*labelledPayload_StringValue)(nil),
		(*labelledPayload_BoolValue)(nil),
		(*labelledPayload_DoubleValue)(nil),
		(*labelledPayload_IntValue)(nil),
	}
	file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[63].OneofWrappers = []any{
		(*messageWithComponents_Coder)(nil),
		(*messageWithComponents_CombinePayload)(nil),
		(*messageWithComponents_FunctionSpec)(nil),
		(*messageWithComponents_ParDoPayload)(nil),
		(*messageWithComponents_Ptransform)(nil),
		(*messageWithComponents_Pcollection)(nil),
		(*messageWithComponents_ReadPayload)(nil),
		(*messageWithComponents_SideInput)(nil),
		(*messageWithComponents_WindowIntoPayload)(nil),
		(*messageWithComponents_WindowingStrategy)(nil),
	}
	file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[77].OneofWrappers = []any{
		(*testStreamPayload_Event_WatermarkEvent)(nil),
		(*testStreamPayload_Event_ProcessingTimeEvent)(nil),
		(*testStreamPayload_Event_ElementEvent)(nil),
	}
	file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes[104].OneofWrappers = []any{
		(*executableStagePayload_WireCoderSetting_InputOrOutputId)(nil),
		(*executableStagePayload_WireCoderSetting_Timer)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_rawDesc,
			NumEnums:      25,
			NumMessages:   105,
			NumExtensions: 2,
			NumServices:   1,
		},
		GoTypes:           file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_goTypes,
		DependencyIndexes: file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_depIdxs,
		EnumInfos:         file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_enumTypes,
		MessageInfos:      file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_msgTypes,
		ExtensionInfos:    file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_extTypes,
	}.Build()
	File_org_apache_beam_model_pipeline_v1_beam_runner_api_proto = out.File
	file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_rawDesc = nil
	file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_goTypes = nil
	file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_depIdxs = nil
}
