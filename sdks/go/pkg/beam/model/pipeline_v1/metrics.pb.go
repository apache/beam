// Code generated by protoc-gen-go. DO NOT EDIT.
// source: metrics.proto

package pipeline_v1

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	descriptor "github.com/golang/protobuf/protoc-gen-go/descriptor"
	_ "github.com/golang/protobuf/ptypes/timestamp"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type MonitoringInfoSpecs_Enum int32

const (
	// Represents an integer counter where values are summed across bundles.
	MonitoringInfoSpecs_USER_SUM_INT64 MonitoringInfoSpecs_Enum = 0
	// Represents a double counter where values are summed across bundles.
	MonitoringInfoSpecs_USER_SUM_DOUBLE MonitoringInfoSpecs_Enum = 1
	// Represents a distribution of an integer value where:
	//   - count: represents the number of values seen across all bundles
	//   - sum: represents the total of the value across all bundles
	//   - min: represents the smallest value seen across all bundles
	//   - max: represents the largest value seen across all bundles
	MonitoringInfoSpecs_USER_DISTRIBUTION_INT64 MonitoringInfoSpecs_Enum = 2
	// Represents a distribution of a double value where:
	//   - count: represents the number of values seen across all bundles
	//   - sum: represents the total of the value across all bundles
	//   - min: represents the smallest value seen across all bundles
	//   - max: represents the largest value seen across all bundles
	MonitoringInfoSpecs_USER_DISTRIBUTION_DOUBLE MonitoringInfoSpecs_Enum = 3
	// Represents the latest seen integer value. The timestamp is used to
	// provide an "ordering" over multiple values to determine which is the
	// latest.
	MonitoringInfoSpecs_USER_LATEST_INT64 MonitoringInfoSpecs_Enum = 4
	// Represents the latest seen double value. The timestamp is used to
	// provide an "ordering" over multiple values to determine which is the
	// latest.
	MonitoringInfoSpecs_USER_LATEST_DOUBLE MonitoringInfoSpecs_Enum = 5
	// Represents the largest set of integer values seen across bundles.
	MonitoringInfoSpecs_USER_TOP_N_INT64 MonitoringInfoSpecs_Enum = 6
	// Represents the largest set of double values seen across bundles.
	MonitoringInfoSpecs_USER_TOP_N_DOUBLE MonitoringInfoSpecs_Enum = 7
	// Represents the smallest set of integer values seen across bundles.
	MonitoringInfoSpecs_USER_BOTTOM_N_INT64 MonitoringInfoSpecs_Enum = 8
	// Represents the smallest set of double values seen across bundles.
	MonitoringInfoSpecs_USER_BOTTOM_N_DOUBLE MonitoringInfoSpecs_Enum = 9
	MonitoringInfoSpecs_ELEMENT_COUNT        MonitoringInfoSpecs_Enum = 10
	MonitoringInfoSpecs_SAMPLED_BYTE_SIZE    MonitoringInfoSpecs_Enum = 11
	MonitoringInfoSpecs_START_BUNDLE_MSECS   MonitoringInfoSpecs_Enum = 12
	MonitoringInfoSpecs_PROCESS_BUNDLE_MSECS MonitoringInfoSpecs_Enum = 13
	MonitoringInfoSpecs_FINISH_BUNDLE_MSECS  MonitoringInfoSpecs_Enum = 14
	MonitoringInfoSpecs_TOTAL_MSECS          MonitoringInfoSpecs_Enum = 15
	// All values reported across all beam:metric:ptransform_progress:.*:v1
	// metrics are of the same magnitude.
	MonitoringInfoSpecs_WORK_REMAINING MonitoringInfoSpecs_Enum = 16
	// All values reported across all beam:metric:ptransform_progress:.*:v1
	// metrics are of the same magnitude.
	MonitoringInfoSpecs_WORK_COMPLETED MonitoringInfoSpecs_Enum = 17
)

var MonitoringInfoSpecs_Enum_name = map[int32]string{
	0:  "USER_SUM_INT64",
	1:  "USER_SUM_DOUBLE",
	2:  "USER_DISTRIBUTION_INT64",
	3:  "USER_DISTRIBUTION_DOUBLE",
	4:  "USER_LATEST_INT64",
	5:  "USER_LATEST_DOUBLE",
	6:  "USER_TOP_N_INT64",
	7:  "USER_TOP_N_DOUBLE",
	8:  "USER_BOTTOM_N_INT64",
	9:  "USER_BOTTOM_N_DOUBLE",
	10: "ELEMENT_COUNT",
	11: "SAMPLED_BYTE_SIZE",
	12: "START_BUNDLE_MSECS",
	13: "PROCESS_BUNDLE_MSECS",
	14: "FINISH_BUNDLE_MSECS",
	15: "TOTAL_MSECS",
	16: "WORK_REMAINING",
	17: "WORK_COMPLETED",
}

var MonitoringInfoSpecs_Enum_value = map[string]int32{
	"USER_SUM_INT64":           0,
	"USER_SUM_DOUBLE":          1,
	"USER_DISTRIBUTION_INT64":  2,
	"USER_DISTRIBUTION_DOUBLE": 3,
	"USER_LATEST_INT64":        4,
	"USER_LATEST_DOUBLE":       5,
	"USER_TOP_N_INT64":         6,
	"USER_TOP_N_DOUBLE":        7,
	"USER_BOTTOM_N_INT64":      8,
	"USER_BOTTOM_N_DOUBLE":     9,
	"ELEMENT_COUNT":            10,
	"SAMPLED_BYTE_SIZE":        11,
	"START_BUNDLE_MSECS":       12,
	"PROCESS_BUNDLE_MSECS":     13,
	"FINISH_BUNDLE_MSECS":      14,
	"TOTAL_MSECS":              15,
	"WORK_REMAINING":           16,
	"WORK_COMPLETED":           17,
}

func (x MonitoringInfoSpecs_Enum) String() string {
	return proto.EnumName(MonitoringInfoSpecs_Enum_name, int32(x))
}

func (MonitoringInfoSpecs_Enum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6039342a2ba47b72, []int{2, 0}
}

type MonitoringInfo_MonitoringInfoLabels int32

const (
	// The values used for TRANSFORM, PCOLLECTION, WINDOWING_STRATEGY
	// CODER, ENVIRONMENT, etc. must always match the keys used to
	// refer to them. For actively processed bundles, these should match the
	// values within the ProcessBundleDescriptor. For job management APIs,
	// these should match values within the original pipeline representation.
	MonitoringInfo_TRANSFORM          MonitoringInfo_MonitoringInfoLabels = 0
	MonitoringInfo_PCOLLECTION        MonitoringInfo_MonitoringInfoLabels = 1
	MonitoringInfo_WINDOWING_STRATEGY MonitoringInfo_MonitoringInfoLabels = 2
	MonitoringInfo_CODER              MonitoringInfo_MonitoringInfoLabels = 3
	MonitoringInfo_ENVIRONMENT        MonitoringInfo_MonitoringInfoLabels = 4
	MonitoringInfo_NAMESPACE          MonitoringInfo_MonitoringInfoLabels = 5
	MonitoringInfo_NAME               MonitoringInfo_MonitoringInfoLabels = 6
)

var MonitoringInfo_MonitoringInfoLabels_name = map[int32]string{
	0: "TRANSFORM",
	1: "PCOLLECTION",
	2: "WINDOWING_STRATEGY",
	3: "CODER",
	4: "ENVIRONMENT",
	5: "NAMESPACE",
	6: "NAME",
}

var MonitoringInfo_MonitoringInfoLabels_value = map[string]int32{
	"TRANSFORM":          0,
	"PCOLLECTION":        1,
	"WINDOWING_STRATEGY": 2,
	"CODER":              3,
	"ENVIRONMENT":        4,
	"NAMESPACE":          5,
	"NAME":               6,
}

func (x MonitoringInfo_MonitoringInfoLabels) String() string {
	return proto.EnumName(MonitoringInfo_MonitoringInfoLabels_name, int32(x))
}

func (MonitoringInfo_MonitoringInfoLabels) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6039342a2ba47b72, []int{4, 0}
}

type MonitoringInfoTypeUrns_Enum int32

const (
	// Represents an integer counter where values are summed across bundles.
	//
	// Encoding: <value>
	//   - value: beam:coder:varint:v1
	MonitoringInfoTypeUrns_SUM_INT64_TYPE MonitoringInfoTypeUrns_Enum = 0
	// Represents a double counter where values are summed across bundles.
	//
	// Encoding: <value>
	//   value: beam:coder:double:v1
	MonitoringInfoTypeUrns_SUM_DOUBLE_TYPE MonitoringInfoTypeUrns_Enum = 1
	// Represents a distribution of an integer value where:
	//   - count: represents the number of values seen across all bundles
	//   - sum: represents the total of the value across all bundles
	//   - min: represents the smallest value seen across all bundles
	//   - max: represents the largest value seen across all bundles
	//
	// Encoding: <count><sum><min><max>
	//   - count: beam:coder:varint:v1
	//   - sum:   beam:coder:varint:v1
	//   - min:   beam:coder:varint:v1
	//   - max:   beam:coder:varint:v1
	MonitoringInfoTypeUrns_DISTRIBUTION_INT64_TYPE MonitoringInfoTypeUrns_Enum = 2
	// Represents a distribution of a double value where:
	//   - count: represents the number of values seen across all bundles
	//   - sum: represents the total of the value across all bundles
	//   - min: represents the smallest value seen across all bundles
	//   - max: represents the largest value seen across all bundles
	//
	// Encoding: <count><sum><min><max>
	//   - count: beam:coder:varint:v1
	//   - sum:   beam:coder:double:v1
	//   - min:   beam:coder:double:v1
	//   - max:   beam:coder:double:v1
	MonitoringInfoTypeUrns_DISTRIBUTION_DOUBLE_TYPE MonitoringInfoTypeUrns_Enum = 3
	// Represents the latest seen integer value. The timestamp is used to
	// provide an "ordering" over multiple values to determine which is the
	// latest.
	//
	// Encoding: <timestamp><value>
	//   - timestamp: beam:coder:varint:v1     (milliseconds since epoch)
	//   - value:     beam:coder:varint:v1
	MonitoringInfoTypeUrns_LATEST_INT64_TYPE MonitoringInfoTypeUrns_Enum = 4
	// Represents the latest seen double value. The timestamp is used to
	// provide an "ordering" over multiple values to determine which is the
	// latest.
	//
	// Encoding: <timestamp><value>
	//   - timestamp: beam:coder:varint:v1     (milliseconds since epoch)
	//   - value:     beam:coder:double:v1
	MonitoringInfoTypeUrns_LATEST_DOUBLE_TYPE MonitoringInfoTypeUrns_Enum = 5
	// Represents the largest set of integer values seen across bundles.
	//
	// Encoding: <iter><value1><value2>...<valueN></iter>
	//   - iter:   beam:coder:iterable:v1
	//   - valueX: beam:coder:varint:v1
	MonitoringInfoTypeUrns_TOP_N_INT64_TYPE MonitoringInfoTypeUrns_Enum = 6
	// Represents the largest set of double values seen across bundles.
	//
	// Encoding: <iter><value1><value2>...<valueN></iter>
	//   - iter:   beam:coder:iterable:v1
	//   - valueX: beam:coder<beam:coder:double:v1
	MonitoringInfoTypeUrns_TOP_N_DOUBLE_TYPE MonitoringInfoTypeUrns_Enum = 7
	// Represents the smallest set of integer values seen across bundles.
	//
	// Encoding: <iter><value1><value2>...<valueN></iter>
	//   - iter:   beam:coder:iterable:v1
	//   - valueX: beam:coder:varint:v1
	MonitoringInfoTypeUrns_BOTTOM_N_INT64_TYPE MonitoringInfoTypeUrns_Enum = 8
	// Represents the smallest set of double values seen across bundles.
	//
	// Encoding: <iter><value1><value2>...<valueN></iter>
	//   - iter:   beam:coder:iterable:v1
	//   - valueX: beam:coder:double:v1
	MonitoringInfoTypeUrns_BOTTOM_N_DOUBLE_TYPE MonitoringInfoTypeUrns_Enum = 9
	// Encoding: <iter><value1><value2>...<valueN></iter>
	//   - iter:   beam:coder:iterable:v1
	//   - valueX: beam:coder:double:v1
	MonitoringInfoTypeUrns_PROGRESS_TYPE MonitoringInfoTypeUrns_Enum = 10
)

var MonitoringInfoTypeUrns_Enum_name = map[int32]string{
	0:  "SUM_INT64_TYPE",
	1:  "SUM_DOUBLE_TYPE",
	2:  "DISTRIBUTION_INT64_TYPE",
	3:  "DISTRIBUTION_DOUBLE_TYPE",
	4:  "LATEST_INT64_TYPE",
	5:  "LATEST_DOUBLE_TYPE",
	6:  "TOP_N_INT64_TYPE",
	7:  "TOP_N_DOUBLE_TYPE",
	8:  "BOTTOM_N_INT64_TYPE",
	9:  "BOTTOM_N_DOUBLE_TYPE",
	10: "PROGRESS_TYPE",
}

var MonitoringInfoTypeUrns_Enum_value = map[string]int32{
	"SUM_INT64_TYPE":           0,
	"SUM_DOUBLE_TYPE":          1,
	"DISTRIBUTION_INT64_TYPE":  2,
	"DISTRIBUTION_DOUBLE_TYPE": 3,
	"LATEST_INT64_TYPE":        4,
	"LATEST_DOUBLE_TYPE":       5,
	"TOP_N_INT64_TYPE":         6,
	"TOP_N_DOUBLE_TYPE":        7,
	"BOTTOM_N_INT64_TYPE":      8,
	"BOTTOM_N_DOUBLE_TYPE":     9,
	"PROGRESS_TYPE":            10,
}

func (x MonitoringInfoTypeUrns_Enum) String() string {
	return proto.EnumName(MonitoringInfoTypeUrns_Enum_name, int32(x))
}

func (MonitoringInfoTypeUrns_Enum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6039342a2ba47b72, []int{5, 0}
}

// A specification for describing a well known MonitoringInfo.
//
// All specifications are uniquely identified by the urn.
type MonitoringInfoSpec struct {
	// Defines the semantic meaning of the metric or monitored state.
	//
	// See MonitoringInfoSpecs.Enum for the set of well known metrics/monitored
	// state.
	Urn string `protobuf:"bytes,1,opt,name=urn,proto3" json:"urn,omitempty"`
	// Defines the required encoding and aggregation method for the payload.
	//
	// See MonitoringInfoTypeUrns.Enum for the set of well known types.
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	// The list of required labels for the specified urn and type.
	RequiredLabels []string `protobuf:"bytes,3,rep,name=required_labels,json=requiredLabels,proto3" json:"required_labels,omitempty"`
	// Extra non functional parts of the spec for descriptive purposes.
	// i.e. description, units, etc.
	Annotations          []*Annotation `protobuf:"bytes,4,rep,name=annotations,proto3" json:"annotations,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *MonitoringInfoSpec) Reset()         { *m = MonitoringInfoSpec{} }
func (m *MonitoringInfoSpec) String() string { return proto.CompactTextString(m) }
func (*MonitoringInfoSpec) ProtoMessage()    {}
func (*MonitoringInfoSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_6039342a2ba47b72, []int{0}
}

func (m *MonitoringInfoSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MonitoringInfoSpec.Unmarshal(m, b)
}
func (m *MonitoringInfoSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MonitoringInfoSpec.Marshal(b, m, deterministic)
}
func (m *MonitoringInfoSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MonitoringInfoSpec.Merge(m, src)
}
func (m *MonitoringInfoSpec) XXX_Size() int {
	return xxx_messageInfo_MonitoringInfoSpec.Size(m)
}
func (m *MonitoringInfoSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_MonitoringInfoSpec.DiscardUnknown(m)
}

var xxx_messageInfo_MonitoringInfoSpec proto.InternalMessageInfo

func (m *MonitoringInfoSpec) GetUrn() string {
	if m != nil {
		return m.Urn
	}
	return ""
}

func (m *MonitoringInfoSpec) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *MonitoringInfoSpec) GetRequiredLabels() []string {
	if m != nil {
		return m.RequiredLabels
	}
	return nil
}

func (m *MonitoringInfoSpec) GetAnnotations() []*Annotation {
	if m != nil {
		return m.Annotations
	}
	return nil
}

// The key name and value string of MonitoringInfo annotations.
type Annotation struct {
	Key                  string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value                string   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Annotation) Reset()         { *m = Annotation{} }
func (m *Annotation) String() string { return proto.CompactTextString(m) }
func (*Annotation) ProtoMessage()    {}
func (*Annotation) Descriptor() ([]byte, []int) {
	return fileDescriptor_6039342a2ba47b72, []int{1}
}

func (m *Annotation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Annotation.Unmarshal(m, b)
}
func (m *Annotation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Annotation.Marshal(b, m, deterministic)
}
func (m *Annotation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Annotation.Merge(m, src)
}
func (m *Annotation) XXX_Size() int {
	return xxx_messageInfo_Annotation.Size(m)
}
func (m *Annotation) XXX_DiscardUnknown() {
	xxx_messageInfo_Annotation.DiscardUnknown(m)
}

var xxx_messageInfo_Annotation proto.InternalMessageInfo

func (m *Annotation) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Annotation) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// A set of well known MonitoringInfo specifications.
type MonitoringInfoSpecs struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MonitoringInfoSpecs) Reset()         { *m = MonitoringInfoSpecs{} }
func (m *MonitoringInfoSpecs) String() string { return proto.CompactTextString(m) }
func (*MonitoringInfoSpecs) ProtoMessage()    {}
func (*MonitoringInfoSpecs) Descriptor() ([]byte, []int) {
	return fileDescriptor_6039342a2ba47b72, []int{2}
}

func (m *MonitoringInfoSpecs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MonitoringInfoSpecs.Unmarshal(m, b)
}
func (m *MonitoringInfoSpecs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MonitoringInfoSpecs.Marshal(b, m, deterministic)
}
func (m *MonitoringInfoSpecs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MonitoringInfoSpecs.Merge(m, src)
}
func (m *MonitoringInfoSpecs) XXX_Size() int {
	return xxx_messageInfo_MonitoringInfoSpecs.Size(m)
}
func (m *MonitoringInfoSpecs) XXX_DiscardUnknown() {
	xxx_messageInfo_MonitoringInfoSpecs.DiscardUnknown(m)
}

var xxx_messageInfo_MonitoringInfoSpecs proto.InternalMessageInfo

// A set of properties for the MonitoringInfoLabel, this is useful to obtain
// the proper label string for the MonitoringInfoLabel.
type MonitoringInfoLabelProps struct {
	// The label key to use in the MonitoringInfo labels map.
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MonitoringInfoLabelProps) Reset()         { *m = MonitoringInfoLabelProps{} }
func (m *MonitoringInfoLabelProps) String() string { return proto.CompactTextString(m) }
func (*MonitoringInfoLabelProps) ProtoMessage()    {}
func (*MonitoringInfoLabelProps) Descriptor() ([]byte, []int) {
	return fileDescriptor_6039342a2ba47b72, []int{3}
}

func (m *MonitoringInfoLabelProps) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MonitoringInfoLabelProps.Unmarshal(m, b)
}
func (m *MonitoringInfoLabelProps) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MonitoringInfoLabelProps.Marshal(b, m, deterministic)
}
func (m *MonitoringInfoLabelProps) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MonitoringInfoLabelProps.Merge(m, src)
}
func (m *MonitoringInfoLabelProps) XXX_Size() int {
	return xxx_messageInfo_MonitoringInfoLabelProps.Size(m)
}
func (m *MonitoringInfoLabelProps) XXX_DiscardUnknown() {
	xxx_messageInfo_MonitoringInfoLabelProps.DiscardUnknown(m)
}

var xxx_messageInfo_MonitoringInfoLabelProps proto.InternalMessageInfo

func (m *MonitoringInfoLabelProps) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type MonitoringInfo struct {
	// (Required) Defines the semantic meaning of the metric or monitored state.
	//
	// See MonitoringInfoSpecs.Enum for the set of well known metrics/monitored
	// state.
	Urn string `protobuf:"bytes,1,opt,name=urn,proto3" json:"urn,omitempty"`
	// (Required) Defines the encoding and aggregation method for the payload.
	//
	// See MonitoringInfoTypeUrns.Enum for the set of well known types.
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	// (Required) The metric or monitored state encoded as per the specification
	// defined by the type.
	Payload []byte `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
	// A set of key and value labels which define the scope of the metric. For
	// well known URNs, the set of required labels is provided by the associated
	// MonitoringInfoSpec.
	//
	// Either a well defined entity id for matching the enum names in
	// the MonitoringInfoLabels enum or any arbitrary label
	// set by a custom metric or user metric.
	//
	// A monitoring system is expected to be able to aggregate the metrics
	// together for all updates having the same URN and labels. Some systems such
	// as Stackdriver will be able to aggregate the metrics using a subset of the
	// provided labels
	Labels               map[string]string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *MonitoringInfo) Reset()         { *m = MonitoringInfo{} }
func (m *MonitoringInfo) String() string { return proto.CompactTextString(m) }
func (*MonitoringInfo) ProtoMessage()    {}
func (*MonitoringInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_6039342a2ba47b72, []int{4}
}

func (m *MonitoringInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MonitoringInfo.Unmarshal(m, b)
}
func (m *MonitoringInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MonitoringInfo.Marshal(b, m, deterministic)
}
func (m *MonitoringInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MonitoringInfo.Merge(m, src)
}
func (m *MonitoringInfo) XXX_Size() int {
	return xxx_messageInfo_MonitoringInfo.Size(m)
}
func (m *MonitoringInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MonitoringInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MonitoringInfo proto.InternalMessageInfo

func (m *MonitoringInfo) GetUrn() string {
	if m != nil {
		return m.Urn
	}
	return ""
}

func (m *MonitoringInfo) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *MonitoringInfo) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *MonitoringInfo) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

// A set of well known URNs that specify the encoding and aggregation method.
type MonitoringInfoTypeUrns struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MonitoringInfoTypeUrns) Reset()         { *m = MonitoringInfoTypeUrns{} }
func (m *MonitoringInfoTypeUrns) String() string { return proto.CompactTextString(m) }
func (*MonitoringInfoTypeUrns) ProtoMessage()    {}
func (*MonitoringInfoTypeUrns) Descriptor() ([]byte, []int) {
	return fileDescriptor_6039342a2ba47b72, []int{5}
}

func (m *MonitoringInfoTypeUrns) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MonitoringInfoTypeUrns.Unmarshal(m, b)
}
func (m *MonitoringInfoTypeUrns) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MonitoringInfoTypeUrns.Marshal(b, m, deterministic)
}
func (m *MonitoringInfoTypeUrns) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MonitoringInfoTypeUrns.Merge(m, src)
}
func (m *MonitoringInfoTypeUrns) XXX_Size() int {
	return xxx_messageInfo_MonitoringInfoTypeUrns.Size(m)
}
func (m *MonitoringInfoTypeUrns) XXX_DiscardUnknown() {
	xxx_messageInfo_MonitoringInfoTypeUrns.DiscardUnknown(m)
}

var xxx_messageInfo_MonitoringInfoTypeUrns proto.InternalMessageInfo

var E_LabelProps = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.EnumValueOptions)(nil),
	ExtensionType: (*MonitoringInfoLabelProps)(nil),
	Field:         127337796,
	Name:          "org.apache.beam.model.pipeline.v1.label_props",
	Tag:           "bytes,127337796,opt,name=label_props",
	Filename:      "metrics.proto",
}

var E_MonitoringInfoSpec = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.EnumValueOptions)(nil),
	ExtensionType: (*MonitoringInfoSpec)(nil),
	Field:         207174266,
	Name:          "org.apache.beam.model.pipeline.v1.monitoring_info_spec",
	Tag:           "bytes,207174266,opt,name=monitoring_info_spec",
	Filename:      "metrics.proto",
}

func init() {
	proto.RegisterEnum("org.apache.beam.model.pipeline.v1.MonitoringInfoSpecs_Enum", MonitoringInfoSpecs_Enum_name, MonitoringInfoSpecs_Enum_value)
	proto.RegisterEnum("org.apache.beam.model.pipeline.v1.MonitoringInfo_MonitoringInfoLabels", MonitoringInfo_MonitoringInfoLabels_name, MonitoringInfo_MonitoringInfoLabels_value)
	proto.RegisterEnum("org.apache.beam.model.pipeline.v1.MonitoringInfoTypeUrns_Enum", MonitoringInfoTypeUrns_Enum_name, MonitoringInfoTypeUrns_Enum_value)
	proto.RegisterType((*MonitoringInfoSpec)(nil), "org.apache.beam.model.pipeline.v1.MonitoringInfoSpec")
	proto.RegisterType((*Annotation)(nil), "org.apache.beam.model.pipeline.v1.Annotation")
	proto.RegisterType((*MonitoringInfoSpecs)(nil), "org.apache.beam.model.pipeline.v1.MonitoringInfoSpecs")
	proto.RegisterType((*MonitoringInfoLabelProps)(nil), "org.apache.beam.model.pipeline.v1.MonitoringInfoLabelProps")
	proto.RegisterType((*MonitoringInfo)(nil), "org.apache.beam.model.pipeline.v1.MonitoringInfo")
	proto.RegisterMapType((map[string]string)(nil), "org.apache.beam.model.pipeline.v1.MonitoringInfo.LabelsEntry")
	proto.RegisterType((*MonitoringInfoTypeUrns)(nil), "org.apache.beam.model.pipeline.v1.MonitoringInfoTypeUrns")
	proto.RegisterExtension(E_LabelProps)
	proto.RegisterExtension(E_MonitoringInfoSpec)
}

func init() { proto.RegisterFile("metrics.proto", fileDescriptor_6039342a2ba47b72) }

var fileDescriptor_6039342a2ba47b72 = []byte{
	// 1883 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x98, 0xcf, 0x8f, 0x1c, 0x47,
	0x15, 0xc7, 0x53, 0x33, 0xbb, 0xeb, 0xec, 0x1b, 0xef, 0xba, 0xdd, 0x5e, 0x92, 0xa1, 0x88, 0xed,
	0xda, 0x71, 0x20, 0x1b, 0x09, 0x26, 0xb2, 0xb3, 0x71, 0x92, 0x71, 0x22, 0x34, 0x3b, 0xdb, 0x59,
	0x86, 0xec, 0xfc, 0x50, 0x4f, 0x4f, 0x8c, 0x7d, 0x69, 0xf5, 0xf4, 0xd4, 0xee, 0xb4, 0xdc, 0xd3,
	0xdd, 0x74, 0xd5, 0xac, 0x59, 0x1f, 0xe1, 0x16, 0x64, 0x21, 0x02, 0x84, 0x1f, 0x0a, 0x44, 0x58,
	0x08, 0x0b, 0x04, 0x08, 0x89, 0x80, 0x14, 0x11, 0x24, 0x14, 0x82, 0x84, 0x84, 0xb8, 0x20, 0x0e,
	0x20, 0x81, 0x40, 0x02, 0xfe, 0x01, 0xc4, 0x29, 0x27, 0x54, 0x55, 0xf3, 0xab, 0x77, 0x66, 0x7f,
	0x21, 0x2f, 0x07, 0x6e, 0x3d, 0x55, 0xf5, 0xde, 0xfb, 0x7c, 0x5f, 0xd5, 0xbc, 0xee, 0x57, 0xb0,
	0xd0, 0xa5, 0x3c, 0xf6, 0x5c, 0x96, 0x8f, 0xe2, 0x90, 0x87, 0xfa, 0x72, 0x18, 0x6f, 0xe7, 0x9d,
	0xc8, 0x71, 0x3b, 0x34, 0xdf, 0xa2, 0x4e, 0x37, 0xdf, 0x0d, 0xdb, 0xd4, 0xcf, 0x47, 0x5e, 0x44,
	0x7d, 0x2f, 0xa0, 0xf9, 0x9d, 0xcb, 0xf8, 0x03, 0x62, 0xdc, 0x8e, 0x7b, 0x41, 0x40, 0x63, 0xdb,
	0x89, 0x3c, 0x65, 0x89, 0xc9, 0x76, 0x18, 0x6e, 0xfb, 0xf4, 0x29, 0xf9, 0xab, 0xd5, 0xdb, 0x7a,
	0xaa, 0x4d, 0x99, 0x1b, 0x7b, 0x11, 0x0f, 0xe3, 0xfe, 0x8a, 0x8b, 0x7b, 0x57, 0x70, 0xaf, 0x4b,
	0x19, 0x77, 0xba, 0x91, 0x5a, 0x90, 0x7b, 0x0b, 0x81, 0x5e, 0x09, 0x03, 0x8f, 0x87, 0xb1, 0x17,
	0x6c, 0x97, 0x83, 0xad, 0xb0, 0x11, 0x51, 0x57, 0xd7, 0x20, 0xdd, 0x8b, 0x83, 0x2c, 0x22, 0x68,
	0x65, 0xde, 0x14, 0x8f, 0xba, 0x0e, 0x33, 0x7c, 0x37, 0xa2, 0xd9, 0x94, 0x1c, 0x92, 0xcf, 0xfa,
	0x13, 0x70, 0x26, 0xa6, 0x9f, 0xee, 0x79, 0x31, 0x6d, 0xdb, 0xbe, 0xd3, 0xa2, 0x3e, 0xcb, 0xa6,
	0x49, 0x7a, 0x65, 0xde, 0x5c, 0x1c, 0x0c, 0x6f, 0xca, 0x51, 0xbd, 0x06, 0x19, 0x27, 0x08, 0x42,
	0xee, 0x70, 0x2f, 0x0c, 0x58, 0x76, 0x86, 0xa4, 0x57, 0x32, 0x57, 0x3e, 0x96, 0x3f, 0x54, 0x78,
	0xbe, 0x38, 0xb4, 0x32, 0xc7, 0x3d, 0xe4, 0x56, 0x01, 0x46, 0x53, 0x82, 0xf6, 0x16, 0xdd, 0x1d,
	0xd0, 0xde, 0xa2, 0xbb, 0xfa, 0x12, 0xcc, 0xee, 0x38, 0x7e, 0x6f, 0x80, 0xab, 0x7e, 0xe4, 0xfe,
	0x7e, 0x1e, 0xce, 0x4d, 0x8a, 0x65, 0xb9, 0xdf, 0x9e, 0x87, 0x19, 0x23, 0xe8, 0x75, 0xf5, 0xfb,
	0x08, 0x16, 0x9b, 0x0d, 0xc3, 0xb4, 0x1b, 0xcd, 0x8a, 0x5d, 0xae, 0x5a, 0x57, 0x57, 0xb5, 0x87,
	0xf0, 0x6b, 0xe8, 0xf7, 0xf7, 0xef, 0xbf, 0x3e, 0xf7, 0x79, 0x04, 0xe7, 0x05, 0x65, 0x41, 0xed,
	0x5e, 0xa1, 0xc7, 0x68, 0x5c, 0x60, 0xbd, 0xae, 0xed, 0x05, 0xfc, 0xea, 0x6a, 0x61, 0xe7, 0xb2,
	0xfe, 0xc1, 0xb1, 0x69, 0x96, 0x98, 0xc2, 0x50, 0xb7, 0xcc, 0x62, 0xb5, 0xf1, 0x52, 0xcd, 0xac,
	0xe0, 0xf9, 0x6a, 0xb1, 0x62, 0x34, 0xea, 0xc5, 0x92, 0x81, 0x67, 0xc4, 0x63, 0xee, 0x0a, 0x64,
	0x06, 0x1b, 0x27, 0xd4, 0x5c, 0x6a, 0x9a, 0x55, 0xd2, 0xe3, 0x9e, 0xef, 0xdd, 0xa1, 0x6d, 0xc2,
	0x43, 0x12, 0xd3, 0x28, 0x8c, 0x39, 0x11, 0x01, 0x89, 0xf2, 0x9e, 0xd7, 0xbf, 0x8f, 0xe0, 0xcc,
	0x90, 0x74, 0xbd, 0xd6, 0x5c, 0xdb, 0x34, 0x34, 0x84, 0xbf, 0xac, 0x50, 0xef, 0x22, 0xb8, 0x30,
	0x15, 0xb5, 0x1d, 0xf6, 0x5a, 0x3e, 0x15, 0xac, 0x78, 0x82, 0x75, 0x38, 0xf7, 0xe0, 0x61, 0xdf,
	0x45, 0xf0, 0xa8, 0x84, 0x5d, 0x2f, 0x37, 0x2c, 0xb3, 0xbc, 0xd6, 0xb4, 0xca, 0xb5, 0x6a, 0x3f,
	0xbf, 0x29, 0xfc, 0x1d, 0x05, 0xfd, 0x4d, 0x04, 0x1f, 0x99, 0x80, 0x6e, 0x7b, 0x8c, 0xc7, 0x5e,
	0xab, 0x27, 0x62, 0x8d, 0x12, 0x9d, 0x4b, 0xc0, 0x4f, 0x5d, 0xf3, 0xe0, 0x45, 0xfc, 0x1a, 0x41,
	0x76, 0x52, 0x44, 0x3f, 0xf5, 0x69, 0xfc, 0x5d, 0xa5, 0xe2, 0x4d, 0x04, 0x4f, 0x1c, 0xac, 0x62,
	0xb4, 0x07, 0x97, 0xf6, 0x97, 0x71, 0x82, 0x9b, 0xf1, 0x63, 0x04, 0x67, 0xa5, 0x8e, 0xcd, 0xa2,
	0x65, 0x34, 0xac, 0xfe, 0x36, 0xcc, 0xe0, 0xaf, 0x29, 0x01, 0x5f, 0x44, 0x40, 0x26, 0x04, 0xf8,
	0x0e, 0xa7, 0x8c, 0x8f, 0x36, 0xe0, 0xb1, 0x04, 0xf9, 0x9e, 0xd9, 0x07, 0x8f, 0xfc, 0x13, 0x04,
	0xfa, 0x38, 0x72, 0x3f, 0xe9, 0xb3, 0xf8, 0x1b, 0x8a, 0xf9, 0x4b, 0x08, 0x96, 0xf7, 0x63, 0x1e,
	0xa5, 0xfb, 0xfc, 0x34, 0xe8, 0x13, 0x4c, 0xf4, 0x0f, 0x11, 0x68, 0x92, 0xda, 0xaa, 0xd5, 0xed,
	0xc1, 0x71, 0x9f, 0xc3, 0xaf, 0x2b, 0xe6, 0x2f, 0x20, 0xb8, 0x38, 0xc1, 0xcc, 0xc3, 0xc8, 0x1e,
	0x3b, 0xe7, 0x1f, 0x4a, 0x10, 0x27, 0x27, 0x4f, 0xf0, 0x60, 0x28, 0xde, 0x7e, 0x92, 0x4f, 0x1d,
	0x78, 0x30, 0x14, 0xd3, 0x28, 0xc7, 0x8f, 0x4d, 0x21, 0x3e, 0xc1, 0x14, 0xff, 0x0c, 0xc1, 0x39,
	0x89, 0xbc, 0x56, 0xb3, 0xac, 0x5a, 0x65, 0x98, 0xe5, 0x87, 0xf1, 0x1b, 0x0a, 0xfa, 0x2b, 0x08,
	0x72, 0x13, 0xd0, 0xad, 0x90, 0xf3, 0xb0, 0x3b, 0x9e, 0xe8, 0x0b, 0x09, 0xec, 0x89, 0xf9, 0x07,
	0x0f, 0xfe, 0x36, 0x82, 0xa5, 0x24, 0x78, 0x3f, 0xdd, 0xf3, 0xf8, 0x5b, 0x8a, 0xfc, 0xab, 0x08,
	0x2e, 0xed, 0x4f, 0x3e, 0xca, 0xf8, 0xc5, 0xe9, 0xe8, 0x27, 0x7b, 0xae, 0x17, 0x8c, 0x4d, 0xa3,
	0x62, 0x54, 0x2d, 0xbb, 0x54, 0x6b, 0x56, 0x2d, 0x0d, 0xf0, 0xd7, 0x15, 0xf4, 0x6b, 0x08, 0xc6,
	0x4f, 0x40, 0x81, 0xfa, 0xb4, 0x4b, 0x03, 0x6e, 0xbb, 0x61, 0x2f, 0xe0, 0x87, 0xbc, 0x22, 0x33,
	0xf5, 0x52, 0x6d, 0x73, 0xd3, 0x28, 0x89, 0xb2, 0x9a, 0xfb, 0x64, 0x92, 0xeb, 0x9a, 0xd5, 0xa1,
	0x84, 0x87, 0xdc, 0xf1, 0x49, 0xdf, 0x25, 0x23, 0x61, 0x8f, 0x47, 0x3d, 0x2e, 0x20, 0x1d, 0x52,
	0x77, 0x43, 0xdf, 0xa7, 0xae, 0x58, 0x4b, 0x5a, 0xbb, 0x62, 0xc0, 0x8a, 0x9d, 0x80, 0x6d, 0x85,
	0x71, 0x37, 0xaf, 0xff, 0x2e, 0x05, 0x67, 0x1b, 0xc5, 0x4a, 0x7d, 0xd3, 0x58, 0xb7, 0xd7, 0x6e,
	0x58, 0x86, 0xdd, 0x28, 0xdf, 0x34, 0xb4, 0x0c, 0xfe, 0x69, 0x4a, 0x32, 0xff, 0x28, 0x95, 0x3c,
	0xd7, 0xcc, 0xe9, 0x46, 0x3e, 0x6d, 0xdb, 0xad, 0x5d, 0x4e, 0x6d, 0xe6, 0xdd, 0xa1, 0x47, 0x7d,
	0xe3, 0x24, 0x04, 0xfc, 0x11, 0x25, 0x15, 0xfc, 0x06, 0x8d, 0x24, 0x08, 0xcf, 0x44, 0x78, 0x26,
	0x4e, 0xd0, 0x26, 0x32, 0x37, 0x24, 0xdc, 0x22, 0x0e, 0xe9, 0x87, 0x26, 0x84, 0x51, 0x4e, 0x56,
	0xc2, 0x98, 0x38, 0xbe, 0xff, 0xa4, 0x98, 0x1a, 0x8a, 0xf6, 0x02, 0xc2, 0x3b, 0x94, 0x44, 0x23,
	0xbd, 0x79, 0xd2, 0x10, 0x56, 0x5e, 0xb0, 0x4d, 0x3c, 0x26, 0x36, 0xaa, 0x4d, 0x48, 0x8b, 0xba,
	0x4e, 0x8f, 0x51, 0xe2, 0x3a, 0xbe, 0xdb, 0xf3, 0x1d, 0x2e, 0x26, 0x85, 0x99, 0x0c, 0xac, 0xe2,
	0x79, 0xc1, 0x4e, 0xe8, 0xef, 0x50, 0x46, 0x18, 0x8d, 0x3d, 0xc7, 0xf7, 0xee, 0x0c, 0xd6, 0x8c,
	0x62, 0xdd, 0xee, 0x78, 0x6e, 0x47, 0x38, 0x2d, 0xd5, 0x9b, 0xc4, 0x0b, 0x38, 0x0d, 0x98, 0xb7,
	0x43, 0xf3, 0xfa, 0x9f, 0x10, 0xe8, 0x0d, 0xab, 0x68, 0x5a, 0xf6, 0x5a, 0xb3, 0xba, 0xbe, 0x69,
	0xd8, 0x95, 0x86, 0x51, 0x6a, 0x68, 0xa7, 0xf1, 0x2f, 0xd5, 0x21, 0x78, 0x1b, 0xc1, 0xd5, 0xf1,
	0x84, 0x46, 0x4e, 0xdc, 0x0e, 0x6d, 0xfa, 0x19, 0xea, 0xaa, 0x84, 0x89, 0x4f, 0xd0, 0x02, 0xe3,
	0x4e, 0xcc, 0xed, 0x56, 0x2f, 0x68, 0xfb, 0xd4, 0xee, 0x32, 0xea, 0xb2, 0xa3, 0x7f, 0x41, 0xe5,
	0x3e, 0x95, 0xcc, 0x6d, 0x79, 0xec, 0x74, 0x30, 0xee, 0x75, 0x1d, 0x4e, 0xdb, 0x64, 0x18, 0x8f,
	0x88, 0x78, 0x22, 0x89, 0x42, 0x9d, 0x0c, 0x4b, 0x54, 0xd8, 0xad, 0x5e, 0xa0, 0x4e, 0x8c, 0x17,
	0x10, 0x87, 0x48, 0x4a, 0xfd, 0xaf, 0x08, 0x96, 0xea, 0x66, 0xad, 0x64, 0x34, 0x1a, 0x49, 0x75,
	0x0b, 0xf8, 0x3d, 0xa5, 0xee, 0x17, 0x08, 0x9e, 0x3b, 0x54, 0x5d, 0x14, 0x87, 0x2e, 0x65, 0xec,
	0xbf, 0xd5, 0x77, 0x33, 0xa9, 0xef, 0xe5, 0xa3, 0xeb, 0xeb, 0x07, 0x3e, 0x40, 0xe1, 0x5f, 0x10,
	0x9c, 0x7b, 0xa9, 0x5c, 0x2d, 0x37, 0x3e, 0x91, 0x14, 0xb8, 0x88, 0x7f, 0xa5, 0x04, 0xbe, 0x83,
	0xe0, 0xd9, 0x43, 0x05, 0x6e, 0x79, 0x81, 0xc7, 0x3a, 0xff, 0x7b, 0x7d, 0x2a, 0x6e, 0x5f, 0x1e,
	0x99, 0xa6, 0xef, 0xe7, 0x08, 0x32, 0x56, 0xcd, 0x2a, 0x6e, 0xf6, 0x75, 0x9d, 0xc1, 0xdf, 0x53,
	0xba, 0xee, 0x21, 0x58, 0x4d, 0xe8, 0xe2, 0x83, 0x12, 0xb1, 0x57, 0x9c, 0x44, 0x39, 0xb6, 0xa8,
	0x52, 0x52, 0xd4, 0xea, 0x31, 0x36, 0x6d, 0x48, 0xa2, 0xbf, 0x99, 0x82, 0xc5, 0xeb, 0x35, 0xf3,
	0x65, 0xdb, 0x34, 0x2a, 0xc5, 0x72, 0xb5, 0x5c, 0xdd, 0xd0, 0x34, 0xfc, 0xaa, 0x2a, 0x54, 0x9f,
	0x4b, 0xc1, 0x47, 0xf7, 0x11, 0x10, 0xc5, 0xe1, 0x76, 0x4c, 0x19, 0x2b, 0xc4, 0xb4, 0xeb, 0x78,
	0x81, 0x17, 0x6c, 0x0b, 0xf0, 0x6c, 0x02, 0x7c, 0xb8, 0x66, 0x0f, 0xf7, 0x0f, 0xf6, 0x54, 0xaa,
	0x37, 0x64, 0xa5, 0x1a, 0x3a, 0x22, 0x4e, 0x77, 0x50, 0xa0, 0x6e, 0x87, 0xf1, 0x2d, 0xb2, 0x15,
	0xc6, 0x84, 0x3a, 0x6e, 0x87, 0x38, 0x2e, 0xf7, 0x76, 0xe8, 0xa0, 0x5c, 0xe4, 0x89, 0x31, 0x39,
	0x28, 0x5e, 0x1f, 0x31, 0x65, 0xb2, 0x9a, 0x38, 0x62, 0x97, 0xda, 0x34, 0xa2, 0x41, 0x5b, 0xcc,
	0xec, 0xf1, 0x1a, 0x84, 0x9c, 0xb0, 0x8e, 0x13, 0xd3, 0x36, 0xb9, 0xed, 0xf1, 0x0e, 0x71, 0x82,
	0x5d, 0x12, 0xf2, 0x0e, 0x8d, 0xf7, 0x86, 0x19, 0x65, 0xa8, 0x54, 0x13, 0x25, 0xdd, 0x32, 0xd6,
	0xb5, 0xb3, 0xc7, 0xc9, 0x90, 0x1b, 0x8a, 0x1a, 0xcb, 0x69, 0xfb, 0xff, 0x35, 0x43, 0xb9, 0x3c,
	0x64, 0x93, 0x4d, 0xae, 0x6c, 0xc2, 0xeb, 0x71, 0x18, 0x31, 0xd1, 0xc5, 0x07, 0x4e, 0x97, 0xf6,
	0x5b, 0x65, 0xf9, 0x9c, 0xfb, 0x57, 0x1a, 0x16, 0x93, 0x06, 0x47, 0x6c, 0xff, 0xb3, 0x70, 0x2a,
	0x72, 0x76, 0xfd, 0xd0, 0x69, 0x67, 0xd3, 0x04, 0xad, 0x9c, 0x36, 0x07, 0x3f, 0xf5, 0x26, 0xcc,
	0xf5, 0xef, 0x03, 0x54, 0xab, 0xff, 0xe2, 0x11, 0x5a, 0xfd, 0x24, 0x42, 0x5e, 0xdd, 0x1c, 0x18,
	0x01, 0x8f, 0x77, 0xcd, 0xbe, 0x33, 0xfc, 0x3c, 0x64, 0xc6, 0x86, 0x8f, 0xda, 0xf6, 0x17, 0x52,
	0xcf, 0xa1, 0xdc, 0xdd, 0x14, 0x2c, 0x4d, 0xc9, 0x0a, 0xd3, 0x97, 0x61, 0x7e, 0xb8, 0xd3, 0xda,
	0x43, 0x58, 0xbf, 0xf7, 0x87, 0xbf, 0xfd, 0x33, 0x7d, 0x1a, 0xc6, 0xf6, 0x5f, 0x7f, 0x1c, 0xc6,
	0x5f, 0xed, 0x1a, 0xc2, 0xe7, 0xe4, 0xa2, 0x85, 0xc4, 0xb0, 0x7e, 0x05, 0xf4, 0xeb, 0xe5, 0xea,
	0x7a, 0xed, 0x7a, 0xb9, 0xba, 0x61, 0x37, 0x2c, 0xb3, 0x68, 0x19, 0x1b, 0x37, 0xb4, 0x14, 0xc6,
	0x72, 0xf1, 0xd2, 0xb4, 0x59, 0x3d, 0x0b, 0xb3, 0xa5, 0xda, 0xba, 0x61, 0x6a, 0x69, 0xbc, 0x20,
	0x97, 0x9d, 0xea, 0x0f, 0x88, 0x98, 0x46, 0xf5, 0x95, 0xb2, 0x59, 0xab, 0x8a, 0xef, 0x2c, 0x6d,
	0x66, 0x14, 0x73, 0x6c, 0x58, 0x27, 0x30, 0xfa, 0xa2, 0xd3, 0x66, 0xf1, 0x59, 0xb9, 0x26, 0x33,
	0x36, 0xa8, 0x3f, 0x02, 0xf2, 0x43, 0x4f, 0x9b, 0xc3, 0xa7, 0xe5, 0xe4, 0x9c, 0xfa, 0x9d, 0x7b,
	0x67, 0x16, 0x1e, 0x49, 0xe6, 0xc3, 0xda, 0x8d, 0x68, 0x33, 0x0e, 0x58, 0xee, 0xdb, 0xb3, 0xfd,
	0xdb, 0x90, 0xa7, 0x61, 0x71, 0x78, 0x0f, 0x62, 0x5b, 0x37, 0xea, 0x86, 0xf6, 0x10, 0xbe, 0x78,
	0xef, 0xad, 0xf7, 0xdf, 0x9d, 0xdd, 0xbf, 0x24, 0xea, 0xcf, 0xc0, 0x99, 0xd1, 0x95, 0x84, 0xb2,
	0x42, 0x98, 0x48, 0xab, 0x03, 0xee, 0x1c, 0x74, 0x03, 0x1e, 0x9d, 0xbc, 0x1c, 0x50, 0xe6, 0x29,
	0xbc, 0x22, 0xcd, 0x8f, 0xf0, 0x0d, 0xa6, 0x6f, 0x40, 0x76, 0x4a, 0x7b, 0xae, 0xfc, 0xa4, 0xf1,
	0x93, 0xd2, 0xcf, 0x51, 0xda, 0x6e, 0xfd, 0x79, 0x38, 0x3b, 0xde, 0x1f, 0x2b, 0x0f, 0x33, 0x38,
	0x27, 0x3d, 0x1c, 0xd8, 0xfe, 0xea, 0xd7, 0x40, 0x4f, 0xf4, 0xa9, 0xca, 0x76, 0x16, 0x5f, 0x92,
	0xb6, 0x07, 0x77, 0xa1, 0xfa, 0xb3, 0xa0, 0x8d, 0xb5, 0x8b, 0xca, 0x74, 0x0e, 0x2f, 0x4b, 0xd3,
	0x83, 0xda, 0x41, 0x01, 0x3c, 0xde, 0xb7, 0x29, 0xcb, 0x53, 0x53, 0x81, 0xf7, 0x36, 0x6d, 0x2f,
	0xc2, 0xb9, 0x64, 0xff, 0xa4, 0x8c, 0x1f, 0xc6, 0x8f, 0x4b, 0xe3, 0x43, 0x9a, 0x23, 0xfd, 0xe3,
	0xb0, 0xb4, 0xa7, 0x8b, 0x51, 0xf6, 0xf3, 0xf8, 0xc3, 0xd2, 0xfe, 0xb0, 0x0e, 0x45, 0xbf, 0x0c,
	0x0b, 0x75, 0xb3, 0xb6, 0x61, 0x8a, 0x8f, 0x2e, 0x69, 0x09, 0xf8, 0x82, 0xb4, 0xdc, 0xb7, 0x3c,
	0x17, 0x3e, 0x8b, 0x20, 0x23, 0x8b, 0x82, 0x28, 0xec, 0x11, 0xd3, 0x97, 0xf3, 0xea, 0xa2, 0x33,
	0x3f, 0xb8, 0xe8, 0xcc, 0x8b, 0x13, 0xfc, 0x8a, 0xf8, 0xfb, 0xd7, 0x22, 0x75, 0xe9, 0xf8, 0xde,
	0xab, 0x7f, 0x7e, 0x81, 0xa0, 0x95, 0xcc, 0x95, 0x6b, 0xc7, 0x2e, 0x46, 0xa3, 0x02, 0x6a, 0x82,
	0x3f, 0x7c, 0x2e, 0xdc, 0x45, 0xb0, 0xd4, 0x1d, 0x2e, 0xb4, 0xbd, 0x60, 0x2b, 0xb4, 0x59, 0x44,
	0xdd, 0xa3, 0xd0, 0xbc, 0xff, 0xef, 0x7f, 0xb4, 0x24, 0xcd, 0x33, 0xc7, 0xa6, 0x69, 0x44, 0xd4,
	0x35, 0xf5, 0xee, 0xc4, 0xd8, 0xda, 0x0b, 0x70, 0xf8, 0x55, 0xf2, 0x1a, 0x54, 0x54, 0x3a, 0x8b,
	0x91, 0x77, 0x33, 0x33, 0x98, 0xb0, 0x77, 0x2e, 0xb7, 0xe6, 0x24, 0xec, 0xd3, 0xff, 0x09, 0x00,
	0x00, 0xff, 0xff, 0xd9, 0xfe, 0x7e, 0xe1, 0x9e, 0x16, 0x00, 0x00,
}
