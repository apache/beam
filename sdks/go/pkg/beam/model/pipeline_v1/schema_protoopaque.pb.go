//
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Protocol Buffers describing Beam Schemas, a portable representation for
// complex types.
//
// The primary application of Schema is as the payload for the standard coder
// "beam:coder:row:v1", defined in beam_runner_api.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.0
// 	protoc        v5.27.3
// source: org/apache/beam/model/pipeline/v1/schema.proto

//go:build protoopaque

package pipeline_v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AtomicType int32

const (
	AtomicType_UNSPECIFIED AtomicType = 0
	AtomicType_BYTE        AtomicType = 1
	AtomicType_INT16       AtomicType = 2
	AtomicType_INT32       AtomicType = 3
	AtomicType_INT64       AtomicType = 4
	AtomicType_FLOAT       AtomicType = 5
	AtomicType_DOUBLE      AtomicType = 6
	AtomicType_STRING      AtomicType = 7
	AtomicType_BOOLEAN     AtomicType = 8
	AtomicType_BYTES       AtomicType = 9
)

// Enum value maps for AtomicType.
var (
	AtomicType_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "BYTE",
		2: "INT16",
		3: "INT32",
		4: "INT64",
		5: "FLOAT",
		6: "DOUBLE",
		7: "STRING",
		8: "BOOLEAN",
		9: "BYTES",
	}
	AtomicType_value = map[string]int32{
		"UNSPECIFIED": 0,
		"BYTE":        1,
		"INT16":       2,
		"INT32":       3,
		"INT64":       4,
		"FLOAT":       5,
		"DOUBLE":      6,
		"STRING":      7,
		"BOOLEAN":     8,
		"BYTES":       9,
	}
)

func (x AtomicType) Enum() *AtomicType {
	p := new(AtomicType)
	*p = x
	return p
}

func (x AtomicType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AtomicType) Descriptor() protoreflect.EnumDescriptor {
	return file_org_apache_beam_model_pipeline_v1_schema_proto_enumTypes[0].Descriptor()
}

func (AtomicType) Type() protoreflect.EnumType {
	return &file_org_apache_beam_model_pipeline_v1_schema_proto_enumTypes[0]
}

func (x AtomicType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

type LogicalTypes_Enum int32

const (
	// A URN for Python Callable logical type
	//   - Representation type: STRING
	//   - Language type: In Python SDK, PythonCallableWithSource.
	//     In any other SDKs, a wrapper object for a string which
	//     can be evaluated to a Python Callable object.
	LogicalTypes_PYTHON_CALLABLE LogicalTypes_Enum = 0
	// A URN for MicrosInstant type
	//   - Representation type: ROW<seconds: INT64, micros: INT64>
	//   - A timestamp without a timezone where seconds + micros represents the
	//     amount of time since the epoch.
	LogicalTypes_MICROS_INSTANT LogicalTypes_Enum = 1
	// A URN for MillisInstant type
	//   - Representation type: INT64
	//   - A timestamp without a timezone represented by the number of
	//     milliseconds since the epoch. The INT64 value is encoded with
	//     big-endian shifted such that lexicographic ordering of the bytes
	//     corresponds to chronological order.
	LogicalTypes_MILLIS_INSTANT LogicalTypes_Enum = 2
	// A URN for Decimal type
	//   - Representation type: BYTES
	//   - A decimal number with variable scale. Its BYTES
	//     representation consists of an integer (INT32) scale followed by a
	//     two's complement encoded big integer.
	LogicalTypes_DECIMAL LogicalTypes_Enum = 3
	// A URN for FixedLengthBytes type
	//   - Representation type: BYTES
	//   - Argument type: INT32.
	//     A fixed-length bytes with its length as the argument.
	LogicalTypes_FIXED_BYTES LogicalTypes_Enum = 4
	// A URN for VariableLengthBytes type
	//   - Representation type: BYTES
	//   - Argument type: INT32.
	//     A variable-length bytes with its maximum length as the argument.
	LogicalTypes_VAR_BYTES LogicalTypes_Enum = 5
	// A URN for FixedLengthString type
	//   - Representation type: STRING
	//   - Argument type: INT32.
	//     A fixed-length string with its length as the argument.
	LogicalTypes_FIXED_CHAR LogicalTypes_Enum = 6
	// A URN for VariableLengthString type
	//   - Representation type: STRING
	//   - Argument type: INT32.
	//     A variable-length string with its maximum length as the argument.
	LogicalTypes_VAR_CHAR LogicalTypes_Enum = 7
)

// Enum value maps for LogicalTypes_Enum.
var (
	LogicalTypes_Enum_name = map[int32]string{
		0: "PYTHON_CALLABLE",
		1: "MICROS_INSTANT",
		2: "MILLIS_INSTANT",
		3: "DECIMAL",
		4: "FIXED_BYTES",
		5: "VAR_BYTES",
		6: "FIXED_CHAR",
		7: "VAR_CHAR",
	}
	LogicalTypes_Enum_value = map[string]int32{
		"PYTHON_CALLABLE": 0,
		"MICROS_INSTANT":  1,
		"MILLIS_INSTANT":  2,
		"DECIMAL":         3,
		"FIXED_BYTES":     4,
		"VAR_BYTES":       5,
		"FIXED_CHAR":      6,
		"VAR_CHAR":        7,
	}
)

func (x LogicalTypes_Enum) Enum() *LogicalTypes_Enum {
	p := new(LogicalTypes_Enum)
	*p = x
	return p
}

func (x LogicalTypes_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LogicalTypes_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_org_apache_beam_model_pipeline_v1_schema_proto_enumTypes[1].Descriptor()
}

func (LogicalTypes_Enum) Type() protoreflect.EnumType {
	return &file_org_apache_beam_model_pipeline_v1_schema_proto_enumTypes[1]
}

func (x LogicalTypes_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

type Schema struct {
	state                           protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Fields               *[]*Field              `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
	xxx_hidden_Id                   string                 `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	xxx_hidden_Options              *[]*Option             `protobuf:"bytes,3,rep,name=options,proto3" json:"options,omitempty"`
	xxx_hidden_EncodingPositionsSet bool                   `protobuf:"varint,4,opt,name=encoding_positions_set,json=encodingPositionsSet,proto3" json:"encoding_positions_set,omitempty"`
	unknownFields                   protoimpl.UnknownFields
	sizeCache                       protoimpl.SizeCache
}

func (x *Schema) Reset() {
	*x = Schema{}
	mi := &file_org_apache_beam_model_pipeline_v1_schema_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Schema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Schema) ProtoMessage() {}

func (x *Schema) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_pipeline_v1_schema_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Schema) GetFields() []*Field {
	if x != nil {
		if x.xxx_hidden_Fields != nil {
			return *x.xxx_hidden_Fields
		}
	}
	return nil
}

func (x *Schema) GetId() string {
	if x != nil {
		return x.xxx_hidden_Id
	}
	return ""
}

func (x *Schema) GetOptions() []*Option {
	if x != nil {
		if x.xxx_hidden_Options != nil {
			return *x.xxx_hidden_Options
		}
	}
	return nil
}

func (x *Schema) GetEncodingPositionsSet() bool {
	if x != nil {
		return x.xxx_hidden_EncodingPositionsSet
	}
	return false
}

func (x *Schema) SetFields(v []*Field) {
	x.xxx_hidden_Fields = &v
}

func (x *Schema) SetId(v string) {
	x.xxx_hidden_Id = v
}

func (x *Schema) SetOptions(v []*Option) {
	x.xxx_hidden_Options = &v
}

func (x *Schema) SetEncodingPositionsSet(v bool) {
	x.xxx_hidden_EncodingPositionsSet = v
}

type Schema_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// List of fields for this schema. Two fields may not share a name.
	Fields []*Field
	// REQUIRED. An RFC 4122 UUID.
	Id      string
	Options []*Option
	// Indicates that encoding positions have been overridden.
	EncodingPositionsSet bool
}

func (b0 Schema_builder) Build() *Schema {
	m0 := &Schema{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Fields = &b.Fields
	x.xxx_hidden_Id = b.Id
	x.xxx_hidden_Options = &b.Options
	x.xxx_hidden_EncodingPositionsSet = b.EncodingPositionsSet
	return m0
}

type Field struct {
	state                       protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Name             string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	xxx_hidden_Description      string                 `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	xxx_hidden_Type             *FieldType             `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	xxx_hidden_Id               int32                  `protobuf:"varint,4,opt,name=id,proto3" json:"id,omitempty"`
	xxx_hidden_EncodingPosition int32                  `protobuf:"varint,5,opt,name=encoding_position,json=encodingPosition,proto3" json:"encoding_position,omitempty"`
	xxx_hidden_Options          *[]*Option             `protobuf:"bytes,6,rep,name=options,proto3" json:"options,omitempty"`
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
}

func (x *Field) Reset() {
	*x = Field{}
	mi := &file_org_apache_beam_model_pipeline_v1_schema_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Field) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Field) ProtoMessage() {}

func (x *Field) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_pipeline_v1_schema_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Field) GetName() string {
	if x != nil {
		return x.xxx_hidden_Name
	}
	return ""
}

func (x *Field) GetDescription() string {
	if x != nil {
		return x.xxx_hidden_Description
	}
	return ""
}

func (x *Field) GetType() *FieldType {
	if x != nil {
		return x.xxx_hidden_Type
	}
	return nil
}

func (x *Field) GetId() int32 {
	if x != nil {
		return x.xxx_hidden_Id
	}
	return 0
}

func (x *Field) GetEncodingPosition() int32 {
	if x != nil {
		return x.xxx_hidden_EncodingPosition
	}
	return 0
}

func (x *Field) GetOptions() []*Option {
	if x != nil {
		if x.xxx_hidden_Options != nil {
			return *x.xxx_hidden_Options
		}
	}
	return nil
}

func (x *Field) SetName(v string) {
	x.xxx_hidden_Name = v
}

func (x *Field) SetDescription(v string) {
	x.xxx_hidden_Description = v
}

func (x *Field) SetType(v *FieldType) {
	x.xxx_hidden_Type = v
}

func (x *Field) SetId(v int32) {
	x.xxx_hidden_Id = v
}

func (x *Field) SetEncodingPosition(v int32) {
	x.xxx_hidden_EncodingPosition = v
}

func (x *Field) SetOptions(v []*Option) {
	x.xxx_hidden_Options = &v
}

func (x *Field) HasType() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Type != nil
}

func (x *Field) ClearType() {
	x.xxx_hidden_Type = nil
}

type Field_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// REQUIRED. Name of this field within the schema.
	Name string
	// OPTIONAL. Human readable description of this field, such as the query that generated it.
	Description string
	Type        *FieldType
	Id          int32
	// OPTIONAL. The position of this field's data when encoded, e.g. with beam:coder:row:v1.
	// Either no fields in a given row are have encoding position populated,
	// or all of them are. Used to support backwards compatibility with schema
	// changes.
	// If no fields have encoding position populated the order of encoding is the same as the order in the Schema.
	// If this Field is part of a Schema where encoding_positions_set is True then encoding_position must be
	// defined, otherwise this field is ignored.
	EncodingPosition int32
	Options          []*Option
}

func (b0 Field_builder) Build() *Field {
	m0 := &Field{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Name = b.Name
	x.xxx_hidden_Description = b.Description
	x.xxx_hidden_Type = b.Type
	x.xxx_hidden_Id = b.Id
	x.xxx_hidden_EncodingPosition = b.EncodingPosition
	x.xxx_hidden_Options = &b.Options
	return m0
}

type FieldType struct {
	state               protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Nullable bool                   `protobuf:"varint,1,opt,name=nullable,proto3" json:"nullable,omitempty"`
	xxx_hidden_TypeInfo isFieldType_TypeInfo   `protobuf_oneof:"type_info"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *FieldType) Reset() {
	*x = FieldType{}
	mi := &file_org_apache_beam_model_pipeline_v1_schema_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FieldType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldType) ProtoMessage() {}

func (x *FieldType) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_pipeline_v1_schema_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *FieldType) GetNullable() bool {
	if x != nil {
		return x.xxx_hidden_Nullable
	}
	return false
}

func (x *FieldType) GetAtomicType() AtomicType {
	if x != nil {
		if x, ok := x.xxx_hidden_TypeInfo.(*fieldType_AtomicType); ok {
			return x.AtomicType
		}
	}
	return AtomicType_UNSPECIFIED
}

func (x *FieldType) GetArrayType() *ArrayType {
	if x != nil {
		if x, ok := x.xxx_hidden_TypeInfo.(*fieldType_ArrayType); ok {
			return x.ArrayType
		}
	}
	return nil
}

func (x *FieldType) GetIterableType() *IterableType {
	if x != nil {
		if x, ok := x.xxx_hidden_TypeInfo.(*fieldType_IterableType); ok {
			return x.IterableType
		}
	}
	return nil
}

func (x *FieldType) GetMapType() *MapType {
	if x != nil {
		if x, ok := x.xxx_hidden_TypeInfo.(*fieldType_MapType); ok {
			return x.MapType
		}
	}
	return nil
}

func (x *FieldType) GetRowType() *RowType {
	if x != nil {
		if x, ok := x.xxx_hidden_TypeInfo.(*fieldType_RowType); ok {
			return x.RowType
		}
	}
	return nil
}

func (x *FieldType) GetLogicalType() *LogicalType {
	if x != nil {
		if x, ok := x.xxx_hidden_TypeInfo.(*fieldType_LogicalType); ok {
			return x.LogicalType
		}
	}
	return nil
}

func (x *FieldType) SetNullable(v bool) {
	x.xxx_hidden_Nullable = v
}

func (x *FieldType) SetAtomicType(v AtomicType) {
	x.xxx_hidden_TypeInfo = &fieldType_AtomicType{v}
}

func (x *FieldType) SetArrayType(v *ArrayType) {
	if v == nil {
		x.xxx_hidden_TypeInfo = nil
		return
	}
	x.xxx_hidden_TypeInfo = &fieldType_ArrayType{v}
}

func (x *FieldType) SetIterableType(v *IterableType) {
	if v == nil {
		x.xxx_hidden_TypeInfo = nil
		return
	}
	x.xxx_hidden_TypeInfo = &fieldType_IterableType{v}
}

func (x *FieldType) SetMapType(v *MapType) {
	if v == nil {
		x.xxx_hidden_TypeInfo = nil
		return
	}
	x.xxx_hidden_TypeInfo = &fieldType_MapType{v}
}

func (x *FieldType) SetRowType(v *RowType) {
	if v == nil {
		x.xxx_hidden_TypeInfo = nil
		return
	}
	x.xxx_hidden_TypeInfo = &fieldType_RowType{v}
}

func (x *FieldType) SetLogicalType(v *LogicalType) {
	if v == nil {
		x.xxx_hidden_TypeInfo = nil
		return
	}
	x.xxx_hidden_TypeInfo = &fieldType_LogicalType{v}
}

func (x *FieldType) HasTypeInfo() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_TypeInfo != nil
}

func (x *FieldType) HasAtomicType() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_TypeInfo.(*fieldType_AtomicType)
	return ok
}

func (x *FieldType) HasArrayType() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_TypeInfo.(*fieldType_ArrayType)
	return ok
}

func (x *FieldType) HasIterableType() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_TypeInfo.(*fieldType_IterableType)
	return ok
}

func (x *FieldType) HasMapType() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_TypeInfo.(*fieldType_MapType)
	return ok
}

func (x *FieldType) HasRowType() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_TypeInfo.(*fieldType_RowType)
	return ok
}

func (x *FieldType) HasLogicalType() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_TypeInfo.(*fieldType_LogicalType)
	return ok
}

func (x *FieldType) ClearTypeInfo() {
	x.xxx_hidden_TypeInfo = nil
}

func (x *FieldType) ClearAtomicType() {
	if _, ok := x.xxx_hidden_TypeInfo.(*fieldType_AtomicType); ok {
		x.xxx_hidden_TypeInfo = nil
	}
}

func (x *FieldType) ClearArrayType() {
	if _, ok := x.xxx_hidden_TypeInfo.(*fieldType_ArrayType); ok {
		x.xxx_hidden_TypeInfo = nil
	}
}

func (x *FieldType) ClearIterableType() {
	if _, ok := x.xxx_hidden_TypeInfo.(*fieldType_IterableType); ok {
		x.xxx_hidden_TypeInfo = nil
	}
}

func (x *FieldType) ClearMapType() {
	if _, ok := x.xxx_hidden_TypeInfo.(*fieldType_MapType); ok {
		x.xxx_hidden_TypeInfo = nil
	}
}

func (x *FieldType) ClearRowType() {
	if _, ok := x.xxx_hidden_TypeInfo.(*fieldType_RowType); ok {
		x.xxx_hidden_TypeInfo = nil
	}
}

func (x *FieldType) ClearLogicalType() {
	if _, ok := x.xxx_hidden_TypeInfo.(*fieldType_LogicalType); ok {
		x.xxx_hidden_TypeInfo = nil
	}
}

const FieldType_TypeInfo_not_set_case case_FieldType_TypeInfo = 0
const FieldType_AtomicType_case case_FieldType_TypeInfo = 2
const FieldType_ArrayType_case case_FieldType_TypeInfo = 3
const FieldType_IterableType_case case_FieldType_TypeInfo = 4
const FieldType_MapType_case case_FieldType_TypeInfo = 5
const FieldType_RowType_case case_FieldType_TypeInfo = 6
const FieldType_LogicalType_case case_FieldType_TypeInfo = 7

func (x *FieldType) WhichTypeInfo() case_FieldType_TypeInfo {
	if x == nil {
		return FieldType_TypeInfo_not_set_case
	}
	switch x.xxx_hidden_TypeInfo.(type) {
	case *fieldType_AtomicType:
		return FieldType_AtomicType_case
	case *fieldType_ArrayType:
		return FieldType_ArrayType_case
	case *fieldType_IterableType:
		return FieldType_IterableType_case
	case *fieldType_MapType:
		return FieldType_MapType_case
	case *fieldType_RowType:
		return FieldType_RowType_case
	case *fieldType_LogicalType:
		return FieldType_LogicalType_case
	default:
		return FieldType_TypeInfo_not_set_case
	}
}

type FieldType_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Nullable bool
	// Fields of oneof xxx_hidden_TypeInfo:
	AtomicType   *AtomicType
	ArrayType    *ArrayType
	IterableType *IterableType
	MapType      *MapType
	RowType      *RowType
	LogicalType  *LogicalType
	// -- end of xxx_hidden_TypeInfo
}

func (b0 FieldType_builder) Build() *FieldType {
	m0 := &FieldType{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Nullable = b.Nullable
	if b.AtomicType != nil {
		x.xxx_hidden_TypeInfo = &fieldType_AtomicType{*b.AtomicType}
	}
	if b.ArrayType != nil {
		x.xxx_hidden_TypeInfo = &fieldType_ArrayType{b.ArrayType}
	}
	if b.IterableType != nil {
		x.xxx_hidden_TypeInfo = &fieldType_IterableType{b.IterableType}
	}
	if b.MapType != nil {
		x.xxx_hidden_TypeInfo = &fieldType_MapType{b.MapType}
	}
	if b.RowType != nil {
		x.xxx_hidden_TypeInfo = &fieldType_RowType{b.RowType}
	}
	if b.LogicalType != nil {
		x.xxx_hidden_TypeInfo = &fieldType_LogicalType{b.LogicalType}
	}
	return m0
}

type case_FieldType_TypeInfo protoreflect.FieldNumber

func (x case_FieldType_TypeInfo) String() string {
	md := file_org_apache_beam_model_pipeline_v1_schema_proto_msgTypes[2].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type isFieldType_TypeInfo interface {
	isFieldType_TypeInfo()
}

type fieldType_AtomicType struct {
	AtomicType AtomicType `protobuf:"varint,2,opt,name=atomic_type,json=atomicType,proto3,enum=org.apache.beam.model.pipeline.v1.AtomicType,oneof"`
}

type fieldType_ArrayType struct {
	ArrayType *ArrayType `protobuf:"bytes,3,opt,name=array_type,json=arrayType,proto3,oneof"`
}

type fieldType_IterableType struct {
	IterableType *IterableType `protobuf:"bytes,4,opt,name=iterable_type,json=iterableType,proto3,oneof"`
}

type fieldType_MapType struct {
	MapType *MapType `protobuf:"bytes,5,opt,name=map_type,json=mapType,proto3,oneof"`
}

type fieldType_RowType struct {
	RowType *RowType `protobuf:"bytes,6,opt,name=row_type,json=rowType,proto3,oneof"`
}

type fieldType_LogicalType struct {
	LogicalType *LogicalType `protobuf:"bytes,7,opt,name=logical_type,json=logicalType,proto3,oneof"`
}

func (*fieldType_AtomicType) isFieldType_TypeInfo() {}

func (*fieldType_ArrayType) isFieldType_TypeInfo() {}

func (*fieldType_IterableType) isFieldType_TypeInfo() {}

func (*fieldType_MapType) isFieldType_TypeInfo() {}

func (*fieldType_RowType) isFieldType_TypeInfo() {}

func (*fieldType_LogicalType) isFieldType_TypeInfo() {}

type ArrayType struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_ElementType *FieldType             `protobuf:"bytes,1,opt,name=element_type,json=elementType,proto3" json:"element_type,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *ArrayType) Reset() {
	*x = ArrayType{}
	mi := &file_org_apache_beam_model_pipeline_v1_schema_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArrayType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArrayType) ProtoMessage() {}

func (x *ArrayType) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_pipeline_v1_schema_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ArrayType) GetElementType() *FieldType {
	if x != nil {
		return x.xxx_hidden_ElementType
	}
	return nil
}

func (x *ArrayType) SetElementType(v *FieldType) {
	x.xxx_hidden_ElementType = v
}

func (x *ArrayType) HasElementType() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_ElementType != nil
}

func (x *ArrayType) ClearElementType() {
	x.xxx_hidden_ElementType = nil
}

type ArrayType_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	ElementType *FieldType
}

func (b0 ArrayType_builder) Build() *ArrayType {
	m0 := &ArrayType{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_ElementType = b.ElementType
	return m0
}

type IterableType struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_ElementType *FieldType             `protobuf:"bytes,1,opt,name=element_type,json=elementType,proto3" json:"element_type,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *IterableType) Reset() {
	*x = IterableType{}
	mi := &file_org_apache_beam_model_pipeline_v1_schema_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IterableType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IterableType) ProtoMessage() {}

func (x *IterableType) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_pipeline_v1_schema_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *IterableType) GetElementType() *FieldType {
	if x != nil {
		return x.xxx_hidden_ElementType
	}
	return nil
}

func (x *IterableType) SetElementType(v *FieldType) {
	x.xxx_hidden_ElementType = v
}

func (x *IterableType) HasElementType() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_ElementType != nil
}

func (x *IterableType) ClearElementType() {
	x.xxx_hidden_ElementType = nil
}

type IterableType_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	ElementType *FieldType
}

func (b0 IterableType_builder) Build() *IterableType {
	m0 := &IterableType{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_ElementType = b.ElementType
	return m0
}

type MapType struct {
	state                protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_KeyType   *FieldType             `protobuf:"bytes,1,opt,name=key_type,json=keyType,proto3" json:"key_type,omitempty"`
	xxx_hidden_ValueType *FieldType             `protobuf:"bytes,2,opt,name=value_type,json=valueType,proto3" json:"value_type,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *MapType) Reset() {
	*x = MapType{}
	mi := &file_org_apache_beam_model_pipeline_v1_schema_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MapType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapType) ProtoMessage() {}

func (x *MapType) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_pipeline_v1_schema_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *MapType) GetKeyType() *FieldType {
	if x != nil {
		return x.xxx_hidden_KeyType
	}
	return nil
}

func (x *MapType) GetValueType() *FieldType {
	if x != nil {
		return x.xxx_hidden_ValueType
	}
	return nil
}

func (x *MapType) SetKeyType(v *FieldType) {
	x.xxx_hidden_KeyType = v
}

func (x *MapType) SetValueType(v *FieldType) {
	x.xxx_hidden_ValueType = v
}

func (x *MapType) HasKeyType() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_KeyType != nil
}

func (x *MapType) HasValueType() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_ValueType != nil
}

func (x *MapType) ClearKeyType() {
	x.xxx_hidden_KeyType = nil
}

func (x *MapType) ClearValueType() {
	x.xxx_hidden_ValueType = nil
}

type MapType_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	KeyType   *FieldType
	ValueType *FieldType
}

func (b0 MapType_builder) Build() *MapType {
	m0 := &MapType{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_KeyType = b.KeyType
	x.xxx_hidden_ValueType = b.ValueType
	return m0
}

type RowType struct {
	state             protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Schema *Schema                `protobuf:"bytes,1,opt,name=schema,proto3" json:"schema,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *RowType) Reset() {
	*x = RowType{}
	mi := &file_org_apache_beam_model_pipeline_v1_schema_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RowType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RowType) ProtoMessage() {}

func (x *RowType) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_pipeline_v1_schema_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *RowType) GetSchema() *Schema {
	if x != nil {
		return x.xxx_hidden_Schema
	}
	return nil
}

func (x *RowType) SetSchema(v *Schema) {
	x.xxx_hidden_Schema = v
}

func (x *RowType) HasSchema() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Schema != nil
}

func (x *RowType) ClearSchema() {
	x.xxx_hidden_Schema = nil
}

type RowType_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Schema *Schema
}

func (b0 RowType_builder) Build() *RowType {
	m0 := &RowType{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Schema = b.Schema
	return m0
}

type LogicalType struct {
	state                     protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Urn            string                 `protobuf:"bytes,1,opt,name=urn,proto3" json:"urn,omitempty"`
	xxx_hidden_Payload        []byte                 `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	xxx_hidden_Representation *FieldType             `protobuf:"bytes,3,opt,name=representation,proto3" json:"representation,omitempty"`
	xxx_hidden_ArgumentType   *FieldType             `protobuf:"bytes,4,opt,name=argument_type,json=argumentType,proto3" json:"argument_type,omitempty"`
	xxx_hidden_Argument       *FieldValue            `protobuf:"bytes,5,opt,name=argument,proto3" json:"argument,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *LogicalType) Reset() {
	*x = LogicalType{}
	mi := &file_org_apache_beam_model_pipeline_v1_schema_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogicalType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogicalType) ProtoMessage() {}

func (x *LogicalType) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_pipeline_v1_schema_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *LogicalType) GetUrn() string {
	if x != nil {
		return x.xxx_hidden_Urn
	}
	return ""
}

func (x *LogicalType) GetPayload() []byte {
	if x != nil {
		return x.xxx_hidden_Payload
	}
	return nil
}

func (x *LogicalType) GetRepresentation() *FieldType {
	if x != nil {
		return x.xxx_hidden_Representation
	}
	return nil
}

func (x *LogicalType) GetArgumentType() *FieldType {
	if x != nil {
		return x.xxx_hidden_ArgumentType
	}
	return nil
}

func (x *LogicalType) GetArgument() *FieldValue {
	if x != nil {
		return x.xxx_hidden_Argument
	}
	return nil
}

func (x *LogicalType) SetUrn(v string) {
	x.xxx_hidden_Urn = v
}

func (x *LogicalType) SetPayload(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.xxx_hidden_Payload = v
}

func (x *LogicalType) SetRepresentation(v *FieldType) {
	x.xxx_hidden_Representation = v
}

func (x *LogicalType) SetArgumentType(v *FieldType) {
	x.xxx_hidden_ArgumentType = v
}

func (x *LogicalType) SetArgument(v *FieldValue) {
	x.xxx_hidden_Argument = v
}

func (x *LogicalType) HasRepresentation() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Representation != nil
}

func (x *LogicalType) HasArgumentType() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_ArgumentType != nil
}

func (x *LogicalType) HasArgument() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Argument != nil
}

func (x *LogicalType) ClearRepresentation() {
	x.xxx_hidden_Representation = nil
}

func (x *LogicalType) ClearArgumentType() {
	x.xxx_hidden_ArgumentType = nil
}

func (x *LogicalType) ClearArgument() {
	x.xxx_hidden_Argument = nil
}

type LogicalType_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Urn            string
	Payload        []byte
	Representation *FieldType
	ArgumentType   *FieldType
	Argument       *FieldValue
}

func (b0 LogicalType_builder) Build() *LogicalType {
	m0 := &LogicalType{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Urn = b.Urn
	x.xxx_hidden_Payload = b.Payload
	x.xxx_hidden_Representation = b.Representation
	x.xxx_hidden_ArgumentType = b.ArgumentType
	x.xxx_hidden_Argument = b.Argument
	return m0
}

// Universally defined Logical types for Row schemas.
// These logical types are supposed to be understood by all SDKs.
type LogicalTypes struct {
	state         protoimpl.MessageState `protogen:"opaque.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LogicalTypes) Reset() {
	*x = LogicalTypes{}
	mi := &file_org_apache_beam_model_pipeline_v1_schema_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogicalTypes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogicalTypes) ProtoMessage() {}

func (x *LogicalTypes) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_pipeline_v1_schema_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

type LogicalTypes_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

}

func (b0 LogicalTypes_builder) Build() *LogicalTypes {
	m0 := &LogicalTypes{}
	b, x := &b0, m0
	_, _ = b, x
	return m0
}

type Option struct {
	state            protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Name  string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	xxx_hidden_Type  *FieldType             `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	xxx_hidden_Value *FieldValue            `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *Option) Reset() {
	*x = Option{}
	mi := &file_org_apache_beam_model_pipeline_v1_schema_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Option) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Option) ProtoMessage() {}

func (x *Option) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_pipeline_v1_schema_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Option) GetName() string {
	if x != nil {
		return x.xxx_hidden_Name
	}
	return ""
}

func (x *Option) GetType() *FieldType {
	if x != nil {
		return x.xxx_hidden_Type
	}
	return nil
}

func (x *Option) GetValue() *FieldValue {
	if x != nil {
		return x.xxx_hidden_Value
	}
	return nil
}

func (x *Option) SetName(v string) {
	x.xxx_hidden_Name = v
}

func (x *Option) SetType(v *FieldType) {
	x.xxx_hidden_Type = v
}

func (x *Option) SetValue(v *FieldValue) {
	x.xxx_hidden_Value = v
}

func (x *Option) HasType() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Type != nil
}

func (x *Option) HasValue() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Value != nil
}

func (x *Option) ClearType() {
	x.xxx_hidden_Type = nil
}

func (x *Option) ClearValue() {
	x.xxx_hidden_Value = nil
}

type Option_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// REQUIRED. Identifier for the option.
	Name string
	// REQUIRED. Type specifier for the structure of value.
	// Conventionally, options that don't require additional configuration should
	// use a boolean type, with the value set to true.
	Type  *FieldType
	Value *FieldValue
}

func (b0 Option_builder) Build() *Option {
	m0 := &Option{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Name = b.Name
	x.xxx_hidden_Type = b.Type
	x.xxx_hidden_Value = b.Value
	return m0
}

type Row struct {
	state             protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Values *[]*FieldValue         `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *Row) Reset() {
	*x = Row{}
	mi := &file_org_apache_beam_model_pipeline_v1_schema_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Row) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Row) ProtoMessage() {}

func (x *Row) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_pipeline_v1_schema_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Row) GetValues() []*FieldValue {
	if x != nil {
		if x.xxx_hidden_Values != nil {
			return *x.xxx_hidden_Values
		}
	}
	return nil
}

func (x *Row) SetValues(v []*FieldValue) {
	x.xxx_hidden_Values = &v
}

type Row_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Values []*FieldValue
}

func (b0 Row_builder) Build() *Row {
	m0 := &Row{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Values = &b.Values
	return m0
}

type FieldValue struct {
	state                 protoimpl.MessageState  `protogen:"opaque.v1"`
	xxx_hidden_FieldValue isFieldValue_FieldValue `protobuf_oneof:"field_value"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *FieldValue) Reset() {
	*x = FieldValue{}
	mi := &file_org_apache_beam_model_pipeline_v1_schema_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FieldValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldValue) ProtoMessage() {}

func (x *FieldValue) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_pipeline_v1_schema_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *FieldValue) GetAtomicValue() *AtomicTypeValue {
	if x != nil {
		if x, ok := x.xxx_hidden_FieldValue.(*fieldValue_AtomicValue); ok {
			return x.AtomicValue
		}
	}
	return nil
}

func (x *FieldValue) GetArrayValue() *ArrayTypeValue {
	if x != nil {
		if x, ok := x.xxx_hidden_FieldValue.(*fieldValue_ArrayValue); ok {
			return x.ArrayValue
		}
	}
	return nil
}

func (x *FieldValue) GetIterableValue() *IterableTypeValue {
	if x != nil {
		if x, ok := x.xxx_hidden_FieldValue.(*fieldValue_IterableValue); ok {
			return x.IterableValue
		}
	}
	return nil
}

func (x *FieldValue) GetMapValue() *MapTypeValue {
	if x != nil {
		if x, ok := x.xxx_hidden_FieldValue.(*fieldValue_MapValue); ok {
			return x.MapValue
		}
	}
	return nil
}

func (x *FieldValue) GetRowValue() *Row {
	if x != nil {
		if x, ok := x.xxx_hidden_FieldValue.(*fieldValue_RowValue); ok {
			return x.RowValue
		}
	}
	return nil
}

func (x *FieldValue) GetLogicalTypeValue() *LogicalTypeValue {
	if x != nil {
		if x, ok := x.xxx_hidden_FieldValue.(*fieldValue_LogicalTypeValue); ok {
			return x.LogicalTypeValue
		}
	}
	return nil
}

func (x *FieldValue) SetAtomicValue(v *AtomicTypeValue) {
	if v == nil {
		x.xxx_hidden_FieldValue = nil
		return
	}
	x.xxx_hidden_FieldValue = &fieldValue_AtomicValue{v}
}

func (x *FieldValue) SetArrayValue(v *ArrayTypeValue) {
	if v == nil {
		x.xxx_hidden_FieldValue = nil
		return
	}
	x.xxx_hidden_FieldValue = &fieldValue_ArrayValue{v}
}

func (x *FieldValue) SetIterableValue(v *IterableTypeValue) {
	if v == nil {
		x.xxx_hidden_FieldValue = nil
		return
	}
	x.xxx_hidden_FieldValue = &fieldValue_IterableValue{v}
}

func (x *FieldValue) SetMapValue(v *MapTypeValue) {
	if v == nil {
		x.xxx_hidden_FieldValue = nil
		return
	}
	x.xxx_hidden_FieldValue = &fieldValue_MapValue{v}
}

func (x *FieldValue) SetRowValue(v *Row) {
	if v == nil {
		x.xxx_hidden_FieldValue = nil
		return
	}
	x.xxx_hidden_FieldValue = &fieldValue_RowValue{v}
}

func (x *FieldValue) SetLogicalTypeValue(v *LogicalTypeValue) {
	if v == nil {
		x.xxx_hidden_FieldValue = nil
		return
	}
	x.xxx_hidden_FieldValue = &fieldValue_LogicalTypeValue{v}
}

func (x *FieldValue) HasFieldValue() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_FieldValue != nil
}

func (x *FieldValue) HasAtomicValue() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_FieldValue.(*fieldValue_AtomicValue)
	return ok
}

func (x *FieldValue) HasArrayValue() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_FieldValue.(*fieldValue_ArrayValue)
	return ok
}

func (x *FieldValue) HasIterableValue() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_FieldValue.(*fieldValue_IterableValue)
	return ok
}

func (x *FieldValue) HasMapValue() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_FieldValue.(*fieldValue_MapValue)
	return ok
}

func (x *FieldValue) HasRowValue() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_FieldValue.(*fieldValue_RowValue)
	return ok
}

func (x *FieldValue) HasLogicalTypeValue() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_FieldValue.(*fieldValue_LogicalTypeValue)
	return ok
}

func (x *FieldValue) ClearFieldValue() {
	x.xxx_hidden_FieldValue = nil
}

func (x *FieldValue) ClearAtomicValue() {
	if _, ok := x.xxx_hidden_FieldValue.(*fieldValue_AtomicValue); ok {
		x.xxx_hidden_FieldValue = nil
	}
}

func (x *FieldValue) ClearArrayValue() {
	if _, ok := x.xxx_hidden_FieldValue.(*fieldValue_ArrayValue); ok {
		x.xxx_hidden_FieldValue = nil
	}
}

func (x *FieldValue) ClearIterableValue() {
	if _, ok := x.xxx_hidden_FieldValue.(*fieldValue_IterableValue); ok {
		x.xxx_hidden_FieldValue = nil
	}
}

func (x *FieldValue) ClearMapValue() {
	if _, ok := x.xxx_hidden_FieldValue.(*fieldValue_MapValue); ok {
		x.xxx_hidden_FieldValue = nil
	}
}

func (x *FieldValue) ClearRowValue() {
	if _, ok := x.xxx_hidden_FieldValue.(*fieldValue_RowValue); ok {
		x.xxx_hidden_FieldValue = nil
	}
}

func (x *FieldValue) ClearLogicalTypeValue() {
	if _, ok := x.xxx_hidden_FieldValue.(*fieldValue_LogicalTypeValue); ok {
		x.xxx_hidden_FieldValue = nil
	}
}

const FieldValue_FieldValue_not_set_case case_FieldValue_FieldValue = 0
const FieldValue_AtomicValue_case case_FieldValue_FieldValue = 1
const FieldValue_ArrayValue_case case_FieldValue_FieldValue = 2
const FieldValue_IterableValue_case case_FieldValue_FieldValue = 3
const FieldValue_MapValue_case case_FieldValue_FieldValue = 4
const FieldValue_RowValue_case case_FieldValue_FieldValue = 5
const FieldValue_LogicalTypeValue_case case_FieldValue_FieldValue = 6

func (x *FieldValue) WhichFieldValue() case_FieldValue_FieldValue {
	if x == nil {
		return FieldValue_FieldValue_not_set_case
	}
	switch x.xxx_hidden_FieldValue.(type) {
	case *fieldValue_AtomicValue:
		return FieldValue_AtomicValue_case
	case *fieldValue_ArrayValue:
		return FieldValue_ArrayValue_case
	case *fieldValue_IterableValue:
		return FieldValue_IterableValue_case
	case *fieldValue_MapValue:
		return FieldValue_MapValue_case
	case *fieldValue_RowValue:
		return FieldValue_RowValue_case
	case *fieldValue_LogicalTypeValue:
		return FieldValue_LogicalTypeValue_case
	default:
		return FieldValue_FieldValue_not_set_case
	}
}

type FieldValue_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// If none of these are set, value is considered null.

	// Fields of oneof xxx_hidden_FieldValue:
	AtomicValue      *AtomicTypeValue
	ArrayValue       *ArrayTypeValue
	IterableValue    *IterableTypeValue
	MapValue         *MapTypeValue
	RowValue         *Row
	LogicalTypeValue *LogicalTypeValue
	// -- end of xxx_hidden_FieldValue
}

func (b0 FieldValue_builder) Build() *FieldValue {
	m0 := &FieldValue{}
	b, x := &b0, m0
	_, _ = b, x
	if b.AtomicValue != nil {
		x.xxx_hidden_FieldValue = &fieldValue_AtomicValue{b.AtomicValue}
	}
	if b.ArrayValue != nil {
		x.xxx_hidden_FieldValue = &fieldValue_ArrayValue{b.ArrayValue}
	}
	if b.IterableValue != nil {
		x.xxx_hidden_FieldValue = &fieldValue_IterableValue{b.IterableValue}
	}
	if b.MapValue != nil {
		x.xxx_hidden_FieldValue = &fieldValue_MapValue{b.MapValue}
	}
	if b.RowValue != nil {
		x.xxx_hidden_FieldValue = &fieldValue_RowValue{b.RowValue}
	}
	if b.LogicalTypeValue != nil {
		x.xxx_hidden_FieldValue = &fieldValue_LogicalTypeValue{b.LogicalTypeValue}
	}
	return m0
}

type case_FieldValue_FieldValue protoreflect.FieldNumber

func (x case_FieldValue_FieldValue) String() string {
	md := file_org_apache_beam_model_pipeline_v1_schema_proto_msgTypes[11].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type isFieldValue_FieldValue interface {
	isFieldValue_FieldValue()
}

type fieldValue_AtomicValue struct {
	AtomicValue *AtomicTypeValue `protobuf:"bytes,1,opt,name=atomic_value,json=atomicValue,proto3,oneof"`
}

type fieldValue_ArrayValue struct {
	ArrayValue *ArrayTypeValue `protobuf:"bytes,2,opt,name=array_value,json=arrayValue,proto3,oneof"`
}

type fieldValue_IterableValue struct {
	IterableValue *IterableTypeValue `protobuf:"bytes,3,opt,name=iterable_value,json=iterableValue,proto3,oneof"`
}

type fieldValue_MapValue struct {
	MapValue *MapTypeValue `protobuf:"bytes,4,opt,name=map_value,json=mapValue,proto3,oneof"`
}

type fieldValue_RowValue struct {
	RowValue *Row `protobuf:"bytes,5,opt,name=row_value,json=rowValue,proto3,oneof"`
}

type fieldValue_LogicalTypeValue struct {
	LogicalTypeValue *LogicalTypeValue `protobuf:"bytes,6,opt,name=logical_type_value,json=logicalTypeValue,proto3,oneof"`
}

func (*fieldValue_AtomicValue) isFieldValue_FieldValue() {}

func (*fieldValue_ArrayValue) isFieldValue_FieldValue() {}

func (*fieldValue_IterableValue) isFieldValue_FieldValue() {}

func (*fieldValue_MapValue) isFieldValue_FieldValue() {}

func (*fieldValue_RowValue) isFieldValue_FieldValue() {}

func (*fieldValue_LogicalTypeValue) isFieldValue_FieldValue() {}

type AtomicTypeValue struct {
	state            protoimpl.MessageState  `protogen:"opaque.v1"`
	xxx_hidden_Value isAtomicTypeValue_Value `protobuf_oneof:"value"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *AtomicTypeValue) Reset() {
	*x = AtomicTypeValue{}
	mi := &file_org_apache_beam_model_pipeline_v1_schema_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AtomicTypeValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AtomicTypeValue) ProtoMessage() {}

func (x *AtomicTypeValue) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_pipeline_v1_schema_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *AtomicTypeValue) GetByte() int32 {
	if x != nil {
		if x, ok := x.xxx_hidden_Value.(*atomicTypeValue_Byte); ok {
			return x.Byte
		}
	}
	return 0
}

func (x *AtomicTypeValue) GetInt16() int32 {
	if x != nil {
		if x, ok := x.xxx_hidden_Value.(*atomicTypeValue_Int16); ok {
			return x.Int16
		}
	}
	return 0
}

func (x *AtomicTypeValue) GetInt32() int32 {
	if x != nil {
		if x, ok := x.xxx_hidden_Value.(*atomicTypeValue_Int32); ok {
			return x.Int32
		}
	}
	return 0
}

func (x *AtomicTypeValue) GetInt64() int64 {
	if x != nil {
		if x, ok := x.xxx_hidden_Value.(*atomicTypeValue_Int64); ok {
			return x.Int64
		}
	}
	return 0
}

func (x *AtomicTypeValue) GetFloat() float32 {
	if x != nil {
		if x, ok := x.xxx_hidden_Value.(*atomicTypeValue_Float); ok {
			return x.Float
		}
	}
	return 0
}

func (x *AtomicTypeValue) GetDouble() float64 {
	if x != nil {
		if x, ok := x.xxx_hidden_Value.(*atomicTypeValue_Double); ok {
			return x.Double
		}
	}
	return 0
}

func (x *AtomicTypeValue) GetString() string {
	if x != nil {
		if x, ok := x.xxx_hidden_Value.(*atomicTypeValue_String_); ok {
			return x.String_
		}
	}
	return ""
}

func (x *AtomicTypeValue) GetBoolean() bool {
	if x != nil {
		if x, ok := x.xxx_hidden_Value.(*atomicTypeValue_Boolean); ok {
			return x.Boolean
		}
	}
	return false
}

func (x *AtomicTypeValue) GetBytes() []byte {
	if x != nil {
		if x, ok := x.xxx_hidden_Value.(*atomicTypeValue_Bytes); ok {
			return x.Bytes
		}
	}
	return nil
}

func (x *AtomicTypeValue) SetByte(v int32) {
	x.xxx_hidden_Value = &atomicTypeValue_Byte{v}
}

func (x *AtomicTypeValue) SetInt16(v int32) {
	x.xxx_hidden_Value = &atomicTypeValue_Int16{v}
}

func (x *AtomicTypeValue) SetInt32(v int32) {
	x.xxx_hidden_Value = &atomicTypeValue_Int32{v}
}

func (x *AtomicTypeValue) SetInt64(v int64) {
	x.xxx_hidden_Value = &atomicTypeValue_Int64{v}
}

func (x *AtomicTypeValue) SetFloat(v float32) {
	x.xxx_hidden_Value = &atomicTypeValue_Float{v}
}

func (x *AtomicTypeValue) SetDouble(v float64) {
	x.xxx_hidden_Value = &atomicTypeValue_Double{v}
}

func (x *AtomicTypeValue) SetString(v string) {
	x.xxx_hidden_Value = &atomicTypeValue_String_{v}
}

func (x *AtomicTypeValue) SetBoolean(v bool) {
	x.xxx_hidden_Value = &atomicTypeValue_Boolean{v}
}

func (x *AtomicTypeValue) SetBytes(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.xxx_hidden_Value = &atomicTypeValue_Bytes{v}
}

func (x *AtomicTypeValue) HasValue() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Value != nil
}

func (x *AtomicTypeValue) HasByte() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Value.(*atomicTypeValue_Byte)
	return ok
}

func (x *AtomicTypeValue) HasInt16() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Value.(*atomicTypeValue_Int16)
	return ok
}

func (x *AtomicTypeValue) HasInt32() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Value.(*atomicTypeValue_Int32)
	return ok
}

func (x *AtomicTypeValue) HasInt64() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Value.(*atomicTypeValue_Int64)
	return ok
}

func (x *AtomicTypeValue) HasFloat() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Value.(*atomicTypeValue_Float)
	return ok
}

func (x *AtomicTypeValue) HasDouble() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Value.(*atomicTypeValue_Double)
	return ok
}

func (x *AtomicTypeValue) HasString() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Value.(*atomicTypeValue_String_)
	return ok
}

func (x *AtomicTypeValue) HasBoolean() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Value.(*atomicTypeValue_Boolean)
	return ok
}

func (x *AtomicTypeValue) HasBytes() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Value.(*atomicTypeValue_Bytes)
	return ok
}

func (x *AtomicTypeValue) ClearValue() {
	x.xxx_hidden_Value = nil
}

func (x *AtomicTypeValue) ClearByte() {
	if _, ok := x.xxx_hidden_Value.(*atomicTypeValue_Byte); ok {
		x.xxx_hidden_Value = nil
	}
}

func (x *AtomicTypeValue) ClearInt16() {
	if _, ok := x.xxx_hidden_Value.(*atomicTypeValue_Int16); ok {
		x.xxx_hidden_Value = nil
	}
}

func (x *AtomicTypeValue) ClearInt32() {
	if _, ok := x.xxx_hidden_Value.(*atomicTypeValue_Int32); ok {
		x.xxx_hidden_Value = nil
	}
}

func (x *AtomicTypeValue) ClearInt64() {
	if _, ok := x.xxx_hidden_Value.(*atomicTypeValue_Int64); ok {
		x.xxx_hidden_Value = nil
	}
}

func (x *AtomicTypeValue) ClearFloat() {
	if _, ok := x.xxx_hidden_Value.(*atomicTypeValue_Float); ok {
		x.xxx_hidden_Value = nil
	}
}

func (x *AtomicTypeValue) ClearDouble() {
	if _, ok := x.xxx_hidden_Value.(*atomicTypeValue_Double); ok {
		x.xxx_hidden_Value = nil
	}
}

func (x *AtomicTypeValue) ClearString() {
	if _, ok := x.xxx_hidden_Value.(*atomicTypeValue_String_); ok {
		x.xxx_hidden_Value = nil
	}
}

func (x *AtomicTypeValue) ClearBoolean() {
	if _, ok := x.xxx_hidden_Value.(*atomicTypeValue_Boolean); ok {
		x.xxx_hidden_Value = nil
	}
}

func (x *AtomicTypeValue) ClearBytes() {
	if _, ok := x.xxx_hidden_Value.(*atomicTypeValue_Bytes); ok {
		x.xxx_hidden_Value = nil
	}
}

const AtomicTypeValue_Value_not_set_case case_AtomicTypeValue_Value = 0
const AtomicTypeValue_Byte_case case_AtomicTypeValue_Value = 1
const AtomicTypeValue_Int16_case case_AtomicTypeValue_Value = 2
const AtomicTypeValue_Int32_case case_AtomicTypeValue_Value = 3
const AtomicTypeValue_Int64_case case_AtomicTypeValue_Value = 4
const AtomicTypeValue_Float_case case_AtomicTypeValue_Value = 5
const AtomicTypeValue_Double_case case_AtomicTypeValue_Value = 6
const AtomicTypeValue_String__case case_AtomicTypeValue_Value = 7
const AtomicTypeValue_Boolean_case case_AtomicTypeValue_Value = 8
const AtomicTypeValue_Bytes_case case_AtomicTypeValue_Value = 9

func (x *AtomicTypeValue) WhichValue() case_AtomicTypeValue_Value {
	if x == nil {
		return AtomicTypeValue_Value_not_set_case
	}
	switch x.xxx_hidden_Value.(type) {
	case *atomicTypeValue_Byte:
		return AtomicTypeValue_Byte_case
	case *atomicTypeValue_Int16:
		return AtomicTypeValue_Int16_case
	case *atomicTypeValue_Int32:
		return AtomicTypeValue_Int32_case
	case *atomicTypeValue_Int64:
		return AtomicTypeValue_Int64_case
	case *atomicTypeValue_Float:
		return AtomicTypeValue_Float_case
	case *atomicTypeValue_Double:
		return AtomicTypeValue_Double_case
	case *atomicTypeValue_String_:
		return AtomicTypeValue_String__case
	case *atomicTypeValue_Boolean:
		return AtomicTypeValue_Boolean_case
	case *atomicTypeValue_Bytes:
		return AtomicTypeValue_Bytes_case
	default:
		return AtomicTypeValue_Value_not_set_case
	}
}

type AtomicTypeValue_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Fields of oneof xxx_hidden_Value:
	Byte    *int32
	Int16   *int32
	Int32   *int32
	Int64   *int64
	Float   *float32
	Double  *float64
	String  *string
	Boolean *bool
	Bytes   []byte
	// -- end of xxx_hidden_Value
}

func (b0 AtomicTypeValue_builder) Build() *AtomicTypeValue {
	m0 := &AtomicTypeValue{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Byte != nil {
		x.xxx_hidden_Value = &atomicTypeValue_Byte{*b.Byte}
	}
	if b.Int16 != nil {
		x.xxx_hidden_Value = &atomicTypeValue_Int16{*b.Int16}
	}
	if b.Int32 != nil {
		x.xxx_hidden_Value = &atomicTypeValue_Int32{*b.Int32}
	}
	if b.Int64 != nil {
		x.xxx_hidden_Value = &atomicTypeValue_Int64{*b.Int64}
	}
	if b.Float != nil {
		x.xxx_hidden_Value = &atomicTypeValue_Float{*b.Float}
	}
	if b.Double != nil {
		x.xxx_hidden_Value = &atomicTypeValue_Double{*b.Double}
	}
	if b.String != nil {
		x.xxx_hidden_Value = &atomicTypeValue_String_{*b.String}
	}
	if b.Boolean != nil {
		x.xxx_hidden_Value = &atomicTypeValue_Boolean{*b.Boolean}
	}
	if b.Bytes != nil {
		x.xxx_hidden_Value = &atomicTypeValue_Bytes{b.Bytes}
	}
	return m0
}

type case_AtomicTypeValue_Value protoreflect.FieldNumber

func (x case_AtomicTypeValue_Value) String() string {
	md := file_org_apache_beam_model_pipeline_v1_schema_proto_msgTypes[12].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type isAtomicTypeValue_Value interface {
	isAtomicTypeValue_Value()
}

type atomicTypeValue_Byte struct {
	Byte int32 `protobuf:"varint,1,opt,name=byte,proto3,oneof"`
}

type atomicTypeValue_Int16 struct {
	Int16 int32 `protobuf:"varint,2,opt,name=int16,proto3,oneof"`
}

type atomicTypeValue_Int32 struct {
	Int32 int32 `protobuf:"varint,3,opt,name=int32,proto3,oneof"`
}

type atomicTypeValue_Int64 struct {
	Int64 int64 `protobuf:"varint,4,opt,name=int64,proto3,oneof"`
}

type atomicTypeValue_Float struct {
	Float float32 `protobuf:"fixed32,5,opt,name=float,proto3,oneof"`
}

type atomicTypeValue_Double struct {
	Double float64 `protobuf:"fixed64,6,opt,name=double,proto3,oneof"`
}

type atomicTypeValue_String_ struct {
	String_ string `protobuf:"bytes,7,opt,name=string,proto3,oneof"`
}

type atomicTypeValue_Boolean struct {
	Boolean bool `protobuf:"varint,8,opt,name=boolean,proto3,oneof"`
}

type atomicTypeValue_Bytes struct {
	Bytes []byte `protobuf:"bytes,9,opt,name=bytes,proto3,oneof"`
}

func (*atomicTypeValue_Byte) isAtomicTypeValue_Value() {}

func (*atomicTypeValue_Int16) isAtomicTypeValue_Value() {}

func (*atomicTypeValue_Int32) isAtomicTypeValue_Value() {}

func (*atomicTypeValue_Int64) isAtomicTypeValue_Value() {}

func (*atomicTypeValue_Float) isAtomicTypeValue_Value() {}

func (*atomicTypeValue_Double) isAtomicTypeValue_Value() {}

func (*atomicTypeValue_String_) isAtomicTypeValue_Value() {}

func (*atomicTypeValue_Boolean) isAtomicTypeValue_Value() {}

func (*atomicTypeValue_Bytes) isAtomicTypeValue_Value() {}

type ArrayTypeValue struct {
	state              protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Element *[]*FieldValue         `protobuf:"bytes,1,rep,name=element,proto3" json:"element,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ArrayTypeValue) Reset() {
	*x = ArrayTypeValue{}
	mi := &file_org_apache_beam_model_pipeline_v1_schema_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArrayTypeValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArrayTypeValue) ProtoMessage() {}

func (x *ArrayTypeValue) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_pipeline_v1_schema_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ArrayTypeValue) GetElement() []*FieldValue {
	if x != nil {
		if x.xxx_hidden_Element != nil {
			return *x.xxx_hidden_Element
		}
	}
	return nil
}

func (x *ArrayTypeValue) SetElement(v []*FieldValue) {
	x.xxx_hidden_Element = &v
}

type ArrayTypeValue_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Element []*FieldValue
}

func (b0 ArrayTypeValue_builder) Build() *ArrayTypeValue {
	m0 := &ArrayTypeValue{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Element = &b.Element
	return m0
}

type IterableTypeValue struct {
	state              protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Element *[]*FieldValue         `protobuf:"bytes,1,rep,name=element,proto3" json:"element,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *IterableTypeValue) Reset() {
	*x = IterableTypeValue{}
	mi := &file_org_apache_beam_model_pipeline_v1_schema_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IterableTypeValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IterableTypeValue) ProtoMessage() {}

func (x *IterableTypeValue) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_pipeline_v1_schema_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *IterableTypeValue) GetElement() []*FieldValue {
	if x != nil {
		if x.xxx_hidden_Element != nil {
			return *x.xxx_hidden_Element
		}
	}
	return nil
}

func (x *IterableTypeValue) SetElement(v []*FieldValue) {
	x.xxx_hidden_Element = &v
}

type IterableTypeValue_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Element []*FieldValue
}

func (b0 IterableTypeValue_builder) Build() *IterableTypeValue {
	m0 := &IterableTypeValue{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Element = &b.Element
	return m0
}

type MapTypeValue struct {
	state              protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Entries *[]*MapTypeEntry       `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *MapTypeValue) Reset() {
	*x = MapTypeValue{}
	mi := &file_org_apache_beam_model_pipeline_v1_schema_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MapTypeValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapTypeValue) ProtoMessage() {}

func (x *MapTypeValue) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_pipeline_v1_schema_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *MapTypeValue) GetEntries() []*MapTypeEntry {
	if x != nil {
		if x.xxx_hidden_Entries != nil {
			return *x.xxx_hidden_Entries
		}
	}
	return nil
}

func (x *MapTypeValue) SetEntries(v []*MapTypeEntry) {
	x.xxx_hidden_Entries = &v
}

type MapTypeValue_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Entries []*MapTypeEntry
}

func (b0 MapTypeValue_builder) Build() *MapTypeValue {
	m0 := &MapTypeValue{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Entries = &b.Entries
	return m0
}

type MapTypeEntry struct {
	state            protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Key   *FieldValue            `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	xxx_hidden_Value *FieldValue            `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *MapTypeEntry) Reset() {
	*x = MapTypeEntry{}
	mi := &file_org_apache_beam_model_pipeline_v1_schema_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MapTypeEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapTypeEntry) ProtoMessage() {}

func (x *MapTypeEntry) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_pipeline_v1_schema_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *MapTypeEntry) GetKey() *FieldValue {
	if x != nil {
		return x.xxx_hidden_Key
	}
	return nil
}

func (x *MapTypeEntry) GetValue() *FieldValue {
	if x != nil {
		return x.xxx_hidden_Value
	}
	return nil
}

func (x *MapTypeEntry) SetKey(v *FieldValue) {
	x.xxx_hidden_Key = v
}

func (x *MapTypeEntry) SetValue(v *FieldValue) {
	x.xxx_hidden_Value = v
}

func (x *MapTypeEntry) HasKey() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Key != nil
}

func (x *MapTypeEntry) HasValue() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Value != nil
}

func (x *MapTypeEntry) ClearKey() {
	x.xxx_hidden_Key = nil
}

func (x *MapTypeEntry) ClearValue() {
	x.xxx_hidden_Value = nil
}

type MapTypeEntry_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Key   *FieldValue
	Value *FieldValue
}

func (b0 MapTypeEntry_builder) Build() *MapTypeEntry {
	m0 := &MapTypeEntry{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Key = b.Key
	x.xxx_hidden_Value = b.Value
	return m0
}

type LogicalTypeValue struct {
	state            protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Value *FieldValue            `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *LogicalTypeValue) Reset() {
	*x = LogicalTypeValue{}
	mi := &file_org_apache_beam_model_pipeline_v1_schema_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogicalTypeValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogicalTypeValue) ProtoMessage() {}

func (x *LogicalTypeValue) ProtoReflect() protoreflect.Message {
	mi := &file_org_apache_beam_model_pipeline_v1_schema_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *LogicalTypeValue) GetValue() *FieldValue {
	if x != nil {
		return x.xxx_hidden_Value
	}
	return nil
}

func (x *LogicalTypeValue) SetValue(v *FieldValue) {
	x.xxx_hidden_Value = v
}

func (x *LogicalTypeValue) HasValue() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Value != nil
}

func (x *LogicalTypeValue) ClearValue() {
	x.xxx_hidden_Value = nil
}

type LogicalTypeValue_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Value *FieldValue
}

func (b0 LogicalTypeValue_builder) Build() *LogicalTypeValue {
	m0 := &LogicalTypeValue{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Value = b.Value
	return m0
}

var File_org_apache_beam_model_pipeline_v1_schema_proto protoreflect.FileDescriptor

var file_org_apache_beam_model_pipeline_v1_schema_proto_rawDesc = []byte{
	0x0a, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2f, 0x62, 0x65, 0x61,
	0x6d, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x2f, 0x76, 0x31, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x21, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61,
	0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x2e, 0x76, 0x31, 0x1a, 0x37, 0x6f, 0x72, 0x67, 0x2f, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2f,
	0x62, 0x65, 0x61, 0x6d, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x70, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x65, 0x61, 0x6d, 0x5f, 0x72, 0x75, 0x6e, 0x6e,
	0x65, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd5, 0x01, 0x0a,
	0x06, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x40, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70,
	0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x43, 0x0a, 0x07, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6f, 0x72, 0x67,
	0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x34,
	0x0a, 0x16, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14,
	0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x53, 0x65, 0x74, 0x22, 0x81, 0x02, 0x0a, 0x05, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e,
	0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69,
	0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x10, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68,
	0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x94, 0x04, 0x0a, 0x09, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x75, 0x6c, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6e, 0x75, 0x6c, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x50, 0x0a, 0x0b, 0x61, 0x74, 0x6f, 0x6d, 0x69, 0x63, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70,
	0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x74, 0x6f, 0x6d,
	0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x74, 0x6f, 0x6d, 0x69, 0x63,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x4d, 0x0a, 0x0a, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61,
	0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x72,
	0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x09, 0x61, 0x72, 0x72, 0x61, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x56, 0x0a, 0x0d, 0x69, 0x74, 0x65, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6f, 0x72, 0x67,
	0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x74, 0x65, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x69,
	0x74, 0x65, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x47, 0x0a, 0x08, 0x6d,
	0x61, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x61, 0x70, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x61, 0x70,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x47, 0x0a, 0x08, 0x72, 0x6f, 0x77, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61,
	0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x77, 0x54, 0x79,
	0x70, 0x65, 0x48, 0x00, 0x52, 0x07, 0x72, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x12, 0x53, 0x0a,
	0x0c, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65,
	0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x22,
	0x5c, 0x0a, 0x09, 0x41, 0x72, 0x72, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4f, 0x0a, 0x0c,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e,
	0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0b, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x5f, 0x0a,
	0x0c, 0x49, 0x74, 0x65, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4f, 0x0a,
	0x0c, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65,
	0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0b, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x9f,
	0x01, 0x0a, 0x07, 0x4d, 0x61, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x47, 0x0a, 0x08, 0x6b, 0x65,
	0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6f,
	0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x4b, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70,
	0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x22, 0x4c, 0x0a, 0x07, 0x52, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x12, 0x41, 0x0a, 0x06, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6f, 0x72,
	0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x22, 0xad,
	0x02, 0x0a, 0x0b, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6e,
	0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x54, 0x0a, 0x0e, 0x72, 0x65,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e,
	0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0e, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x51, 0x0a, 0x0d, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70,
	0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x49, 0x0a, 0x08, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63,
	0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xdf,
	0x03, 0x0a, 0x0c, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x73, 0x22,
	0xce, 0x03, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x3f, 0x0a, 0x0f, 0x50, 0x59, 0x54, 0x48,
	0x4f, 0x4e, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x00, 0x1a, 0x2a, 0xa2,
	0xb4, 0xfa, 0xc2, 0x05, 0x24, 0x62, 0x65, 0x61, 0x6d, 0x3a, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61,
	0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x5f, 0x63, 0x61,
	0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x3a, 0x76, 0x31, 0x12, 0x3d, 0x0a, 0x0e, 0x4d, 0x49, 0x43,
	0x52, 0x4f, 0x53, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x54, 0x10, 0x01, 0x1a, 0x29, 0xa2,
	0xb4, 0xfa, 0xc2, 0x05, 0x23, 0x62, 0x65, 0x61, 0x6d, 0x3a, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61,
	0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x5f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x74, 0x3a, 0x76, 0x31, 0x12, 0x3d, 0x0a, 0x0e, 0x4d, 0x49, 0x4c, 0x4c,
	0x49, 0x53, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x54, 0x10, 0x02, 0x1a, 0x29, 0xa2, 0xb4,
	0xfa, 0xc2, 0x05, 0x23, 0x62, 0x65, 0x61, 0x6d, 0x3a, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x74, 0x3a, 0x76, 0x31, 0x12, 0x2f, 0x0a, 0x07, 0x44, 0x45, 0x43, 0x49, 0x4d,
	0x41, 0x4c, 0x10, 0x03, 0x1a, 0x22, 0xa2, 0xb4, 0xfa, 0xc2, 0x05, 0x1c, 0x62, 0x65, 0x61, 0x6d,
	0x3a, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x64, 0x65,
	0x63, 0x69, 0x6d, 0x61, 0x6c, 0x3a, 0x76, 0x31, 0x12, 0x37, 0x0a, 0x0b, 0x46, 0x49, 0x58, 0x45,
	0x44, 0x5f, 0x42, 0x59, 0x54, 0x45, 0x53, 0x10, 0x04, 0x1a, 0x26, 0xa2, 0xb4, 0xfa, 0xc2, 0x05,
	0x20, 0x62, 0x65, 0x61, 0x6d, 0x3a, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x3a, 0x66, 0x69, 0x78, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x3a, 0x76,
	0x31, 0x12, 0x33, 0x0a, 0x09, 0x56, 0x41, 0x52, 0x5f, 0x42, 0x59, 0x54, 0x45, 0x53, 0x10, 0x05,
	0x1a, 0x24, 0xa2, 0xb4, 0xfa, 0xc2, 0x05, 0x1e, 0x62, 0x65, 0x61, 0x6d, 0x3a, 0x6c, 0x6f, 0x67,
	0x69, 0x63, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x76, 0x61, 0x72, 0x5f, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x3a, 0x76, 0x31, 0x12, 0x35, 0x0a, 0x0a, 0x46, 0x49, 0x58, 0x45, 0x44, 0x5f,
	0x43, 0x48, 0x41, 0x52, 0x10, 0x06, 0x1a, 0x25, 0xa2, 0xb4, 0xfa, 0xc2, 0x05, 0x1f, 0x62, 0x65,
	0x61, 0x6d, 0x3a, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x3a,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x3a, 0x76, 0x31, 0x12, 0x31, 0x0a,
	0x08, 0x56, 0x41, 0x52, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x10, 0x07, 0x1a, 0x23, 0xa2, 0xb4, 0xfa,
	0xc2, 0x05, 0x1d, 0x62, 0x65, 0x61, 0x6d, 0x3a, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x3a, 0x76, 0x61, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x3a, 0x76, 0x31,
	0x22, 0xa3, 0x01, 0x0a, 0x06, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x40, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x43, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65,
	0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x4c, 0x0a, 0x03, 0x52, 0x6f, 0x77, 0x12, 0x45, 0x0a,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x22, 0xa5, 0x04, 0x0a, 0x0a, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x57, 0x0a, 0x0c, 0x61, 0x74, 0x6f, 0x6d, 0x69, 0x63, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6f, 0x72, 0x67, 0x2e,
	0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x74,
	0x6f, 0x6d, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52,
	0x0b, 0x61, 0x74, 0x6f, 0x6d, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x54, 0x0a, 0x0b,
	0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x31, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62,
	0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x72, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x72, 0x72, 0x61, 0x79, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x5d, 0x0a, 0x0e, 0x69, 0x74, 0x65, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6f, 0x72, 0x67,
	0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x74, 0x65, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x48, 0x00, 0x52, 0x0d, 0x69, 0x74, 0x65, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x4e, 0x0a, 0x09, 0x6d, 0x61, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68,
	0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x54, 0x79, 0x70, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x45, 0x0a, 0x09, 0x72, 0x6f, 0x77, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68,
	0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x77, 0x48, 0x00, 0x52, 0x08,
	0x72, 0x6f, 0x77, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x63, 0x0a, 0x12, 0x6c, 0x6f, 0x67, 0x69,
	0x63, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68,
	0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x10, 0x6c, 0x6f, 0x67,
	0x69, 0x63, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0d, 0x0a,
	0x0b, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xf8, 0x01, 0x0a,
	0x0f, 0x41, 0x74, 0x6f, 0x6d, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x14, 0x0a, 0x04, 0x62, 0x79, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00,
	0x52, 0x04, 0x62, 0x79, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x05, 0x69, 0x6e, 0x74, 0x31, 0x36, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x05, 0x69, 0x6e, 0x74, 0x31, 0x36, 0x12, 0x16,
	0x0a, 0x05, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52,
	0x05, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x16, 0x0a, 0x05, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x05, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x16,
	0x0a, 0x05, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52,
	0x05, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x18, 0x0a, 0x06, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x06, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x12, 0x18, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x07, 0x62, 0x6f,
	0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x07, 0x62,
	0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x12, 0x16, 0x0a, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x42, 0x07,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x59, 0x0a, 0x0e, 0x41, 0x72, 0x72, 0x61, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x47, 0x0a, 0x07, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6f, 0x72, 0x67,
	0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x65, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x22, 0x5c, 0x0a, 0x11, 0x49, 0x74, 0x65, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x47, 0x0a, 0x07, 0x65, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61,
	0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x22, 0x59, 0x0a, 0x0c, 0x4d, 0x61, 0x70, 0x54, 0x79, 0x70, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x49, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62,
	0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0x94, 0x01, 0x0a, 0x0c,
	0x4d, 0x61, 0x70, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x3f, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6f, 0x72, 0x67, 0x2e,
	0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x43, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6f,
	0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x57, 0x0a, 0x10, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x43, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63,
	0x68, 0x65, 0x2e, 0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2a, 0x83, 0x01, 0x0a, 0x0a,
	0x41, 0x74, 0x6f, 0x6d, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x42,
	0x59, 0x54, 0x45, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x4e, 0x54, 0x31, 0x36, 0x10, 0x02,
	0x12, 0x09, 0x0a, 0x05, 0x49, 0x4e, 0x54, 0x33, 0x32, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x49,
	0x4e, 0x54, 0x36, 0x34, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x4c, 0x4f, 0x41, 0x54, 0x10,
	0x05, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x4f, 0x55, 0x42, 0x4c, 0x45, 0x10, 0x06, 0x12, 0x0a, 0x0a,
	0x06, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x07, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x4f, 0x4f,
	0x4c, 0x45, 0x41, 0x4e, 0x10, 0x08, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x59, 0x54, 0x45, 0x53, 0x10,
	0x09, 0x42, 0x78, 0x0a, 0x21, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e,
	0x62, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x42, 0x09, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x41, 0x70,
	0x69, 0x5a, 0x48, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x70,
	0x61, 0x63, 0x68, 0x65, 0x2f, 0x62, 0x65, 0x61, 0x6d, 0x2f, 0x73, 0x64, 0x6b, 0x73, 0x2f, 0x76,
	0x32, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x62, 0x65, 0x61, 0x6d, 0x2f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x76, 0x31, 0x3b,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var file_org_apache_beam_model_pipeline_v1_schema_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_org_apache_beam_model_pipeline_v1_schema_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_org_apache_beam_model_pipeline_v1_schema_proto_goTypes = []any{
	(AtomicType)(0),           // 0: org.apache.beam.model.pipeline.v1.AtomicType
	(LogicalTypes_Enum)(0),    // 1: org.apache.beam.model.pipeline.v1.LogicalTypes.Enum
	(*Schema)(nil),            // 2: org.apache.beam.model.pipeline.v1.Schema
	(*Field)(nil),             // 3: org.apache.beam.model.pipeline.v1.Field
	(*FieldType)(nil),         // 4: org.apache.beam.model.pipeline.v1.FieldType
	(*ArrayType)(nil),         // 5: org.apache.beam.model.pipeline.v1.ArrayType
	(*IterableType)(nil),      // 6: org.apache.beam.model.pipeline.v1.IterableType
	(*MapType)(nil),           // 7: org.apache.beam.model.pipeline.v1.MapType
	(*RowType)(nil),           // 8: org.apache.beam.model.pipeline.v1.RowType
	(*LogicalType)(nil),       // 9: org.apache.beam.model.pipeline.v1.LogicalType
	(*LogicalTypes)(nil),      // 10: org.apache.beam.model.pipeline.v1.LogicalTypes
	(*Option)(nil),            // 11: org.apache.beam.model.pipeline.v1.Option
	(*Row)(nil),               // 12: org.apache.beam.model.pipeline.v1.Row
	(*FieldValue)(nil),        // 13: org.apache.beam.model.pipeline.v1.FieldValue
	(*AtomicTypeValue)(nil),   // 14: org.apache.beam.model.pipeline.v1.AtomicTypeValue
	(*ArrayTypeValue)(nil),    // 15: org.apache.beam.model.pipeline.v1.ArrayTypeValue
	(*IterableTypeValue)(nil), // 16: org.apache.beam.model.pipeline.v1.IterableTypeValue
	(*MapTypeValue)(nil),      // 17: org.apache.beam.model.pipeline.v1.MapTypeValue
	(*MapTypeEntry)(nil),      // 18: org.apache.beam.model.pipeline.v1.MapTypeEntry
	(*LogicalTypeValue)(nil),  // 19: org.apache.beam.model.pipeline.v1.LogicalTypeValue
}
var file_org_apache_beam_model_pipeline_v1_schema_proto_depIdxs = []int32{
	3,  // 0: org.apache.beam.model.pipeline.v1.Schema.fields:type_name -> org.apache.beam.model.pipeline.v1.Field
	11, // 1: org.apache.beam.model.pipeline.v1.Schema.options:type_name -> org.apache.beam.model.pipeline.v1.Option
	4,  // 2: org.apache.beam.model.pipeline.v1.Field.type:type_name -> org.apache.beam.model.pipeline.v1.FieldType
	11, // 3: org.apache.beam.model.pipeline.v1.Field.options:type_name -> org.apache.beam.model.pipeline.v1.Option
	0,  // 4: org.apache.beam.model.pipeline.v1.FieldType.atomic_type:type_name -> org.apache.beam.model.pipeline.v1.AtomicType
	5,  // 5: org.apache.beam.model.pipeline.v1.FieldType.array_type:type_name -> org.apache.beam.model.pipeline.v1.ArrayType
	6,  // 6: org.apache.beam.model.pipeline.v1.FieldType.iterable_type:type_name -> org.apache.beam.model.pipeline.v1.IterableType
	7,  // 7: org.apache.beam.model.pipeline.v1.FieldType.map_type:type_name -> org.apache.beam.model.pipeline.v1.MapType
	8,  // 8: org.apache.beam.model.pipeline.v1.FieldType.row_type:type_name -> org.apache.beam.model.pipeline.v1.RowType
	9,  // 9: org.apache.beam.model.pipeline.v1.FieldType.logical_type:type_name -> org.apache.beam.model.pipeline.v1.LogicalType
	4,  // 10: org.apache.beam.model.pipeline.v1.ArrayType.element_type:type_name -> org.apache.beam.model.pipeline.v1.FieldType
	4,  // 11: org.apache.beam.model.pipeline.v1.IterableType.element_type:type_name -> org.apache.beam.model.pipeline.v1.FieldType
	4,  // 12: org.apache.beam.model.pipeline.v1.MapType.key_type:type_name -> org.apache.beam.model.pipeline.v1.FieldType
	4,  // 13: org.apache.beam.model.pipeline.v1.MapType.value_type:type_name -> org.apache.beam.model.pipeline.v1.FieldType
	2,  // 14: org.apache.beam.model.pipeline.v1.RowType.schema:type_name -> org.apache.beam.model.pipeline.v1.Schema
	4,  // 15: org.apache.beam.model.pipeline.v1.LogicalType.representation:type_name -> org.apache.beam.model.pipeline.v1.FieldType
	4,  // 16: org.apache.beam.model.pipeline.v1.LogicalType.argument_type:type_name -> org.apache.beam.model.pipeline.v1.FieldType
	13, // 17: org.apache.beam.model.pipeline.v1.LogicalType.argument:type_name -> org.apache.beam.model.pipeline.v1.FieldValue
	4,  // 18: org.apache.beam.model.pipeline.v1.Option.type:type_name -> org.apache.beam.model.pipeline.v1.FieldType
	13, // 19: org.apache.beam.model.pipeline.v1.Option.value:type_name -> org.apache.beam.model.pipeline.v1.FieldValue
	13, // 20: org.apache.beam.model.pipeline.v1.Row.values:type_name -> org.apache.beam.model.pipeline.v1.FieldValue
	14, // 21: org.apache.beam.model.pipeline.v1.FieldValue.atomic_value:type_name -> org.apache.beam.model.pipeline.v1.AtomicTypeValue
	15, // 22: org.apache.beam.model.pipeline.v1.FieldValue.array_value:type_name -> org.apache.beam.model.pipeline.v1.ArrayTypeValue
	16, // 23: org.apache.beam.model.pipeline.v1.FieldValue.iterable_value:type_name -> org.apache.beam.model.pipeline.v1.IterableTypeValue
	17, // 24: org.apache.beam.model.pipeline.v1.FieldValue.map_value:type_name -> org.apache.beam.model.pipeline.v1.MapTypeValue
	12, // 25: org.apache.beam.model.pipeline.v1.FieldValue.row_value:type_name -> org.apache.beam.model.pipeline.v1.Row
	19, // 26: org.apache.beam.model.pipeline.v1.FieldValue.logical_type_value:type_name -> org.apache.beam.model.pipeline.v1.LogicalTypeValue
	13, // 27: org.apache.beam.model.pipeline.v1.ArrayTypeValue.element:type_name -> org.apache.beam.model.pipeline.v1.FieldValue
	13, // 28: org.apache.beam.model.pipeline.v1.IterableTypeValue.element:type_name -> org.apache.beam.model.pipeline.v1.FieldValue
	18, // 29: org.apache.beam.model.pipeline.v1.MapTypeValue.entries:type_name -> org.apache.beam.model.pipeline.v1.MapTypeEntry
	13, // 30: org.apache.beam.model.pipeline.v1.MapTypeEntry.key:type_name -> org.apache.beam.model.pipeline.v1.FieldValue
	13, // 31: org.apache.beam.model.pipeline.v1.MapTypeEntry.value:type_name -> org.apache.beam.model.pipeline.v1.FieldValue
	13, // 32: org.apache.beam.model.pipeline.v1.LogicalTypeValue.value:type_name -> org.apache.beam.model.pipeline.v1.FieldValue
	33, // [33:33] is the sub-list for method output_type
	33, // [33:33] is the sub-list for method input_type
	33, // [33:33] is the sub-list for extension type_name
	33, // [33:33] is the sub-list for extension extendee
	0,  // [0:33] is the sub-list for field type_name
}

func init() { file_org_apache_beam_model_pipeline_v1_schema_proto_init() }
func file_org_apache_beam_model_pipeline_v1_schema_proto_init() {
	if File_org_apache_beam_model_pipeline_v1_schema_proto != nil {
		return
	}
	file_org_apache_beam_model_pipeline_v1_beam_runner_api_proto_init()
	file_org_apache_beam_model_pipeline_v1_schema_proto_msgTypes[2].OneofWrappers = []any{
		(*fieldType_AtomicType)(nil),
		(*fieldType_ArrayType)(nil),
		(*fieldType_IterableType)(nil),
		(*fieldType_MapType)(nil),
		(*fieldType_RowType)(nil),
		(*fieldType_LogicalType)(nil),
	}
	file_org_apache_beam_model_pipeline_v1_schema_proto_msgTypes[11].OneofWrappers = []any{
		(*fieldValue_AtomicValue)(nil),
		(*fieldValue_ArrayValue)(nil),
		(*fieldValue_IterableValue)(nil),
		(*fieldValue_MapValue)(nil),
		(*fieldValue_RowValue)(nil),
		(*fieldValue_LogicalTypeValue)(nil),
	}
	file_org_apache_beam_model_pipeline_v1_schema_proto_msgTypes[12].OneofWrappers = []any{
		(*atomicTypeValue_Byte)(nil),
		(*atomicTypeValue_Int16)(nil),
		(*atomicTypeValue_Int32)(nil),
		(*atomicTypeValue_Int64)(nil),
		(*atomicTypeValue_Float)(nil),
		(*atomicTypeValue_Double)(nil),
		(*atomicTypeValue_String_)(nil),
		(*atomicTypeValue_Boolean)(nil),
		(*atomicTypeValue_Bytes)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_org_apache_beam_model_pipeline_v1_schema_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_org_apache_beam_model_pipeline_v1_schema_proto_goTypes,
		DependencyIndexes: file_org_apache_beam_model_pipeline_v1_schema_proto_depIdxs,
		EnumInfos:         file_org_apache_beam_model_pipeline_v1_schema_proto_enumTypes,
		MessageInfos:      file_org_apache_beam_model_pipeline_v1_schema_proto_msgTypes,
	}.Build()
	File_org_apache_beam_model_pipeline_v1_schema_proto = out.File
	file_org_apache_beam_model_pipeline_v1_schema_proto_rawDesc = nil
	file_org_apache_beam_model_pipeline_v1_schema_proto_goTypes = nil
	file_org_apache_beam_model_pipeline_v1_schema_proto_depIdxs = nil
}
