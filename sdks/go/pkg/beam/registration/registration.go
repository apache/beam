// File generated by specialize. Do not edit.

// Licensed to the Apache Software Foundation (ASF) under one or more
// contributor license agreements.  See the NOTICE file distributed with
// this work for additional information regarding copyright ownership.
// The ASF licenses this file to You under the Apache License, Version 2.0
// (the "License"); you may not use this file except in compliance with
// the License.  You may obtain a copy of the License at
//
//	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated from registration.tmpl. DO NOT EDIT.

package beam

import (
	"context"
	"reflect"

	"github.com/apache/beam/sdks/v2/go/pkg/beam/core/runtime"
	"github.com/apache/beam/sdks/v2/go/pkg/beam/core/runtime/graphx/schema"
	"github.com/apache/beam/sdks/v2/go/pkg/beam/core/typex"
	"github.com/apache/beam/sdks/v2/go/pkg/beam/core/util/reflectx"
)

func buildStartBundleWrapper0(doFn interface{}) func(interface{}) reflectx.Func {
	startBundleIn := -1
	startBundleOut := -1
	startBundleMethod := reflect.ValueOf(doFn).MethodByName("StartBundle")
	if startBundleMethod.IsValid() {
		startBundleIn = startBundleMethod.Type().NumIn()
		startBundleOut = startBundleMethod.Type().NumOut()
		switch {

		case startBundleIn == 0:
			switch {
			case startBundleOut == 0:
				if _, ok := doFn.(startBundle0x0); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func())
						return &caller0x0{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func())(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func() { fn.(startBundle0x0).StartBundle() })
					}
				}
			case startBundleOut == 1:
				if _, ok := doFn.(startBundle0x1[error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func() error)
						return &caller0x1[error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func() error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func() error { return fn.(startBundle0x1[error]).StartBundle() })
					}
				}
			default:
				panic("Invalid signature for StartBundle")
			}

		case startBundleIn == 1:
			switch {
			case startBundleOut == 0:
				if _, ok := doFn.(startBundle1x0[context.Context]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context))
						return &caller1x0[context.Context]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context) { fn.(startBundle1x0[context.Context]).StartBundle(a0) })
					}
				} else if _, ok := doFn.(startBundle1x0[typex.PaneInfo]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo))
						return &caller1x0[typex.PaneInfo]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo) { fn.(startBundle1x0[typex.PaneInfo]).StartBundle(a0) })
					}
				} else if _, ok := doFn.(startBundle1x0[[]typex.Window]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window))
						return &caller1x0[[]typex.Window]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window) { fn.(startBundle1x0[[]typex.Window]).StartBundle(a0) })
					}
				} else if _, ok := doFn.(startBundle1x0[typex.EventTime]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime))
						return &caller1x0[typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime) { fn.(startBundle1x0[typex.EventTime]).StartBundle(a0) })
					}
				} else if _, ok := doFn.(startBundle1x0[typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization))
						return &caller1x0[typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization) { fn.(startBundle1x0[typex.BundleFinalization]).StartBundle(a0) })
					}
				}
			case startBundleOut == 1:
				if _, ok := doFn.(startBundle1x1[context.Context, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context) error)
						return &caller1x1[context.Context, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context) error { return fn.(startBundle1x1[context.Context, error]).StartBundle(a0) })
					}
				} else if _, ok := doFn.(startBundle1x1[typex.PaneInfo, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo) error)
						return &caller1x1[typex.PaneInfo, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo) error { return fn.(startBundle1x1[typex.PaneInfo, error]).StartBundle(a0) })
					}
				} else if _, ok := doFn.(startBundle1x1[[]typex.Window, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window) error)
						return &caller1x1[[]typex.Window, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window) error { return fn.(startBundle1x1[[]typex.Window, error]).StartBundle(a0) })
					}
				} else if _, ok := doFn.(startBundle1x1[typex.EventTime, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime) error)
						return &caller1x1[typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime) error { return fn.(startBundle1x1[typex.EventTime, error]).StartBundle(a0) })
					}
				} else if _, ok := doFn.(startBundle1x1[typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization) error)
						return &caller1x1[typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization) error {
							return fn.(startBundle1x1[typex.BundleFinalization, error]).StartBundle(a0)
						})
					}
				}
			default:
				panic("Invalid signature for StartBundle")
			}

		case startBundleIn == 2:
			switch {
			case startBundleOut == 0:
				if _, ok := doFn.(startBundle2x0[context.Context, typex.PaneInfo]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo))
						return &caller2x0[context.Context, typex.PaneInfo]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo) {
							fn.(startBundle2x0[context.Context, typex.PaneInfo]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x0[context.Context, []typex.Window]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window))
						return &caller2x0[context.Context, []typex.Window]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window) {
							fn.(startBundle2x0[context.Context, []typex.Window]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x0[typex.PaneInfo, []typex.Window]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window))
						return &caller2x0[typex.PaneInfo, []typex.Window]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window) {
							fn.(startBundle2x0[typex.PaneInfo, []typex.Window]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x0[context.Context, typex.EventTime]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime))
						return &caller2x0[context.Context, typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime) {
							fn.(startBundle2x0[context.Context, typex.EventTime]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x0[typex.PaneInfo, typex.EventTime]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime))
						return &caller2x0[typex.PaneInfo, typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime) {
							fn.(startBundle2x0[typex.PaneInfo, typex.EventTime]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x0[[]typex.Window, typex.EventTime]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime))
						return &caller2x0[[]typex.Window, typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime) {
							fn.(startBundle2x0[[]typex.Window, typex.EventTime]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x0[context.Context, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization))
						return &caller2x0[context.Context, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization) {
							fn.(startBundle2x0[context.Context, typex.BundleFinalization]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x0[typex.PaneInfo, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization))
						return &caller2x0[typex.PaneInfo, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization) {
							fn.(startBundle2x0[typex.PaneInfo, typex.BundleFinalization]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x0[[]typex.Window, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization))
						return &caller2x0[[]typex.Window, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization) {
							fn.(startBundle2x0[[]typex.Window, typex.BundleFinalization]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x0[typex.EventTime, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization))
						return &caller2x0[typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization) {
							fn.(startBundle2x0[typex.EventTime, typex.BundleFinalization]).StartBundle(a0, a1)
						})
					}
				}
			case startBundleOut == 1:
				if _, ok := doFn.(startBundle2x1[context.Context, typex.PaneInfo, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo) error)
						return &caller2x1[context.Context, typex.PaneInfo, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo) error {
							return fn.(startBundle2x1[context.Context, typex.PaneInfo, error]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x1[context.Context, []typex.Window, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window) error)
						return &caller2x1[context.Context, []typex.Window, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window) error {
							return fn.(startBundle2x1[context.Context, []typex.Window, error]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x1[typex.PaneInfo, []typex.Window, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window) error)
						return &caller2x1[typex.PaneInfo, []typex.Window, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window) error {
							return fn.(startBundle2x1[typex.PaneInfo, []typex.Window, error]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x1[context.Context, typex.EventTime, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime) error)
						return &caller2x1[context.Context, typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime) error {
							return fn.(startBundle2x1[context.Context, typex.EventTime, error]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x1[typex.PaneInfo, typex.EventTime, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime) error)
						return &caller2x1[typex.PaneInfo, typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime) error {
							return fn.(startBundle2x1[typex.PaneInfo, typex.EventTime, error]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x1[[]typex.Window, typex.EventTime, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime) error)
						return &caller2x1[[]typex.Window, typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime) error {
							return fn.(startBundle2x1[[]typex.Window, typex.EventTime, error]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x1[context.Context, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization) error)
						return &caller2x1[context.Context, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization) error {
							return fn.(startBundle2x1[context.Context, typex.BundleFinalization, error]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x1[typex.PaneInfo, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization) error)
						return &caller2x1[typex.PaneInfo, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization) error {
							return fn.(startBundle2x1[typex.PaneInfo, typex.BundleFinalization, error]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x1[[]typex.Window, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization) error)
						return &caller2x1[[]typex.Window, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization) error {
							return fn.(startBundle2x1[[]typex.Window, typex.BundleFinalization, error]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x1[typex.EventTime, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization) error)
						return &caller2x1[typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization) error {
							return fn.(startBundle2x1[typex.EventTime, typex.BundleFinalization, error]).StartBundle(a0, a1)
						})
					}
				}
			default:
				panic("Invalid signature for StartBundle")
			}

		case startBundleIn == 3:
			switch {
			case startBundleOut == 0:
				if _, ok := doFn.(startBundle3x0[context.Context, typex.PaneInfo, []typex.Window]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window))
						return &caller3x0[context.Context, typex.PaneInfo, []typex.Window]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window) {
							fn.(startBundle3x0[context.Context, typex.PaneInfo, []typex.Window]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[context.Context, typex.PaneInfo, typex.EventTime]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime))
						return &caller3x0[context.Context, typex.PaneInfo, typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime) {
							fn.(startBundle3x0[context.Context, typex.PaneInfo, typex.EventTime]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[context.Context, []typex.Window, typex.EventTime]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime))
						return &caller3x0[context.Context, []typex.Window, typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime) {
							fn.(startBundle3x0[context.Context, []typex.Window, typex.EventTime]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[typex.PaneInfo, []typex.Window, typex.EventTime]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime))
						return &caller3x0[typex.PaneInfo, []typex.Window, typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime) {
							fn.(startBundle3x0[typex.PaneInfo, []typex.Window, typex.EventTime]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[context.Context, typex.PaneInfo, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization))
						return &caller3x0[context.Context, typex.PaneInfo, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization) {
							fn.(startBundle3x0[context.Context, typex.PaneInfo, typex.BundleFinalization]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[context.Context, []typex.Window, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization))
						return &caller3x0[context.Context, []typex.Window, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization) {
							fn.(startBundle3x0[context.Context, []typex.Window, typex.BundleFinalization]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization))
						return &caller3x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization) {
							fn.(startBundle3x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[context.Context, typex.EventTime, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization))
						return &caller3x0[context.Context, typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization) {
							fn.(startBundle3x0[context.Context, typex.EventTime, typex.BundleFinalization]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization))
						return &caller3x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization) {
							fn.(startBundle3x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[[]typex.Window, typex.EventTime, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization))
						return &caller3x0[[]typex.Window, typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization) {
							fn.(startBundle3x0[[]typex.Window, typex.EventTime, typex.BundleFinalization]).StartBundle(a0, a1, a2)
						})
					}
				}
			case startBundleOut == 1:
				if _, ok := doFn.(startBundle3x1[context.Context, typex.PaneInfo, []typex.Window, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window) error)
						return &caller3x1[context.Context, typex.PaneInfo, []typex.Window, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window) error {
							return fn.(startBundle3x1[context.Context, typex.PaneInfo, []typex.Window, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[context.Context, typex.PaneInfo, typex.EventTime, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime) error)
						return &caller3x1[context.Context, typex.PaneInfo, typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime) error {
							return fn.(startBundle3x1[context.Context, typex.PaneInfo, typex.EventTime, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[context.Context, []typex.Window, typex.EventTime, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime) error)
						return &caller3x1[context.Context, []typex.Window, typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime) error {
							return fn.(startBundle3x1[context.Context, []typex.Window, typex.EventTime, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[typex.PaneInfo, []typex.Window, typex.EventTime, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime) error)
						return &caller3x1[typex.PaneInfo, []typex.Window, typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime) error {
							return fn.(startBundle3x1[typex.PaneInfo, []typex.Window, typex.EventTime, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[context.Context, typex.PaneInfo, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization) error)
						return &caller3x1[context.Context, typex.PaneInfo, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization) error {
							return fn.(startBundle3x1[context.Context, typex.PaneInfo, typex.BundleFinalization, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[context.Context, []typex.Window, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization) error)
						return &caller3x1[context.Context, []typex.Window, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization) error {
							return fn.(startBundle3x1[context.Context, []typex.Window, typex.BundleFinalization, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization) error)
						return &caller3x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization) error {
							return fn.(startBundle3x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[context.Context, typex.EventTime, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization) error)
						return &caller3x1[context.Context, typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization) error {
							return fn.(startBundle3x1[context.Context, typex.EventTime, typex.BundleFinalization, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization) error)
						return &caller3x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization) error {
							return fn.(startBundle3x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization) error)
						return &caller3x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization) error {
							return fn.(startBundle3x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, error]).StartBundle(a0, a1, a2)
						})
					}
				}
			default:
				panic("Invalid signature for StartBundle")
			}

		case startBundleIn == 4:
			switch {
			case startBundleOut == 0:
				if _, ok := doFn.(startBundle4x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime))
						return &caller4x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime) {
							fn.(startBundle4x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization))
						return &caller4x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.BundleFinalization) {
							fn.(startBundle4x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization))
						return &caller4x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 typex.BundleFinalization) {
							fn.(startBundle4x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization))
						return &caller4x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization) {
							fn.(startBundle4x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization))
						return &caller4x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization) {
							fn.(startBundle4x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization]).StartBundle(a0, a1, a2, a3)
						})
					}
				}
			case startBundleOut == 1:
				if _, ok := doFn.(startBundle4x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime) error)
						return &caller4x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime) error {
							return fn.(startBundle4x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization) error)
						return &caller4x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.BundleFinalization) error {
							return fn.(startBundle4x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization) error)
						return &caller4x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 typex.BundleFinalization) error {
							return fn.(startBundle4x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization) error)
						return &caller4x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization) error {
							return fn.(startBundle4x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization) error)
						return &caller4x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization) error {
							return fn.(startBundle4x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				}
			default:
				panic("Invalid signature for StartBundle")
			}

		case startBundleIn == 5:
			switch {
			case startBundleOut == 0:
				if _, ok := doFn.(startBundle5x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization))
						return &caller5x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 typex.BundleFinalization) {
							fn.(startBundle5x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				}
			case startBundleOut == 1:
				if _, ok := doFn.(startBundle5x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization) error)
						return &caller5x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 typex.BundleFinalization) error {
							return fn.(startBundle5x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				}
			default:
				panic("Invalid signature for StartBundle")
			}

		case startBundleIn == 6:
			switch {
			default:
				panic("Invalid signature for StartBundle")
			}

		case startBundleIn == 7:
			switch {
			default:
				panic("Invalid signature for StartBundle")
			}

		default:
			panic("Invalid signature for StartBundle")
		}
	}
	return nil
}

func buildStartBundleWrapper1[I0 any](doFn interface{}) func(interface{}) reflectx.Func {
	startBundleIn := -1
	startBundleOut := -1
	startBundleMethod := reflect.ValueOf(doFn).MethodByName("StartBundle")
	if startBundleMethod.IsValid() {
		startBundleIn = startBundleMethod.Type().NumIn()
		startBundleOut = startBundleMethod.Type().NumOut()
		switch {

		case startBundleIn == 0:
			switch {
			case startBundleOut == 0:
				if _, ok := doFn.(startBundle0x0); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func())
						return &caller0x0{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func())(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func() { fn.(startBundle0x0).StartBundle() })
					}
				}
			case startBundleOut == 1:
				if _, ok := doFn.(startBundle0x1[error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func() error)
						return &caller0x1[error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func() error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func() error { return fn.(startBundle0x1[error]).StartBundle() })
					}
				}
			default:
				panic("Invalid signature for StartBundle")
			}

		case startBundleIn == 1:
			switch {
			case startBundleOut == 0:
				if _, ok := doFn.(startBundle1x0[I0]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I0))
						return &caller1x0[I0]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I0))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I0) { fn.(startBundle1x0[I0]).StartBundle(a0) })
					}
				} else if _, ok := doFn.(startBundle1x0[context.Context]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context))
						return &caller1x0[context.Context]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context) { fn.(startBundle1x0[context.Context]).StartBundle(a0) })
					}
				} else if _, ok := doFn.(startBundle1x0[typex.PaneInfo]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo))
						return &caller1x0[typex.PaneInfo]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo) { fn.(startBundle1x0[typex.PaneInfo]).StartBundle(a0) })
					}
				} else if _, ok := doFn.(startBundle1x0[[]typex.Window]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window))
						return &caller1x0[[]typex.Window]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window) { fn.(startBundle1x0[[]typex.Window]).StartBundle(a0) })
					}
				} else if _, ok := doFn.(startBundle1x0[typex.EventTime]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime))
						return &caller1x0[typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime) { fn.(startBundle1x0[typex.EventTime]).StartBundle(a0) })
					}
				} else if _, ok := doFn.(startBundle1x0[typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization))
						return &caller1x0[typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization) { fn.(startBundle1x0[typex.BundleFinalization]).StartBundle(a0) })
					}
				}
			case startBundleOut == 1:
				if _, ok := doFn.(startBundle1x1[I0, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I0) error)
						return &caller1x1[I0, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I0) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I0) error { return fn.(startBundle1x1[I0, error]).StartBundle(a0) })
					}
				} else if _, ok := doFn.(startBundle1x1[context.Context, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context) error)
						return &caller1x1[context.Context, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context) error { return fn.(startBundle1x1[context.Context, error]).StartBundle(a0) })
					}
				} else if _, ok := doFn.(startBundle1x1[typex.PaneInfo, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo) error)
						return &caller1x1[typex.PaneInfo, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo) error { return fn.(startBundle1x1[typex.PaneInfo, error]).StartBundle(a0) })
					}
				} else if _, ok := doFn.(startBundle1x1[[]typex.Window, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window) error)
						return &caller1x1[[]typex.Window, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window) error { return fn.(startBundle1x1[[]typex.Window, error]).StartBundle(a0) })
					}
				} else if _, ok := doFn.(startBundle1x1[typex.EventTime, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime) error)
						return &caller1x1[typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime) error { return fn.(startBundle1x1[typex.EventTime, error]).StartBundle(a0) })
					}
				} else if _, ok := doFn.(startBundle1x1[typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization) error)
						return &caller1x1[typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization) error {
							return fn.(startBundle1x1[typex.BundleFinalization, error]).StartBundle(a0)
						})
					}
				}
			default:
				panic("Invalid signature for StartBundle")
			}

		case startBundleIn == 2:
			switch {
			case startBundleOut == 0:
				if _, ok := doFn.(startBundle2x0[context.Context, I0]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, I0))
						return &caller2x0[context.Context, I0]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, I0))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 I0) { fn.(startBundle2x0[context.Context, I0]).StartBundle(a0, a1) })
					}
				} else if _, ok := doFn.(startBundle2x0[typex.PaneInfo, I0]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, I0))
						return &caller2x0[typex.PaneInfo, I0]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, I0))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 I0) { fn.(startBundle2x0[typex.PaneInfo, I0]).StartBundle(a0, a1) })
					}
				} else if _, ok := doFn.(startBundle2x0[context.Context, typex.PaneInfo]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo))
						return &caller2x0[context.Context, typex.PaneInfo]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo) {
							fn.(startBundle2x0[context.Context, typex.PaneInfo]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x0[[]typex.Window, I0]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, I0))
						return &caller2x0[[]typex.Window, I0]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, I0))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 I0) { fn.(startBundle2x0[[]typex.Window, I0]).StartBundle(a0, a1) })
					}
				} else if _, ok := doFn.(startBundle2x0[context.Context, []typex.Window]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window))
						return &caller2x0[context.Context, []typex.Window]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window) {
							fn.(startBundle2x0[context.Context, []typex.Window]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x0[typex.PaneInfo, []typex.Window]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window))
						return &caller2x0[typex.PaneInfo, []typex.Window]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window) {
							fn.(startBundle2x0[typex.PaneInfo, []typex.Window]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x0[typex.EventTime, I0]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, I0))
						return &caller2x0[typex.EventTime, I0]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, I0))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 I0) { fn.(startBundle2x0[typex.EventTime, I0]).StartBundle(a0, a1) })
					}
				} else if _, ok := doFn.(startBundle2x0[context.Context, typex.EventTime]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime))
						return &caller2x0[context.Context, typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime) {
							fn.(startBundle2x0[context.Context, typex.EventTime]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x0[typex.PaneInfo, typex.EventTime]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime))
						return &caller2x0[typex.PaneInfo, typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime) {
							fn.(startBundle2x0[typex.PaneInfo, typex.EventTime]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x0[[]typex.Window, typex.EventTime]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime))
						return &caller2x0[[]typex.Window, typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime) {
							fn.(startBundle2x0[[]typex.Window, typex.EventTime]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x0[typex.BundleFinalization, I0]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization, I0))
						return &caller2x0[typex.BundleFinalization, I0]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization, I0))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization, a1 I0) {
							fn.(startBundle2x0[typex.BundleFinalization, I0]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x0[context.Context, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization))
						return &caller2x0[context.Context, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization) {
							fn.(startBundle2x0[context.Context, typex.BundleFinalization]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x0[typex.PaneInfo, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization))
						return &caller2x0[typex.PaneInfo, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization) {
							fn.(startBundle2x0[typex.PaneInfo, typex.BundleFinalization]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x0[[]typex.Window, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization))
						return &caller2x0[[]typex.Window, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization) {
							fn.(startBundle2x0[[]typex.Window, typex.BundleFinalization]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x0[typex.EventTime, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization))
						return &caller2x0[typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization) {
							fn.(startBundle2x0[typex.EventTime, typex.BundleFinalization]).StartBundle(a0, a1)
						})
					}
				}
			case startBundleOut == 1:
				if _, ok := doFn.(startBundle2x1[context.Context, I0, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, I0) error)
						return &caller2x1[context.Context, I0, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, I0) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 I0) error {
							return fn.(startBundle2x1[context.Context, I0, error]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x1[typex.PaneInfo, I0, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, I0) error)
						return &caller2x1[typex.PaneInfo, I0, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, I0) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 I0) error {
							return fn.(startBundle2x1[typex.PaneInfo, I0, error]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x1[context.Context, typex.PaneInfo, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo) error)
						return &caller2x1[context.Context, typex.PaneInfo, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo) error {
							return fn.(startBundle2x1[context.Context, typex.PaneInfo, error]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x1[[]typex.Window, I0, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, I0) error)
						return &caller2x1[[]typex.Window, I0, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, I0) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 I0) error {
							return fn.(startBundle2x1[[]typex.Window, I0, error]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x1[context.Context, []typex.Window, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window) error)
						return &caller2x1[context.Context, []typex.Window, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window) error {
							return fn.(startBundle2x1[context.Context, []typex.Window, error]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x1[typex.PaneInfo, []typex.Window, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window) error)
						return &caller2x1[typex.PaneInfo, []typex.Window, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window) error {
							return fn.(startBundle2x1[typex.PaneInfo, []typex.Window, error]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x1[typex.EventTime, I0, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, I0) error)
						return &caller2x1[typex.EventTime, I0, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, I0) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 I0) error {
							return fn.(startBundle2x1[typex.EventTime, I0, error]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x1[context.Context, typex.EventTime, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime) error)
						return &caller2x1[context.Context, typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime) error {
							return fn.(startBundle2x1[context.Context, typex.EventTime, error]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x1[typex.PaneInfo, typex.EventTime, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime) error)
						return &caller2x1[typex.PaneInfo, typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime) error {
							return fn.(startBundle2x1[typex.PaneInfo, typex.EventTime, error]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x1[[]typex.Window, typex.EventTime, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime) error)
						return &caller2x1[[]typex.Window, typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime) error {
							return fn.(startBundle2x1[[]typex.Window, typex.EventTime, error]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x1[typex.BundleFinalization, I0, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization, I0) error)
						return &caller2x1[typex.BundleFinalization, I0, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization, I0) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization, a1 I0) error {
							return fn.(startBundle2x1[typex.BundleFinalization, I0, error]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x1[context.Context, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization) error)
						return &caller2x1[context.Context, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization) error {
							return fn.(startBundle2x1[context.Context, typex.BundleFinalization, error]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x1[typex.PaneInfo, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization) error)
						return &caller2x1[typex.PaneInfo, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization) error {
							return fn.(startBundle2x1[typex.PaneInfo, typex.BundleFinalization, error]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x1[[]typex.Window, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization) error)
						return &caller2x1[[]typex.Window, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization) error {
							return fn.(startBundle2x1[[]typex.Window, typex.BundleFinalization, error]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x1[typex.EventTime, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization) error)
						return &caller2x1[typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization) error {
							return fn.(startBundle2x1[typex.EventTime, typex.BundleFinalization, error]).StartBundle(a0, a1)
						})
					}
				}
			default:
				panic("Invalid signature for StartBundle")
			}

		case startBundleIn == 3:
			switch {
			case startBundleOut == 0:
				if _, ok := doFn.(startBundle3x0[context.Context, typex.PaneInfo, I0]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, I0))
						return &caller3x0[context.Context, typex.PaneInfo, I0]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, I0))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 I0) {
							fn.(startBundle3x0[context.Context, typex.PaneInfo, I0]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[context.Context, []typex.Window, I0]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, I0))
						return &caller3x0[context.Context, []typex.Window, I0]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, I0))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 I0) {
							fn.(startBundle3x0[context.Context, []typex.Window, I0]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[typex.PaneInfo, []typex.Window, I0]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, I0))
						return &caller3x0[typex.PaneInfo, []typex.Window, I0]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, I0))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 I0) {
							fn.(startBundle3x0[typex.PaneInfo, []typex.Window, I0]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[context.Context, typex.PaneInfo, []typex.Window]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window))
						return &caller3x0[context.Context, typex.PaneInfo, []typex.Window]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window) {
							fn.(startBundle3x0[context.Context, typex.PaneInfo, []typex.Window]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[context.Context, typex.EventTime, I0]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, I0))
						return &caller3x0[context.Context, typex.EventTime, I0]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, I0))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 I0) {
							fn.(startBundle3x0[context.Context, typex.EventTime, I0]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[typex.PaneInfo, typex.EventTime, I0]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, I0))
						return &caller3x0[typex.PaneInfo, typex.EventTime, I0]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, I0))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 I0) {
							fn.(startBundle3x0[typex.PaneInfo, typex.EventTime, I0]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[context.Context, typex.PaneInfo, typex.EventTime]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime))
						return &caller3x0[context.Context, typex.PaneInfo, typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime) {
							fn.(startBundle3x0[context.Context, typex.PaneInfo, typex.EventTime]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[[]typex.Window, typex.EventTime, I0]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, I0))
						return &caller3x0[[]typex.Window, typex.EventTime, I0]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, I0))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 I0) {
							fn.(startBundle3x0[[]typex.Window, typex.EventTime, I0]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[context.Context, []typex.Window, typex.EventTime]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime))
						return &caller3x0[context.Context, []typex.Window, typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime) {
							fn.(startBundle3x0[context.Context, []typex.Window, typex.EventTime]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[typex.PaneInfo, []typex.Window, typex.EventTime]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime))
						return &caller3x0[typex.PaneInfo, []typex.Window, typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime) {
							fn.(startBundle3x0[typex.PaneInfo, []typex.Window, typex.EventTime]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[context.Context, typex.BundleFinalization, I0]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization, I0))
						return &caller3x0[context.Context, typex.BundleFinalization, I0]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization, I0))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization, a2 I0) {
							fn.(startBundle3x0[context.Context, typex.BundleFinalization, I0]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[typex.PaneInfo, typex.BundleFinalization, I0]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization, I0))
						return &caller3x0[typex.PaneInfo, typex.BundleFinalization, I0]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization, I0))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization, a2 I0) {
							fn.(startBundle3x0[typex.PaneInfo, typex.BundleFinalization, I0]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[context.Context, typex.PaneInfo, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization))
						return &caller3x0[context.Context, typex.PaneInfo, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization) {
							fn.(startBundle3x0[context.Context, typex.PaneInfo, typex.BundleFinalization]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[[]typex.Window, typex.BundleFinalization, I0]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization, I0))
						return &caller3x0[[]typex.Window, typex.BundleFinalization, I0]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization, I0))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization, a2 I0) {
							fn.(startBundle3x0[[]typex.Window, typex.BundleFinalization, I0]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[context.Context, []typex.Window, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization))
						return &caller3x0[context.Context, []typex.Window, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization) {
							fn.(startBundle3x0[context.Context, []typex.Window, typex.BundleFinalization]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization))
						return &caller3x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization) {
							fn.(startBundle3x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[typex.EventTime, typex.BundleFinalization, I0]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization, I0))
						return &caller3x0[typex.EventTime, typex.BundleFinalization, I0]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization, I0))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization, a2 I0) {
							fn.(startBundle3x0[typex.EventTime, typex.BundleFinalization, I0]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[context.Context, typex.EventTime, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization))
						return &caller3x0[context.Context, typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization) {
							fn.(startBundle3x0[context.Context, typex.EventTime, typex.BundleFinalization]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization))
						return &caller3x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization) {
							fn.(startBundle3x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[[]typex.Window, typex.EventTime, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization))
						return &caller3x0[[]typex.Window, typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization) {
							fn.(startBundle3x0[[]typex.Window, typex.EventTime, typex.BundleFinalization]).StartBundle(a0, a1, a2)
						})
					}
				}
			case startBundleOut == 1:
				if _, ok := doFn.(startBundle3x1[context.Context, typex.PaneInfo, I0, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, I0) error)
						return &caller3x1[context.Context, typex.PaneInfo, I0, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, I0) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 I0) error {
							return fn.(startBundle3x1[context.Context, typex.PaneInfo, I0, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[context.Context, []typex.Window, I0, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, I0) error)
						return &caller3x1[context.Context, []typex.Window, I0, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, I0) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 I0) error {
							return fn.(startBundle3x1[context.Context, []typex.Window, I0, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[typex.PaneInfo, []typex.Window, I0, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, I0) error)
						return &caller3x1[typex.PaneInfo, []typex.Window, I0, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, I0) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 I0) error {
							return fn.(startBundle3x1[typex.PaneInfo, []typex.Window, I0, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[context.Context, typex.PaneInfo, []typex.Window, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window) error)
						return &caller3x1[context.Context, typex.PaneInfo, []typex.Window, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window) error {
							return fn.(startBundle3x1[context.Context, typex.PaneInfo, []typex.Window, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[context.Context, typex.EventTime, I0, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, I0) error)
						return &caller3x1[context.Context, typex.EventTime, I0, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, I0) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 I0) error {
							return fn.(startBundle3x1[context.Context, typex.EventTime, I0, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[typex.PaneInfo, typex.EventTime, I0, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, I0) error)
						return &caller3x1[typex.PaneInfo, typex.EventTime, I0, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, I0) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 I0) error {
							return fn.(startBundle3x1[typex.PaneInfo, typex.EventTime, I0, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[context.Context, typex.PaneInfo, typex.EventTime, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime) error)
						return &caller3x1[context.Context, typex.PaneInfo, typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime) error {
							return fn.(startBundle3x1[context.Context, typex.PaneInfo, typex.EventTime, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[[]typex.Window, typex.EventTime, I0, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, I0) error)
						return &caller3x1[[]typex.Window, typex.EventTime, I0, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, I0) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 I0) error {
							return fn.(startBundle3x1[[]typex.Window, typex.EventTime, I0, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[context.Context, []typex.Window, typex.EventTime, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime) error)
						return &caller3x1[context.Context, []typex.Window, typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime) error {
							return fn.(startBundle3x1[context.Context, []typex.Window, typex.EventTime, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[typex.PaneInfo, []typex.Window, typex.EventTime, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime) error)
						return &caller3x1[typex.PaneInfo, []typex.Window, typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime) error {
							return fn.(startBundle3x1[typex.PaneInfo, []typex.Window, typex.EventTime, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[context.Context, typex.BundleFinalization, I0, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization, I0) error)
						return &caller3x1[context.Context, typex.BundleFinalization, I0, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization, I0) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization, a2 I0) error {
							return fn.(startBundle3x1[context.Context, typex.BundleFinalization, I0, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[typex.PaneInfo, typex.BundleFinalization, I0, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization, I0) error)
						return &caller3x1[typex.PaneInfo, typex.BundleFinalization, I0, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization, I0) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization, a2 I0) error {
							return fn.(startBundle3x1[typex.PaneInfo, typex.BundleFinalization, I0, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[context.Context, typex.PaneInfo, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization) error)
						return &caller3x1[context.Context, typex.PaneInfo, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization) error {
							return fn.(startBundle3x1[context.Context, typex.PaneInfo, typex.BundleFinalization, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[[]typex.Window, typex.BundleFinalization, I0, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization, I0) error)
						return &caller3x1[[]typex.Window, typex.BundleFinalization, I0, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization, I0) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization, a2 I0) error {
							return fn.(startBundle3x1[[]typex.Window, typex.BundleFinalization, I0, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[context.Context, []typex.Window, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization) error)
						return &caller3x1[context.Context, []typex.Window, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization) error {
							return fn.(startBundle3x1[context.Context, []typex.Window, typex.BundleFinalization, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization) error)
						return &caller3x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization) error {
							return fn.(startBundle3x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[typex.EventTime, typex.BundleFinalization, I0, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization, I0) error)
						return &caller3x1[typex.EventTime, typex.BundleFinalization, I0, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization, I0) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization, a2 I0) error {
							return fn.(startBundle3x1[typex.EventTime, typex.BundleFinalization, I0, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[context.Context, typex.EventTime, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization) error)
						return &caller3x1[context.Context, typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization) error {
							return fn.(startBundle3x1[context.Context, typex.EventTime, typex.BundleFinalization, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization) error)
						return &caller3x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization) error {
							return fn.(startBundle3x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization) error)
						return &caller3x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization) error {
							return fn.(startBundle3x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, error]).StartBundle(a0, a1, a2)
						})
					}
				}
			default:
				panic("Invalid signature for StartBundle")
			}

		case startBundleIn == 4:
			switch {
			case startBundleOut == 0:
				if _, ok := doFn.(startBundle4x0[context.Context, typex.PaneInfo, []typex.Window, I0]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, I0))
						return &caller4x0[context.Context, typex.PaneInfo, []typex.Window, I0]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, I0))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 I0) {
							fn.(startBundle4x0[context.Context, typex.PaneInfo, []typex.Window, I0]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[context.Context, typex.PaneInfo, typex.EventTime, I0]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, I0))
						return &caller4x0[context.Context, typex.PaneInfo, typex.EventTime, I0]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, I0))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 I0) {
							fn.(startBundle4x0[context.Context, typex.PaneInfo, typex.EventTime, I0]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[context.Context, []typex.Window, typex.EventTime, I0]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, I0))
						return &caller4x0[context.Context, []typex.Window, typex.EventTime, I0]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, I0))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 I0) {
							fn.(startBundle4x0[context.Context, []typex.Window, typex.EventTime, I0]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[typex.PaneInfo, []typex.Window, typex.EventTime, I0]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, I0))
						return &caller4x0[typex.PaneInfo, []typex.Window, typex.EventTime, I0]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, I0))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 I0) {
							fn.(startBundle4x0[typex.PaneInfo, []typex.Window, typex.EventTime, I0]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime))
						return &caller4x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime) {
							fn.(startBundle4x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I0]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization, I0))
						return &caller4x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I0]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization, I0))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization, a3 I0) {
							fn.(startBundle4x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I0]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[context.Context, []typex.Window, typex.BundleFinalization, I0]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization, I0))
						return &caller4x0[context.Context, []typex.Window, typex.BundleFinalization, I0]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization, I0))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization, a3 I0) {
							fn.(startBundle4x0[context.Context, []typex.Window, typex.BundleFinalization, I0]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0))
						return &caller4x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization, a3 I0) {
							fn.(startBundle4x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization))
						return &caller4x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.BundleFinalization) {
							fn.(startBundle4x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[context.Context, typex.EventTime, typex.BundleFinalization, I0]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization, I0))
						return &caller4x0[context.Context, typex.EventTime, typex.BundleFinalization, I0]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization, I0))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I0) {
							fn.(startBundle4x0[context.Context, typex.EventTime, typex.BundleFinalization, I0]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0))
						return &caller4x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I0) {
							fn.(startBundle4x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization))
						return &caller4x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 typex.BundleFinalization) {
							fn.(startBundle4x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I0]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization, I0))
						return &caller4x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I0]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization, I0))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I0) {
							fn.(startBundle4x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I0]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization))
						return &caller4x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization) {
							fn.(startBundle4x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization))
						return &caller4x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization) {
							fn.(startBundle4x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization]).StartBundle(a0, a1, a2, a3)
						})
					}
				}
			case startBundleOut == 1:
				if _, ok := doFn.(startBundle4x1[context.Context, typex.PaneInfo, []typex.Window, I0, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, I0) error)
						return &caller4x1[context.Context, typex.PaneInfo, []typex.Window, I0, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, I0) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 I0) error {
							return fn.(startBundle4x1[context.Context, typex.PaneInfo, []typex.Window, I0, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[context.Context, typex.PaneInfo, typex.EventTime, I0, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, I0) error)
						return &caller4x1[context.Context, typex.PaneInfo, typex.EventTime, I0, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, I0) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 I0) error {
							return fn.(startBundle4x1[context.Context, typex.PaneInfo, typex.EventTime, I0, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[context.Context, []typex.Window, typex.EventTime, I0, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, I0) error)
						return &caller4x1[context.Context, []typex.Window, typex.EventTime, I0, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, I0) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 I0) error {
							return fn.(startBundle4x1[context.Context, []typex.Window, typex.EventTime, I0, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[typex.PaneInfo, []typex.Window, typex.EventTime, I0, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, I0) error)
						return &caller4x1[typex.PaneInfo, []typex.Window, typex.EventTime, I0, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, I0) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 I0) error {
							return fn.(startBundle4x1[typex.PaneInfo, []typex.Window, typex.EventTime, I0, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime) error)
						return &caller4x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime) error {
							return fn.(startBundle4x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I0, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization, I0) error)
						return &caller4x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I0, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization, I0) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization, a3 I0) error {
							return fn.(startBundle4x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I0, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[context.Context, []typex.Window, typex.BundleFinalization, I0, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization, I0) error)
						return &caller4x1[context.Context, []typex.Window, typex.BundleFinalization, I0, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization, I0) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization, a3 I0) error {
							return fn.(startBundle4x1[context.Context, []typex.Window, typex.BundleFinalization, I0, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0) error)
						return &caller4x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization, a3 I0) error {
							return fn.(startBundle4x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization) error)
						return &caller4x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.BundleFinalization) error {
							return fn.(startBundle4x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[context.Context, typex.EventTime, typex.BundleFinalization, I0, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization, I0) error)
						return &caller4x1[context.Context, typex.EventTime, typex.BundleFinalization, I0, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization, I0) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I0) error {
							return fn.(startBundle4x1[context.Context, typex.EventTime, typex.BundleFinalization, I0, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0) error)
						return &caller4x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I0) error {
							return fn.(startBundle4x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization) error)
						return &caller4x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 typex.BundleFinalization) error {
							return fn.(startBundle4x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I0, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization, I0) error)
						return &caller4x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I0, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization, I0) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I0) error {
							return fn.(startBundle4x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I0, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization) error)
						return &caller4x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization) error {
							return fn.(startBundle4x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization) error)
						return &caller4x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization) error {
							return fn.(startBundle4x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				}
			default:
				panic("Invalid signature for StartBundle")
			}

		case startBundleIn == 5:
			switch {
			case startBundleOut == 0:
				if _, ok := doFn.(startBundle5x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I0]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I0))
						return &caller5x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I0]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I0))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 I0) {
							fn.(startBundle5x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I0]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0))
						return &caller5x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.BundleFinalization, a4 I0) {
							fn.(startBundle5x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0))
						return &caller5x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I0) {
							fn.(startBundle5x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I0]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I0))
						return &caller5x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I0]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I0))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I0) {
							fn.(startBundle5x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I0]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I0]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I0))
						return &caller5x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I0]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I0))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I0) {
							fn.(startBundle5x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I0]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization))
						return &caller5x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 typex.BundleFinalization) {
							fn.(startBundle5x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				}
			case startBundleOut == 1:
				if _, ok := doFn.(startBundle5x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I0, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I0) error)
						return &caller5x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I0, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I0) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 I0) error {
							return fn.(startBundle5x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I0, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0) error)
						return &caller5x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.BundleFinalization, a4 I0) error {
							return fn.(startBundle5x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0) error)
						return &caller5x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I0) error {
							return fn.(startBundle5x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I0, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I0) error)
						return &caller5x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I0, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I0) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I0) error {
							return fn.(startBundle5x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I0, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I0, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I0) error)
						return &caller5x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I0, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I0) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I0) error {
							return fn.(startBundle5x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I0, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization) error)
						return &caller5x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 typex.BundleFinalization) error {
							return fn.(startBundle5x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				}
			default:
				panic("Invalid signature for StartBundle")
			}

		case startBundleIn == 6:
			switch {
			case startBundleOut == 0:
				if _, ok := doFn.(startBundle6x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I0]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I0))
						return &caller6x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I0]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I0))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 typex.BundleFinalization, a5 I0) {
							fn.(startBundle6x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I0]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				}
			case startBundleOut == 1:
				if _, ok := doFn.(startBundle6x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I0, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I0) error)
						return &caller6x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I0, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I0) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 typex.BundleFinalization, a5 I0) error {
							return fn.(startBundle6x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I0, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				}
			default:
				panic("Invalid signature for StartBundle")
			}

		case startBundleIn == 7:
			switch {
			default:
				panic("Invalid signature for StartBundle")
			}

		default:
			panic("Invalid signature for StartBundle")
		}
	}
	return nil
}

func buildStartBundleWrapper2[I0, I1 any](doFn interface{}) func(interface{}) reflectx.Func {
	startBundleIn := -1
	startBundleOut := -1
	startBundleMethod := reflect.ValueOf(doFn).MethodByName("StartBundle")
	if startBundleMethod.IsValid() {
		startBundleIn = startBundleMethod.Type().NumIn()
		startBundleOut = startBundleMethod.Type().NumOut()
		switch {

		case startBundleIn == 0:
			switch {
			case startBundleOut == 0:
				if _, ok := doFn.(startBundle0x0); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func())
						return &caller0x0{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func())(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func() { fn.(startBundle0x0).StartBundle() })
					}
				}
			case startBundleOut == 1:
				if _, ok := doFn.(startBundle0x1[error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func() error)
						return &caller0x1[error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func() error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func() error { return fn.(startBundle0x1[error]).StartBundle() })
					}
				}
			default:
				panic("Invalid signature for StartBundle")
			}

		case startBundleIn == 1:
			switch {
			case startBundleOut == 0:
				if _, ok := doFn.(startBundle1x0[I1]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I1))
						return &caller1x0[I1]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I1))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I1) { fn.(startBundle1x0[I1]).StartBundle(a0) })
					}
				} else if _, ok := doFn.(startBundle1x0[context.Context]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context))
						return &caller1x0[context.Context]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context) { fn.(startBundle1x0[context.Context]).StartBundle(a0) })
					}
				} else if _, ok := doFn.(startBundle1x0[typex.PaneInfo]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo))
						return &caller1x0[typex.PaneInfo]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo) { fn.(startBundle1x0[typex.PaneInfo]).StartBundle(a0) })
					}
				} else if _, ok := doFn.(startBundle1x0[[]typex.Window]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window))
						return &caller1x0[[]typex.Window]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window) { fn.(startBundle1x0[[]typex.Window]).StartBundle(a0) })
					}
				} else if _, ok := doFn.(startBundle1x0[typex.EventTime]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime))
						return &caller1x0[typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime) { fn.(startBundle1x0[typex.EventTime]).StartBundle(a0) })
					}
				} else if _, ok := doFn.(startBundle1x0[typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization))
						return &caller1x0[typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization) { fn.(startBundle1x0[typex.BundleFinalization]).StartBundle(a0) })
					}
				}
			case startBundleOut == 1:
				if _, ok := doFn.(startBundle1x1[I1, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I1) error)
						return &caller1x1[I1, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I1) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I1) error { return fn.(startBundle1x1[I1, error]).StartBundle(a0) })
					}
				} else if _, ok := doFn.(startBundle1x1[context.Context, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context) error)
						return &caller1x1[context.Context, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context) error { return fn.(startBundle1x1[context.Context, error]).StartBundle(a0) })
					}
				} else if _, ok := doFn.(startBundle1x1[typex.PaneInfo, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo) error)
						return &caller1x1[typex.PaneInfo, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo) error { return fn.(startBundle1x1[typex.PaneInfo, error]).StartBundle(a0) })
					}
				} else if _, ok := doFn.(startBundle1x1[[]typex.Window, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window) error)
						return &caller1x1[[]typex.Window, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window) error { return fn.(startBundle1x1[[]typex.Window, error]).StartBundle(a0) })
					}
				} else if _, ok := doFn.(startBundle1x1[typex.EventTime, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime) error)
						return &caller1x1[typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime) error { return fn.(startBundle1x1[typex.EventTime, error]).StartBundle(a0) })
					}
				} else if _, ok := doFn.(startBundle1x1[typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization) error)
						return &caller1x1[typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization) error {
							return fn.(startBundle1x1[typex.BundleFinalization, error]).StartBundle(a0)
						})
					}
				}
			default:
				panic("Invalid signature for StartBundle")
			}

		case startBundleIn == 2:
			switch {
			case startBundleOut == 0:
				if _, ok := doFn.(startBundle2x0[I0, I1]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I0, I1))
						return &caller2x0[I0, I1]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I0, I1))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I0, a1 I1) { fn.(startBundle2x0[I0, I1]).StartBundle(a0, a1) })
					}
				} else if _, ok := doFn.(startBundle2x0[context.Context, I1]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, I1))
						return &caller2x0[context.Context, I1]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, I1))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 I1) { fn.(startBundle2x0[context.Context, I1]).StartBundle(a0, a1) })
					}
				} else if _, ok := doFn.(startBundle2x0[typex.PaneInfo, I1]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, I1))
						return &caller2x0[typex.PaneInfo, I1]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, I1))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 I1) { fn.(startBundle2x0[typex.PaneInfo, I1]).StartBundle(a0, a1) })
					}
				} else if _, ok := doFn.(startBundle2x0[context.Context, typex.PaneInfo]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo))
						return &caller2x0[context.Context, typex.PaneInfo]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo) {
							fn.(startBundle2x0[context.Context, typex.PaneInfo]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x0[[]typex.Window, I1]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, I1))
						return &caller2x0[[]typex.Window, I1]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, I1))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 I1) { fn.(startBundle2x0[[]typex.Window, I1]).StartBundle(a0, a1) })
					}
				} else if _, ok := doFn.(startBundle2x0[context.Context, []typex.Window]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window))
						return &caller2x0[context.Context, []typex.Window]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window) {
							fn.(startBundle2x0[context.Context, []typex.Window]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x0[typex.PaneInfo, []typex.Window]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window))
						return &caller2x0[typex.PaneInfo, []typex.Window]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window) {
							fn.(startBundle2x0[typex.PaneInfo, []typex.Window]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x0[typex.EventTime, I1]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, I1))
						return &caller2x0[typex.EventTime, I1]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, I1))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 I1) { fn.(startBundle2x0[typex.EventTime, I1]).StartBundle(a0, a1) })
					}
				} else if _, ok := doFn.(startBundle2x0[context.Context, typex.EventTime]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime))
						return &caller2x0[context.Context, typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime) {
							fn.(startBundle2x0[context.Context, typex.EventTime]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x0[typex.PaneInfo, typex.EventTime]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime))
						return &caller2x0[typex.PaneInfo, typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime) {
							fn.(startBundle2x0[typex.PaneInfo, typex.EventTime]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x0[[]typex.Window, typex.EventTime]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime))
						return &caller2x0[[]typex.Window, typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime) {
							fn.(startBundle2x0[[]typex.Window, typex.EventTime]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x0[typex.BundleFinalization, I1]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization, I1))
						return &caller2x0[typex.BundleFinalization, I1]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization, I1))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization, a1 I1) {
							fn.(startBundle2x0[typex.BundleFinalization, I1]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x0[context.Context, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization))
						return &caller2x0[context.Context, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization) {
							fn.(startBundle2x0[context.Context, typex.BundleFinalization]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x0[typex.PaneInfo, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization))
						return &caller2x0[typex.PaneInfo, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization) {
							fn.(startBundle2x0[typex.PaneInfo, typex.BundleFinalization]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x0[[]typex.Window, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization))
						return &caller2x0[[]typex.Window, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization) {
							fn.(startBundle2x0[[]typex.Window, typex.BundleFinalization]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x0[typex.EventTime, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization))
						return &caller2x0[typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization) {
							fn.(startBundle2x0[typex.EventTime, typex.BundleFinalization]).StartBundle(a0, a1)
						})
					}
				}
			case startBundleOut == 1:
				if _, ok := doFn.(startBundle2x1[I0, I1, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I0, I1) error)
						return &caller2x1[I0, I1, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I0, I1) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I0, a1 I1) error { return fn.(startBundle2x1[I0, I1, error]).StartBundle(a0, a1) })
					}
				} else if _, ok := doFn.(startBundle2x1[context.Context, I1, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, I1) error)
						return &caller2x1[context.Context, I1, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, I1) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 I1) error {
							return fn.(startBundle2x1[context.Context, I1, error]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x1[typex.PaneInfo, I1, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, I1) error)
						return &caller2x1[typex.PaneInfo, I1, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, I1) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 I1) error {
							return fn.(startBundle2x1[typex.PaneInfo, I1, error]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x1[context.Context, typex.PaneInfo, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo) error)
						return &caller2x1[context.Context, typex.PaneInfo, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo) error {
							return fn.(startBundle2x1[context.Context, typex.PaneInfo, error]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x1[[]typex.Window, I1, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, I1) error)
						return &caller2x1[[]typex.Window, I1, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, I1) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 I1) error {
							return fn.(startBundle2x1[[]typex.Window, I1, error]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x1[context.Context, []typex.Window, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window) error)
						return &caller2x1[context.Context, []typex.Window, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window) error {
							return fn.(startBundle2x1[context.Context, []typex.Window, error]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x1[typex.PaneInfo, []typex.Window, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window) error)
						return &caller2x1[typex.PaneInfo, []typex.Window, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window) error {
							return fn.(startBundle2x1[typex.PaneInfo, []typex.Window, error]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x1[typex.EventTime, I1, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, I1) error)
						return &caller2x1[typex.EventTime, I1, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, I1) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 I1) error {
							return fn.(startBundle2x1[typex.EventTime, I1, error]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x1[context.Context, typex.EventTime, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime) error)
						return &caller2x1[context.Context, typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime) error {
							return fn.(startBundle2x1[context.Context, typex.EventTime, error]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x1[typex.PaneInfo, typex.EventTime, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime) error)
						return &caller2x1[typex.PaneInfo, typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime) error {
							return fn.(startBundle2x1[typex.PaneInfo, typex.EventTime, error]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x1[[]typex.Window, typex.EventTime, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime) error)
						return &caller2x1[[]typex.Window, typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime) error {
							return fn.(startBundle2x1[[]typex.Window, typex.EventTime, error]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x1[typex.BundleFinalization, I1, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization, I1) error)
						return &caller2x1[typex.BundleFinalization, I1, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization, I1) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization, a1 I1) error {
							return fn.(startBundle2x1[typex.BundleFinalization, I1, error]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x1[context.Context, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization) error)
						return &caller2x1[context.Context, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization) error {
							return fn.(startBundle2x1[context.Context, typex.BundleFinalization, error]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x1[typex.PaneInfo, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization) error)
						return &caller2x1[typex.PaneInfo, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization) error {
							return fn.(startBundle2x1[typex.PaneInfo, typex.BundleFinalization, error]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x1[[]typex.Window, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization) error)
						return &caller2x1[[]typex.Window, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization) error {
							return fn.(startBundle2x1[[]typex.Window, typex.BundleFinalization, error]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x1[typex.EventTime, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization) error)
						return &caller2x1[typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization) error {
							return fn.(startBundle2x1[typex.EventTime, typex.BundleFinalization, error]).StartBundle(a0, a1)
						})
					}
				}
			default:
				panic("Invalid signature for StartBundle")
			}

		case startBundleIn == 3:
			switch {
			case startBundleOut == 0:
				if _, ok := doFn.(startBundle3x0[context.Context, I0, I1]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, I0, I1))
						return &caller3x0[context.Context, I0, I1]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, I0, I1))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 I0, a2 I1) {
							fn.(startBundle3x0[context.Context, I0, I1]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[typex.PaneInfo, I0, I1]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, I0, I1))
						return &caller3x0[typex.PaneInfo, I0, I1]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, I0, I1))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 I0, a2 I1) {
							fn.(startBundle3x0[typex.PaneInfo, I0, I1]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[context.Context, typex.PaneInfo, I1]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, I1))
						return &caller3x0[context.Context, typex.PaneInfo, I1]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, I1))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 I1) {
							fn.(startBundle3x0[context.Context, typex.PaneInfo, I1]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[[]typex.Window, I0, I1]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, I0, I1))
						return &caller3x0[[]typex.Window, I0, I1]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, I0, I1))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 I0, a2 I1) {
							fn.(startBundle3x0[[]typex.Window, I0, I1]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[context.Context, []typex.Window, I1]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, I1))
						return &caller3x0[context.Context, []typex.Window, I1]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, I1))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 I1) {
							fn.(startBundle3x0[context.Context, []typex.Window, I1]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[typex.PaneInfo, []typex.Window, I1]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, I1))
						return &caller3x0[typex.PaneInfo, []typex.Window, I1]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, I1))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 I1) {
							fn.(startBundle3x0[typex.PaneInfo, []typex.Window, I1]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[context.Context, typex.PaneInfo, []typex.Window]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window))
						return &caller3x0[context.Context, typex.PaneInfo, []typex.Window]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window) {
							fn.(startBundle3x0[context.Context, typex.PaneInfo, []typex.Window]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[typex.EventTime, I0, I1]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, I0, I1))
						return &caller3x0[typex.EventTime, I0, I1]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, I0, I1))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 I0, a2 I1) {
							fn.(startBundle3x0[typex.EventTime, I0, I1]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[context.Context, typex.EventTime, I1]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, I1))
						return &caller3x0[context.Context, typex.EventTime, I1]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, I1))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 I1) {
							fn.(startBundle3x0[context.Context, typex.EventTime, I1]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[typex.PaneInfo, typex.EventTime, I1]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, I1))
						return &caller3x0[typex.PaneInfo, typex.EventTime, I1]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, I1))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 I1) {
							fn.(startBundle3x0[typex.PaneInfo, typex.EventTime, I1]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[context.Context, typex.PaneInfo, typex.EventTime]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime))
						return &caller3x0[context.Context, typex.PaneInfo, typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime) {
							fn.(startBundle3x0[context.Context, typex.PaneInfo, typex.EventTime]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[[]typex.Window, typex.EventTime, I1]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, I1))
						return &caller3x0[[]typex.Window, typex.EventTime, I1]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, I1))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 I1) {
							fn.(startBundle3x0[[]typex.Window, typex.EventTime, I1]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[context.Context, []typex.Window, typex.EventTime]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime))
						return &caller3x0[context.Context, []typex.Window, typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime) {
							fn.(startBundle3x0[context.Context, []typex.Window, typex.EventTime]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[typex.PaneInfo, []typex.Window, typex.EventTime]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime))
						return &caller3x0[typex.PaneInfo, []typex.Window, typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime) {
							fn.(startBundle3x0[typex.PaneInfo, []typex.Window, typex.EventTime]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[typex.BundleFinalization, I0, I1]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization, I0, I1))
						return &caller3x0[typex.BundleFinalization, I0, I1]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization, I0, I1))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization, a1 I0, a2 I1) {
							fn.(startBundle3x0[typex.BundleFinalization, I0, I1]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[context.Context, typex.BundleFinalization, I1]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization, I1))
						return &caller3x0[context.Context, typex.BundleFinalization, I1]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization, I1))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization, a2 I1) {
							fn.(startBundle3x0[context.Context, typex.BundleFinalization, I1]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[typex.PaneInfo, typex.BundleFinalization, I1]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization, I1))
						return &caller3x0[typex.PaneInfo, typex.BundleFinalization, I1]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization, I1))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization, a2 I1) {
							fn.(startBundle3x0[typex.PaneInfo, typex.BundleFinalization, I1]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[context.Context, typex.PaneInfo, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization))
						return &caller3x0[context.Context, typex.PaneInfo, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization) {
							fn.(startBundle3x0[context.Context, typex.PaneInfo, typex.BundleFinalization]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[[]typex.Window, typex.BundleFinalization, I1]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization, I1))
						return &caller3x0[[]typex.Window, typex.BundleFinalization, I1]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization, I1))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization, a2 I1) {
							fn.(startBundle3x0[[]typex.Window, typex.BundleFinalization, I1]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[context.Context, []typex.Window, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization))
						return &caller3x0[context.Context, []typex.Window, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization) {
							fn.(startBundle3x0[context.Context, []typex.Window, typex.BundleFinalization]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization))
						return &caller3x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization) {
							fn.(startBundle3x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[typex.EventTime, typex.BundleFinalization, I1]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization, I1))
						return &caller3x0[typex.EventTime, typex.BundleFinalization, I1]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization, I1))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization, a2 I1) {
							fn.(startBundle3x0[typex.EventTime, typex.BundleFinalization, I1]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[context.Context, typex.EventTime, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization))
						return &caller3x0[context.Context, typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization) {
							fn.(startBundle3x0[context.Context, typex.EventTime, typex.BundleFinalization]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization))
						return &caller3x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization) {
							fn.(startBundle3x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[[]typex.Window, typex.EventTime, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization))
						return &caller3x0[[]typex.Window, typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization) {
							fn.(startBundle3x0[[]typex.Window, typex.EventTime, typex.BundleFinalization]).StartBundle(a0, a1, a2)
						})
					}
				}
			case startBundleOut == 1:
				if _, ok := doFn.(startBundle3x1[context.Context, I0, I1, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, I0, I1) error)
						return &caller3x1[context.Context, I0, I1, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, I0, I1) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 I0, a2 I1) error {
							return fn.(startBundle3x1[context.Context, I0, I1, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[typex.PaneInfo, I0, I1, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, I0, I1) error)
						return &caller3x1[typex.PaneInfo, I0, I1, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, I0, I1) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 I0, a2 I1) error {
							return fn.(startBundle3x1[typex.PaneInfo, I0, I1, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[context.Context, typex.PaneInfo, I1, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, I1) error)
						return &caller3x1[context.Context, typex.PaneInfo, I1, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, I1) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 I1) error {
							return fn.(startBundle3x1[context.Context, typex.PaneInfo, I1, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[[]typex.Window, I0, I1, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, I0, I1) error)
						return &caller3x1[[]typex.Window, I0, I1, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, I0, I1) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 I0, a2 I1) error {
							return fn.(startBundle3x1[[]typex.Window, I0, I1, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[context.Context, []typex.Window, I1, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, I1) error)
						return &caller3x1[context.Context, []typex.Window, I1, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, I1) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 I1) error {
							return fn.(startBundle3x1[context.Context, []typex.Window, I1, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[typex.PaneInfo, []typex.Window, I1, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, I1) error)
						return &caller3x1[typex.PaneInfo, []typex.Window, I1, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, I1) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 I1) error {
							return fn.(startBundle3x1[typex.PaneInfo, []typex.Window, I1, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[context.Context, typex.PaneInfo, []typex.Window, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window) error)
						return &caller3x1[context.Context, typex.PaneInfo, []typex.Window, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window) error {
							return fn.(startBundle3x1[context.Context, typex.PaneInfo, []typex.Window, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[typex.EventTime, I0, I1, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, I0, I1) error)
						return &caller3x1[typex.EventTime, I0, I1, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, I0, I1) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 I0, a2 I1) error {
							return fn.(startBundle3x1[typex.EventTime, I0, I1, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[context.Context, typex.EventTime, I1, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, I1) error)
						return &caller3x1[context.Context, typex.EventTime, I1, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, I1) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 I1) error {
							return fn.(startBundle3x1[context.Context, typex.EventTime, I1, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[typex.PaneInfo, typex.EventTime, I1, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, I1) error)
						return &caller3x1[typex.PaneInfo, typex.EventTime, I1, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, I1) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 I1) error {
							return fn.(startBundle3x1[typex.PaneInfo, typex.EventTime, I1, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[context.Context, typex.PaneInfo, typex.EventTime, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime) error)
						return &caller3x1[context.Context, typex.PaneInfo, typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime) error {
							return fn.(startBundle3x1[context.Context, typex.PaneInfo, typex.EventTime, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[[]typex.Window, typex.EventTime, I1, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, I1) error)
						return &caller3x1[[]typex.Window, typex.EventTime, I1, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, I1) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 I1) error {
							return fn.(startBundle3x1[[]typex.Window, typex.EventTime, I1, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[context.Context, []typex.Window, typex.EventTime, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime) error)
						return &caller3x1[context.Context, []typex.Window, typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime) error {
							return fn.(startBundle3x1[context.Context, []typex.Window, typex.EventTime, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[typex.PaneInfo, []typex.Window, typex.EventTime, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime) error)
						return &caller3x1[typex.PaneInfo, []typex.Window, typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime) error {
							return fn.(startBundle3x1[typex.PaneInfo, []typex.Window, typex.EventTime, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[typex.BundleFinalization, I0, I1, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization, I0, I1) error)
						return &caller3x1[typex.BundleFinalization, I0, I1, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization, I0, I1) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization, a1 I0, a2 I1) error {
							return fn.(startBundle3x1[typex.BundleFinalization, I0, I1, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[context.Context, typex.BundleFinalization, I1, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization, I1) error)
						return &caller3x1[context.Context, typex.BundleFinalization, I1, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization, I1) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization, a2 I1) error {
							return fn.(startBundle3x1[context.Context, typex.BundleFinalization, I1, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[typex.PaneInfo, typex.BundleFinalization, I1, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization, I1) error)
						return &caller3x1[typex.PaneInfo, typex.BundleFinalization, I1, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization, I1) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization, a2 I1) error {
							return fn.(startBundle3x1[typex.PaneInfo, typex.BundleFinalization, I1, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[context.Context, typex.PaneInfo, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization) error)
						return &caller3x1[context.Context, typex.PaneInfo, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization) error {
							return fn.(startBundle3x1[context.Context, typex.PaneInfo, typex.BundleFinalization, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[[]typex.Window, typex.BundleFinalization, I1, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization, I1) error)
						return &caller3x1[[]typex.Window, typex.BundleFinalization, I1, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization, I1) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization, a2 I1) error {
							return fn.(startBundle3x1[[]typex.Window, typex.BundleFinalization, I1, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[context.Context, []typex.Window, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization) error)
						return &caller3x1[context.Context, []typex.Window, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization) error {
							return fn.(startBundle3x1[context.Context, []typex.Window, typex.BundleFinalization, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization) error)
						return &caller3x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization) error {
							return fn.(startBundle3x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[typex.EventTime, typex.BundleFinalization, I1, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization, I1) error)
						return &caller3x1[typex.EventTime, typex.BundleFinalization, I1, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization, I1) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization, a2 I1) error {
							return fn.(startBundle3x1[typex.EventTime, typex.BundleFinalization, I1, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[context.Context, typex.EventTime, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization) error)
						return &caller3x1[context.Context, typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization) error {
							return fn.(startBundle3x1[context.Context, typex.EventTime, typex.BundleFinalization, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization) error)
						return &caller3x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization) error {
							return fn.(startBundle3x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization) error)
						return &caller3x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization) error {
							return fn.(startBundle3x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, error]).StartBundle(a0, a1, a2)
						})
					}
				}
			default:
				panic("Invalid signature for StartBundle")
			}

		case startBundleIn == 4:
			switch {
			case startBundleOut == 0:
				if _, ok := doFn.(startBundle4x0[context.Context, typex.PaneInfo, I0, I1]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, I0, I1))
						return &caller4x0[context.Context, typex.PaneInfo, I0, I1]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, I0, I1))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 I0, a3 I1) {
							fn.(startBundle4x0[context.Context, typex.PaneInfo, I0, I1]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[context.Context, []typex.Window, I0, I1]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, I0, I1))
						return &caller4x0[context.Context, []typex.Window, I0, I1]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, I0, I1))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 I0, a3 I1) {
							fn.(startBundle4x0[context.Context, []typex.Window, I0, I1]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[typex.PaneInfo, []typex.Window, I0, I1]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, I0, I1))
						return &caller4x0[typex.PaneInfo, []typex.Window, I0, I1]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, I0, I1))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 I0, a3 I1) {
							fn.(startBundle4x0[typex.PaneInfo, []typex.Window, I0, I1]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[context.Context, typex.PaneInfo, []typex.Window, I1]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, I1))
						return &caller4x0[context.Context, typex.PaneInfo, []typex.Window, I1]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, I1))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 I1) {
							fn.(startBundle4x0[context.Context, typex.PaneInfo, []typex.Window, I1]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[context.Context, typex.EventTime, I0, I1]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, I0, I1))
						return &caller4x0[context.Context, typex.EventTime, I0, I1]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, I0, I1))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 I0, a3 I1) {
							fn.(startBundle4x0[context.Context, typex.EventTime, I0, I1]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[typex.PaneInfo, typex.EventTime, I0, I1]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, I0, I1))
						return &caller4x0[typex.PaneInfo, typex.EventTime, I0, I1]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, I0, I1))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 I0, a3 I1) {
							fn.(startBundle4x0[typex.PaneInfo, typex.EventTime, I0, I1]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[context.Context, typex.PaneInfo, typex.EventTime, I1]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, I1))
						return &caller4x0[context.Context, typex.PaneInfo, typex.EventTime, I1]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, I1))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 I1) {
							fn.(startBundle4x0[context.Context, typex.PaneInfo, typex.EventTime, I1]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[[]typex.Window, typex.EventTime, I0, I1]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, I0, I1))
						return &caller4x0[[]typex.Window, typex.EventTime, I0, I1]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, I0, I1))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 I0, a3 I1) {
							fn.(startBundle4x0[[]typex.Window, typex.EventTime, I0, I1]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[context.Context, []typex.Window, typex.EventTime, I1]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, I1))
						return &caller4x0[context.Context, []typex.Window, typex.EventTime, I1]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, I1))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 I1) {
							fn.(startBundle4x0[context.Context, []typex.Window, typex.EventTime, I1]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[typex.PaneInfo, []typex.Window, typex.EventTime, I1]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, I1))
						return &caller4x0[typex.PaneInfo, []typex.Window, typex.EventTime, I1]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, I1))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 I1) {
							fn.(startBundle4x0[typex.PaneInfo, []typex.Window, typex.EventTime, I1]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime))
						return &caller4x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime) {
							fn.(startBundle4x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[context.Context, typex.BundleFinalization, I0, I1]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization, I0, I1))
						return &caller4x0[context.Context, typex.BundleFinalization, I0, I1]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization, I0, I1))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization, a2 I0, a3 I1) {
							fn.(startBundle4x0[context.Context, typex.BundleFinalization, I0, I1]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[typex.PaneInfo, typex.BundleFinalization, I0, I1]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization, I0, I1))
						return &caller4x0[typex.PaneInfo, typex.BundleFinalization, I0, I1]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization, I0, I1))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization, a2 I0, a3 I1) {
							fn.(startBundle4x0[typex.PaneInfo, typex.BundleFinalization, I0, I1]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I1]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization, I1))
						return &caller4x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I1]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization, I1))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization, a3 I1) {
							fn.(startBundle4x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I1]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[[]typex.Window, typex.BundleFinalization, I0, I1]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization, I0, I1))
						return &caller4x0[[]typex.Window, typex.BundleFinalization, I0, I1]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization, I0, I1))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization, a2 I0, a3 I1) {
							fn.(startBundle4x0[[]typex.Window, typex.BundleFinalization, I0, I1]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[context.Context, []typex.Window, typex.BundleFinalization, I1]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization, I1))
						return &caller4x0[context.Context, []typex.Window, typex.BundleFinalization, I1]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization, I1))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization, a3 I1) {
							fn.(startBundle4x0[context.Context, []typex.Window, typex.BundleFinalization, I1]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1))
						return &caller4x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization, a3 I1) {
							fn.(startBundle4x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization))
						return &caller4x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.BundleFinalization) {
							fn.(startBundle4x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[typex.EventTime, typex.BundleFinalization, I0, I1]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization, I0, I1))
						return &caller4x0[typex.EventTime, typex.BundleFinalization, I0, I1]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization, I0, I1))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization, a2 I0, a3 I1) {
							fn.(startBundle4x0[typex.EventTime, typex.BundleFinalization, I0, I1]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[context.Context, typex.EventTime, typex.BundleFinalization, I1]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization, I1))
						return &caller4x0[context.Context, typex.EventTime, typex.BundleFinalization, I1]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization, I1))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I1) {
							fn.(startBundle4x0[context.Context, typex.EventTime, typex.BundleFinalization, I1]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1))
						return &caller4x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I1) {
							fn.(startBundle4x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization))
						return &caller4x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 typex.BundleFinalization) {
							fn.(startBundle4x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I1]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization, I1))
						return &caller4x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I1]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization, I1))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I1) {
							fn.(startBundle4x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I1]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization))
						return &caller4x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization) {
							fn.(startBundle4x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization))
						return &caller4x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization) {
							fn.(startBundle4x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization]).StartBundle(a0, a1, a2, a3)
						})
					}
				}
			case startBundleOut == 1:
				if _, ok := doFn.(startBundle4x1[context.Context, typex.PaneInfo, I0, I1, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, I0, I1) error)
						return &caller4x1[context.Context, typex.PaneInfo, I0, I1, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, I0, I1) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 I0, a3 I1) error {
							return fn.(startBundle4x1[context.Context, typex.PaneInfo, I0, I1, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[context.Context, []typex.Window, I0, I1, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, I0, I1) error)
						return &caller4x1[context.Context, []typex.Window, I0, I1, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, I0, I1) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 I0, a3 I1) error {
							return fn.(startBundle4x1[context.Context, []typex.Window, I0, I1, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[typex.PaneInfo, []typex.Window, I0, I1, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, I0, I1) error)
						return &caller4x1[typex.PaneInfo, []typex.Window, I0, I1, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, I0, I1) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 I0, a3 I1) error {
							return fn.(startBundle4x1[typex.PaneInfo, []typex.Window, I0, I1, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[context.Context, typex.PaneInfo, []typex.Window, I1, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, I1) error)
						return &caller4x1[context.Context, typex.PaneInfo, []typex.Window, I1, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, I1) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 I1) error {
							return fn.(startBundle4x1[context.Context, typex.PaneInfo, []typex.Window, I1, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[context.Context, typex.EventTime, I0, I1, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, I0, I1) error)
						return &caller4x1[context.Context, typex.EventTime, I0, I1, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, I0, I1) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 I0, a3 I1) error {
							return fn.(startBundle4x1[context.Context, typex.EventTime, I0, I1, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[typex.PaneInfo, typex.EventTime, I0, I1, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, I0, I1) error)
						return &caller4x1[typex.PaneInfo, typex.EventTime, I0, I1, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, I0, I1) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 I0, a3 I1) error {
							return fn.(startBundle4x1[typex.PaneInfo, typex.EventTime, I0, I1, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[context.Context, typex.PaneInfo, typex.EventTime, I1, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, I1) error)
						return &caller4x1[context.Context, typex.PaneInfo, typex.EventTime, I1, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, I1) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 I1) error {
							return fn.(startBundle4x1[context.Context, typex.PaneInfo, typex.EventTime, I1, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[[]typex.Window, typex.EventTime, I0, I1, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, I0, I1) error)
						return &caller4x1[[]typex.Window, typex.EventTime, I0, I1, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, I0, I1) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 I0, a3 I1) error {
							return fn.(startBundle4x1[[]typex.Window, typex.EventTime, I0, I1, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[context.Context, []typex.Window, typex.EventTime, I1, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, I1) error)
						return &caller4x1[context.Context, []typex.Window, typex.EventTime, I1, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, I1) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 I1) error {
							return fn.(startBundle4x1[context.Context, []typex.Window, typex.EventTime, I1, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[typex.PaneInfo, []typex.Window, typex.EventTime, I1, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, I1) error)
						return &caller4x1[typex.PaneInfo, []typex.Window, typex.EventTime, I1, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, I1) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 I1) error {
							return fn.(startBundle4x1[typex.PaneInfo, []typex.Window, typex.EventTime, I1, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime) error)
						return &caller4x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime) error {
							return fn.(startBundle4x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[context.Context, typex.BundleFinalization, I0, I1, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization, I0, I1) error)
						return &caller4x1[context.Context, typex.BundleFinalization, I0, I1, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization, I0, I1) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization, a2 I0, a3 I1) error {
							return fn.(startBundle4x1[context.Context, typex.BundleFinalization, I0, I1, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[typex.PaneInfo, typex.BundleFinalization, I0, I1, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization, I0, I1) error)
						return &caller4x1[typex.PaneInfo, typex.BundleFinalization, I0, I1, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization, I0, I1) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization, a2 I0, a3 I1) error {
							return fn.(startBundle4x1[typex.PaneInfo, typex.BundleFinalization, I0, I1, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I1, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization, I1) error)
						return &caller4x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I1, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization, I1) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization, a3 I1) error {
							return fn.(startBundle4x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I1, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[[]typex.Window, typex.BundleFinalization, I0, I1, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization, I0, I1) error)
						return &caller4x1[[]typex.Window, typex.BundleFinalization, I0, I1, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization, I0, I1) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization, a2 I0, a3 I1) error {
							return fn.(startBundle4x1[[]typex.Window, typex.BundleFinalization, I0, I1, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[context.Context, []typex.Window, typex.BundleFinalization, I1, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization, I1) error)
						return &caller4x1[context.Context, []typex.Window, typex.BundleFinalization, I1, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization, I1) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization, a3 I1) error {
							return fn.(startBundle4x1[context.Context, []typex.Window, typex.BundleFinalization, I1, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1) error)
						return &caller4x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization, a3 I1) error {
							return fn.(startBundle4x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization) error)
						return &caller4x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.BundleFinalization) error {
							return fn.(startBundle4x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[typex.EventTime, typex.BundleFinalization, I0, I1, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization, I0, I1) error)
						return &caller4x1[typex.EventTime, typex.BundleFinalization, I0, I1, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization, I0, I1) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization, a2 I0, a3 I1) error {
							return fn.(startBundle4x1[typex.EventTime, typex.BundleFinalization, I0, I1, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[context.Context, typex.EventTime, typex.BundleFinalization, I1, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization, I1) error)
						return &caller4x1[context.Context, typex.EventTime, typex.BundleFinalization, I1, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization, I1) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I1) error {
							return fn.(startBundle4x1[context.Context, typex.EventTime, typex.BundleFinalization, I1, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1) error)
						return &caller4x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I1) error {
							return fn.(startBundle4x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization) error)
						return &caller4x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 typex.BundleFinalization) error {
							return fn.(startBundle4x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I1, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization, I1) error)
						return &caller4x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I1, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization, I1) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I1) error {
							return fn.(startBundle4x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I1, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization) error)
						return &caller4x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization) error {
							return fn.(startBundle4x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization) error)
						return &caller4x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization) error {
							return fn.(startBundle4x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				}
			default:
				panic("Invalid signature for StartBundle")
			}

		case startBundleIn == 5:
			switch {
			case startBundleOut == 0:
				if _, ok := doFn.(startBundle5x0[context.Context, typex.PaneInfo, []typex.Window, I0, I1]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, I0, I1))
						return &caller5x0[context.Context, typex.PaneInfo, []typex.Window, I0, I1]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, I0, I1))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 I0, a4 I1) {
							fn.(startBundle5x0[context.Context, typex.PaneInfo, []typex.Window, I0, I1]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[context.Context, typex.PaneInfo, typex.EventTime, I0, I1]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, I0, I1))
						return &caller5x0[context.Context, typex.PaneInfo, typex.EventTime, I0, I1]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, I0, I1))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 I0, a4 I1) {
							fn.(startBundle5x0[context.Context, typex.PaneInfo, typex.EventTime, I0, I1]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[context.Context, []typex.Window, typex.EventTime, I0, I1]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, I0, I1))
						return &caller5x0[context.Context, []typex.Window, typex.EventTime, I0, I1]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, I0, I1))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 I0, a4 I1) {
							fn.(startBundle5x0[context.Context, []typex.Window, typex.EventTime, I0, I1]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[typex.PaneInfo, []typex.Window, typex.EventTime, I0, I1]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, I0, I1))
						return &caller5x0[typex.PaneInfo, []typex.Window, typex.EventTime, I0, I1]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, I0, I1))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 I0, a4 I1) {
							fn.(startBundle5x0[typex.PaneInfo, []typex.Window, typex.EventTime, I0, I1]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I1]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I1))
						return &caller5x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I1]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I1))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 I1) {
							fn.(startBundle5x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I1]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I0, I1]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization, I0, I1))
						return &caller5x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I0, I1]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization, I0, I1))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization, a3 I0, a4 I1) {
							fn.(startBundle5x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I0, I1]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[context.Context, []typex.Window, typex.BundleFinalization, I0, I1]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization, I0, I1))
						return &caller5x0[context.Context, []typex.Window, typex.BundleFinalization, I0, I1]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization, I0, I1))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization, a3 I0, a4 I1) {
							fn.(startBundle5x0[context.Context, []typex.Window, typex.BundleFinalization, I0, I1]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0, I1]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0, I1))
						return &caller5x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0, I1]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0, I1))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization, a3 I0, a4 I1) {
							fn.(startBundle5x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0, I1]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1))
						return &caller5x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.BundleFinalization, a4 I1) {
							fn.(startBundle5x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[context.Context, typex.EventTime, typex.BundleFinalization, I0, I1]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization, I0, I1))
						return &caller5x0[context.Context, typex.EventTime, typex.BundleFinalization, I0, I1]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization, I0, I1))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I0, a4 I1) {
							fn.(startBundle5x0[context.Context, typex.EventTime, typex.BundleFinalization, I0, I1]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0, I1]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0, I1))
						return &caller5x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0, I1]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0, I1))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I0, a4 I1) {
							fn.(startBundle5x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0, I1]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1))
						return &caller5x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I1) {
							fn.(startBundle5x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1))
						return &caller5x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I0, a4 I1) {
							fn.(startBundle5x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I1]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I1))
						return &caller5x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I1]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I1))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I1) {
							fn.(startBundle5x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I1]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I1]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I1))
						return &caller5x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I1]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I1))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I1) {
							fn.(startBundle5x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I1]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization))
						return &caller5x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 typex.BundleFinalization) {
							fn.(startBundle5x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				}
			case startBundleOut == 1:
				if _, ok := doFn.(startBundle5x1[context.Context, typex.PaneInfo, []typex.Window, I0, I1, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, I0, I1) error)
						return &caller5x1[context.Context, typex.PaneInfo, []typex.Window, I0, I1, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, I0, I1) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 I0, a4 I1) error {
							return fn.(startBundle5x1[context.Context, typex.PaneInfo, []typex.Window, I0, I1, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[context.Context, typex.PaneInfo, typex.EventTime, I0, I1, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, I0, I1) error)
						return &caller5x1[context.Context, typex.PaneInfo, typex.EventTime, I0, I1, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, I0, I1) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 I0, a4 I1) error {
							return fn.(startBundle5x1[context.Context, typex.PaneInfo, typex.EventTime, I0, I1, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[context.Context, []typex.Window, typex.EventTime, I0, I1, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, I0, I1) error)
						return &caller5x1[context.Context, []typex.Window, typex.EventTime, I0, I1, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, I0, I1) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 I0, a4 I1) error {
							return fn.(startBundle5x1[context.Context, []typex.Window, typex.EventTime, I0, I1, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[typex.PaneInfo, []typex.Window, typex.EventTime, I0, I1, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, I0, I1) error)
						return &caller5x1[typex.PaneInfo, []typex.Window, typex.EventTime, I0, I1, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, I0, I1) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 I0, a4 I1) error {
							return fn.(startBundle5x1[typex.PaneInfo, []typex.Window, typex.EventTime, I0, I1, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I1, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I1) error)
						return &caller5x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I1, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I1) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 I1) error {
							return fn.(startBundle5x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I1, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I0, I1, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization, I0, I1) error)
						return &caller5x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I0, I1, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization, I0, I1) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization, a3 I0, a4 I1) error {
							return fn.(startBundle5x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I0, I1, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[context.Context, []typex.Window, typex.BundleFinalization, I0, I1, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization, I0, I1) error)
						return &caller5x1[context.Context, []typex.Window, typex.BundleFinalization, I0, I1, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization, I0, I1) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization, a3 I0, a4 I1) error {
							return fn.(startBundle5x1[context.Context, []typex.Window, typex.BundleFinalization, I0, I1, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0, I1, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0, I1) error)
						return &caller5x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0, I1, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0, I1) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization, a3 I0, a4 I1) error {
							return fn.(startBundle5x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0, I1, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1) error)
						return &caller5x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.BundleFinalization, a4 I1) error {
							return fn.(startBundle5x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[context.Context, typex.EventTime, typex.BundleFinalization, I0, I1, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization, I0, I1) error)
						return &caller5x1[context.Context, typex.EventTime, typex.BundleFinalization, I0, I1, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization, I0, I1) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I0, a4 I1) error {
							return fn.(startBundle5x1[context.Context, typex.EventTime, typex.BundleFinalization, I0, I1, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0, I1, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0, I1) error)
						return &caller5x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0, I1, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0, I1) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I0, a4 I1) error {
							return fn.(startBundle5x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0, I1, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1) error)
						return &caller5x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I1) error {
							return fn.(startBundle5x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1) error)
						return &caller5x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I0, a4 I1) error {
							return fn.(startBundle5x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I1, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I1) error)
						return &caller5x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I1, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I1) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I1) error {
							return fn.(startBundle5x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I1, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I1, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I1) error)
						return &caller5x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I1, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I1) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I1) error {
							return fn.(startBundle5x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I1, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization) error)
						return &caller5x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 typex.BundleFinalization) error {
							return fn.(startBundle5x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				}
			default:
				panic("Invalid signature for StartBundle")
			}

		case startBundleIn == 6:
			switch {
			case startBundleOut == 0:
				if _, ok := doFn.(startBundle6x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I0, I1]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I0, I1))
						return &caller6x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I0, I1]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I0, I1))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 I0, a5 I1) {
							fn.(startBundle6x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I0, I1]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0, I1]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0, I1))
						return &caller6x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0, I1]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0, I1))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.BundleFinalization, a4 I0, a5 I1) {
							fn.(startBundle6x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0, I1]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0, I1]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0, I1))
						return &caller6x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0, I1]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0, I1))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I0, a5 I1) {
							fn.(startBundle6x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0, I1]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1))
						return &caller6x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I0, a5 I1) {
							fn.(startBundle6x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1))
						return &caller6x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I0, a5 I1) {
							fn.(startBundle6x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I1]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I1))
						return &caller6x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I1]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I1))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 typex.BundleFinalization, a5 I1) {
							fn.(startBundle6x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I1]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				}
			case startBundleOut == 1:
				if _, ok := doFn.(startBundle6x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I0, I1, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I0, I1) error)
						return &caller6x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I0, I1, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I0, I1) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 I0, a5 I1) error {
							return fn.(startBundle6x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I0, I1, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0, I1, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0, I1) error)
						return &caller6x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0, I1, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0, I1) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.BundleFinalization, a4 I0, a5 I1) error {
							return fn.(startBundle6x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0, I1, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0, I1, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0, I1) error)
						return &caller6x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0, I1, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0, I1) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I0, a5 I1) error {
							return fn.(startBundle6x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0, I1, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1) error)
						return &caller6x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I0, a5 I1) error {
							return fn.(startBundle6x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1) error)
						return &caller6x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I0, a5 I1) error {
							return fn.(startBundle6x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I1, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I1) error)
						return &caller6x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I1, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I1) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 typex.BundleFinalization, a5 I1) error {
							return fn.(startBundle6x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I1, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				}
			default:
				panic("Invalid signature for StartBundle")
			}

		case startBundleIn == 7:
			switch {
			case startBundleOut == 0:
				if _, ok := doFn.(startBundle7x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1))
						return &caller7x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 typex.BundleFinalization, a5 I0, a6 I1) {
							fn.(startBundle7x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				}
			case startBundleOut == 1:
				if _, ok := doFn.(startBundle7x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1) error)
						return &caller7x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 typex.BundleFinalization, a5 I0, a6 I1) error {
							return fn.(startBundle7x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				}
			default:
				panic("Invalid signature for StartBundle")
			}

		default:
			panic("Invalid signature for StartBundle")
		}
	}
	return nil
}

func buildStartBundleWrapper3[I0, I1, I2 any](doFn interface{}) func(interface{}) reflectx.Func {
	startBundleIn := -1
	startBundleOut := -1
	startBundleMethod := reflect.ValueOf(doFn).MethodByName("StartBundle")
	if startBundleMethod.IsValid() {
		startBundleIn = startBundleMethod.Type().NumIn()
		startBundleOut = startBundleMethod.Type().NumOut()
		switch {

		case startBundleIn == 0:
			switch {
			case startBundleOut == 0:
				if _, ok := doFn.(startBundle0x0); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func())
						return &caller0x0{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func())(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func() { fn.(startBundle0x0).StartBundle() })
					}
				}
			case startBundleOut == 1:
				if _, ok := doFn.(startBundle0x1[error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func() error)
						return &caller0x1[error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func() error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func() error { return fn.(startBundle0x1[error]).StartBundle() })
					}
				}
			default:
				panic("Invalid signature for StartBundle")
			}

		case startBundleIn == 1:
			switch {
			case startBundleOut == 0:
				if _, ok := doFn.(startBundle1x0[I2]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I2))
						return &caller1x0[I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I2))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I2) { fn.(startBundle1x0[I2]).StartBundle(a0) })
					}
				} else if _, ok := doFn.(startBundle1x0[context.Context]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context))
						return &caller1x0[context.Context]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context) { fn.(startBundle1x0[context.Context]).StartBundle(a0) })
					}
				} else if _, ok := doFn.(startBundle1x0[typex.PaneInfo]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo))
						return &caller1x0[typex.PaneInfo]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo) { fn.(startBundle1x0[typex.PaneInfo]).StartBundle(a0) })
					}
				} else if _, ok := doFn.(startBundle1x0[[]typex.Window]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window))
						return &caller1x0[[]typex.Window]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window) { fn.(startBundle1x0[[]typex.Window]).StartBundle(a0) })
					}
				} else if _, ok := doFn.(startBundle1x0[typex.EventTime]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime))
						return &caller1x0[typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime) { fn.(startBundle1x0[typex.EventTime]).StartBundle(a0) })
					}
				} else if _, ok := doFn.(startBundle1x0[typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization))
						return &caller1x0[typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization) { fn.(startBundle1x0[typex.BundleFinalization]).StartBundle(a0) })
					}
				}
			case startBundleOut == 1:
				if _, ok := doFn.(startBundle1x1[I2, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I2) error)
						return &caller1x1[I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I2) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I2) error { return fn.(startBundle1x1[I2, error]).StartBundle(a0) })
					}
				} else if _, ok := doFn.(startBundle1x1[context.Context, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context) error)
						return &caller1x1[context.Context, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context) error { return fn.(startBundle1x1[context.Context, error]).StartBundle(a0) })
					}
				} else if _, ok := doFn.(startBundle1x1[typex.PaneInfo, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo) error)
						return &caller1x1[typex.PaneInfo, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo) error { return fn.(startBundle1x1[typex.PaneInfo, error]).StartBundle(a0) })
					}
				} else if _, ok := doFn.(startBundle1x1[[]typex.Window, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window) error)
						return &caller1x1[[]typex.Window, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window) error { return fn.(startBundle1x1[[]typex.Window, error]).StartBundle(a0) })
					}
				} else if _, ok := doFn.(startBundle1x1[typex.EventTime, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime) error)
						return &caller1x1[typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime) error { return fn.(startBundle1x1[typex.EventTime, error]).StartBundle(a0) })
					}
				} else if _, ok := doFn.(startBundle1x1[typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization) error)
						return &caller1x1[typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization) error {
							return fn.(startBundle1x1[typex.BundleFinalization, error]).StartBundle(a0)
						})
					}
				}
			default:
				panic("Invalid signature for StartBundle")
			}

		case startBundleIn == 2:
			switch {
			case startBundleOut == 0:
				if _, ok := doFn.(startBundle2x0[I1, I2]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I1, I2))
						return &caller2x0[I1, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I1, I2))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I1, a1 I2) { fn.(startBundle2x0[I1, I2]).StartBundle(a0, a1) })
					}
				} else if _, ok := doFn.(startBundle2x0[context.Context, I2]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, I2))
						return &caller2x0[context.Context, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, I2))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 I2) { fn.(startBundle2x0[context.Context, I2]).StartBundle(a0, a1) })
					}
				} else if _, ok := doFn.(startBundle2x0[typex.PaneInfo, I2]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, I2))
						return &caller2x0[typex.PaneInfo, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, I2))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 I2) { fn.(startBundle2x0[typex.PaneInfo, I2]).StartBundle(a0, a1) })
					}
				} else if _, ok := doFn.(startBundle2x0[context.Context, typex.PaneInfo]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo))
						return &caller2x0[context.Context, typex.PaneInfo]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo) {
							fn.(startBundle2x0[context.Context, typex.PaneInfo]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x0[[]typex.Window, I2]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, I2))
						return &caller2x0[[]typex.Window, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, I2))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 I2) { fn.(startBundle2x0[[]typex.Window, I2]).StartBundle(a0, a1) })
					}
				} else if _, ok := doFn.(startBundle2x0[context.Context, []typex.Window]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window))
						return &caller2x0[context.Context, []typex.Window]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window) {
							fn.(startBundle2x0[context.Context, []typex.Window]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x0[typex.PaneInfo, []typex.Window]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window))
						return &caller2x0[typex.PaneInfo, []typex.Window]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window) {
							fn.(startBundle2x0[typex.PaneInfo, []typex.Window]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x0[typex.EventTime, I2]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, I2))
						return &caller2x0[typex.EventTime, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, I2))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 I2) { fn.(startBundle2x0[typex.EventTime, I2]).StartBundle(a0, a1) })
					}
				} else if _, ok := doFn.(startBundle2x0[context.Context, typex.EventTime]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime))
						return &caller2x0[context.Context, typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime) {
							fn.(startBundle2x0[context.Context, typex.EventTime]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x0[typex.PaneInfo, typex.EventTime]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime))
						return &caller2x0[typex.PaneInfo, typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime) {
							fn.(startBundle2x0[typex.PaneInfo, typex.EventTime]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x0[[]typex.Window, typex.EventTime]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime))
						return &caller2x0[[]typex.Window, typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime) {
							fn.(startBundle2x0[[]typex.Window, typex.EventTime]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x0[typex.BundleFinalization, I2]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization, I2))
						return &caller2x0[typex.BundleFinalization, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization, I2))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization, a1 I2) {
							fn.(startBundle2x0[typex.BundleFinalization, I2]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x0[context.Context, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization))
						return &caller2x0[context.Context, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization) {
							fn.(startBundle2x0[context.Context, typex.BundleFinalization]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x0[typex.PaneInfo, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization))
						return &caller2x0[typex.PaneInfo, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization) {
							fn.(startBundle2x0[typex.PaneInfo, typex.BundleFinalization]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x0[[]typex.Window, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization))
						return &caller2x0[[]typex.Window, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization) {
							fn.(startBundle2x0[[]typex.Window, typex.BundleFinalization]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x0[typex.EventTime, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization))
						return &caller2x0[typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization) {
							fn.(startBundle2x0[typex.EventTime, typex.BundleFinalization]).StartBundle(a0, a1)
						})
					}
				}
			case startBundleOut == 1:
				if _, ok := doFn.(startBundle2x1[I1, I2, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I1, I2) error)
						return &caller2x1[I1, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I1, I2) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I1, a1 I2) error { return fn.(startBundle2x1[I1, I2, error]).StartBundle(a0, a1) })
					}
				} else if _, ok := doFn.(startBundle2x1[context.Context, I2, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, I2) error)
						return &caller2x1[context.Context, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, I2) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 I2) error {
							return fn.(startBundle2x1[context.Context, I2, error]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x1[typex.PaneInfo, I2, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, I2) error)
						return &caller2x1[typex.PaneInfo, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, I2) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 I2) error {
							return fn.(startBundle2x1[typex.PaneInfo, I2, error]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x1[context.Context, typex.PaneInfo, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo) error)
						return &caller2x1[context.Context, typex.PaneInfo, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo) error {
							return fn.(startBundle2x1[context.Context, typex.PaneInfo, error]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x1[[]typex.Window, I2, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, I2) error)
						return &caller2x1[[]typex.Window, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, I2) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 I2) error {
							return fn.(startBundle2x1[[]typex.Window, I2, error]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x1[context.Context, []typex.Window, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window) error)
						return &caller2x1[context.Context, []typex.Window, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window) error {
							return fn.(startBundle2x1[context.Context, []typex.Window, error]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x1[typex.PaneInfo, []typex.Window, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window) error)
						return &caller2x1[typex.PaneInfo, []typex.Window, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window) error {
							return fn.(startBundle2x1[typex.PaneInfo, []typex.Window, error]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x1[typex.EventTime, I2, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, I2) error)
						return &caller2x1[typex.EventTime, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, I2) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 I2) error {
							return fn.(startBundle2x1[typex.EventTime, I2, error]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x1[context.Context, typex.EventTime, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime) error)
						return &caller2x1[context.Context, typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime) error {
							return fn.(startBundle2x1[context.Context, typex.EventTime, error]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x1[typex.PaneInfo, typex.EventTime, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime) error)
						return &caller2x1[typex.PaneInfo, typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime) error {
							return fn.(startBundle2x1[typex.PaneInfo, typex.EventTime, error]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x1[[]typex.Window, typex.EventTime, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime) error)
						return &caller2x1[[]typex.Window, typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime) error {
							return fn.(startBundle2x1[[]typex.Window, typex.EventTime, error]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x1[typex.BundleFinalization, I2, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization, I2) error)
						return &caller2x1[typex.BundleFinalization, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization, I2) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization, a1 I2) error {
							return fn.(startBundle2x1[typex.BundleFinalization, I2, error]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x1[context.Context, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization) error)
						return &caller2x1[context.Context, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization) error {
							return fn.(startBundle2x1[context.Context, typex.BundleFinalization, error]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x1[typex.PaneInfo, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization) error)
						return &caller2x1[typex.PaneInfo, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization) error {
							return fn.(startBundle2x1[typex.PaneInfo, typex.BundleFinalization, error]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x1[[]typex.Window, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization) error)
						return &caller2x1[[]typex.Window, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization) error {
							return fn.(startBundle2x1[[]typex.Window, typex.BundleFinalization, error]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x1[typex.EventTime, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization) error)
						return &caller2x1[typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization) error {
							return fn.(startBundle2x1[typex.EventTime, typex.BundleFinalization, error]).StartBundle(a0, a1)
						})
					}
				}
			default:
				panic("Invalid signature for StartBundle")
			}

		case startBundleIn == 3:
			switch {
			case startBundleOut == 0:
				if _, ok := doFn.(startBundle3x0[I0, I1, I2]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I0, I1, I2))
						return &caller3x0[I0, I1, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I0, I1, I2))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I0, a1 I1, a2 I2) { fn.(startBundle3x0[I0, I1, I2]).StartBundle(a0, a1, a2) })
					}
				} else if _, ok := doFn.(startBundle3x0[context.Context, I1, I2]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, I1, I2))
						return &caller3x0[context.Context, I1, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, I1, I2))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 I1, a2 I2) {
							fn.(startBundle3x0[context.Context, I1, I2]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[typex.PaneInfo, I1, I2]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, I1, I2))
						return &caller3x0[typex.PaneInfo, I1, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, I1, I2))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 I1, a2 I2) {
							fn.(startBundle3x0[typex.PaneInfo, I1, I2]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[context.Context, typex.PaneInfo, I2]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, I2))
						return &caller3x0[context.Context, typex.PaneInfo, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, I2))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 I2) {
							fn.(startBundle3x0[context.Context, typex.PaneInfo, I2]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[[]typex.Window, I1, I2]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, I1, I2))
						return &caller3x0[[]typex.Window, I1, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, I1, I2))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 I1, a2 I2) {
							fn.(startBundle3x0[[]typex.Window, I1, I2]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[context.Context, []typex.Window, I2]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, I2))
						return &caller3x0[context.Context, []typex.Window, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, I2))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 I2) {
							fn.(startBundle3x0[context.Context, []typex.Window, I2]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[typex.PaneInfo, []typex.Window, I2]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, I2))
						return &caller3x0[typex.PaneInfo, []typex.Window, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, I2))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 I2) {
							fn.(startBundle3x0[typex.PaneInfo, []typex.Window, I2]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[context.Context, typex.PaneInfo, []typex.Window]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window))
						return &caller3x0[context.Context, typex.PaneInfo, []typex.Window]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window) {
							fn.(startBundle3x0[context.Context, typex.PaneInfo, []typex.Window]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[typex.EventTime, I1, I2]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, I1, I2))
						return &caller3x0[typex.EventTime, I1, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, I1, I2))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 I1, a2 I2) {
							fn.(startBundle3x0[typex.EventTime, I1, I2]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[context.Context, typex.EventTime, I2]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, I2))
						return &caller3x0[context.Context, typex.EventTime, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, I2))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 I2) {
							fn.(startBundle3x0[context.Context, typex.EventTime, I2]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[typex.PaneInfo, typex.EventTime, I2]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, I2))
						return &caller3x0[typex.PaneInfo, typex.EventTime, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, I2))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 I2) {
							fn.(startBundle3x0[typex.PaneInfo, typex.EventTime, I2]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[context.Context, typex.PaneInfo, typex.EventTime]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime))
						return &caller3x0[context.Context, typex.PaneInfo, typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime) {
							fn.(startBundle3x0[context.Context, typex.PaneInfo, typex.EventTime]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[[]typex.Window, typex.EventTime, I2]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, I2))
						return &caller3x0[[]typex.Window, typex.EventTime, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, I2))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 I2) {
							fn.(startBundle3x0[[]typex.Window, typex.EventTime, I2]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[context.Context, []typex.Window, typex.EventTime]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime))
						return &caller3x0[context.Context, []typex.Window, typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime) {
							fn.(startBundle3x0[context.Context, []typex.Window, typex.EventTime]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[typex.PaneInfo, []typex.Window, typex.EventTime]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime))
						return &caller3x0[typex.PaneInfo, []typex.Window, typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime) {
							fn.(startBundle3x0[typex.PaneInfo, []typex.Window, typex.EventTime]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[typex.BundleFinalization, I1, I2]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization, I1, I2))
						return &caller3x0[typex.BundleFinalization, I1, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization, I1, I2))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization, a1 I1, a2 I2) {
							fn.(startBundle3x0[typex.BundleFinalization, I1, I2]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[context.Context, typex.BundleFinalization, I2]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization, I2))
						return &caller3x0[context.Context, typex.BundleFinalization, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization, I2))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization, a2 I2) {
							fn.(startBundle3x0[context.Context, typex.BundleFinalization, I2]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[typex.PaneInfo, typex.BundleFinalization, I2]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization, I2))
						return &caller3x0[typex.PaneInfo, typex.BundleFinalization, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization, I2))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization, a2 I2) {
							fn.(startBundle3x0[typex.PaneInfo, typex.BundleFinalization, I2]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[context.Context, typex.PaneInfo, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization))
						return &caller3x0[context.Context, typex.PaneInfo, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization) {
							fn.(startBundle3x0[context.Context, typex.PaneInfo, typex.BundleFinalization]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[[]typex.Window, typex.BundleFinalization, I2]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization, I2))
						return &caller3x0[[]typex.Window, typex.BundleFinalization, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization, I2))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization, a2 I2) {
							fn.(startBundle3x0[[]typex.Window, typex.BundleFinalization, I2]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[context.Context, []typex.Window, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization))
						return &caller3x0[context.Context, []typex.Window, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization) {
							fn.(startBundle3x0[context.Context, []typex.Window, typex.BundleFinalization]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization))
						return &caller3x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization) {
							fn.(startBundle3x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[typex.EventTime, typex.BundleFinalization, I2]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization, I2))
						return &caller3x0[typex.EventTime, typex.BundleFinalization, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization, I2))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization, a2 I2) {
							fn.(startBundle3x0[typex.EventTime, typex.BundleFinalization, I2]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[context.Context, typex.EventTime, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization))
						return &caller3x0[context.Context, typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization) {
							fn.(startBundle3x0[context.Context, typex.EventTime, typex.BundleFinalization]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization))
						return &caller3x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization) {
							fn.(startBundle3x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[[]typex.Window, typex.EventTime, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization))
						return &caller3x0[[]typex.Window, typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization) {
							fn.(startBundle3x0[[]typex.Window, typex.EventTime, typex.BundleFinalization]).StartBundle(a0, a1, a2)
						})
					}
				}
			case startBundleOut == 1:
				if _, ok := doFn.(startBundle3x1[I0, I1, I2, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I0, I1, I2) error)
						return &caller3x1[I0, I1, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I0, I1, I2) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I0, a1 I1, a2 I2) error { return fn.(startBundle3x1[I0, I1, I2, error]).StartBundle(a0, a1, a2) })
					}
				} else if _, ok := doFn.(startBundle3x1[context.Context, I1, I2, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, I1, I2) error)
						return &caller3x1[context.Context, I1, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, I1, I2) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 I1, a2 I2) error {
							return fn.(startBundle3x1[context.Context, I1, I2, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[typex.PaneInfo, I1, I2, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, I1, I2) error)
						return &caller3x1[typex.PaneInfo, I1, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, I1, I2) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 I1, a2 I2) error {
							return fn.(startBundle3x1[typex.PaneInfo, I1, I2, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[context.Context, typex.PaneInfo, I2, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, I2) error)
						return &caller3x1[context.Context, typex.PaneInfo, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, I2) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 I2) error {
							return fn.(startBundle3x1[context.Context, typex.PaneInfo, I2, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[[]typex.Window, I1, I2, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, I1, I2) error)
						return &caller3x1[[]typex.Window, I1, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, I1, I2) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 I1, a2 I2) error {
							return fn.(startBundle3x1[[]typex.Window, I1, I2, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[context.Context, []typex.Window, I2, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, I2) error)
						return &caller3x1[context.Context, []typex.Window, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, I2) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 I2) error {
							return fn.(startBundle3x1[context.Context, []typex.Window, I2, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[typex.PaneInfo, []typex.Window, I2, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, I2) error)
						return &caller3x1[typex.PaneInfo, []typex.Window, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, I2) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 I2) error {
							return fn.(startBundle3x1[typex.PaneInfo, []typex.Window, I2, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[context.Context, typex.PaneInfo, []typex.Window, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window) error)
						return &caller3x1[context.Context, typex.PaneInfo, []typex.Window, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window) error {
							return fn.(startBundle3x1[context.Context, typex.PaneInfo, []typex.Window, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[typex.EventTime, I1, I2, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, I1, I2) error)
						return &caller3x1[typex.EventTime, I1, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, I1, I2) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 I1, a2 I2) error {
							return fn.(startBundle3x1[typex.EventTime, I1, I2, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[context.Context, typex.EventTime, I2, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, I2) error)
						return &caller3x1[context.Context, typex.EventTime, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, I2) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 I2) error {
							return fn.(startBundle3x1[context.Context, typex.EventTime, I2, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[typex.PaneInfo, typex.EventTime, I2, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, I2) error)
						return &caller3x1[typex.PaneInfo, typex.EventTime, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, I2) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 I2) error {
							return fn.(startBundle3x1[typex.PaneInfo, typex.EventTime, I2, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[context.Context, typex.PaneInfo, typex.EventTime, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime) error)
						return &caller3x1[context.Context, typex.PaneInfo, typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime) error {
							return fn.(startBundle3x1[context.Context, typex.PaneInfo, typex.EventTime, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[[]typex.Window, typex.EventTime, I2, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, I2) error)
						return &caller3x1[[]typex.Window, typex.EventTime, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, I2) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 I2) error {
							return fn.(startBundle3x1[[]typex.Window, typex.EventTime, I2, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[context.Context, []typex.Window, typex.EventTime, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime) error)
						return &caller3x1[context.Context, []typex.Window, typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime) error {
							return fn.(startBundle3x1[context.Context, []typex.Window, typex.EventTime, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[typex.PaneInfo, []typex.Window, typex.EventTime, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime) error)
						return &caller3x1[typex.PaneInfo, []typex.Window, typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime) error {
							return fn.(startBundle3x1[typex.PaneInfo, []typex.Window, typex.EventTime, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[typex.BundleFinalization, I1, I2, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization, I1, I2) error)
						return &caller3x1[typex.BundleFinalization, I1, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization, I1, I2) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization, a1 I1, a2 I2) error {
							return fn.(startBundle3x1[typex.BundleFinalization, I1, I2, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[context.Context, typex.BundleFinalization, I2, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization, I2) error)
						return &caller3x1[context.Context, typex.BundleFinalization, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization, I2) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization, a2 I2) error {
							return fn.(startBundle3x1[context.Context, typex.BundleFinalization, I2, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[typex.PaneInfo, typex.BundleFinalization, I2, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization, I2) error)
						return &caller3x1[typex.PaneInfo, typex.BundleFinalization, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization, I2) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization, a2 I2) error {
							return fn.(startBundle3x1[typex.PaneInfo, typex.BundleFinalization, I2, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[context.Context, typex.PaneInfo, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization) error)
						return &caller3x1[context.Context, typex.PaneInfo, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization) error {
							return fn.(startBundle3x1[context.Context, typex.PaneInfo, typex.BundleFinalization, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[[]typex.Window, typex.BundleFinalization, I2, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization, I2) error)
						return &caller3x1[[]typex.Window, typex.BundleFinalization, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization, I2) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization, a2 I2) error {
							return fn.(startBundle3x1[[]typex.Window, typex.BundleFinalization, I2, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[context.Context, []typex.Window, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization) error)
						return &caller3x1[context.Context, []typex.Window, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization) error {
							return fn.(startBundle3x1[context.Context, []typex.Window, typex.BundleFinalization, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization) error)
						return &caller3x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization) error {
							return fn.(startBundle3x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[typex.EventTime, typex.BundleFinalization, I2, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization, I2) error)
						return &caller3x1[typex.EventTime, typex.BundleFinalization, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization, I2) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization, a2 I2) error {
							return fn.(startBundle3x1[typex.EventTime, typex.BundleFinalization, I2, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[context.Context, typex.EventTime, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization) error)
						return &caller3x1[context.Context, typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization) error {
							return fn.(startBundle3x1[context.Context, typex.EventTime, typex.BundleFinalization, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization) error)
						return &caller3x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization) error {
							return fn.(startBundle3x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization) error)
						return &caller3x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization) error {
							return fn.(startBundle3x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, error]).StartBundle(a0, a1, a2)
						})
					}
				}
			default:
				panic("Invalid signature for StartBundle")
			}

		case startBundleIn == 4:
			switch {
			case startBundleOut == 0:
				if _, ok := doFn.(startBundle4x0[context.Context, I0, I1, I2]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, I0, I1, I2))
						return &caller4x0[context.Context, I0, I1, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, I0, I1, I2))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 I0, a2 I1, a3 I2) {
							fn.(startBundle4x0[context.Context, I0, I1, I2]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[typex.PaneInfo, I0, I1, I2]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, I0, I1, I2))
						return &caller4x0[typex.PaneInfo, I0, I1, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, I0, I1, I2))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 I0, a2 I1, a3 I2) {
							fn.(startBundle4x0[typex.PaneInfo, I0, I1, I2]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[context.Context, typex.PaneInfo, I1, I2]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, I1, I2))
						return &caller4x0[context.Context, typex.PaneInfo, I1, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, I1, I2))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 I1, a3 I2) {
							fn.(startBundle4x0[context.Context, typex.PaneInfo, I1, I2]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[[]typex.Window, I0, I1, I2]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, I0, I1, I2))
						return &caller4x0[[]typex.Window, I0, I1, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, I0, I1, I2))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 I0, a2 I1, a3 I2) {
							fn.(startBundle4x0[[]typex.Window, I0, I1, I2]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[context.Context, []typex.Window, I1, I2]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, I1, I2))
						return &caller4x0[context.Context, []typex.Window, I1, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, I1, I2))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 I1, a3 I2) {
							fn.(startBundle4x0[context.Context, []typex.Window, I1, I2]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[typex.PaneInfo, []typex.Window, I1, I2]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, I1, I2))
						return &caller4x0[typex.PaneInfo, []typex.Window, I1, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, I1, I2))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 I1, a3 I2) {
							fn.(startBundle4x0[typex.PaneInfo, []typex.Window, I1, I2]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[context.Context, typex.PaneInfo, []typex.Window, I2]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, I2))
						return &caller4x0[context.Context, typex.PaneInfo, []typex.Window, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, I2))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 I2) {
							fn.(startBundle4x0[context.Context, typex.PaneInfo, []typex.Window, I2]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[typex.EventTime, I0, I1, I2]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, I0, I1, I2))
						return &caller4x0[typex.EventTime, I0, I1, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, I0, I1, I2))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 I0, a2 I1, a3 I2) {
							fn.(startBundle4x0[typex.EventTime, I0, I1, I2]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[context.Context, typex.EventTime, I1, I2]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, I1, I2))
						return &caller4x0[context.Context, typex.EventTime, I1, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, I1, I2))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 I1, a3 I2) {
							fn.(startBundle4x0[context.Context, typex.EventTime, I1, I2]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[typex.PaneInfo, typex.EventTime, I1, I2]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, I1, I2))
						return &caller4x0[typex.PaneInfo, typex.EventTime, I1, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, I1, I2))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 I1, a3 I2) {
							fn.(startBundle4x0[typex.PaneInfo, typex.EventTime, I1, I2]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[context.Context, typex.PaneInfo, typex.EventTime, I2]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, I2))
						return &caller4x0[context.Context, typex.PaneInfo, typex.EventTime, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, I2))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 I2) {
							fn.(startBundle4x0[context.Context, typex.PaneInfo, typex.EventTime, I2]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[[]typex.Window, typex.EventTime, I1, I2]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, I1, I2))
						return &caller4x0[[]typex.Window, typex.EventTime, I1, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, I1, I2))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 I1, a3 I2) {
							fn.(startBundle4x0[[]typex.Window, typex.EventTime, I1, I2]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[context.Context, []typex.Window, typex.EventTime, I2]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, I2))
						return &caller4x0[context.Context, []typex.Window, typex.EventTime, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, I2))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 I2) {
							fn.(startBundle4x0[context.Context, []typex.Window, typex.EventTime, I2]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[typex.PaneInfo, []typex.Window, typex.EventTime, I2]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, I2))
						return &caller4x0[typex.PaneInfo, []typex.Window, typex.EventTime, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, I2))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 I2) {
							fn.(startBundle4x0[typex.PaneInfo, []typex.Window, typex.EventTime, I2]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime))
						return &caller4x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime) {
							fn.(startBundle4x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[typex.BundleFinalization, I0, I1, I2]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization, I0, I1, I2))
						return &caller4x0[typex.BundleFinalization, I0, I1, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization, I0, I1, I2))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization, a1 I0, a2 I1, a3 I2) {
							fn.(startBundle4x0[typex.BundleFinalization, I0, I1, I2]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[context.Context, typex.BundleFinalization, I1, I2]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization, I1, I2))
						return &caller4x0[context.Context, typex.BundleFinalization, I1, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization, I1, I2))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization, a2 I1, a3 I2) {
							fn.(startBundle4x0[context.Context, typex.BundleFinalization, I1, I2]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[typex.PaneInfo, typex.BundleFinalization, I1, I2]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization, I1, I2))
						return &caller4x0[typex.PaneInfo, typex.BundleFinalization, I1, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization, I1, I2))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization, a2 I1, a3 I2) {
							fn.(startBundle4x0[typex.PaneInfo, typex.BundleFinalization, I1, I2]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I2]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization, I2))
						return &caller4x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization, I2))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization, a3 I2) {
							fn.(startBundle4x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I2]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[[]typex.Window, typex.BundleFinalization, I1, I2]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization, I1, I2))
						return &caller4x0[[]typex.Window, typex.BundleFinalization, I1, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization, I1, I2))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization, a2 I1, a3 I2) {
							fn.(startBundle4x0[[]typex.Window, typex.BundleFinalization, I1, I2]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[context.Context, []typex.Window, typex.BundleFinalization, I2]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization, I2))
						return &caller4x0[context.Context, []typex.Window, typex.BundleFinalization, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization, I2))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization, a3 I2) {
							fn.(startBundle4x0[context.Context, []typex.Window, typex.BundleFinalization, I2]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2))
						return &caller4x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization, a3 I2) {
							fn.(startBundle4x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization))
						return &caller4x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.BundleFinalization) {
							fn.(startBundle4x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[typex.EventTime, typex.BundleFinalization, I1, I2]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization, I1, I2))
						return &caller4x0[typex.EventTime, typex.BundleFinalization, I1, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization, I1, I2))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization, a2 I1, a3 I2) {
							fn.(startBundle4x0[typex.EventTime, typex.BundleFinalization, I1, I2]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[context.Context, typex.EventTime, typex.BundleFinalization, I2]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization, I2))
						return &caller4x0[context.Context, typex.EventTime, typex.BundleFinalization, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization, I2))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I2) {
							fn.(startBundle4x0[context.Context, typex.EventTime, typex.BundleFinalization, I2]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2))
						return &caller4x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I2) {
							fn.(startBundle4x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization))
						return &caller4x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 typex.BundleFinalization) {
							fn.(startBundle4x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I2]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization, I2))
						return &caller4x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization, I2))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I2) {
							fn.(startBundle4x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I2]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization))
						return &caller4x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization) {
							fn.(startBundle4x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization))
						return &caller4x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization) {
							fn.(startBundle4x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization]).StartBundle(a0, a1, a2, a3)
						})
					}
				}
			case startBundleOut == 1:
				if _, ok := doFn.(startBundle4x1[context.Context, I0, I1, I2, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, I0, I1, I2) error)
						return &caller4x1[context.Context, I0, I1, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, I0, I1, I2) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 I0, a2 I1, a3 I2) error {
							return fn.(startBundle4x1[context.Context, I0, I1, I2, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[typex.PaneInfo, I0, I1, I2, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, I0, I1, I2) error)
						return &caller4x1[typex.PaneInfo, I0, I1, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, I0, I1, I2) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 I0, a2 I1, a3 I2) error {
							return fn.(startBundle4x1[typex.PaneInfo, I0, I1, I2, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[context.Context, typex.PaneInfo, I1, I2, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, I1, I2) error)
						return &caller4x1[context.Context, typex.PaneInfo, I1, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, I1, I2) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 I1, a3 I2) error {
							return fn.(startBundle4x1[context.Context, typex.PaneInfo, I1, I2, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[[]typex.Window, I0, I1, I2, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, I0, I1, I2) error)
						return &caller4x1[[]typex.Window, I0, I1, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, I0, I1, I2) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 I0, a2 I1, a3 I2) error {
							return fn.(startBundle4x1[[]typex.Window, I0, I1, I2, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[context.Context, []typex.Window, I1, I2, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, I1, I2) error)
						return &caller4x1[context.Context, []typex.Window, I1, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, I1, I2) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 I1, a3 I2) error {
							return fn.(startBundle4x1[context.Context, []typex.Window, I1, I2, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[typex.PaneInfo, []typex.Window, I1, I2, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, I1, I2) error)
						return &caller4x1[typex.PaneInfo, []typex.Window, I1, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, I1, I2) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 I1, a3 I2) error {
							return fn.(startBundle4x1[typex.PaneInfo, []typex.Window, I1, I2, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[context.Context, typex.PaneInfo, []typex.Window, I2, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, I2) error)
						return &caller4x1[context.Context, typex.PaneInfo, []typex.Window, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, I2) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 I2) error {
							return fn.(startBundle4x1[context.Context, typex.PaneInfo, []typex.Window, I2, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[typex.EventTime, I0, I1, I2, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, I0, I1, I2) error)
						return &caller4x1[typex.EventTime, I0, I1, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, I0, I1, I2) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 I0, a2 I1, a3 I2) error {
							return fn.(startBundle4x1[typex.EventTime, I0, I1, I2, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[context.Context, typex.EventTime, I1, I2, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, I1, I2) error)
						return &caller4x1[context.Context, typex.EventTime, I1, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, I1, I2) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 I1, a3 I2) error {
							return fn.(startBundle4x1[context.Context, typex.EventTime, I1, I2, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[typex.PaneInfo, typex.EventTime, I1, I2, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, I1, I2) error)
						return &caller4x1[typex.PaneInfo, typex.EventTime, I1, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, I1, I2) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 I1, a3 I2) error {
							return fn.(startBundle4x1[typex.PaneInfo, typex.EventTime, I1, I2, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[context.Context, typex.PaneInfo, typex.EventTime, I2, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, I2) error)
						return &caller4x1[context.Context, typex.PaneInfo, typex.EventTime, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, I2) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 I2) error {
							return fn.(startBundle4x1[context.Context, typex.PaneInfo, typex.EventTime, I2, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[[]typex.Window, typex.EventTime, I1, I2, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, I1, I2) error)
						return &caller4x1[[]typex.Window, typex.EventTime, I1, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, I1, I2) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 I1, a3 I2) error {
							return fn.(startBundle4x1[[]typex.Window, typex.EventTime, I1, I2, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[context.Context, []typex.Window, typex.EventTime, I2, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, I2) error)
						return &caller4x1[context.Context, []typex.Window, typex.EventTime, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, I2) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 I2) error {
							return fn.(startBundle4x1[context.Context, []typex.Window, typex.EventTime, I2, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[typex.PaneInfo, []typex.Window, typex.EventTime, I2, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, I2) error)
						return &caller4x1[typex.PaneInfo, []typex.Window, typex.EventTime, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, I2) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 I2) error {
							return fn.(startBundle4x1[typex.PaneInfo, []typex.Window, typex.EventTime, I2, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime) error)
						return &caller4x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime) error {
							return fn.(startBundle4x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[typex.BundleFinalization, I0, I1, I2, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization, I0, I1, I2) error)
						return &caller4x1[typex.BundleFinalization, I0, I1, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization, I0, I1, I2) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization, a1 I0, a2 I1, a3 I2) error {
							return fn.(startBundle4x1[typex.BundleFinalization, I0, I1, I2, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[context.Context, typex.BundleFinalization, I1, I2, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization, I1, I2) error)
						return &caller4x1[context.Context, typex.BundleFinalization, I1, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization, I1, I2) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization, a2 I1, a3 I2) error {
							return fn.(startBundle4x1[context.Context, typex.BundleFinalization, I1, I2, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[typex.PaneInfo, typex.BundleFinalization, I1, I2, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization, I1, I2) error)
						return &caller4x1[typex.PaneInfo, typex.BundleFinalization, I1, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization, I1, I2) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization, a2 I1, a3 I2) error {
							return fn.(startBundle4x1[typex.PaneInfo, typex.BundleFinalization, I1, I2, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I2, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization, I2) error)
						return &caller4x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization, I2) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization, a3 I2) error {
							return fn.(startBundle4x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I2, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[[]typex.Window, typex.BundleFinalization, I1, I2, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization, I1, I2) error)
						return &caller4x1[[]typex.Window, typex.BundleFinalization, I1, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization, I1, I2) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization, a2 I1, a3 I2) error {
							return fn.(startBundle4x1[[]typex.Window, typex.BundleFinalization, I1, I2, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[context.Context, []typex.Window, typex.BundleFinalization, I2, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization, I2) error)
						return &caller4x1[context.Context, []typex.Window, typex.BundleFinalization, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization, I2) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization, a3 I2) error {
							return fn.(startBundle4x1[context.Context, []typex.Window, typex.BundleFinalization, I2, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2) error)
						return &caller4x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization, a3 I2) error {
							return fn.(startBundle4x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization) error)
						return &caller4x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.BundleFinalization) error {
							return fn.(startBundle4x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[typex.EventTime, typex.BundleFinalization, I1, I2, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization, I1, I2) error)
						return &caller4x1[typex.EventTime, typex.BundleFinalization, I1, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization, I1, I2) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization, a2 I1, a3 I2) error {
							return fn.(startBundle4x1[typex.EventTime, typex.BundleFinalization, I1, I2, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[context.Context, typex.EventTime, typex.BundleFinalization, I2, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization, I2) error)
						return &caller4x1[context.Context, typex.EventTime, typex.BundleFinalization, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization, I2) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I2) error {
							return fn.(startBundle4x1[context.Context, typex.EventTime, typex.BundleFinalization, I2, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2) error)
						return &caller4x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I2) error {
							return fn.(startBundle4x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization) error)
						return &caller4x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 typex.BundleFinalization) error {
							return fn.(startBundle4x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I2, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization, I2) error)
						return &caller4x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization, I2) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I2) error {
							return fn.(startBundle4x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I2, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization) error)
						return &caller4x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization) error {
							return fn.(startBundle4x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization) error)
						return &caller4x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization) error {
							return fn.(startBundle4x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				}
			default:
				panic("Invalid signature for StartBundle")
			}

		case startBundleIn == 5:
			switch {
			case startBundleOut == 0:
				if _, ok := doFn.(startBundle5x0[context.Context, typex.PaneInfo, I0, I1, I2]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, I0, I1, I2))
						return &caller5x0[context.Context, typex.PaneInfo, I0, I1, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, I0, I1, I2))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 I0, a3 I1, a4 I2) {
							fn.(startBundle5x0[context.Context, typex.PaneInfo, I0, I1, I2]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[context.Context, []typex.Window, I0, I1, I2]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, I0, I1, I2))
						return &caller5x0[context.Context, []typex.Window, I0, I1, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, I0, I1, I2))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 I0, a3 I1, a4 I2) {
							fn.(startBundle5x0[context.Context, []typex.Window, I0, I1, I2]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[typex.PaneInfo, []typex.Window, I0, I1, I2]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, I0, I1, I2))
						return &caller5x0[typex.PaneInfo, []typex.Window, I0, I1, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, I0, I1, I2))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 I0, a3 I1, a4 I2) {
							fn.(startBundle5x0[typex.PaneInfo, []typex.Window, I0, I1, I2]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[context.Context, typex.PaneInfo, []typex.Window, I1, I2]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, I1, I2))
						return &caller5x0[context.Context, typex.PaneInfo, []typex.Window, I1, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, I1, I2))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 I1, a4 I2) {
							fn.(startBundle5x0[context.Context, typex.PaneInfo, []typex.Window, I1, I2]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[context.Context, typex.EventTime, I0, I1, I2]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, I0, I1, I2))
						return &caller5x0[context.Context, typex.EventTime, I0, I1, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, I0, I1, I2))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 I0, a3 I1, a4 I2) {
							fn.(startBundle5x0[context.Context, typex.EventTime, I0, I1, I2]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[typex.PaneInfo, typex.EventTime, I0, I1, I2]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, I0, I1, I2))
						return &caller5x0[typex.PaneInfo, typex.EventTime, I0, I1, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, I0, I1, I2))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 I0, a3 I1, a4 I2) {
							fn.(startBundle5x0[typex.PaneInfo, typex.EventTime, I0, I1, I2]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[context.Context, typex.PaneInfo, typex.EventTime, I1, I2]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, I1, I2))
						return &caller5x0[context.Context, typex.PaneInfo, typex.EventTime, I1, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, I1, I2))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 I1, a4 I2) {
							fn.(startBundle5x0[context.Context, typex.PaneInfo, typex.EventTime, I1, I2]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[[]typex.Window, typex.EventTime, I0, I1, I2]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, I0, I1, I2))
						return &caller5x0[[]typex.Window, typex.EventTime, I0, I1, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, I0, I1, I2))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 I0, a3 I1, a4 I2) {
							fn.(startBundle5x0[[]typex.Window, typex.EventTime, I0, I1, I2]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[context.Context, []typex.Window, typex.EventTime, I1, I2]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, I1, I2))
						return &caller5x0[context.Context, []typex.Window, typex.EventTime, I1, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, I1, I2))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 I1, a4 I2) {
							fn.(startBundle5x0[context.Context, []typex.Window, typex.EventTime, I1, I2]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[typex.PaneInfo, []typex.Window, typex.EventTime, I1, I2]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, I1, I2))
						return &caller5x0[typex.PaneInfo, []typex.Window, typex.EventTime, I1, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, I1, I2))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 I1, a4 I2) {
							fn.(startBundle5x0[typex.PaneInfo, []typex.Window, typex.EventTime, I1, I2]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I2]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I2))
						return &caller5x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I2))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 I2) {
							fn.(startBundle5x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I2]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[context.Context, typex.BundleFinalization, I0, I1, I2]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization, I0, I1, I2))
						return &caller5x0[context.Context, typex.BundleFinalization, I0, I1, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization, I0, I1, I2))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization, a2 I0, a3 I1, a4 I2) {
							fn.(startBundle5x0[context.Context, typex.BundleFinalization, I0, I1, I2]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[typex.PaneInfo, typex.BundleFinalization, I0, I1, I2]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization, I0, I1, I2))
						return &caller5x0[typex.PaneInfo, typex.BundleFinalization, I0, I1, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization, I0, I1, I2))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization, a2 I0, a3 I1, a4 I2) {
							fn.(startBundle5x0[typex.PaneInfo, typex.BundleFinalization, I0, I1, I2]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I1, I2]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization, I1, I2))
						return &caller5x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I1, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization, I1, I2))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization, a3 I1, a4 I2) {
							fn.(startBundle5x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I1, I2]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[[]typex.Window, typex.BundleFinalization, I0, I1, I2]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization, I0, I1, I2))
						return &caller5x0[[]typex.Window, typex.BundleFinalization, I0, I1, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization, I0, I1, I2))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization, a2 I0, a3 I1, a4 I2) {
							fn.(startBundle5x0[[]typex.Window, typex.BundleFinalization, I0, I1, I2]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[context.Context, []typex.Window, typex.BundleFinalization, I1, I2]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization, I1, I2))
						return &caller5x0[context.Context, []typex.Window, typex.BundleFinalization, I1, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization, I1, I2))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization, a3 I1, a4 I2) {
							fn.(startBundle5x0[context.Context, []typex.Window, typex.BundleFinalization, I1, I2]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1, I2]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1, I2))
						return &caller5x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1, I2))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization, a3 I1, a4 I2) {
							fn.(startBundle5x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1, I2]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2))
						return &caller5x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.BundleFinalization, a4 I2) {
							fn.(startBundle5x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[typex.EventTime, typex.BundleFinalization, I0, I1, I2]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization, I0, I1, I2))
						return &caller5x0[typex.EventTime, typex.BundleFinalization, I0, I1, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization, I0, I1, I2))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization, a2 I0, a3 I1, a4 I2) {
							fn.(startBundle5x0[typex.EventTime, typex.BundleFinalization, I0, I1, I2]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[context.Context, typex.EventTime, typex.BundleFinalization, I1, I2]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization, I1, I2))
						return &caller5x0[context.Context, typex.EventTime, typex.BundleFinalization, I1, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization, I1, I2))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I1, a4 I2) {
							fn.(startBundle5x0[context.Context, typex.EventTime, typex.BundleFinalization, I1, I2]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1, I2]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1, I2))
						return &caller5x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1, I2))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I1, a4 I2) {
							fn.(startBundle5x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1, I2]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2))
						return &caller5x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I2) {
							fn.(startBundle5x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2))
						return &caller5x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I1, a4 I2) {
							fn.(startBundle5x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I2]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I2))
						return &caller5x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I2))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I2) {
							fn.(startBundle5x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I2]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I2]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I2))
						return &caller5x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I2))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I2) {
							fn.(startBundle5x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I2]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization))
						return &caller5x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 typex.BundleFinalization) {
							fn.(startBundle5x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				}
			case startBundleOut == 1:
				if _, ok := doFn.(startBundle5x1[context.Context, typex.PaneInfo, I0, I1, I2, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, I0, I1, I2) error)
						return &caller5x1[context.Context, typex.PaneInfo, I0, I1, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, I0, I1, I2) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 I0, a3 I1, a4 I2) error {
							return fn.(startBundle5x1[context.Context, typex.PaneInfo, I0, I1, I2, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[context.Context, []typex.Window, I0, I1, I2, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, I0, I1, I2) error)
						return &caller5x1[context.Context, []typex.Window, I0, I1, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, I0, I1, I2) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 I0, a3 I1, a4 I2) error {
							return fn.(startBundle5x1[context.Context, []typex.Window, I0, I1, I2, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[typex.PaneInfo, []typex.Window, I0, I1, I2, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, I0, I1, I2) error)
						return &caller5x1[typex.PaneInfo, []typex.Window, I0, I1, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, I0, I1, I2) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 I0, a3 I1, a4 I2) error {
							return fn.(startBundle5x1[typex.PaneInfo, []typex.Window, I0, I1, I2, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[context.Context, typex.PaneInfo, []typex.Window, I1, I2, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, I1, I2) error)
						return &caller5x1[context.Context, typex.PaneInfo, []typex.Window, I1, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, I1, I2) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 I1, a4 I2) error {
							return fn.(startBundle5x1[context.Context, typex.PaneInfo, []typex.Window, I1, I2, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[context.Context, typex.EventTime, I0, I1, I2, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, I0, I1, I2) error)
						return &caller5x1[context.Context, typex.EventTime, I0, I1, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, I0, I1, I2) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 I0, a3 I1, a4 I2) error {
							return fn.(startBundle5x1[context.Context, typex.EventTime, I0, I1, I2, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[typex.PaneInfo, typex.EventTime, I0, I1, I2, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, I0, I1, I2) error)
						return &caller5x1[typex.PaneInfo, typex.EventTime, I0, I1, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, I0, I1, I2) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 I0, a3 I1, a4 I2) error {
							return fn.(startBundle5x1[typex.PaneInfo, typex.EventTime, I0, I1, I2, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[context.Context, typex.PaneInfo, typex.EventTime, I1, I2, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, I1, I2) error)
						return &caller5x1[context.Context, typex.PaneInfo, typex.EventTime, I1, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, I1, I2) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 I1, a4 I2) error {
							return fn.(startBundle5x1[context.Context, typex.PaneInfo, typex.EventTime, I1, I2, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[[]typex.Window, typex.EventTime, I0, I1, I2, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, I0, I1, I2) error)
						return &caller5x1[[]typex.Window, typex.EventTime, I0, I1, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, I0, I1, I2) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 I0, a3 I1, a4 I2) error {
							return fn.(startBundle5x1[[]typex.Window, typex.EventTime, I0, I1, I2, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[context.Context, []typex.Window, typex.EventTime, I1, I2, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, I1, I2) error)
						return &caller5x1[context.Context, []typex.Window, typex.EventTime, I1, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, I1, I2) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 I1, a4 I2) error {
							return fn.(startBundle5x1[context.Context, []typex.Window, typex.EventTime, I1, I2, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[typex.PaneInfo, []typex.Window, typex.EventTime, I1, I2, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, I1, I2) error)
						return &caller5x1[typex.PaneInfo, []typex.Window, typex.EventTime, I1, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, I1, I2) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 I1, a4 I2) error {
							return fn.(startBundle5x1[typex.PaneInfo, []typex.Window, typex.EventTime, I1, I2, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I2, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I2) error)
						return &caller5x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I2) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 I2) error {
							return fn.(startBundle5x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I2, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[context.Context, typex.BundleFinalization, I0, I1, I2, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization, I0, I1, I2) error)
						return &caller5x1[context.Context, typex.BundleFinalization, I0, I1, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization, I0, I1, I2) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization, a2 I0, a3 I1, a4 I2) error {
							return fn.(startBundle5x1[context.Context, typex.BundleFinalization, I0, I1, I2, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[typex.PaneInfo, typex.BundleFinalization, I0, I1, I2, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization, I0, I1, I2) error)
						return &caller5x1[typex.PaneInfo, typex.BundleFinalization, I0, I1, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization, I0, I1, I2) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization, a2 I0, a3 I1, a4 I2) error {
							return fn.(startBundle5x1[typex.PaneInfo, typex.BundleFinalization, I0, I1, I2, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I1, I2, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization, I1, I2) error)
						return &caller5x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I1, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization, I1, I2) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization, a3 I1, a4 I2) error {
							return fn.(startBundle5x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I1, I2, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[[]typex.Window, typex.BundleFinalization, I0, I1, I2, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization, I0, I1, I2) error)
						return &caller5x1[[]typex.Window, typex.BundleFinalization, I0, I1, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization, I0, I1, I2) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization, a2 I0, a3 I1, a4 I2) error {
							return fn.(startBundle5x1[[]typex.Window, typex.BundleFinalization, I0, I1, I2, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[context.Context, []typex.Window, typex.BundleFinalization, I1, I2, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization, I1, I2) error)
						return &caller5x1[context.Context, []typex.Window, typex.BundleFinalization, I1, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization, I1, I2) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization, a3 I1, a4 I2) error {
							return fn.(startBundle5x1[context.Context, []typex.Window, typex.BundleFinalization, I1, I2, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1, I2, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1, I2) error)
						return &caller5x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1, I2) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization, a3 I1, a4 I2) error {
							return fn.(startBundle5x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1, I2, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2) error)
						return &caller5x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.BundleFinalization, a4 I2) error {
							return fn.(startBundle5x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[typex.EventTime, typex.BundleFinalization, I0, I1, I2, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization, I0, I1, I2) error)
						return &caller5x1[typex.EventTime, typex.BundleFinalization, I0, I1, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization, I0, I1, I2) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization, a2 I0, a3 I1, a4 I2) error {
							return fn.(startBundle5x1[typex.EventTime, typex.BundleFinalization, I0, I1, I2, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[context.Context, typex.EventTime, typex.BundleFinalization, I1, I2, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization, I1, I2) error)
						return &caller5x1[context.Context, typex.EventTime, typex.BundleFinalization, I1, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization, I1, I2) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I1, a4 I2) error {
							return fn.(startBundle5x1[context.Context, typex.EventTime, typex.BundleFinalization, I1, I2, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1, I2, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1, I2) error)
						return &caller5x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1, I2) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I1, a4 I2) error {
							return fn.(startBundle5x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1, I2, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2) error)
						return &caller5x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I2) error {
							return fn.(startBundle5x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2) error)
						return &caller5x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I1, a4 I2) error {
							return fn.(startBundle5x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I2, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I2) error)
						return &caller5x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I2) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I2) error {
							return fn.(startBundle5x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I2, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I2, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I2) error)
						return &caller5x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I2) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I2) error {
							return fn.(startBundle5x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I2, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization) error)
						return &caller5x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 typex.BundleFinalization) error {
							return fn.(startBundle5x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				}
			default:
				panic("Invalid signature for StartBundle")
			}

		case startBundleIn == 6:
			switch {
			case startBundleOut == 0:
				if _, ok := doFn.(startBundle6x0[context.Context, typex.PaneInfo, []typex.Window, I0, I1, I2]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, I0, I1, I2))
						return &caller6x0[context.Context, typex.PaneInfo, []typex.Window, I0, I1, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, I0, I1, I2))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 I0, a4 I1, a5 I2) {
							fn.(startBundle6x0[context.Context, typex.PaneInfo, []typex.Window, I0, I1, I2]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[context.Context, typex.PaneInfo, typex.EventTime, I0, I1, I2]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, I0, I1, I2))
						return &caller6x0[context.Context, typex.PaneInfo, typex.EventTime, I0, I1, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, I0, I1, I2))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 I0, a4 I1, a5 I2) {
							fn.(startBundle6x0[context.Context, typex.PaneInfo, typex.EventTime, I0, I1, I2]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[context.Context, []typex.Window, typex.EventTime, I0, I1, I2]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, I0, I1, I2))
						return &caller6x0[context.Context, []typex.Window, typex.EventTime, I0, I1, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, I0, I1, I2))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 I0, a4 I1, a5 I2) {
							fn.(startBundle6x0[context.Context, []typex.Window, typex.EventTime, I0, I1, I2]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[typex.PaneInfo, []typex.Window, typex.EventTime, I0, I1, I2]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, I0, I1, I2))
						return &caller6x0[typex.PaneInfo, []typex.Window, typex.EventTime, I0, I1, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, I0, I1, I2))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 I0, a4 I1, a5 I2) {
							fn.(startBundle6x0[typex.PaneInfo, []typex.Window, typex.EventTime, I0, I1, I2]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I1, I2]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I1, I2))
						return &caller6x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I1, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I1, I2))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 I1, a5 I2) {
							fn.(startBundle6x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I1, I2]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I0, I1, I2]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization, I0, I1, I2))
						return &caller6x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I0, I1, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization, I0, I1, I2))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization, a3 I0, a4 I1, a5 I2) {
							fn.(startBundle6x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I0, I1, I2]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[context.Context, []typex.Window, typex.BundleFinalization, I0, I1, I2]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization, I0, I1, I2))
						return &caller6x0[context.Context, []typex.Window, typex.BundleFinalization, I0, I1, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization, I0, I1, I2))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization, a3 I0, a4 I1, a5 I2) {
							fn.(startBundle6x0[context.Context, []typex.Window, typex.BundleFinalization, I0, I1, I2]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0, I1, I2]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0, I1, I2))
						return &caller6x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0, I1, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0, I1, I2))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization, a3 I0, a4 I1, a5 I2) {
							fn.(startBundle6x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0, I1, I2]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1, I2]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1, I2))
						return &caller6x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1, I2))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.BundleFinalization, a4 I1, a5 I2) {
							fn.(startBundle6x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1, I2]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[context.Context, typex.EventTime, typex.BundleFinalization, I0, I1, I2]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization, I0, I1, I2))
						return &caller6x0[context.Context, typex.EventTime, typex.BundleFinalization, I0, I1, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization, I0, I1, I2))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I0, a4 I1, a5 I2) {
							fn.(startBundle6x0[context.Context, typex.EventTime, typex.BundleFinalization, I0, I1, I2]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0, I1, I2]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0, I1, I2))
						return &caller6x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0, I1, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0, I1, I2))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I0, a4 I1, a5 I2) {
							fn.(startBundle6x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0, I1, I2]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1, I2]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1, I2))
						return &caller6x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1, I2))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I1, a5 I2) {
							fn.(startBundle6x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1, I2]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1, I2]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1, I2))
						return &caller6x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1, I2))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I0, a4 I1, a5 I2) {
							fn.(startBundle6x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1, I2]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2))
						return &caller6x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I1, a5 I2) {
							fn.(startBundle6x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2))
						return &caller6x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I1, a5 I2) {
							fn.(startBundle6x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I2]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I2))
						return &caller6x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I2))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 typex.BundleFinalization, a5 I2) {
							fn.(startBundle6x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I2]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				}
			case startBundleOut == 1:
				if _, ok := doFn.(startBundle6x1[context.Context, typex.PaneInfo, []typex.Window, I0, I1, I2, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, I0, I1, I2) error)
						return &caller6x1[context.Context, typex.PaneInfo, []typex.Window, I0, I1, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, I0, I1, I2) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 I0, a4 I1, a5 I2) error {
							return fn.(startBundle6x1[context.Context, typex.PaneInfo, []typex.Window, I0, I1, I2, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[context.Context, typex.PaneInfo, typex.EventTime, I0, I1, I2, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, I0, I1, I2) error)
						return &caller6x1[context.Context, typex.PaneInfo, typex.EventTime, I0, I1, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, I0, I1, I2) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 I0, a4 I1, a5 I2) error {
							return fn.(startBundle6x1[context.Context, typex.PaneInfo, typex.EventTime, I0, I1, I2, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[context.Context, []typex.Window, typex.EventTime, I0, I1, I2, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, I0, I1, I2) error)
						return &caller6x1[context.Context, []typex.Window, typex.EventTime, I0, I1, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, I0, I1, I2) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 I0, a4 I1, a5 I2) error {
							return fn.(startBundle6x1[context.Context, []typex.Window, typex.EventTime, I0, I1, I2, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[typex.PaneInfo, []typex.Window, typex.EventTime, I0, I1, I2, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, I0, I1, I2) error)
						return &caller6x1[typex.PaneInfo, []typex.Window, typex.EventTime, I0, I1, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, I0, I1, I2) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 I0, a4 I1, a5 I2) error {
							return fn.(startBundle6x1[typex.PaneInfo, []typex.Window, typex.EventTime, I0, I1, I2, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I1, I2, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I1, I2) error)
						return &caller6x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I1, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I1, I2) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 I1, a5 I2) error {
							return fn.(startBundle6x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I1, I2, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I0, I1, I2, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization, I0, I1, I2) error)
						return &caller6x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I0, I1, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization, I0, I1, I2) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization, a3 I0, a4 I1, a5 I2) error {
							return fn.(startBundle6x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I0, I1, I2, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[context.Context, []typex.Window, typex.BundleFinalization, I0, I1, I2, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization, I0, I1, I2) error)
						return &caller6x1[context.Context, []typex.Window, typex.BundleFinalization, I0, I1, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization, I0, I1, I2) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization, a3 I0, a4 I1, a5 I2) error {
							return fn.(startBundle6x1[context.Context, []typex.Window, typex.BundleFinalization, I0, I1, I2, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0, I1, I2, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0, I1, I2) error)
						return &caller6x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0, I1, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0, I1, I2) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization, a3 I0, a4 I1, a5 I2) error {
							return fn.(startBundle6x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0, I1, I2, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1, I2, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1, I2) error)
						return &caller6x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1, I2) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.BundleFinalization, a4 I1, a5 I2) error {
							return fn.(startBundle6x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1, I2, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[context.Context, typex.EventTime, typex.BundleFinalization, I0, I1, I2, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization, I0, I1, I2) error)
						return &caller6x1[context.Context, typex.EventTime, typex.BundleFinalization, I0, I1, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization, I0, I1, I2) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I0, a4 I1, a5 I2) error {
							return fn.(startBundle6x1[context.Context, typex.EventTime, typex.BundleFinalization, I0, I1, I2, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0, I1, I2, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0, I1, I2) error)
						return &caller6x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0, I1, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0, I1, I2) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I0, a4 I1, a5 I2) error {
							return fn.(startBundle6x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0, I1, I2, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1, I2, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1, I2) error)
						return &caller6x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1, I2) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I1, a5 I2) error {
							return fn.(startBundle6x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1, I2, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1, I2, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1, I2) error)
						return &caller6x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1, I2) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I0, a4 I1, a5 I2) error {
							return fn.(startBundle6x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1, I2, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2) error)
						return &caller6x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I1, a5 I2) error {
							return fn.(startBundle6x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2) error)
						return &caller6x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I1, a5 I2) error {
							return fn.(startBundle6x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I2, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I2) error)
						return &caller6x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I2) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 typex.BundleFinalization, a5 I2) error {
							return fn.(startBundle6x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I2, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				}
			default:
				panic("Invalid signature for StartBundle")
			}

		case startBundleIn == 7:
			switch {
			case startBundleOut == 0:
				if _, ok := doFn.(startBundle7x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I0, I1, I2]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I0, I1, I2))
						return &caller7x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I0, I1, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I0, I1, I2))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 I0, a5 I1, a6 I2) {
							fn.(startBundle7x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I0, I1, I2]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0, I1, I2]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0, I1, I2))
						return &caller7x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0, I1, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0, I1, I2))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.BundleFinalization, a4 I0, a5 I1, a6 I2) {
							fn.(startBundle7x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0, I1, I2]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0, I1, I2]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0, I1, I2))
						return &caller7x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0, I1, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0, I1, I2))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I0, a5 I1, a6 I2) {
							fn.(startBundle7x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0, I1, I2]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1, I2]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1, I2))
						return &caller7x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1, I2))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I0, a5 I1, a6 I2) {
							fn.(startBundle7x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1, I2]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1, I2]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1, I2))
						return &caller7x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1, I2))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I0, a5 I1, a6 I2) {
							fn.(startBundle7x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1, I2]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2))
						return &caller7x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 typex.BundleFinalization, a5 I1, a6 I2) {
							fn.(startBundle7x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				}
			case startBundleOut == 1:
				if _, ok := doFn.(startBundle7x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I0, I1, I2, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I0, I1, I2) error)
						return &caller7x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I0, I1, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I0, I1, I2) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 I0, a5 I1, a6 I2) error {
							return fn.(startBundle7x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I0, I1, I2, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0, I1, I2, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0, I1, I2) error)
						return &caller7x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0, I1, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0, I1, I2) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.BundleFinalization, a4 I0, a5 I1, a6 I2) error {
							return fn.(startBundle7x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0, I1, I2, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0, I1, I2, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0, I1, I2) error)
						return &caller7x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0, I1, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0, I1, I2) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I0, a5 I1, a6 I2) error {
							return fn.(startBundle7x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0, I1, I2, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1, I2, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1, I2) error)
						return &caller7x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1, I2) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I0, a5 I1, a6 I2) error {
							return fn.(startBundle7x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1, I2, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1, I2, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1, I2) error)
						return &caller7x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1, I2) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I0, a5 I1, a6 I2) error {
							return fn.(startBundle7x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1, I2, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2) error)
						return &caller7x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 typex.BundleFinalization, a5 I1, a6 I2) error {
							return fn.(startBundle7x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				}
			default:
				panic("Invalid signature for StartBundle")
			}

		default:
			panic("Invalid signature for StartBundle")
		}
	}
	return nil
}

func buildStartBundleWrapper4[I0, I1, I2, I3 any](doFn interface{}) func(interface{}) reflectx.Func {
	startBundleIn := -1
	startBundleOut := -1
	startBundleMethod := reflect.ValueOf(doFn).MethodByName("StartBundle")
	if startBundleMethod.IsValid() {
		startBundleIn = startBundleMethod.Type().NumIn()
		startBundleOut = startBundleMethod.Type().NumOut()
		switch {

		case startBundleIn == 0:
			switch {
			case startBundleOut == 0:
				if _, ok := doFn.(startBundle0x0); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func())
						return &caller0x0{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func())(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func() { fn.(startBundle0x0).StartBundle() })
					}
				}
			case startBundleOut == 1:
				if _, ok := doFn.(startBundle0x1[error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func() error)
						return &caller0x1[error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func() error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func() error { return fn.(startBundle0x1[error]).StartBundle() })
					}
				}
			default:
				panic("Invalid signature for StartBundle")
			}

		case startBundleIn == 1:
			switch {
			case startBundleOut == 0:
				if _, ok := doFn.(startBundle1x0[I3]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I3))
						return &caller1x0[I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I3))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I3) { fn.(startBundle1x0[I3]).StartBundle(a0) })
					}
				} else if _, ok := doFn.(startBundle1x0[context.Context]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context))
						return &caller1x0[context.Context]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context) { fn.(startBundle1x0[context.Context]).StartBundle(a0) })
					}
				} else if _, ok := doFn.(startBundle1x0[typex.PaneInfo]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo))
						return &caller1x0[typex.PaneInfo]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo) { fn.(startBundle1x0[typex.PaneInfo]).StartBundle(a0) })
					}
				} else if _, ok := doFn.(startBundle1x0[[]typex.Window]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window))
						return &caller1x0[[]typex.Window]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window) { fn.(startBundle1x0[[]typex.Window]).StartBundle(a0) })
					}
				} else if _, ok := doFn.(startBundle1x0[typex.EventTime]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime))
						return &caller1x0[typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime) { fn.(startBundle1x0[typex.EventTime]).StartBundle(a0) })
					}
				} else if _, ok := doFn.(startBundle1x0[typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization))
						return &caller1x0[typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization) { fn.(startBundle1x0[typex.BundleFinalization]).StartBundle(a0) })
					}
				}
			case startBundleOut == 1:
				if _, ok := doFn.(startBundle1x1[I3, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I3) error)
						return &caller1x1[I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I3) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I3) error { return fn.(startBundle1x1[I3, error]).StartBundle(a0) })
					}
				} else if _, ok := doFn.(startBundle1x1[context.Context, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context) error)
						return &caller1x1[context.Context, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context) error { return fn.(startBundle1x1[context.Context, error]).StartBundle(a0) })
					}
				} else if _, ok := doFn.(startBundle1x1[typex.PaneInfo, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo) error)
						return &caller1x1[typex.PaneInfo, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo) error { return fn.(startBundle1x1[typex.PaneInfo, error]).StartBundle(a0) })
					}
				} else if _, ok := doFn.(startBundle1x1[[]typex.Window, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window) error)
						return &caller1x1[[]typex.Window, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window) error { return fn.(startBundle1x1[[]typex.Window, error]).StartBundle(a0) })
					}
				} else if _, ok := doFn.(startBundle1x1[typex.EventTime, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime) error)
						return &caller1x1[typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime) error { return fn.(startBundle1x1[typex.EventTime, error]).StartBundle(a0) })
					}
				} else if _, ok := doFn.(startBundle1x1[typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization) error)
						return &caller1x1[typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization) error {
							return fn.(startBundle1x1[typex.BundleFinalization, error]).StartBundle(a0)
						})
					}
				}
			default:
				panic("Invalid signature for StartBundle")
			}

		case startBundleIn == 2:
			switch {
			case startBundleOut == 0:
				if _, ok := doFn.(startBundle2x0[I2, I3]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I2, I3))
						return &caller2x0[I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I2, I3))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I2, a1 I3) { fn.(startBundle2x0[I2, I3]).StartBundle(a0, a1) })
					}
				} else if _, ok := doFn.(startBundle2x0[context.Context, I3]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, I3))
						return &caller2x0[context.Context, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, I3))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 I3) { fn.(startBundle2x0[context.Context, I3]).StartBundle(a0, a1) })
					}
				} else if _, ok := doFn.(startBundle2x0[typex.PaneInfo, I3]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, I3))
						return &caller2x0[typex.PaneInfo, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, I3))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 I3) { fn.(startBundle2x0[typex.PaneInfo, I3]).StartBundle(a0, a1) })
					}
				} else if _, ok := doFn.(startBundle2x0[context.Context, typex.PaneInfo]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo))
						return &caller2x0[context.Context, typex.PaneInfo]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo) {
							fn.(startBundle2x0[context.Context, typex.PaneInfo]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x0[[]typex.Window, I3]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, I3))
						return &caller2x0[[]typex.Window, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, I3))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 I3) { fn.(startBundle2x0[[]typex.Window, I3]).StartBundle(a0, a1) })
					}
				} else if _, ok := doFn.(startBundle2x0[context.Context, []typex.Window]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window))
						return &caller2x0[context.Context, []typex.Window]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window) {
							fn.(startBundle2x0[context.Context, []typex.Window]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x0[typex.PaneInfo, []typex.Window]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window))
						return &caller2x0[typex.PaneInfo, []typex.Window]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window) {
							fn.(startBundle2x0[typex.PaneInfo, []typex.Window]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x0[typex.EventTime, I3]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, I3))
						return &caller2x0[typex.EventTime, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, I3))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 I3) { fn.(startBundle2x0[typex.EventTime, I3]).StartBundle(a0, a1) })
					}
				} else if _, ok := doFn.(startBundle2x0[context.Context, typex.EventTime]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime))
						return &caller2x0[context.Context, typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime) {
							fn.(startBundle2x0[context.Context, typex.EventTime]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x0[typex.PaneInfo, typex.EventTime]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime))
						return &caller2x0[typex.PaneInfo, typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime) {
							fn.(startBundle2x0[typex.PaneInfo, typex.EventTime]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x0[[]typex.Window, typex.EventTime]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime))
						return &caller2x0[[]typex.Window, typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime) {
							fn.(startBundle2x0[[]typex.Window, typex.EventTime]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x0[typex.BundleFinalization, I3]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization, I3))
						return &caller2x0[typex.BundleFinalization, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization, I3))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization, a1 I3) {
							fn.(startBundle2x0[typex.BundleFinalization, I3]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x0[context.Context, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization))
						return &caller2x0[context.Context, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization) {
							fn.(startBundle2x0[context.Context, typex.BundleFinalization]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x0[typex.PaneInfo, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization))
						return &caller2x0[typex.PaneInfo, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization) {
							fn.(startBundle2x0[typex.PaneInfo, typex.BundleFinalization]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x0[[]typex.Window, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization))
						return &caller2x0[[]typex.Window, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization) {
							fn.(startBundle2x0[[]typex.Window, typex.BundleFinalization]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x0[typex.EventTime, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization))
						return &caller2x0[typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization) {
							fn.(startBundle2x0[typex.EventTime, typex.BundleFinalization]).StartBundle(a0, a1)
						})
					}
				}
			case startBundleOut == 1:
				if _, ok := doFn.(startBundle2x1[I2, I3, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I2, I3) error)
						return &caller2x1[I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I2, I3) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I2, a1 I3) error { return fn.(startBundle2x1[I2, I3, error]).StartBundle(a0, a1) })
					}
				} else if _, ok := doFn.(startBundle2x1[context.Context, I3, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, I3) error)
						return &caller2x1[context.Context, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, I3) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 I3) error {
							return fn.(startBundle2x1[context.Context, I3, error]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x1[typex.PaneInfo, I3, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, I3) error)
						return &caller2x1[typex.PaneInfo, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, I3) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 I3) error {
							return fn.(startBundle2x1[typex.PaneInfo, I3, error]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x1[context.Context, typex.PaneInfo, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo) error)
						return &caller2x1[context.Context, typex.PaneInfo, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo) error {
							return fn.(startBundle2x1[context.Context, typex.PaneInfo, error]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x1[[]typex.Window, I3, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, I3) error)
						return &caller2x1[[]typex.Window, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, I3) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 I3) error {
							return fn.(startBundle2x1[[]typex.Window, I3, error]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x1[context.Context, []typex.Window, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window) error)
						return &caller2x1[context.Context, []typex.Window, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window) error {
							return fn.(startBundle2x1[context.Context, []typex.Window, error]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x1[typex.PaneInfo, []typex.Window, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window) error)
						return &caller2x1[typex.PaneInfo, []typex.Window, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window) error {
							return fn.(startBundle2x1[typex.PaneInfo, []typex.Window, error]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x1[typex.EventTime, I3, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, I3) error)
						return &caller2x1[typex.EventTime, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, I3) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 I3) error {
							return fn.(startBundle2x1[typex.EventTime, I3, error]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x1[context.Context, typex.EventTime, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime) error)
						return &caller2x1[context.Context, typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime) error {
							return fn.(startBundle2x1[context.Context, typex.EventTime, error]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x1[typex.PaneInfo, typex.EventTime, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime) error)
						return &caller2x1[typex.PaneInfo, typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime) error {
							return fn.(startBundle2x1[typex.PaneInfo, typex.EventTime, error]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x1[[]typex.Window, typex.EventTime, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime) error)
						return &caller2x1[[]typex.Window, typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime) error {
							return fn.(startBundle2x1[[]typex.Window, typex.EventTime, error]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x1[typex.BundleFinalization, I3, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization, I3) error)
						return &caller2x1[typex.BundleFinalization, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization, I3) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization, a1 I3) error {
							return fn.(startBundle2x1[typex.BundleFinalization, I3, error]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x1[context.Context, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization) error)
						return &caller2x1[context.Context, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization) error {
							return fn.(startBundle2x1[context.Context, typex.BundleFinalization, error]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x1[typex.PaneInfo, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization) error)
						return &caller2x1[typex.PaneInfo, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization) error {
							return fn.(startBundle2x1[typex.PaneInfo, typex.BundleFinalization, error]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x1[[]typex.Window, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization) error)
						return &caller2x1[[]typex.Window, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization) error {
							return fn.(startBundle2x1[[]typex.Window, typex.BundleFinalization, error]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x1[typex.EventTime, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization) error)
						return &caller2x1[typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization) error {
							return fn.(startBundle2x1[typex.EventTime, typex.BundleFinalization, error]).StartBundle(a0, a1)
						})
					}
				}
			default:
				panic("Invalid signature for StartBundle")
			}

		case startBundleIn == 3:
			switch {
			case startBundleOut == 0:
				if _, ok := doFn.(startBundle3x0[I1, I2, I3]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I1, I2, I3))
						return &caller3x0[I1, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I1, I2, I3))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I1, a1 I2, a2 I3) { fn.(startBundle3x0[I1, I2, I3]).StartBundle(a0, a1, a2) })
					}
				} else if _, ok := doFn.(startBundle3x0[context.Context, I2, I3]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, I2, I3))
						return &caller3x0[context.Context, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, I2, I3))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 I2, a2 I3) {
							fn.(startBundle3x0[context.Context, I2, I3]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[typex.PaneInfo, I2, I3]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, I2, I3))
						return &caller3x0[typex.PaneInfo, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, I2, I3))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 I2, a2 I3) {
							fn.(startBundle3x0[typex.PaneInfo, I2, I3]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[context.Context, typex.PaneInfo, I3]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, I3))
						return &caller3x0[context.Context, typex.PaneInfo, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, I3))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 I3) {
							fn.(startBundle3x0[context.Context, typex.PaneInfo, I3]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[[]typex.Window, I2, I3]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, I2, I3))
						return &caller3x0[[]typex.Window, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, I2, I3))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 I2, a2 I3) {
							fn.(startBundle3x0[[]typex.Window, I2, I3]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[context.Context, []typex.Window, I3]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, I3))
						return &caller3x0[context.Context, []typex.Window, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, I3))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 I3) {
							fn.(startBundle3x0[context.Context, []typex.Window, I3]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[typex.PaneInfo, []typex.Window, I3]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, I3))
						return &caller3x0[typex.PaneInfo, []typex.Window, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, I3))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 I3) {
							fn.(startBundle3x0[typex.PaneInfo, []typex.Window, I3]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[context.Context, typex.PaneInfo, []typex.Window]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window))
						return &caller3x0[context.Context, typex.PaneInfo, []typex.Window]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window) {
							fn.(startBundle3x0[context.Context, typex.PaneInfo, []typex.Window]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[typex.EventTime, I2, I3]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, I2, I3))
						return &caller3x0[typex.EventTime, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, I2, I3))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 I2, a2 I3) {
							fn.(startBundle3x0[typex.EventTime, I2, I3]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[context.Context, typex.EventTime, I3]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, I3))
						return &caller3x0[context.Context, typex.EventTime, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, I3))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 I3) {
							fn.(startBundle3x0[context.Context, typex.EventTime, I3]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[typex.PaneInfo, typex.EventTime, I3]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, I3))
						return &caller3x0[typex.PaneInfo, typex.EventTime, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, I3))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 I3) {
							fn.(startBundle3x0[typex.PaneInfo, typex.EventTime, I3]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[context.Context, typex.PaneInfo, typex.EventTime]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime))
						return &caller3x0[context.Context, typex.PaneInfo, typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime) {
							fn.(startBundle3x0[context.Context, typex.PaneInfo, typex.EventTime]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[[]typex.Window, typex.EventTime, I3]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, I3))
						return &caller3x0[[]typex.Window, typex.EventTime, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, I3))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 I3) {
							fn.(startBundle3x0[[]typex.Window, typex.EventTime, I3]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[context.Context, []typex.Window, typex.EventTime]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime))
						return &caller3x0[context.Context, []typex.Window, typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime) {
							fn.(startBundle3x0[context.Context, []typex.Window, typex.EventTime]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[typex.PaneInfo, []typex.Window, typex.EventTime]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime))
						return &caller3x0[typex.PaneInfo, []typex.Window, typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime) {
							fn.(startBundle3x0[typex.PaneInfo, []typex.Window, typex.EventTime]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[typex.BundleFinalization, I2, I3]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization, I2, I3))
						return &caller3x0[typex.BundleFinalization, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization, I2, I3))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization, a1 I2, a2 I3) {
							fn.(startBundle3x0[typex.BundleFinalization, I2, I3]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[context.Context, typex.BundleFinalization, I3]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization, I3))
						return &caller3x0[context.Context, typex.BundleFinalization, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization, I3))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization, a2 I3) {
							fn.(startBundle3x0[context.Context, typex.BundleFinalization, I3]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[typex.PaneInfo, typex.BundleFinalization, I3]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization, I3))
						return &caller3x0[typex.PaneInfo, typex.BundleFinalization, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization, I3))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization, a2 I3) {
							fn.(startBundle3x0[typex.PaneInfo, typex.BundleFinalization, I3]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[context.Context, typex.PaneInfo, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization))
						return &caller3x0[context.Context, typex.PaneInfo, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization) {
							fn.(startBundle3x0[context.Context, typex.PaneInfo, typex.BundleFinalization]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[[]typex.Window, typex.BundleFinalization, I3]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization, I3))
						return &caller3x0[[]typex.Window, typex.BundleFinalization, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization, I3))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization, a2 I3) {
							fn.(startBundle3x0[[]typex.Window, typex.BundleFinalization, I3]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[context.Context, []typex.Window, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization))
						return &caller3x0[context.Context, []typex.Window, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization) {
							fn.(startBundle3x0[context.Context, []typex.Window, typex.BundleFinalization]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization))
						return &caller3x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization) {
							fn.(startBundle3x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[typex.EventTime, typex.BundleFinalization, I3]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization, I3))
						return &caller3x0[typex.EventTime, typex.BundleFinalization, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization, I3))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization, a2 I3) {
							fn.(startBundle3x0[typex.EventTime, typex.BundleFinalization, I3]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[context.Context, typex.EventTime, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization))
						return &caller3x0[context.Context, typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization) {
							fn.(startBundle3x0[context.Context, typex.EventTime, typex.BundleFinalization]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization))
						return &caller3x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization) {
							fn.(startBundle3x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[[]typex.Window, typex.EventTime, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization))
						return &caller3x0[[]typex.Window, typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization) {
							fn.(startBundle3x0[[]typex.Window, typex.EventTime, typex.BundleFinalization]).StartBundle(a0, a1, a2)
						})
					}
				}
			case startBundleOut == 1:
				if _, ok := doFn.(startBundle3x1[I1, I2, I3, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I1, I2, I3) error)
						return &caller3x1[I1, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I1, I2, I3) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I1, a1 I2, a2 I3) error { return fn.(startBundle3x1[I1, I2, I3, error]).StartBundle(a0, a1, a2) })
					}
				} else if _, ok := doFn.(startBundle3x1[context.Context, I2, I3, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, I2, I3) error)
						return &caller3x1[context.Context, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, I2, I3) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 I2, a2 I3) error {
							return fn.(startBundle3x1[context.Context, I2, I3, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[typex.PaneInfo, I2, I3, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, I2, I3) error)
						return &caller3x1[typex.PaneInfo, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, I2, I3) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 I2, a2 I3) error {
							return fn.(startBundle3x1[typex.PaneInfo, I2, I3, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[context.Context, typex.PaneInfo, I3, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, I3) error)
						return &caller3x1[context.Context, typex.PaneInfo, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, I3) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 I3) error {
							return fn.(startBundle3x1[context.Context, typex.PaneInfo, I3, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[[]typex.Window, I2, I3, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, I2, I3) error)
						return &caller3x1[[]typex.Window, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, I2, I3) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 I2, a2 I3) error {
							return fn.(startBundle3x1[[]typex.Window, I2, I3, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[context.Context, []typex.Window, I3, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, I3) error)
						return &caller3x1[context.Context, []typex.Window, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, I3) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 I3) error {
							return fn.(startBundle3x1[context.Context, []typex.Window, I3, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[typex.PaneInfo, []typex.Window, I3, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, I3) error)
						return &caller3x1[typex.PaneInfo, []typex.Window, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, I3) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 I3) error {
							return fn.(startBundle3x1[typex.PaneInfo, []typex.Window, I3, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[context.Context, typex.PaneInfo, []typex.Window, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window) error)
						return &caller3x1[context.Context, typex.PaneInfo, []typex.Window, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window) error {
							return fn.(startBundle3x1[context.Context, typex.PaneInfo, []typex.Window, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[typex.EventTime, I2, I3, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, I2, I3) error)
						return &caller3x1[typex.EventTime, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, I2, I3) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 I2, a2 I3) error {
							return fn.(startBundle3x1[typex.EventTime, I2, I3, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[context.Context, typex.EventTime, I3, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, I3) error)
						return &caller3x1[context.Context, typex.EventTime, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, I3) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 I3) error {
							return fn.(startBundle3x1[context.Context, typex.EventTime, I3, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[typex.PaneInfo, typex.EventTime, I3, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, I3) error)
						return &caller3x1[typex.PaneInfo, typex.EventTime, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, I3) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 I3) error {
							return fn.(startBundle3x1[typex.PaneInfo, typex.EventTime, I3, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[context.Context, typex.PaneInfo, typex.EventTime, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime) error)
						return &caller3x1[context.Context, typex.PaneInfo, typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime) error {
							return fn.(startBundle3x1[context.Context, typex.PaneInfo, typex.EventTime, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[[]typex.Window, typex.EventTime, I3, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, I3) error)
						return &caller3x1[[]typex.Window, typex.EventTime, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, I3) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 I3) error {
							return fn.(startBundle3x1[[]typex.Window, typex.EventTime, I3, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[context.Context, []typex.Window, typex.EventTime, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime) error)
						return &caller3x1[context.Context, []typex.Window, typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime) error {
							return fn.(startBundle3x1[context.Context, []typex.Window, typex.EventTime, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[typex.PaneInfo, []typex.Window, typex.EventTime, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime) error)
						return &caller3x1[typex.PaneInfo, []typex.Window, typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime) error {
							return fn.(startBundle3x1[typex.PaneInfo, []typex.Window, typex.EventTime, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[typex.BundleFinalization, I2, I3, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization, I2, I3) error)
						return &caller3x1[typex.BundleFinalization, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization, I2, I3) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization, a1 I2, a2 I3) error {
							return fn.(startBundle3x1[typex.BundleFinalization, I2, I3, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[context.Context, typex.BundleFinalization, I3, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization, I3) error)
						return &caller3x1[context.Context, typex.BundleFinalization, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization, I3) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization, a2 I3) error {
							return fn.(startBundle3x1[context.Context, typex.BundleFinalization, I3, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[typex.PaneInfo, typex.BundleFinalization, I3, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization, I3) error)
						return &caller3x1[typex.PaneInfo, typex.BundleFinalization, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization, I3) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization, a2 I3) error {
							return fn.(startBundle3x1[typex.PaneInfo, typex.BundleFinalization, I3, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[context.Context, typex.PaneInfo, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization) error)
						return &caller3x1[context.Context, typex.PaneInfo, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization) error {
							return fn.(startBundle3x1[context.Context, typex.PaneInfo, typex.BundleFinalization, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[[]typex.Window, typex.BundleFinalization, I3, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization, I3) error)
						return &caller3x1[[]typex.Window, typex.BundleFinalization, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization, I3) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization, a2 I3) error {
							return fn.(startBundle3x1[[]typex.Window, typex.BundleFinalization, I3, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[context.Context, []typex.Window, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization) error)
						return &caller3x1[context.Context, []typex.Window, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization) error {
							return fn.(startBundle3x1[context.Context, []typex.Window, typex.BundleFinalization, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization) error)
						return &caller3x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization) error {
							return fn.(startBundle3x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[typex.EventTime, typex.BundleFinalization, I3, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization, I3) error)
						return &caller3x1[typex.EventTime, typex.BundleFinalization, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization, I3) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization, a2 I3) error {
							return fn.(startBundle3x1[typex.EventTime, typex.BundleFinalization, I3, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[context.Context, typex.EventTime, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization) error)
						return &caller3x1[context.Context, typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization) error {
							return fn.(startBundle3x1[context.Context, typex.EventTime, typex.BundleFinalization, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization) error)
						return &caller3x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization) error {
							return fn.(startBundle3x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization) error)
						return &caller3x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization) error {
							return fn.(startBundle3x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, error]).StartBundle(a0, a1, a2)
						})
					}
				}
			default:
				panic("Invalid signature for StartBundle")
			}

		case startBundleIn == 4:
			switch {
			case startBundleOut == 0:
				if _, ok := doFn.(startBundle4x0[I0, I1, I2, I3]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I0, I1, I2, I3))
						return &caller4x0[I0, I1, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I0, I1, I2, I3))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I0, a1 I1, a2 I2, a3 I3) { fn.(startBundle4x0[I0, I1, I2, I3]).StartBundle(a0, a1, a2, a3) })
					}
				} else if _, ok := doFn.(startBundle4x0[context.Context, I1, I2, I3]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, I1, I2, I3))
						return &caller4x0[context.Context, I1, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, I1, I2, I3))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 I1, a2 I2, a3 I3) {
							fn.(startBundle4x0[context.Context, I1, I2, I3]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[typex.PaneInfo, I1, I2, I3]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, I1, I2, I3))
						return &caller4x0[typex.PaneInfo, I1, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, I1, I2, I3))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 I1, a2 I2, a3 I3) {
							fn.(startBundle4x0[typex.PaneInfo, I1, I2, I3]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[context.Context, typex.PaneInfo, I2, I3]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, I2, I3))
						return &caller4x0[context.Context, typex.PaneInfo, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, I2, I3))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 I2, a3 I3) {
							fn.(startBundle4x0[context.Context, typex.PaneInfo, I2, I3]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[[]typex.Window, I1, I2, I3]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, I1, I2, I3))
						return &caller4x0[[]typex.Window, I1, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, I1, I2, I3))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 I1, a2 I2, a3 I3) {
							fn.(startBundle4x0[[]typex.Window, I1, I2, I3]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[context.Context, []typex.Window, I2, I3]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, I2, I3))
						return &caller4x0[context.Context, []typex.Window, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, I2, I3))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 I2, a3 I3) {
							fn.(startBundle4x0[context.Context, []typex.Window, I2, I3]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[typex.PaneInfo, []typex.Window, I2, I3]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, I2, I3))
						return &caller4x0[typex.PaneInfo, []typex.Window, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, I2, I3))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 I2, a3 I3) {
							fn.(startBundle4x0[typex.PaneInfo, []typex.Window, I2, I3]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[context.Context, typex.PaneInfo, []typex.Window, I3]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, I3))
						return &caller4x0[context.Context, typex.PaneInfo, []typex.Window, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, I3))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 I3) {
							fn.(startBundle4x0[context.Context, typex.PaneInfo, []typex.Window, I3]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[typex.EventTime, I1, I2, I3]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, I1, I2, I3))
						return &caller4x0[typex.EventTime, I1, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, I1, I2, I3))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 I1, a2 I2, a3 I3) {
							fn.(startBundle4x0[typex.EventTime, I1, I2, I3]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[context.Context, typex.EventTime, I2, I3]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, I2, I3))
						return &caller4x0[context.Context, typex.EventTime, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, I2, I3))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 I2, a3 I3) {
							fn.(startBundle4x0[context.Context, typex.EventTime, I2, I3]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[typex.PaneInfo, typex.EventTime, I2, I3]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, I2, I3))
						return &caller4x0[typex.PaneInfo, typex.EventTime, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, I2, I3))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 I2, a3 I3) {
							fn.(startBundle4x0[typex.PaneInfo, typex.EventTime, I2, I3]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[context.Context, typex.PaneInfo, typex.EventTime, I3]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, I3))
						return &caller4x0[context.Context, typex.PaneInfo, typex.EventTime, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, I3))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 I3) {
							fn.(startBundle4x0[context.Context, typex.PaneInfo, typex.EventTime, I3]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[[]typex.Window, typex.EventTime, I2, I3]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, I2, I3))
						return &caller4x0[[]typex.Window, typex.EventTime, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, I2, I3))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 I2, a3 I3) {
							fn.(startBundle4x0[[]typex.Window, typex.EventTime, I2, I3]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[context.Context, []typex.Window, typex.EventTime, I3]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, I3))
						return &caller4x0[context.Context, []typex.Window, typex.EventTime, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, I3))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 I3) {
							fn.(startBundle4x0[context.Context, []typex.Window, typex.EventTime, I3]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[typex.PaneInfo, []typex.Window, typex.EventTime, I3]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, I3))
						return &caller4x0[typex.PaneInfo, []typex.Window, typex.EventTime, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, I3))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 I3) {
							fn.(startBundle4x0[typex.PaneInfo, []typex.Window, typex.EventTime, I3]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime))
						return &caller4x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime) {
							fn.(startBundle4x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[typex.BundleFinalization, I1, I2, I3]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization, I1, I2, I3))
						return &caller4x0[typex.BundleFinalization, I1, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization, I1, I2, I3))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization, a1 I1, a2 I2, a3 I3) {
							fn.(startBundle4x0[typex.BundleFinalization, I1, I2, I3]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[context.Context, typex.BundleFinalization, I2, I3]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization, I2, I3))
						return &caller4x0[context.Context, typex.BundleFinalization, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization, I2, I3))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization, a2 I2, a3 I3) {
							fn.(startBundle4x0[context.Context, typex.BundleFinalization, I2, I3]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[typex.PaneInfo, typex.BundleFinalization, I2, I3]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization, I2, I3))
						return &caller4x0[typex.PaneInfo, typex.BundleFinalization, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization, I2, I3))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization, a2 I2, a3 I3) {
							fn.(startBundle4x0[typex.PaneInfo, typex.BundleFinalization, I2, I3]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I3]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization, I3))
						return &caller4x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization, I3))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization, a3 I3) {
							fn.(startBundle4x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I3]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[[]typex.Window, typex.BundleFinalization, I2, I3]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization, I2, I3))
						return &caller4x0[[]typex.Window, typex.BundleFinalization, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization, I2, I3))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization, a2 I2, a3 I3) {
							fn.(startBundle4x0[[]typex.Window, typex.BundleFinalization, I2, I3]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[context.Context, []typex.Window, typex.BundleFinalization, I3]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization, I3))
						return &caller4x0[context.Context, []typex.Window, typex.BundleFinalization, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization, I3))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization, a3 I3) {
							fn.(startBundle4x0[context.Context, []typex.Window, typex.BundleFinalization, I3]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3))
						return &caller4x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization, a3 I3) {
							fn.(startBundle4x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization))
						return &caller4x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.BundleFinalization) {
							fn.(startBundle4x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[typex.EventTime, typex.BundleFinalization, I2, I3]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization, I2, I3))
						return &caller4x0[typex.EventTime, typex.BundleFinalization, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization, I2, I3))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization, a2 I2, a3 I3) {
							fn.(startBundle4x0[typex.EventTime, typex.BundleFinalization, I2, I3]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[context.Context, typex.EventTime, typex.BundleFinalization, I3]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization, I3))
						return &caller4x0[context.Context, typex.EventTime, typex.BundleFinalization, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization, I3))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I3) {
							fn.(startBundle4x0[context.Context, typex.EventTime, typex.BundleFinalization, I3]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3))
						return &caller4x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I3) {
							fn.(startBundle4x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization))
						return &caller4x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 typex.BundleFinalization) {
							fn.(startBundle4x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I3]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization, I3))
						return &caller4x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization, I3))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I3) {
							fn.(startBundle4x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I3]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization))
						return &caller4x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization) {
							fn.(startBundle4x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization))
						return &caller4x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization) {
							fn.(startBundle4x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization]).StartBundle(a0, a1, a2, a3)
						})
					}
				}
			case startBundleOut == 1:
				if _, ok := doFn.(startBundle4x1[I0, I1, I2, I3, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I0, I1, I2, I3) error)
						return &caller4x1[I0, I1, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I0, I1, I2, I3) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I0, a1 I1, a2 I2, a3 I3) error {
							return fn.(startBundle4x1[I0, I1, I2, I3, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[context.Context, I1, I2, I3, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, I1, I2, I3) error)
						return &caller4x1[context.Context, I1, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, I1, I2, I3) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 I1, a2 I2, a3 I3) error {
							return fn.(startBundle4x1[context.Context, I1, I2, I3, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[typex.PaneInfo, I1, I2, I3, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, I1, I2, I3) error)
						return &caller4x1[typex.PaneInfo, I1, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, I1, I2, I3) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 I1, a2 I2, a3 I3) error {
							return fn.(startBundle4x1[typex.PaneInfo, I1, I2, I3, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[context.Context, typex.PaneInfo, I2, I3, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, I2, I3) error)
						return &caller4x1[context.Context, typex.PaneInfo, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, I2, I3) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 I2, a3 I3) error {
							return fn.(startBundle4x1[context.Context, typex.PaneInfo, I2, I3, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[[]typex.Window, I1, I2, I3, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, I1, I2, I3) error)
						return &caller4x1[[]typex.Window, I1, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, I1, I2, I3) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 I1, a2 I2, a3 I3) error {
							return fn.(startBundle4x1[[]typex.Window, I1, I2, I3, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[context.Context, []typex.Window, I2, I3, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, I2, I3) error)
						return &caller4x1[context.Context, []typex.Window, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, I2, I3) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 I2, a3 I3) error {
							return fn.(startBundle4x1[context.Context, []typex.Window, I2, I3, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[typex.PaneInfo, []typex.Window, I2, I3, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, I2, I3) error)
						return &caller4x1[typex.PaneInfo, []typex.Window, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, I2, I3) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 I2, a3 I3) error {
							return fn.(startBundle4x1[typex.PaneInfo, []typex.Window, I2, I3, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[context.Context, typex.PaneInfo, []typex.Window, I3, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, I3) error)
						return &caller4x1[context.Context, typex.PaneInfo, []typex.Window, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, I3) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 I3) error {
							return fn.(startBundle4x1[context.Context, typex.PaneInfo, []typex.Window, I3, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[typex.EventTime, I1, I2, I3, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, I1, I2, I3) error)
						return &caller4x1[typex.EventTime, I1, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, I1, I2, I3) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 I1, a2 I2, a3 I3) error {
							return fn.(startBundle4x1[typex.EventTime, I1, I2, I3, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[context.Context, typex.EventTime, I2, I3, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, I2, I3) error)
						return &caller4x1[context.Context, typex.EventTime, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, I2, I3) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 I2, a3 I3) error {
							return fn.(startBundle4x1[context.Context, typex.EventTime, I2, I3, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[typex.PaneInfo, typex.EventTime, I2, I3, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, I2, I3) error)
						return &caller4x1[typex.PaneInfo, typex.EventTime, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, I2, I3) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 I2, a3 I3) error {
							return fn.(startBundle4x1[typex.PaneInfo, typex.EventTime, I2, I3, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[context.Context, typex.PaneInfo, typex.EventTime, I3, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, I3) error)
						return &caller4x1[context.Context, typex.PaneInfo, typex.EventTime, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, I3) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 I3) error {
							return fn.(startBundle4x1[context.Context, typex.PaneInfo, typex.EventTime, I3, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[[]typex.Window, typex.EventTime, I2, I3, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, I2, I3) error)
						return &caller4x1[[]typex.Window, typex.EventTime, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, I2, I3) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 I2, a3 I3) error {
							return fn.(startBundle4x1[[]typex.Window, typex.EventTime, I2, I3, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[context.Context, []typex.Window, typex.EventTime, I3, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, I3) error)
						return &caller4x1[context.Context, []typex.Window, typex.EventTime, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, I3) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 I3) error {
							return fn.(startBundle4x1[context.Context, []typex.Window, typex.EventTime, I3, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[typex.PaneInfo, []typex.Window, typex.EventTime, I3, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, I3) error)
						return &caller4x1[typex.PaneInfo, []typex.Window, typex.EventTime, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, I3) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 I3) error {
							return fn.(startBundle4x1[typex.PaneInfo, []typex.Window, typex.EventTime, I3, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime) error)
						return &caller4x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime) error {
							return fn.(startBundle4x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[typex.BundleFinalization, I1, I2, I3, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization, I1, I2, I3) error)
						return &caller4x1[typex.BundleFinalization, I1, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization, I1, I2, I3) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization, a1 I1, a2 I2, a3 I3) error {
							return fn.(startBundle4x1[typex.BundleFinalization, I1, I2, I3, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[context.Context, typex.BundleFinalization, I2, I3, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization, I2, I3) error)
						return &caller4x1[context.Context, typex.BundleFinalization, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization, I2, I3) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization, a2 I2, a3 I3) error {
							return fn.(startBundle4x1[context.Context, typex.BundleFinalization, I2, I3, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[typex.PaneInfo, typex.BundleFinalization, I2, I3, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization, I2, I3) error)
						return &caller4x1[typex.PaneInfo, typex.BundleFinalization, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization, I2, I3) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization, a2 I2, a3 I3) error {
							return fn.(startBundle4x1[typex.PaneInfo, typex.BundleFinalization, I2, I3, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I3, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization, I3) error)
						return &caller4x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization, I3) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization, a3 I3) error {
							return fn.(startBundle4x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I3, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[[]typex.Window, typex.BundleFinalization, I2, I3, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization, I2, I3) error)
						return &caller4x1[[]typex.Window, typex.BundleFinalization, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization, I2, I3) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization, a2 I2, a3 I3) error {
							return fn.(startBundle4x1[[]typex.Window, typex.BundleFinalization, I2, I3, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[context.Context, []typex.Window, typex.BundleFinalization, I3, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization, I3) error)
						return &caller4x1[context.Context, []typex.Window, typex.BundleFinalization, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization, I3) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization, a3 I3) error {
							return fn.(startBundle4x1[context.Context, []typex.Window, typex.BundleFinalization, I3, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3) error)
						return &caller4x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization, a3 I3) error {
							return fn.(startBundle4x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization) error)
						return &caller4x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.BundleFinalization) error {
							return fn.(startBundle4x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[typex.EventTime, typex.BundleFinalization, I2, I3, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization, I2, I3) error)
						return &caller4x1[typex.EventTime, typex.BundleFinalization, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization, I2, I3) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization, a2 I2, a3 I3) error {
							return fn.(startBundle4x1[typex.EventTime, typex.BundleFinalization, I2, I3, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[context.Context, typex.EventTime, typex.BundleFinalization, I3, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization, I3) error)
						return &caller4x1[context.Context, typex.EventTime, typex.BundleFinalization, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization, I3) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I3) error {
							return fn.(startBundle4x1[context.Context, typex.EventTime, typex.BundleFinalization, I3, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3) error)
						return &caller4x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I3) error {
							return fn.(startBundle4x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization) error)
						return &caller4x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 typex.BundleFinalization) error {
							return fn.(startBundle4x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I3, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization, I3) error)
						return &caller4x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization, I3) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I3) error {
							return fn.(startBundle4x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I3, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization) error)
						return &caller4x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization) error {
							return fn.(startBundle4x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization) error)
						return &caller4x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization) error {
							return fn.(startBundle4x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				}
			default:
				panic("Invalid signature for StartBundle")
			}

		case startBundleIn == 5:
			switch {
			case startBundleOut == 0:
				if _, ok := doFn.(startBundle5x0[context.Context, I0, I1, I2, I3]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, I0, I1, I2, I3))
						return &caller5x0[context.Context, I0, I1, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, I0, I1, I2, I3))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 I0, a2 I1, a3 I2, a4 I3) {
							fn.(startBundle5x0[context.Context, I0, I1, I2, I3]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[typex.PaneInfo, I0, I1, I2, I3]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, I0, I1, I2, I3))
						return &caller5x0[typex.PaneInfo, I0, I1, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, I0, I1, I2, I3))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 I0, a2 I1, a3 I2, a4 I3) {
							fn.(startBundle5x0[typex.PaneInfo, I0, I1, I2, I3]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[context.Context, typex.PaneInfo, I1, I2, I3]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, I1, I2, I3))
						return &caller5x0[context.Context, typex.PaneInfo, I1, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, I1, I2, I3))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 I1, a3 I2, a4 I3) {
							fn.(startBundle5x0[context.Context, typex.PaneInfo, I1, I2, I3]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[[]typex.Window, I0, I1, I2, I3]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, I0, I1, I2, I3))
						return &caller5x0[[]typex.Window, I0, I1, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, I0, I1, I2, I3))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 I0, a2 I1, a3 I2, a4 I3) {
							fn.(startBundle5x0[[]typex.Window, I0, I1, I2, I3]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[context.Context, []typex.Window, I1, I2, I3]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, I1, I2, I3))
						return &caller5x0[context.Context, []typex.Window, I1, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, I1, I2, I3))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 I1, a3 I2, a4 I3) {
							fn.(startBundle5x0[context.Context, []typex.Window, I1, I2, I3]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[typex.PaneInfo, []typex.Window, I1, I2, I3]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, I1, I2, I3))
						return &caller5x0[typex.PaneInfo, []typex.Window, I1, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, I1, I2, I3))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 I1, a3 I2, a4 I3) {
							fn.(startBundle5x0[typex.PaneInfo, []typex.Window, I1, I2, I3]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[context.Context, typex.PaneInfo, []typex.Window, I2, I3]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, I2, I3))
						return &caller5x0[context.Context, typex.PaneInfo, []typex.Window, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, I2, I3))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 I2, a4 I3) {
							fn.(startBundle5x0[context.Context, typex.PaneInfo, []typex.Window, I2, I3]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[typex.EventTime, I0, I1, I2, I3]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, I0, I1, I2, I3))
						return &caller5x0[typex.EventTime, I0, I1, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, I0, I1, I2, I3))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 I0, a2 I1, a3 I2, a4 I3) {
							fn.(startBundle5x0[typex.EventTime, I0, I1, I2, I3]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[context.Context, typex.EventTime, I1, I2, I3]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, I1, I2, I3))
						return &caller5x0[context.Context, typex.EventTime, I1, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, I1, I2, I3))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 I1, a3 I2, a4 I3) {
							fn.(startBundle5x0[context.Context, typex.EventTime, I1, I2, I3]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[typex.PaneInfo, typex.EventTime, I1, I2, I3]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, I1, I2, I3))
						return &caller5x0[typex.PaneInfo, typex.EventTime, I1, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, I1, I2, I3))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 I1, a3 I2, a4 I3) {
							fn.(startBundle5x0[typex.PaneInfo, typex.EventTime, I1, I2, I3]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[context.Context, typex.PaneInfo, typex.EventTime, I2, I3]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, I2, I3))
						return &caller5x0[context.Context, typex.PaneInfo, typex.EventTime, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, I2, I3))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 I2, a4 I3) {
							fn.(startBundle5x0[context.Context, typex.PaneInfo, typex.EventTime, I2, I3]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[[]typex.Window, typex.EventTime, I1, I2, I3]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, I1, I2, I3))
						return &caller5x0[[]typex.Window, typex.EventTime, I1, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, I1, I2, I3))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 I1, a3 I2, a4 I3) {
							fn.(startBundle5x0[[]typex.Window, typex.EventTime, I1, I2, I3]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[context.Context, []typex.Window, typex.EventTime, I2, I3]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, I2, I3))
						return &caller5x0[context.Context, []typex.Window, typex.EventTime, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, I2, I3))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 I2, a4 I3) {
							fn.(startBundle5x0[context.Context, []typex.Window, typex.EventTime, I2, I3]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[typex.PaneInfo, []typex.Window, typex.EventTime, I2, I3]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, I2, I3))
						return &caller5x0[typex.PaneInfo, []typex.Window, typex.EventTime, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, I2, I3))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 I2, a4 I3) {
							fn.(startBundle5x0[typex.PaneInfo, []typex.Window, typex.EventTime, I2, I3]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I3]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I3))
						return &caller5x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I3))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 I3) {
							fn.(startBundle5x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I3]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[typex.BundleFinalization, I0, I1, I2, I3]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization, I0, I1, I2, I3))
						return &caller5x0[typex.BundleFinalization, I0, I1, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization, I0, I1, I2, I3))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization, a1 I0, a2 I1, a3 I2, a4 I3) {
							fn.(startBundle5x0[typex.BundleFinalization, I0, I1, I2, I3]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[context.Context, typex.BundleFinalization, I1, I2, I3]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization, I1, I2, I3))
						return &caller5x0[context.Context, typex.BundleFinalization, I1, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization, I1, I2, I3))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization, a2 I1, a3 I2, a4 I3) {
							fn.(startBundle5x0[context.Context, typex.BundleFinalization, I1, I2, I3]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[typex.PaneInfo, typex.BundleFinalization, I1, I2, I3]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization, I1, I2, I3))
						return &caller5x0[typex.PaneInfo, typex.BundleFinalization, I1, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization, I1, I2, I3))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization, a2 I1, a3 I2, a4 I3) {
							fn.(startBundle5x0[typex.PaneInfo, typex.BundleFinalization, I1, I2, I3]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I2, I3]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization, I2, I3))
						return &caller5x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization, I2, I3))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization, a3 I2, a4 I3) {
							fn.(startBundle5x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I2, I3]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[[]typex.Window, typex.BundleFinalization, I1, I2, I3]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization, I1, I2, I3))
						return &caller5x0[[]typex.Window, typex.BundleFinalization, I1, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization, I1, I2, I3))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization, a2 I1, a3 I2, a4 I3) {
							fn.(startBundle5x0[[]typex.Window, typex.BundleFinalization, I1, I2, I3]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[context.Context, []typex.Window, typex.BundleFinalization, I2, I3]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization, I2, I3))
						return &caller5x0[context.Context, []typex.Window, typex.BundleFinalization, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization, I2, I3))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization, a3 I2, a4 I3) {
							fn.(startBundle5x0[context.Context, []typex.Window, typex.BundleFinalization, I2, I3]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2, I3]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2, I3))
						return &caller5x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2, I3))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization, a3 I2, a4 I3) {
							fn.(startBundle5x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2, I3]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3))
						return &caller5x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.BundleFinalization, a4 I3) {
							fn.(startBundle5x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[typex.EventTime, typex.BundleFinalization, I1, I2, I3]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization, I1, I2, I3))
						return &caller5x0[typex.EventTime, typex.BundleFinalization, I1, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization, I1, I2, I3))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization, a2 I1, a3 I2, a4 I3) {
							fn.(startBundle5x0[typex.EventTime, typex.BundleFinalization, I1, I2, I3]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[context.Context, typex.EventTime, typex.BundleFinalization, I2, I3]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization, I2, I3))
						return &caller5x0[context.Context, typex.EventTime, typex.BundleFinalization, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization, I2, I3))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I2, a4 I3) {
							fn.(startBundle5x0[context.Context, typex.EventTime, typex.BundleFinalization, I2, I3]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2, I3]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2, I3))
						return &caller5x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2, I3))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I2, a4 I3) {
							fn.(startBundle5x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2, I3]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3))
						return &caller5x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I3) {
							fn.(startBundle5x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3))
						return &caller5x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I2, a4 I3) {
							fn.(startBundle5x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I3]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I3))
						return &caller5x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I3))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I3) {
							fn.(startBundle5x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I3]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I3]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I3))
						return &caller5x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I3))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I3) {
							fn.(startBundle5x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I3]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization))
						return &caller5x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 typex.BundleFinalization) {
							fn.(startBundle5x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				}
			case startBundleOut == 1:
				if _, ok := doFn.(startBundle5x1[context.Context, I0, I1, I2, I3, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, I0, I1, I2, I3) error)
						return &caller5x1[context.Context, I0, I1, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, I0, I1, I2, I3) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 I0, a2 I1, a3 I2, a4 I3) error {
							return fn.(startBundle5x1[context.Context, I0, I1, I2, I3, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[typex.PaneInfo, I0, I1, I2, I3, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, I0, I1, I2, I3) error)
						return &caller5x1[typex.PaneInfo, I0, I1, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, I0, I1, I2, I3) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 I0, a2 I1, a3 I2, a4 I3) error {
							return fn.(startBundle5x1[typex.PaneInfo, I0, I1, I2, I3, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[context.Context, typex.PaneInfo, I1, I2, I3, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, I1, I2, I3) error)
						return &caller5x1[context.Context, typex.PaneInfo, I1, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, I1, I2, I3) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 I1, a3 I2, a4 I3) error {
							return fn.(startBundle5x1[context.Context, typex.PaneInfo, I1, I2, I3, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[[]typex.Window, I0, I1, I2, I3, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, I0, I1, I2, I3) error)
						return &caller5x1[[]typex.Window, I0, I1, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, I0, I1, I2, I3) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 I0, a2 I1, a3 I2, a4 I3) error {
							return fn.(startBundle5x1[[]typex.Window, I0, I1, I2, I3, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[context.Context, []typex.Window, I1, I2, I3, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, I1, I2, I3) error)
						return &caller5x1[context.Context, []typex.Window, I1, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, I1, I2, I3) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 I1, a3 I2, a4 I3) error {
							return fn.(startBundle5x1[context.Context, []typex.Window, I1, I2, I3, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[typex.PaneInfo, []typex.Window, I1, I2, I3, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, I1, I2, I3) error)
						return &caller5x1[typex.PaneInfo, []typex.Window, I1, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, I1, I2, I3) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 I1, a3 I2, a4 I3) error {
							return fn.(startBundle5x1[typex.PaneInfo, []typex.Window, I1, I2, I3, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[context.Context, typex.PaneInfo, []typex.Window, I2, I3, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, I2, I3) error)
						return &caller5x1[context.Context, typex.PaneInfo, []typex.Window, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, I2, I3) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 I2, a4 I3) error {
							return fn.(startBundle5x1[context.Context, typex.PaneInfo, []typex.Window, I2, I3, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[typex.EventTime, I0, I1, I2, I3, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, I0, I1, I2, I3) error)
						return &caller5x1[typex.EventTime, I0, I1, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, I0, I1, I2, I3) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 I0, a2 I1, a3 I2, a4 I3) error {
							return fn.(startBundle5x1[typex.EventTime, I0, I1, I2, I3, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[context.Context, typex.EventTime, I1, I2, I3, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, I1, I2, I3) error)
						return &caller5x1[context.Context, typex.EventTime, I1, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, I1, I2, I3) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 I1, a3 I2, a4 I3) error {
							return fn.(startBundle5x1[context.Context, typex.EventTime, I1, I2, I3, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[typex.PaneInfo, typex.EventTime, I1, I2, I3, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, I1, I2, I3) error)
						return &caller5x1[typex.PaneInfo, typex.EventTime, I1, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, I1, I2, I3) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 I1, a3 I2, a4 I3) error {
							return fn.(startBundle5x1[typex.PaneInfo, typex.EventTime, I1, I2, I3, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[context.Context, typex.PaneInfo, typex.EventTime, I2, I3, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, I2, I3) error)
						return &caller5x1[context.Context, typex.PaneInfo, typex.EventTime, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, I2, I3) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 I2, a4 I3) error {
							return fn.(startBundle5x1[context.Context, typex.PaneInfo, typex.EventTime, I2, I3, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[[]typex.Window, typex.EventTime, I1, I2, I3, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, I1, I2, I3) error)
						return &caller5x1[[]typex.Window, typex.EventTime, I1, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, I1, I2, I3) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 I1, a3 I2, a4 I3) error {
							return fn.(startBundle5x1[[]typex.Window, typex.EventTime, I1, I2, I3, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[context.Context, []typex.Window, typex.EventTime, I2, I3, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, I2, I3) error)
						return &caller5x1[context.Context, []typex.Window, typex.EventTime, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, I2, I3) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 I2, a4 I3) error {
							return fn.(startBundle5x1[context.Context, []typex.Window, typex.EventTime, I2, I3, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[typex.PaneInfo, []typex.Window, typex.EventTime, I2, I3, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, I2, I3) error)
						return &caller5x1[typex.PaneInfo, []typex.Window, typex.EventTime, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, I2, I3) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 I2, a4 I3) error {
							return fn.(startBundle5x1[typex.PaneInfo, []typex.Window, typex.EventTime, I2, I3, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I3, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I3) error)
						return &caller5x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I3) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 I3) error {
							return fn.(startBundle5x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I3, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[typex.BundleFinalization, I0, I1, I2, I3, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization, I0, I1, I2, I3) error)
						return &caller5x1[typex.BundleFinalization, I0, I1, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization, I0, I1, I2, I3) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization, a1 I0, a2 I1, a3 I2, a4 I3) error {
							return fn.(startBundle5x1[typex.BundleFinalization, I0, I1, I2, I3, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[context.Context, typex.BundleFinalization, I1, I2, I3, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization, I1, I2, I3) error)
						return &caller5x1[context.Context, typex.BundleFinalization, I1, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization, I1, I2, I3) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization, a2 I1, a3 I2, a4 I3) error {
							return fn.(startBundle5x1[context.Context, typex.BundleFinalization, I1, I2, I3, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[typex.PaneInfo, typex.BundleFinalization, I1, I2, I3, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization, I1, I2, I3) error)
						return &caller5x1[typex.PaneInfo, typex.BundleFinalization, I1, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization, I1, I2, I3) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization, a2 I1, a3 I2, a4 I3) error {
							return fn.(startBundle5x1[typex.PaneInfo, typex.BundleFinalization, I1, I2, I3, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I2, I3, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization, I2, I3) error)
						return &caller5x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization, I2, I3) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization, a3 I2, a4 I3) error {
							return fn.(startBundle5x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I2, I3, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[[]typex.Window, typex.BundleFinalization, I1, I2, I3, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization, I1, I2, I3) error)
						return &caller5x1[[]typex.Window, typex.BundleFinalization, I1, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization, I1, I2, I3) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization, a2 I1, a3 I2, a4 I3) error {
							return fn.(startBundle5x1[[]typex.Window, typex.BundleFinalization, I1, I2, I3, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[context.Context, []typex.Window, typex.BundleFinalization, I2, I3, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization, I2, I3) error)
						return &caller5x1[context.Context, []typex.Window, typex.BundleFinalization, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization, I2, I3) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization, a3 I2, a4 I3) error {
							return fn.(startBundle5x1[context.Context, []typex.Window, typex.BundleFinalization, I2, I3, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2, I3, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2, I3) error)
						return &caller5x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2, I3) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization, a3 I2, a4 I3) error {
							return fn.(startBundle5x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2, I3, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3) error)
						return &caller5x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.BundleFinalization, a4 I3) error {
							return fn.(startBundle5x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[typex.EventTime, typex.BundleFinalization, I1, I2, I3, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization, I1, I2, I3) error)
						return &caller5x1[typex.EventTime, typex.BundleFinalization, I1, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization, I1, I2, I3) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization, a2 I1, a3 I2, a4 I3) error {
							return fn.(startBundle5x1[typex.EventTime, typex.BundleFinalization, I1, I2, I3, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[context.Context, typex.EventTime, typex.BundleFinalization, I2, I3, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization, I2, I3) error)
						return &caller5x1[context.Context, typex.EventTime, typex.BundleFinalization, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization, I2, I3) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I2, a4 I3) error {
							return fn.(startBundle5x1[context.Context, typex.EventTime, typex.BundleFinalization, I2, I3, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2, I3, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2, I3) error)
						return &caller5x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2, I3) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I2, a4 I3) error {
							return fn.(startBundle5x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2, I3, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3) error)
						return &caller5x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I3) error {
							return fn.(startBundle5x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3) error)
						return &caller5x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I2, a4 I3) error {
							return fn.(startBundle5x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I3, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I3) error)
						return &caller5x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I3) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I3) error {
							return fn.(startBundle5x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I3, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I3, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I3) error)
						return &caller5x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I3) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I3) error {
							return fn.(startBundle5x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I3, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization) error)
						return &caller5x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 typex.BundleFinalization) error {
							return fn.(startBundle5x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				}
			default:
				panic("Invalid signature for StartBundle")
			}

		case startBundleIn == 6:
			switch {
			case startBundleOut == 0:
				if _, ok := doFn.(startBundle6x0[context.Context, typex.PaneInfo, I0, I1, I2, I3]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, I0, I1, I2, I3))
						return &caller6x0[context.Context, typex.PaneInfo, I0, I1, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, I0, I1, I2, I3))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 I0, a3 I1, a4 I2, a5 I3) {
							fn.(startBundle6x0[context.Context, typex.PaneInfo, I0, I1, I2, I3]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[context.Context, []typex.Window, I0, I1, I2, I3]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, I0, I1, I2, I3))
						return &caller6x0[context.Context, []typex.Window, I0, I1, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, I0, I1, I2, I3))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 I0, a3 I1, a4 I2, a5 I3) {
							fn.(startBundle6x0[context.Context, []typex.Window, I0, I1, I2, I3]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[typex.PaneInfo, []typex.Window, I0, I1, I2, I3]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, I0, I1, I2, I3))
						return &caller6x0[typex.PaneInfo, []typex.Window, I0, I1, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, I0, I1, I2, I3))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 I0, a3 I1, a4 I2, a5 I3) {
							fn.(startBundle6x0[typex.PaneInfo, []typex.Window, I0, I1, I2, I3]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[context.Context, typex.PaneInfo, []typex.Window, I1, I2, I3]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, I1, I2, I3))
						return &caller6x0[context.Context, typex.PaneInfo, []typex.Window, I1, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, I1, I2, I3))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 I1, a4 I2, a5 I3) {
							fn.(startBundle6x0[context.Context, typex.PaneInfo, []typex.Window, I1, I2, I3]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[context.Context, typex.EventTime, I0, I1, I2, I3]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, I0, I1, I2, I3))
						return &caller6x0[context.Context, typex.EventTime, I0, I1, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, I0, I1, I2, I3))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 I0, a3 I1, a4 I2, a5 I3) {
							fn.(startBundle6x0[context.Context, typex.EventTime, I0, I1, I2, I3]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[typex.PaneInfo, typex.EventTime, I0, I1, I2, I3]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, I0, I1, I2, I3))
						return &caller6x0[typex.PaneInfo, typex.EventTime, I0, I1, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, I0, I1, I2, I3))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 I0, a3 I1, a4 I2, a5 I3) {
							fn.(startBundle6x0[typex.PaneInfo, typex.EventTime, I0, I1, I2, I3]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[context.Context, typex.PaneInfo, typex.EventTime, I1, I2, I3]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, I1, I2, I3))
						return &caller6x0[context.Context, typex.PaneInfo, typex.EventTime, I1, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, I1, I2, I3))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 I1, a4 I2, a5 I3) {
							fn.(startBundle6x0[context.Context, typex.PaneInfo, typex.EventTime, I1, I2, I3]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[[]typex.Window, typex.EventTime, I0, I1, I2, I3]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, I0, I1, I2, I3))
						return &caller6x0[[]typex.Window, typex.EventTime, I0, I1, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, I0, I1, I2, I3))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 I0, a3 I1, a4 I2, a5 I3) {
							fn.(startBundle6x0[[]typex.Window, typex.EventTime, I0, I1, I2, I3]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[context.Context, []typex.Window, typex.EventTime, I1, I2, I3]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, I1, I2, I3))
						return &caller6x0[context.Context, []typex.Window, typex.EventTime, I1, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, I1, I2, I3))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 I1, a4 I2, a5 I3) {
							fn.(startBundle6x0[context.Context, []typex.Window, typex.EventTime, I1, I2, I3]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[typex.PaneInfo, []typex.Window, typex.EventTime, I1, I2, I3]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, I1, I2, I3))
						return &caller6x0[typex.PaneInfo, []typex.Window, typex.EventTime, I1, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, I1, I2, I3))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 I1, a4 I2, a5 I3) {
							fn.(startBundle6x0[typex.PaneInfo, []typex.Window, typex.EventTime, I1, I2, I3]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I2, I3]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I2, I3))
						return &caller6x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I2, I3))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 I2, a5 I3) {
							fn.(startBundle6x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I2, I3]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[context.Context, typex.BundleFinalization, I0, I1, I2, I3]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization, I0, I1, I2, I3))
						return &caller6x0[context.Context, typex.BundleFinalization, I0, I1, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization, I0, I1, I2, I3))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization, a2 I0, a3 I1, a4 I2, a5 I3) {
							fn.(startBundle6x0[context.Context, typex.BundleFinalization, I0, I1, I2, I3]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[typex.PaneInfo, typex.BundleFinalization, I0, I1, I2, I3]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization, I0, I1, I2, I3))
						return &caller6x0[typex.PaneInfo, typex.BundleFinalization, I0, I1, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization, I0, I1, I2, I3))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization, a2 I0, a3 I1, a4 I2, a5 I3) {
							fn.(startBundle6x0[typex.PaneInfo, typex.BundleFinalization, I0, I1, I2, I3]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I1, I2, I3]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization, I1, I2, I3))
						return &caller6x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I1, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization, I1, I2, I3))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization, a3 I1, a4 I2, a5 I3) {
							fn.(startBundle6x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I1, I2, I3]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[[]typex.Window, typex.BundleFinalization, I0, I1, I2, I3]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization, I0, I1, I2, I3))
						return &caller6x0[[]typex.Window, typex.BundleFinalization, I0, I1, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization, I0, I1, I2, I3))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization, a2 I0, a3 I1, a4 I2, a5 I3) {
							fn.(startBundle6x0[[]typex.Window, typex.BundleFinalization, I0, I1, I2, I3]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[context.Context, []typex.Window, typex.BundleFinalization, I1, I2, I3]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization, I1, I2, I3))
						return &caller6x0[context.Context, []typex.Window, typex.BundleFinalization, I1, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization, I1, I2, I3))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization, a3 I1, a4 I2, a5 I3) {
							fn.(startBundle6x0[context.Context, []typex.Window, typex.BundleFinalization, I1, I2, I3]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1, I2, I3]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1, I2, I3))
						return &caller6x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1, I2, I3))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization, a3 I1, a4 I2, a5 I3) {
							fn.(startBundle6x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1, I2, I3]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2, I3]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2, I3))
						return &caller6x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2, I3))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.BundleFinalization, a4 I2, a5 I3) {
							fn.(startBundle6x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2, I3]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[typex.EventTime, typex.BundleFinalization, I0, I1, I2, I3]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization, I0, I1, I2, I3))
						return &caller6x0[typex.EventTime, typex.BundleFinalization, I0, I1, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization, I0, I1, I2, I3))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization, a2 I0, a3 I1, a4 I2, a5 I3) {
							fn.(startBundle6x0[typex.EventTime, typex.BundleFinalization, I0, I1, I2, I3]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[context.Context, typex.EventTime, typex.BundleFinalization, I1, I2, I3]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization, I1, I2, I3))
						return &caller6x0[context.Context, typex.EventTime, typex.BundleFinalization, I1, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization, I1, I2, I3))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I1, a4 I2, a5 I3) {
							fn.(startBundle6x0[context.Context, typex.EventTime, typex.BundleFinalization, I1, I2, I3]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1, I2, I3]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1, I2, I3))
						return &caller6x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1, I2, I3))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I1, a4 I2, a5 I3) {
							fn.(startBundle6x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1, I2, I3]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2, I3]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2, I3))
						return &caller6x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2, I3))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I2, a5 I3) {
							fn.(startBundle6x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2, I3]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2, I3]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2, I3))
						return &caller6x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2, I3))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I1, a4 I2, a5 I3) {
							fn.(startBundle6x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2, I3]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3))
						return &caller6x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I2, a5 I3) {
							fn.(startBundle6x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3))
						return &caller6x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I2, a5 I3) {
							fn.(startBundle6x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I3]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I3))
						return &caller6x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I3))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 typex.BundleFinalization, a5 I3) {
							fn.(startBundle6x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I3]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				}
			case startBundleOut == 1:
				if _, ok := doFn.(startBundle6x1[context.Context, typex.PaneInfo, I0, I1, I2, I3, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, I0, I1, I2, I3) error)
						return &caller6x1[context.Context, typex.PaneInfo, I0, I1, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, I0, I1, I2, I3) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 I0, a3 I1, a4 I2, a5 I3) error {
							return fn.(startBundle6x1[context.Context, typex.PaneInfo, I0, I1, I2, I3, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[context.Context, []typex.Window, I0, I1, I2, I3, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, I0, I1, I2, I3) error)
						return &caller6x1[context.Context, []typex.Window, I0, I1, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, I0, I1, I2, I3) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 I0, a3 I1, a4 I2, a5 I3) error {
							return fn.(startBundle6x1[context.Context, []typex.Window, I0, I1, I2, I3, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[typex.PaneInfo, []typex.Window, I0, I1, I2, I3, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, I0, I1, I2, I3) error)
						return &caller6x1[typex.PaneInfo, []typex.Window, I0, I1, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, I0, I1, I2, I3) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 I0, a3 I1, a4 I2, a5 I3) error {
							return fn.(startBundle6x1[typex.PaneInfo, []typex.Window, I0, I1, I2, I3, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[context.Context, typex.PaneInfo, []typex.Window, I1, I2, I3, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, I1, I2, I3) error)
						return &caller6x1[context.Context, typex.PaneInfo, []typex.Window, I1, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, I1, I2, I3) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 I1, a4 I2, a5 I3) error {
							return fn.(startBundle6x1[context.Context, typex.PaneInfo, []typex.Window, I1, I2, I3, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[context.Context, typex.EventTime, I0, I1, I2, I3, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, I0, I1, I2, I3) error)
						return &caller6x1[context.Context, typex.EventTime, I0, I1, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, I0, I1, I2, I3) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 I0, a3 I1, a4 I2, a5 I3) error {
							return fn.(startBundle6x1[context.Context, typex.EventTime, I0, I1, I2, I3, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[typex.PaneInfo, typex.EventTime, I0, I1, I2, I3, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, I0, I1, I2, I3) error)
						return &caller6x1[typex.PaneInfo, typex.EventTime, I0, I1, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, I0, I1, I2, I3) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 I0, a3 I1, a4 I2, a5 I3) error {
							return fn.(startBundle6x1[typex.PaneInfo, typex.EventTime, I0, I1, I2, I3, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[context.Context, typex.PaneInfo, typex.EventTime, I1, I2, I3, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, I1, I2, I3) error)
						return &caller6x1[context.Context, typex.PaneInfo, typex.EventTime, I1, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, I1, I2, I3) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 I1, a4 I2, a5 I3) error {
							return fn.(startBundle6x1[context.Context, typex.PaneInfo, typex.EventTime, I1, I2, I3, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[[]typex.Window, typex.EventTime, I0, I1, I2, I3, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, I0, I1, I2, I3) error)
						return &caller6x1[[]typex.Window, typex.EventTime, I0, I1, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, I0, I1, I2, I3) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 I0, a3 I1, a4 I2, a5 I3) error {
							return fn.(startBundle6x1[[]typex.Window, typex.EventTime, I0, I1, I2, I3, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[context.Context, []typex.Window, typex.EventTime, I1, I2, I3, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, I1, I2, I3) error)
						return &caller6x1[context.Context, []typex.Window, typex.EventTime, I1, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, I1, I2, I3) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 I1, a4 I2, a5 I3) error {
							return fn.(startBundle6x1[context.Context, []typex.Window, typex.EventTime, I1, I2, I3, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[typex.PaneInfo, []typex.Window, typex.EventTime, I1, I2, I3, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, I1, I2, I3) error)
						return &caller6x1[typex.PaneInfo, []typex.Window, typex.EventTime, I1, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, I1, I2, I3) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 I1, a4 I2, a5 I3) error {
							return fn.(startBundle6x1[typex.PaneInfo, []typex.Window, typex.EventTime, I1, I2, I3, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I2, I3, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I2, I3) error)
						return &caller6x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I2, I3) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 I2, a5 I3) error {
							return fn.(startBundle6x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I2, I3, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[context.Context, typex.BundleFinalization, I0, I1, I2, I3, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization, I0, I1, I2, I3) error)
						return &caller6x1[context.Context, typex.BundleFinalization, I0, I1, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization, I0, I1, I2, I3) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization, a2 I0, a3 I1, a4 I2, a5 I3) error {
							return fn.(startBundle6x1[context.Context, typex.BundleFinalization, I0, I1, I2, I3, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[typex.PaneInfo, typex.BundleFinalization, I0, I1, I2, I3, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization, I0, I1, I2, I3) error)
						return &caller6x1[typex.PaneInfo, typex.BundleFinalization, I0, I1, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization, I0, I1, I2, I3) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization, a2 I0, a3 I1, a4 I2, a5 I3) error {
							return fn.(startBundle6x1[typex.PaneInfo, typex.BundleFinalization, I0, I1, I2, I3, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I1, I2, I3, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization, I1, I2, I3) error)
						return &caller6x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I1, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization, I1, I2, I3) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization, a3 I1, a4 I2, a5 I3) error {
							return fn.(startBundle6x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I1, I2, I3, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[[]typex.Window, typex.BundleFinalization, I0, I1, I2, I3, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization, I0, I1, I2, I3) error)
						return &caller6x1[[]typex.Window, typex.BundleFinalization, I0, I1, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization, I0, I1, I2, I3) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization, a2 I0, a3 I1, a4 I2, a5 I3) error {
							return fn.(startBundle6x1[[]typex.Window, typex.BundleFinalization, I0, I1, I2, I3, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[context.Context, []typex.Window, typex.BundleFinalization, I1, I2, I3, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization, I1, I2, I3) error)
						return &caller6x1[context.Context, []typex.Window, typex.BundleFinalization, I1, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization, I1, I2, I3) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization, a3 I1, a4 I2, a5 I3) error {
							return fn.(startBundle6x1[context.Context, []typex.Window, typex.BundleFinalization, I1, I2, I3, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1, I2, I3, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1, I2, I3) error)
						return &caller6x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1, I2, I3) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization, a3 I1, a4 I2, a5 I3) error {
							return fn.(startBundle6x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1, I2, I3, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2, I3, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2, I3) error)
						return &caller6x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2, I3) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.BundleFinalization, a4 I2, a5 I3) error {
							return fn.(startBundle6x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2, I3, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[typex.EventTime, typex.BundleFinalization, I0, I1, I2, I3, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization, I0, I1, I2, I3) error)
						return &caller6x1[typex.EventTime, typex.BundleFinalization, I0, I1, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization, I0, I1, I2, I3) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization, a2 I0, a3 I1, a4 I2, a5 I3) error {
							return fn.(startBundle6x1[typex.EventTime, typex.BundleFinalization, I0, I1, I2, I3, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[context.Context, typex.EventTime, typex.BundleFinalization, I1, I2, I3, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization, I1, I2, I3) error)
						return &caller6x1[context.Context, typex.EventTime, typex.BundleFinalization, I1, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization, I1, I2, I3) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I1, a4 I2, a5 I3) error {
							return fn.(startBundle6x1[context.Context, typex.EventTime, typex.BundleFinalization, I1, I2, I3, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1, I2, I3, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1, I2, I3) error)
						return &caller6x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1, I2, I3) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I1, a4 I2, a5 I3) error {
							return fn.(startBundle6x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1, I2, I3, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2, I3, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2, I3) error)
						return &caller6x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2, I3) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I2, a5 I3) error {
							return fn.(startBundle6x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2, I3, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2, I3, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2, I3) error)
						return &caller6x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2, I3) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I1, a4 I2, a5 I3) error {
							return fn.(startBundle6x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2, I3, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3) error)
						return &caller6x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I2, a5 I3) error {
							return fn.(startBundle6x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3) error)
						return &caller6x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I2, a5 I3) error {
							return fn.(startBundle6x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I3, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I3) error)
						return &caller6x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I3) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 typex.BundleFinalization, a5 I3) error {
							return fn.(startBundle6x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I3, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				}
			default:
				panic("Invalid signature for StartBundle")
			}

		case startBundleIn == 7:
			switch {
			case startBundleOut == 0:
				if _, ok := doFn.(startBundle7x0[context.Context, typex.PaneInfo, []typex.Window, I0, I1, I2, I3]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, I0, I1, I2, I3))
						return &caller7x0[context.Context, typex.PaneInfo, []typex.Window, I0, I1, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, I0, I1, I2, I3))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 I0, a4 I1, a5 I2, a6 I3) {
							fn.(startBundle7x0[context.Context, typex.PaneInfo, []typex.Window, I0, I1, I2, I3]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[context.Context, typex.PaneInfo, typex.EventTime, I0, I1, I2, I3]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, I0, I1, I2, I3))
						return &caller7x0[context.Context, typex.PaneInfo, typex.EventTime, I0, I1, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, I0, I1, I2, I3))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 I0, a4 I1, a5 I2, a6 I3) {
							fn.(startBundle7x0[context.Context, typex.PaneInfo, typex.EventTime, I0, I1, I2, I3]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[context.Context, []typex.Window, typex.EventTime, I0, I1, I2, I3]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, I0, I1, I2, I3))
						return &caller7x0[context.Context, []typex.Window, typex.EventTime, I0, I1, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, I0, I1, I2, I3))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 I0, a4 I1, a5 I2, a6 I3) {
							fn.(startBundle7x0[context.Context, []typex.Window, typex.EventTime, I0, I1, I2, I3]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[typex.PaneInfo, []typex.Window, typex.EventTime, I0, I1, I2, I3]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, I0, I1, I2, I3))
						return &caller7x0[typex.PaneInfo, []typex.Window, typex.EventTime, I0, I1, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, I0, I1, I2, I3))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 I0, a4 I1, a5 I2, a6 I3) {
							fn.(startBundle7x0[typex.PaneInfo, []typex.Window, typex.EventTime, I0, I1, I2, I3]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I1, I2, I3]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I1, I2, I3))
						return &caller7x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I1, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I1, I2, I3))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 I1, a5 I2, a6 I3) {
							fn.(startBundle7x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I1, I2, I3]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I0, I1, I2, I3]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization, I0, I1, I2, I3))
						return &caller7x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I0, I1, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization, I0, I1, I2, I3))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization, a3 I0, a4 I1, a5 I2, a6 I3) {
							fn.(startBundle7x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I0, I1, I2, I3]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[context.Context, []typex.Window, typex.BundleFinalization, I0, I1, I2, I3]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization, I0, I1, I2, I3))
						return &caller7x0[context.Context, []typex.Window, typex.BundleFinalization, I0, I1, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization, I0, I1, I2, I3))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization, a3 I0, a4 I1, a5 I2, a6 I3) {
							fn.(startBundle7x0[context.Context, []typex.Window, typex.BundleFinalization, I0, I1, I2, I3]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0, I1, I2, I3]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0, I1, I2, I3))
						return &caller7x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0, I1, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0, I1, I2, I3))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization, a3 I0, a4 I1, a5 I2, a6 I3) {
							fn.(startBundle7x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0, I1, I2, I3]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1, I2, I3]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1, I2, I3))
						return &caller7x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1, I2, I3))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.BundleFinalization, a4 I1, a5 I2, a6 I3) {
							fn.(startBundle7x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1, I2, I3]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[context.Context, typex.EventTime, typex.BundleFinalization, I0, I1, I2, I3]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization, I0, I1, I2, I3))
						return &caller7x0[context.Context, typex.EventTime, typex.BundleFinalization, I0, I1, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization, I0, I1, I2, I3))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I0, a4 I1, a5 I2, a6 I3) {
							fn.(startBundle7x0[context.Context, typex.EventTime, typex.BundleFinalization, I0, I1, I2, I3]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0, I1, I2, I3]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0, I1, I2, I3))
						return &caller7x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0, I1, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0, I1, I2, I3))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I0, a4 I1, a5 I2, a6 I3) {
							fn.(startBundle7x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0, I1, I2, I3]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1, I2, I3]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1, I2, I3))
						return &caller7x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1, I2, I3))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I1, a5 I2, a6 I3) {
							fn.(startBundle7x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1, I2, I3]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1, I2, I3]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1, I2, I3))
						return &caller7x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1, I2, I3))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I0, a4 I1, a5 I2, a6 I3) {
							fn.(startBundle7x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1, I2, I3]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2, I3]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2, I3))
						return &caller7x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2, I3))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I1, a5 I2, a6 I3) {
							fn.(startBundle7x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2, I3]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2, I3]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2, I3))
						return &caller7x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2, I3))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I1, a5 I2, a6 I3) {
							fn.(startBundle7x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2, I3]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3))
						return &caller7x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 typex.BundleFinalization, a5 I2, a6 I3) {
							fn.(startBundle7x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				}
			case startBundleOut == 1:
				if _, ok := doFn.(startBundle7x1[context.Context, typex.PaneInfo, []typex.Window, I0, I1, I2, I3, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, I0, I1, I2, I3) error)
						return &caller7x1[context.Context, typex.PaneInfo, []typex.Window, I0, I1, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, I0, I1, I2, I3) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 I0, a4 I1, a5 I2, a6 I3) error {
							return fn.(startBundle7x1[context.Context, typex.PaneInfo, []typex.Window, I0, I1, I2, I3, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[context.Context, typex.PaneInfo, typex.EventTime, I0, I1, I2, I3, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, I0, I1, I2, I3) error)
						return &caller7x1[context.Context, typex.PaneInfo, typex.EventTime, I0, I1, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, I0, I1, I2, I3) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 I0, a4 I1, a5 I2, a6 I3) error {
							return fn.(startBundle7x1[context.Context, typex.PaneInfo, typex.EventTime, I0, I1, I2, I3, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[context.Context, []typex.Window, typex.EventTime, I0, I1, I2, I3, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, I0, I1, I2, I3) error)
						return &caller7x1[context.Context, []typex.Window, typex.EventTime, I0, I1, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, I0, I1, I2, I3) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 I0, a4 I1, a5 I2, a6 I3) error {
							return fn.(startBundle7x1[context.Context, []typex.Window, typex.EventTime, I0, I1, I2, I3, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[typex.PaneInfo, []typex.Window, typex.EventTime, I0, I1, I2, I3, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, I0, I1, I2, I3) error)
						return &caller7x1[typex.PaneInfo, []typex.Window, typex.EventTime, I0, I1, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, I0, I1, I2, I3) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 I0, a4 I1, a5 I2, a6 I3) error {
							return fn.(startBundle7x1[typex.PaneInfo, []typex.Window, typex.EventTime, I0, I1, I2, I3, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I1, I2, I3, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I1, I2, I3) error)
						return &caller7x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I1, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I1, I2, I3) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 I1, a5 I2, a6 I3) error {
							return fn.(startBundle7x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I1, I2, I3, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I0, I1, I2, I3, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization, I0, I1, I2, I3) error)
						return &caller7x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I0, I1, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization, I0, I1, I2, I3) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization, a3 I0, a4 I1, a5 I2, a6 I3) error {
							return fn.(startBundle7x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I0, I1, I2, I3, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[context.Context, []typex.Window, typex.BundleFinalization, I0, I1, I2, I3, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization, I0, I1, I2, I3) error)
						return &caller7x1[context.Context, []typex.Window, typex.BundleFinalization, I0, I1, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization, I0, I1, I2, I3) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization, a3 I0, a4 I1, a5 I2, a6 I3) error {
							return fn.(startBundle7x1[context.Context, []typex.Window, typex.BundleFinalization, I0, I1, I2, I3, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0, I1, I2, I3, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0, I1, I2, I3) error)
						return &caller7x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0, I1, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0, I1, I2, I3) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization, a3 I0, a4 I1, a5 I2, a6 I3) error {
							return fn.(startBundle7x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0, I1, I2, I3, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1, I2, I3, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1, I2, I3) error)
						return &caller7x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1, I2, I3) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.BundleFinalization, a4 I1, a5 I2, a6 I3) error {
							return fn.(startBundle7x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1, I2, I3, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[context.Context, typex.EventTime, typex.BundleFinalization, I0, I1, I2, I3, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization, I0, I1, I2, I3) error)
						return &caller7x1[context.Context, typex.EventTime, typex.BundleFinalization, I0, I1, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization, I0, I1, I2, I3) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I0, a4 I1, a5 I2, a6 I3) error {
							return fn.(startBundle7x1[context.Context, typex.EventTime, typex.BundleFinalization, I0, I1, I2, I3, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0, I1, I2, I3, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0, I1, I2, I3) error)
						return &caller7x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0, I1, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0, I1, I2, I3) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I0, a4 I1, a5 I2, a6 I3) error {
							return fn.(startBundle7x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0, I1, I2, I3, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1, I2, I3, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1, I2, I3) error)
						return &caller7x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1, I2, I3) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I1, a5 I2, a6 I3) error {
							return fn.(startBundle7x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1, I2, I3, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1, I2, I3, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1, I2, I3) error)
						return &caller7x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1, I2, I3) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I0, a4 I1, a5 I2, a6 I3) error {
							return fn.(startBundle7x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1, I2, I3, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2, I3, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2, I3) error)
						return &caller7x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2, I3) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I1, a5 I2, a6 I3) error {
							return fn.(startBundle7x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2, I3, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2, I3, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2, I3) error)
						return &caller7x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2, I3) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I1, a5 I2, a6 I3) error {
							return fn.(startBundle7x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2, I3, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3) error)
						return &caller7x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 typex.BundleFinalization, a5 I2, a6 I3) error {
							return fn.(startBundle7x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				}
			default:
				panic("Invalid signature for StartBundle")
			}

		default:
			panic("Invalid signature for StartBundle")
		}
	}
	return nil
}

func buildStartBundleWrapper5[I0, I1, I2, I3, I4 any](doFn interface{}) func(interface{}) reflectx.Func {
	startBundleIn := -1
	startBundleOut := -1
	startBundleMethod := reflect.ValueOf(doFn).MethodByName("StartBundle")
	if startBundleMethod.IsValid() {
		startBundleIn = startBundleMethod.Type().NumIn()
		startBundleOut = startBundleMethod.Type().NumOut()
		switch {

		case startBundleIn == 0:
			switch {
			case startBundleOut == 0:
				if _, ok := doFn.(startBundle0x0); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func())
						return &caller0x0{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func())(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func() { fn.(startBundle0x0).StartBundle() })
					}
				}
			case startBundleOut == 1:
				if _, ok := doFn.(startBundle0x1[error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func() error)
						return &caller0x1[error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func() error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func() error { return fn.(startBundle0x1[error]).StartBundle() })
					}
				}
			default:
				panic("Invalid signature for StartBundle")
			}

		case startBundleIn == 1:
			switch {
			case startBundleOut == 0:
				if _, ok := doFn.(startBundle1x0[I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I4))
						return &caller1x0[I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I4) { fn.(startBundle1x0[I4]).StartBundle(a0) })
					}
				} else if _, ok := doFn.(startBundle1x0[context.Context]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context))
						return &caller1x0[context.Context]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context) { fn.(startBundle1x0[context.Context]).StartBundle(a0) })
					}
				} else if _, ok := doFn.(startBundle1x0[typex.PaneInfo]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo))
						return &caller1x0[typex.PaneInfo]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo) { fn.(startBundle1x0[typex.PaneInfo]).StartBundle(a0) })
					}
				} else if _, ok := doFn.(startBundle1x0[[]typex.Window]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window))
						return &caller1x0[[]typex.Window]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window) { fn.(startBundle1x0[[]typex.Window]).StartBundle(a0) })
					}
				} else if _, ok := doFn.(startBundle1x0[typex.EventTime]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime))
						return &caller1x0[typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime) { fn.(startBundle1x0[typex.EventTime]).StartBundle(a0) })
					}
				} else if _, ok := doFn.(startBundle1x0[typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization))
						return &caller1x0[typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization) { fn.(startBundle1x0[typex.BundleFinalization]).StartBundle(a0) })
					}
				}
			case startBundleOut == 1:
				if _, ok := doFn.(startBundle1x1[I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I4) error)
						return &caller1x1[I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I4) error { return fn.(startBundle1x1[I4, error]).StartBundle(a0) })
					}
				} else if _, ok := doFn.(startBundle1x1[context.Context, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context) error)
						return &caller1x1[context.Context, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context) error { return fn.(startBundle1x1[context.Context, error]).StartBundle(a0) })
					}
				} else if _, ok := doFn.(startBundle1x1[typex.PaneInfo, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo) error)
						return &caller1x1[typex.PaneInfo, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo) error { return fn.(startBundle1x1[typex.PaneInfo, error]).StartBundle(a0) })
					}
				} else if _, ok := doFn.(startBundle1x1[[]typex.Window, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window) error)
						return &caller1x1[[]typex.Window, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window) error { return fn.(startBundle1x1[[]typex.Window, error]).StartBundle(a0) })
					}
				} else if _, ok := doFn.(startBundle1x1[typex.EventTime, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime) error)
						return &caller1x1[typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime) error { return fn.(startBundle1x1[typex.EventTime, error]).StartBundle(a0) })
					}
				} else if _, ok := doFn.(startBundle1x1[typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization) error)
						return &caller1x1[typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization) error {
							return fn.(startBundle1x1[typex.BundleFinalization, error]).StartBundle(a0)
						})
					}
				}
			default:
				panic("Invalid signature for StartBundle")
			}

		case startBundleIn == 2:
			switch {
			case startBundleOut == 0:
				if _, ok := doFn.(startBundle2x0[I3, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I3, I4))
						return &caller2x0[I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I3, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I3, a1 I4) { fn.(startBundle2x0[I3, I4]).StartBundle(a0, a1) })
					}
				} else if _, ok := doFn.(startBundle2x0[context.Context, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, I4))
						return &caller2x0[context.Context, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 I4) { fn.(startBundle2x0[context.Context, I4]).StartBundle(a0, a1) })
					}
				} else if _, ok := doFn.(startBundle2x0[typex.PaneInfo, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, I4))
						return &caller2x0[typex.PaneInfo, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 I4) { fn.(startBundle2x0[typex.PaneInfo, I4]).StartBundle(a0, a1) })
					}
				} else if _, ok := doFn.(startBundle2x0[context.Context, typex.PaneInfo]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo))
						return &caller2x0[context.Context, typex.PaneInfo]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo) {
							fn.(startBundle2x0[context.Context, typex.PaneInfo]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x0[[]typex.Window, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, I4))
						return &caller2x0[[]typex.Window, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 I4) { fn.(startBundle2x0[[]typex.Window, I4]).StartBundle(a0, a1) })
					}
				} else if _, ok := doFn.(startBundle2x0[context.Context, []typex.Window]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window))
						return &caller2x0[context.Context, []typex.Window]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window) {
							fn.(startBundle2x0[context.Context, []typex.Window]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x0[typex.PaneInfo, []typex.Window]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window))
						return &caller2x0[typex.PaneInfo, []typex.Window]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window) {
							fn.(startBundle2x0[typex.PaneInfo, []typex.Window]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x0[typex.EventTime, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, I4))
						return &caller2x0[typex.EventTime, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 I4) { fn.(startBundle2x0[typex.EventTime, I4]).StartBundle(a0, a1) })
					}
				} else if _, ok := doFn.(startBundle2x0[context.Context, typex.EventTime]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime))
						return &caller2x0[context.Context, typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime) {
							fn.(startBundle2x0[context.Context, typex.EventTime]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x0[typex.PaneInfo, typex.EventTime]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime))
						return &caller2x0[typex.PaneInfo, typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime) {
							fn.(startBundle2x0[typex.PaneInfo, typex.EventTime]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x0[[]typex.Window, typex.EventTime]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime))
						return &caller2x0[[]typex.Window, typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime) {
							fn.(startBundle2x0[[]typex.Window, typex.EventTime]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x0[typex.BundleFinalization, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization, I4))
						return &caller2x0[typex.BundleFinalization, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization, a1 I4) {
							fn.(startBundle2x0[typex.BundleFinalization, I4]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x0[context.Context, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization))
						return &caller2x0[context.Context, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization) {
							fn.(startBundle2x0[context.Context, typex.BundleFinalization]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x0[typex.PaneInfo, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization))
						return &caller2x0[typex.PaneInfo, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization) {
							fn.(startBundle2x0[typex.PaneInfo, typex.BundleFinalization]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x0[[]typex.Window, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization))
						return &caller2x0[[]typex.Window, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization) {
							fn.(startBundle2x0[[]typex.Window, typex.BundleFinalization]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x0[typex.EventTime, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization))
						return &caller2x0[typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization) {
							fn.(startBundle2x0[typex.EventTime, typex.BundleFinalization]).StartBundle(a0, a1)
						})
					}
				}
			case startBundleOut == 1:
				if _, ok := doFn.(startBundle2x1[I3, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I3, I4) error)
						return &caller2x1[I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I3, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I3, a1 I4) error { return fn.(startBundle2x1[I3, I4, error]).StartBundle(a0, a1) })
					}
				} else if _, ok := doFn.(startBundle2x1[context.Context, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, I4) error)
						return &caller2x1[context.Context, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 I4) error {
							return fn.(startBundle2x1[context.Context, I4, error]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x1[typex.PaneInfo, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, I4) error)
						return &caller2x1[typex.PaneInfo, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 I4) error {
							return fn.(startBundle2x1[typex.PaneInfo, I4, error]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x1[context.Context, typex.PaneInfo, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo) error)
						return &caller2x1[context.Context, typex.PaneInfo, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo) error {
							return fn.(startBundle2x1[context.Context, typex.PaneInfo, error]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x1[[]typex.Window, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, I4) error)
						return &caller2x1[[]typex.Window, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 I4) error {
							return fn.(startBundle2x1[[]typex.Window, I4, error]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x1[context.Context, []typex.Window, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window) error)
						return &caller2x1[context.Context, []typex.Window, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window) error {
							return fn.(startBundle2x1[context.Context, []typex.Window, error]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x1[typex.PaneInfo, []typex.Window, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window) error)
						return &caller2x1[typex.PaneInfo, []typex.Window, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window) error {
							return fn.(startBundle2x1[typex.PaneInfo, []typex.Window, error]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x1[typex.EventTime, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, I4) error)
						return &caller2x1[typex.EventTime, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 I4) error {
							return fn.(startBundle2x1[typex.EventTime, I4, error]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x1[context.Context, typex.EventTime, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime) error)
						return &caller2x1[context.Context, typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime) error {
							return fn.(startBundle2x1[context.Context, typex.EventTime, error]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x1[typex.PaneInfo, typex.EventTime, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime) error)
						return &caller2x1[typex.PaneInfo, typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime) error {
							return fn.(startBundle2x1[typex.PaneInfo, typex.EventTime, error]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x1[[]typex.Window, typex.EventTime, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime) error)
						return &caller2x1[[]typex.Window, typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime) error {
							return fn.(startBundle2x1[[]typex.Window, typex.EventTime, error]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x1[typex.BundleFinalization, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization, I4) error)
						return &caller2x1[typex.BundleFinalization, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization, a1 I4) error {
							return fn.(startBundle2x1[typex.BundleFinalization, I4, error]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x1[context.Context, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization) error)
						return &caller2x1[context.Context, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization) error {
							return fn.(startBundle2x1[context.Context, typex.BundleFinalization, error]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x1[typex.PaneInfo, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization) error)
						return &caller2x1[typex.PaneInfo, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization) error {
							return fn.(startBundle2x1[typex.PaneInfo, typex.BundleFinalization, error]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x1[[]typex.Window, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization) error)
						return &caller2x1[[]typex.Window, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization) error {
							return fn.(startBundle2x1[[]typex.Window, typex.BundleFinalization, error]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x1[typex.EventTime, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization) error)
						return &caller2x1[typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization) error {
							return fn.(startBundle2x1[typex.EventTime, typex.BundleFinalization, error]).StartBundle(a0, a1)
						})
					}
				}
			default:
				panic("Invalid signature for StartBundle")
			}

		case startBundleIn == 3:
			switch {
			case startBundleOut == 0:
				if _, ok := doFn.(startBundle3x0[I2, I3, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I2, I3, I4))
						return &caller3x0[I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I2, I3, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I2, a1 I3, a2 I4) { fn.(startBundle3x0[I2, I3, I4]).StartBundle(a0, a1, a2) })
					}
				} else if _, ok := doFn.(startBundle3x0[context.Context, I3, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, I3, I4))
						return &caller3x0[context.Context, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, I3, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 I3, a2 I4) {
							fn.(startBundle3x0[context.Context, I3, I4]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[typex.PaneInfo, I3, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, I3, I4))
						return &caller3x0[typex.PaneInfo, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, I3, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 I3, a2 I4) {
							fn.(startBundle3x0[typex.PaneInfo, I3, I4]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[context.Context, typex.PaneInfo, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, I4))
						return &caller3x0[context.Context, typex.PaneInfo, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 I4) {
							fn.(startBundle3x0[context.Context, typex.PaneInfo, I4]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[[]typex.Window, I3, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, I3, I4))
						return &caller3x0[[]typex.Window, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, I3, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 I3, a2 I4) {
							fn.(startBundle3x0[[]typex.Window, I3, I4]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[context.Context, []typex.Window, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, I4))
						return &caller3x0[context.Context, []typex.Window, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 I4) {
							fn.(startBundle3x0[context.Context, []typex.Window, I4]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[typex.PaneInfo, []typex.Window, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, I4))
						return &caller3x0[typex.PaneInfo, []typex.Window, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 I4) {
							fn.(startBundle3x0[typex.PaneInfo, []typex.Window, I4]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[context.Context, typex.PaneInfo, []typex.Window]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window))
						return &caller3x0[context.Context, typex.PaneInfo, []typex.Window]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window) {
							fn.(startBundle3x0[context.Context, typex.PaneInfo, []typex.Window]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[typex.EventTime, I3, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, I3, I4))
						return &caller3x0[typex.EventTime, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, I3, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 I3, a2 I4) {
							fn.(startBundle3x0[typex.EventTime, I3, I4]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[context.Context, typex.EventTime, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, I4))
						return &caller3x0[context.Context, typex.EventTime, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 I4) {
							fn.(startBundle3x0[context.Context, typex.EventTime, I4]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[typex.PaneInfo, typex.EventTime, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, I4))
						return &caller3x0[typex.PaneInfo, typex.EventTime, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 I4) {
							fn.(startBundle3x0[typex.PaneInfo, typex.EventTime, I4]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[context.Context, typex.PaneInfo, typex.EventTime]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime))
						return &caller3x0[context.Context, typex.PaneInfo, typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime) {
							fn.(startBundle3x0[context.Context, typex.PaneInfo, typex.EventTime]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[[]typex.Window, typex.EventTime, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, I4))
						return &caller3x0[[]typex.Window, typex.EventTime, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 I4) {
							fn.(startBundle3x0[[]typex.Window, typex.EventTime, I4]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[context.Context, []typex.Window, typex.EventTime]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime))
						return &caller3x0[context.Context, []typex.Window, typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime) {
							fn.(startBundle3x0[context.Context, []typex.Window, typex.EventTime]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[typex.PaneInfo, []typex.Window, typex.EventTime]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime))
						return &caller3x0[typex.PaneInfo, []typex.Window, typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime) {
							fn.(startBundle3x0[typex.PaneInfo, []typex.Window, typex.EventTime]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[typex.BundleFinalization, I3, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization, I3, I4))
						return &caller3x0[typex.BundleFinalization, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization, I3, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization, a1 I3, a2 I4) {
							fn.(startBundle3x0[typex.BundleFinalization, I3, I4]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[context.Context, typex.BundleFinalization, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization, I4))
						return &caller3x0[context.Context, typex.BundleFinalization, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization, a2 I4) {
							fn.(startBundle3x0[context.Context, typex.BundleFinalization, I4]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[typex.PaneInfo, typex.BundleFinalization, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization, I4))
						return &caller3x0[typex.PaneInfo, typex.BundleFinalization, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization, a2 I4) {
							fn.(startBundle3x0[typex.PaneInfo, typex.BundleFinalization, I4]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[context.Context, typex.PaneInfo, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization))
						return &caller3x0[context.Context, typex.PaneInfo, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization) {
							fn.(startBundle3x0[context.Context, typex.PaneInfo, typex.BundleFinalization]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[[]typex.Window, typex.BundleFinalization, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization, I4))
						return &caller3x0[[]typex.Window, typex.BundleFinalization, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization, a2 I4) {
							fn.(startBundle3x0[[]typex.Window, typex.BundleFinalization, I4]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[context.Context, []typex.Window, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization))
						return &caller3x0[context.Context, []typex.Window, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization) {
							fn.(startBundle3x0[context.Context, []typex.Window, typex.BundleFinalization]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization))
						return &caller3x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization) {
							fn.(startBundle3x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[typex.EventTime, typex.BundleFinalization, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization, I4))
						return &caller3x0[typex.EventTime, typex.BundleFinalization, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization, a2 I4) {
							fn.(startBundle3x0[typex.EventTime, typex.BundleFinalization, I4]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[context.Context, typex.EventTime, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization))
						return &caller3x0[context.Context, typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization) {
							fn.(startBundle3x0[context.Context, typex.EventTime, typex.BundleFinalization]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization))
						return &caller3x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization) {
							fn.(startBundle3x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[[]typex.Window, typex.EventTime, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization))
						return &caller3x0[[]typex.Window, typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization) {
							fn.(startBundle3x0[[]typex.Window, typex.EventTime, typex.BundleFinalization]).StartBundle(a0, a1, a2)
						})
					}
				}
			case startBundleOut == 1:
				if _, ok := doFn.(startBundle3x1[I2, I3, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I2, I3, I4) error)
						return &caller3x1[I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I2, I3, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I2, a1 I3, a2 I4) error { return fn.(startBundle3x1[I2, I3, I4, error]).StartBundle(a0, a1, a2) })
					}
				} else if _, ok := doFn.(startBundle3x1[context.Context, I3, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, I3, I4) error)
						return &caller3x1[context.Context, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, I3, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 I3, a2 I4) error {
							return fn.(startBundle3x1[context.Context, I3, I4, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[typex.PaneInfo, I3, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, I3, I4) error)
						return &caller3x1[typex.PaneInfo, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, I3, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 I3, a2 I4) error {
							return fn.(startBundle3x1[typex.PaneInfo, I3, I4, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[context.Context, typex.PaneInfo, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, I4) error)
						return &caller3x1[context.Context, typex.PaneInfo, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 I4) error {
							return fn.(startBundle3x1[context.Context, typex.PaneInfo, I4, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[[]typex.Window, I3, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, I3, I4) error)
						return &caller3x1[[]typex.Window, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, I3, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 I3, a2 I4) error {
							return fn.(startBundle3x1[[]typex.Window, I3, I4, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[context.Context, []typex.Window, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, I4) error)
						return &caller3x1[context.Context, []typex.Window, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 I4) error {
							return fn.(startBundle3x1[context.Context, []typex.Window, I4, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[typex.PaneInfo, []typex.Window, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, I4) error)
						return &caller3x1[typex.PaneInfo, []typex.Window, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 I4) error {
							return fn.(startBundle3x1[typex.PaneInfo, []typex.Window, I4, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[context.Context, typex.PaneInfo, []typex.Window, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window) error)
						return &caller3x1[context.Context, typex.PaneInfo, []typex.Window, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window) error {
							return fn.(startBundle3x1[context.Context, typex.PaneInfo, []typex.Window, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[typex.EventTime, I3, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, I3, I4) error)
						return &caller3x1[typex.EventTime, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, I3, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 I3, a2 I4) error {
							return fn.(startBundle3x1[typex.EventTime, I3, I4, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[context.Context, typex.EventTime, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, I4) error)
						return &caller3x1[context.Context, typex.EventTime, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 I4) error {
							return fn.(startBundle3x1[context.Context, typex.EventTime, I4, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[typex.PaneInfo, typex.EventTime, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, I4) error)
						return &caller3x1[typex.PaneInfo, typex.EventTime, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 I4) error {
							return fn.(startBundle3x1[typex.PaneInfo, typex.EventTime, I4, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[context.Context, typex.PaneInfo, typex.EventTime, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime) error)
						return &caller3x1[context.Context, typex.PaneInfo, typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime) error {
							return fn.(startBundle3x1[context.Context, typex.PaneInfo, typex.EventTime, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[[]typex.Window, typex.EventTime, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, I4) error)
						return &caller3x1[[]typex.Window, typex.EventTime, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 I4) error {
							return fn.(startBundle3x1[[]typex.Window, typex.EventTime, I4, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[context.Context, []typex.Window, typex.EventTime, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime) error)
						return &caller3x1[context.Context, []typex.Window, typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime) error {
							return fn.(startBundle3x1[context.Context, []typex.Window, typex.EventTime, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[typex.PaneInfo, []typex.Window, typex.EventTime, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime) error)
						return &caller3x1[typex.PaneInfo, []typex.Window, typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime) error {
							return fn.(startBundle3x1[typex.PaneInfo, []typex.Window, typex.EventTime, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[typex.BundleFinalization, I3, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization, I3, I4) error)
						return &caller3x1[typex.BundleFinalization, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization, I3, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization, a1 I3, a2 I4) error {
							return fn.(startBundle3x1[typex.BundleFinalization, I3, I4, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[context.Context, typex.BundleFinalization, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization, I4) error)
						return &caller3x1[context.Context, typex.BundleFinalization, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization, a2 I4) error {
							return fn.(startBundle3x1[context.Context, typex.BundleFinalization, I4, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[typex.PaneInfo, typex.BundleFinalization, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization, I4) error)
						return &caller3x1[typex.PaneInfo, typex.BundleFinalization, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization, a2 I4) error {
							return fn.(startBundle3x1[typex.PaneInfo, typex.BundleFinalization, I4, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[context.Context, typex.PaneInfo, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization) error)
						return &caller3x1[context.Context, typex.PaneInfo, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization) error {
							return fn.(startBundle3x1[context.Context, typex.PaneInfo, typex.BundleFinalization, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[[]typex.Window, typex.BundleFinalization, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization, I4) error)
						return &caller3x1[[]typex.Window, typex.BundleFinalization, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization, a2 I4) error {
							return fn.(startBundle3x1[[]typex.Window, typex.BundleFinalization, I4, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[context.Context, []typex.Window, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization) error)
						return &caller3x1[context.Context, []typex.Window, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization) error {
							return fn.(startBundle3x1[context.Context, []typex.Window, typex.BundleFinalization, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization) error)
						return &caller3x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization) error {
							return fn.(startBundle3x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[typex.EventTime, typex.BundleFinalization, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization, I4) error)
						return &caller3x1[typex.EventTime, typex.BundleFinalization, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization, a2 I4) error {
							return fn.(startBundle3x1[typex.EventTime, typex.BundleFinalization, I4, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[context.Context, typex.EventTime, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization) error)
						return &caller3x1[context.Context, typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization) error {
							return fn.(startBundle3x1[context.Context, typex.EventTime, typex.BundleFinalization, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization) error)
						return &caller3x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization) error {
							return fn.(startBundle3x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization) error)
						return &caller3x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization) error {
							return fn.(startBundle3x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, error]).StartBundle(a0, a1, a2)
						})
					}
				}
			default:
				panic("Invalid signature for StartBundle")
			}

		case startBundleIn == 4:
			switch {
			case startBundleOut == 0:
				if _, ok := doFn.(startBundle4x0[I1, I2, I3, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I1, I2, I3, I4))
						return &caller4x0[I1, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I1, I2, I3, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I1, a1 I2, a2 I3, a3 I4) { fn.(startBundle4x0[I1, I2, I3, I4]).StartBundle(a0, a1, a2, a3) })
					}
				} else if _, ok := doFn.(startBundle4x0[context.Context, I2, I3, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, I2, I3, I4))
						return &caller4x0[context.Context, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, I2, I3, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 I2, a2 I3, a3 I4) {
							fn.(startBundle4x0[context.Context, I2, I3, I4]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[typex.PaneInfo, I2, I3, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, I2, I3, I4))
						return &caller4x0[typex.PaneInfo, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, I2, I3, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 I2, a2 I3, a3 I4) {
							fn.(startBundle4x0[typex.PaneInfo, I2, I3, I4]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[context.Context, typex.PaneInfo, I3, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, I3, I4))
						return &caller4x0[context.Context, typex.PaneInfo, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, I3, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 I3, a3 I4) {
							fn.(startBundle4x0[context.Context, typex.PaneInfo, I3, I4]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[[]typex.Window, I2, I3, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, I2, I3, I4))
						return &caller4x0[[]typex.Window, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, I2, I3, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 I2, a2 I3, a3 I4) {
							fn.(startBundle4x0[[]typex.Window, I2, I3, I4]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[context.Context, []typex.Window, I3, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, I3, I4))
						return &caller4x0[context.Context, []typex.Window, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, I3, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 I3, a3 I4) {
							fn.(startBundle4x0[context.Context, []typex.Window, I3, I4]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[typex.PaneInfo, []typex.Window, I3, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, I3, I4))
						return &caller4x0[typex.PaneInfo, []typex.Window, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, I3, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 I3, a3 I4) {
							fn.(startBundle4x0[typex.PaneInfo, []typex.Window, I3, I4]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[context.Context, typex.PaneInfo, []typex.Window, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, I4))
						return &caller4x0[context.Context, typex.PaneInfo, []typex.Window, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 I4) {
							fn.(startBundle4x0[context.Context, typex.PaneInfo, []typex.Window, I4]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[typex.EventTime, I2, I3, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, I2, I3, I4))
						return &caller4x0[typex.EventTime, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, I2, I3, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 I2, a2 I3, a3 I4) {
							fn.(startBundle4x0[typex.EventTime, I2, I3, I4]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[context.Context, typex.EventTime, I3, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, I3, I4))
						return &caller4x0[context.Context, typex.EventTime, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, I3, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 I3, a3 I4) {
							fn.(startBundle4x0[context.Context, typex.EventTime, I3, I4]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[typex.PaneInfo, typex.EventTime, I3, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, I3, I4))
						return &caller4x0[typex.PaneInfo, typex.EventTime, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, I3, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 I3, a3 I4) {
							fn.(startBundle4x0[typex.PaneInfo, typex.EventTime, I3, I4]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[context.Context, typex.PaneInfo, typex.EventTime, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, I4))
						return &caller4x0[context.Context, typex.PaneInfo, typex.EventTime, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 I4) {
							fn.(startBundle4x0[context.Context, typex.PaneInfo, typex.EventTime, I4]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[[]typex.Window, typex.EventTime, I3, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, I3, I4))
						return &caller4x0[[]typex.Window, typex.EventTime, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, I3, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 I3, a3 I4) {
							fn.(startBundle4x0[[]typex.Window, typex.EventTime, I3, I4]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[context.Context, []typex.Window, typex.EventTime, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, I4))
						return &caller4x0[context.Context, []typex.Window, typex.EventTime, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 I4) {
							fn.(startBundle4x0[context.Context, []typex.Window, typex.EventTime, I4]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[typex.PaneInfo, []typex.Window, typex.EventTime, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, I4))
						return &caller4x0[typex.PaneInfo, []typex.Window, typex.EventTime, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 I4) {
							fn.(startBundle4x0[typex.PaneInfo, []typex.Window, typex.EventTime, I4]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime))
						return &caller4x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime) {
							fn.(startBundle4x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[typex.BundleFinalization, I2, I3, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization, I2, I3, I4))
						return &caller4x0[typex.BundleFinalization, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization, I2, I3, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization, a1 I2, a2 I3, a3 I4) {
							fn.(startBundle4x0[typex.BundleFinalization, I2, I3, I4]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[context.Context, typex.BundleFinalization, I3, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization, I3, I4))
						return &caller4x0[context.Context, typex.BundleFinalization, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization, I3, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization, a2 I3, a3 I4) {
							fn.(startBundle4x0[context.Context, typex.BundleFinalization, I3, I4]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[typex.PaneInfo, typex.BundleFinalization, I3, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization, I3, I4))
						return &caller4x0[typex.PaneInfo, typex.BundleFinalization, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization, I3, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization, a2 I3, a3 I4) {
							fn.(startBundle4x0[typex.PaneInfo, typex.BundleFinalization, I3, I4]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization, I4))
						return &caller4x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization, a3 I4) {
							fn.(startBundle4x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I4]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[[]typex.Window, typex.BundleFinalization, I3, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization, I3, I4))
						return &caller4x0[[]typex.Window, typex.BundleFinalization, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization, I3, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization, a2 I3, a3 I4) {
							fn.(startBundle4x0[[]typex.Window, typex.BundleFinalization, I3, I4]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[context.Context, []typex.Window, typex.BundleFinalization, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization, I4))
						return &caller4x0[context.Context, []typex.Window, typex.BundleFinalization, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization, a3 I4) {
							fn.(startBundle4x0[context.Context, []typex.Window, typex.BundleFinalization, I4]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4))
						return &caller4x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization, a3 I4) {
							fn.(startBundle4x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization))
						return &caller4x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.BundleFinalization) {
							fn.(startBundle4x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[typex.EventTime, typex.BundleFinalization, I3, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization, I3, I4))
						return &caller4x0[typex.EventTime, typex.BundleFinalization, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization, I3, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization, a2 I3, a3 I4) {
							fn.(startBundle4x0[typex.EventTime, typex.BundleFinalization, I3, I4]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[context.Context, typex.EventTime, typex.BundleFinalization, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization, I4))
						return &caller4x0[context.Context, typex.EventTime, typex.BundleFinalization, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I4) {
							fn.(startBundle4x0[context.Context, typex.EventTime, typex.BundleFinalization, I4]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4))
						return &caller4x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I4) {
							fn.(startBundle4x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization))
						return &caller4x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 typex.BundleFinalization) {
							fn.(startBundle4x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization, I4))
						return &caller4x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I4) {
							fn.(startBundle4x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I4]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization))
						return &caller4x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization) {
							fn.(startBundle4x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization))
						return &caller4x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization) {
							fn.(startBundle4x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization]).StartBundle(a0, a1, a2, a3)
						})
					}
				}
			case startBundleOut == 1:
				if _, ok := doFn.(startBundle4x1[I1, I2, I3, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I1, I2, I3, I4) error)
						return &caller4x1[I1, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I1, I2, I3, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I1, a1 I2, a2 I3, a3 I4) error {
							return fn.(startBundle4x1[I1, I2, I3, I4, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[context.Context, I2, I3, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, I2, I3, I4) error)
						return &caller4x1[context.Context, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, I2, I3, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 I2, a2 I3, a3 I4) error {
							return fn.(startBundle4x1[context.Context, I2, I3, I4, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[typex.PaneInfo, I2, I3, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, I2, I3, I4) error)
						return &caller4x1[typex.PaneInfo, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, I2, I3, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 I2, a2 I3, a3 I4) error {
							return fn.(startBundle4x1[typex.PaneInfo, I2, I3, I4, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[context.Context, typex.PaneInfo, I3, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, I3, I4) error)
						return &caller4x1[context.Context, typex.PaneInfo, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, I3, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 I3, a3 I4) error {
							return fn.(startBundle4x1[context.Context, typex.PaneInfo, I3, I4, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[[]typex.Window, I2, I3, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, I2, I3, I4) error)
						return &caller4x1[[]typex.Window, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, I2, I3, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 I2, a2 I3, a3 I4) error {
							return fn.(startBundle4x1[[]typex.Window, I2, I3, I4, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[context.Context, []typex.Window, I3, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, I3, I4) error)
						return &caller4x1[context.Context, []typex.Window, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, I3, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 I3, a3 I4) error {
							return fn.(startBundle4x1[context.Context, []typex.Window, I3, I4, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[typex.PaneInfo, []typex.Window, I3, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, I3, I4) error)
						return &caller4x1[typex.PaneInfo, []typex.Window, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, I3, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 I3, a3 I4) error {
							return fn.(startBundle4x1[typex.PaneInfo, []typex.Window, I3, I4, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[context.Context, typex.PaneInfo, []typex.Window, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, I4) error)
						return &caller4x1[context.Context, typex.PaneInfo, []typex.Window, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 I4) error {
							return fn.(startBundle4x1[context.Context, typex.PaneInfo, []typex.Window, I4, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[typex.EventTime, I2, I3, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, I2, I3, I4) error)
						return &caller4x1[typex.EventTime, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, I2, I3, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 I2, a2 I3, a3 I4) error {
							return fn.(startBundle4x1[typex.EventTime, I2, I3, I4, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[context.Context, typex.EventTime, I3, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, I3, I4) error)
						return &caller4x1[context.Context, typex.EventTime, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, I3, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 I3, a3 I4) error {
							return fn.(startBundle4x1[context.Context, typex.EventTime, I3, I4, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[typex.PaneInfo, typex.EventTime, I3, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, I3, I4) error)
						return &caller4x1[typex.PaneInfo, typex.EventTime, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, I3, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 I3, a3 I4) error {
							return fn.(startBundle4x1[typex.PaneInfo, typex.EventTime, I3, I4, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[context.Context, typex.PaneInfo, typex.EventTime, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, I4) error)
						return &caller4x1[context.Context, typex.PaneInfo, typex.EventTime, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 I4) error {
							return fn.(startBundle4x1[context.Context, typex.PaneInfo, typex.EventTime, I4, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[[]typex.Window, typex.EventTime, I3, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, I3, I4) error)
						return &caller4x1[[]typex.Window, typex.EventTime, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, I3, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 I3, a3 I4) error {
							return fn.(startBundle4x1[[]typex.Window, typex.EventTime, I3, I4, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[context.Context, []typex.Window, typex.EventTime, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, I4) error)
						return &caller4x1[context.Context, []typex.Window, typex.EventTime, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 I4) error {
							return fn.(startBundle4x1[context.Context, []typex.Window, typex.EventTime, I4, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[typex.PaneInfo, []typex.Window, typex.EventTime, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, I4) error)
						return &caller4x1[typex.PaneInfo, []typex.Window, typex.EventTime, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 I4) error {
							return fn.(startBundle4x1[typex.PaneInfo, []typex.Window, typex.EventTime, I4, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime) error)
						return &caller4x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime) error {
							return fn.(startBundle4x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[typex.BundleFinalization, I2, I3, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization, I2, I3, I4) error)
						return &caller4x1[typex.BundleFinalization, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization, I2, I3, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization, a1 I2, a2 I3, a3 I4) error {
							return fn.(startBundle4x1[typex.BundleFinalization, I2, I3, I4, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[context.Context, typex.BundleFinalization, I3, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization, I3, I4) error)
						return &caller4x1[context.Context, typex.BundleFinalization, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization, I3, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization, a2 I3, a3 I4) error {
							return fn.(startBundle4x1[context.Context, typex.BundleFinalization, I3, I4, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[typex.PaneInfo, typex.BundleFinalization, I3, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization, I3, I4) error)
						return &caller4x1[typex.PaneInfo, typex.BundleFinalization, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization, I3, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization, a2 I3, a3 I4) error {
							return fn.(startBundle4x1[typex.PaneInfo, typex.BundleFinalization, I3, I4, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization, I4) error)
						return &caller4x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization, a3 I4) error {
							return fn.(startBundle4x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I4, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[[]typex.Window, typex.BundleFinalization, I3, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization, I3, I4) error)
						return &caller4x1[[]typex.Window, typex.BundleFinalization, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization, I3, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization, a2 I3, a3 I4) error {
							return fn.(startBundle4x1[[]typex.Window, typex.BundleFinalization, I3, I4, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[context.Context, []typex.Window, typex.BundleFinalization, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization, I4) error)
						return &caller4x1[context.Context, []typex.Window, typex.BundleFinalization, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization, a3 I4) error {
							return fn.(startBundle4x1[context.Context, []typex.Window, typex.BundleFinalization, I4, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4) error)
						return &caller4x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization, a3 I4) error {
							return fn.(startBundle4x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization) error)
						return &caller4x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.BundleFinalization) error {
							return fn.(startBundle4x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[typex.EventTime, typex.BundleFinalization, I3, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization, I3, I4) error)
						return &caller4x1[typex.EventTime, typex.BundleFinalization, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization, I3, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization, a2 I3, a3 I4) error {
							return fn.(startBundle4x1[typex.EventTime, typex.BundleFinalization, I3, I4, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[context.Context, typex.EventTime, typex.BundleFinalization, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization, I4) error)
						return &caller4x1[context.Context, typex.EventTime, typex.BundleFinalization, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I4) error {
							return fn.(startBundle4x1[context.Context, typex.EventTime, typex.BundleFinalization, I4, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4) error)
						return &caller4x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I4) error {
							return fn.(startBundle4x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization) error)
						return &caller4x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 typex.BundleFinalization) error {
							return fn.(startBundle4x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization, I4) error)
						return &caller4x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I4) error {
							return fn.(startBundle4x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I4, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization) error)
						return &caller4x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization) error {
							return fn.(startBundle4x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization) error)
						return &caller4x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization) error {
							return fn.(startBundle4x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				}
			default:
				panic("Invalid signature for StartBundle")
			}

		case startBundleIn == 5:
			switch {
			case startBundleOut == 0:
				if _, ok := doFn.(startBundle5x0[I0, I1, I2, I3, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I0, I1, I2, I3, I4))
						return &caller5x0[I0, I1, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I0, I1, I2, I3, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I0, a1 I1, a2 I2, a3 I3, a4 I4) {
							fn.(startBundle5x0[I0, I1, I2, I3, I4]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[context.Context, I1, I2, I3, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, I1, I2, I3, I4))
						return &caller5x0[context.Context, I1, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, I1, I2, I3, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 I1, a2 I2, a3 I3, a4 I4) {
							fn.(startBundle5x0[context.Context, I1, I2, I3, I4]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[typex.PaneInfo, I1, I2, I3, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, I1, I2, I3, I4))
						return &caller5x0[typex.PaneInfo, I1, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, I1, I2, I3, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 I1, a2 I2, a3 I3, a4 I4) {
							fn.(startBundle5x0[typex.PaneInfo, I1, I2, I3, I4]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[context.Context, typex.PaneInfo, I2, I3, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, I2, I3, I4))
						return &caller5x0[context.Context, typex.PaneInfo, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, I2, I3, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 I2, a3 I3, a4 I4) {
							fn.(startBundle5x0[context.Context, typex.PaneInfo, I2, I3, I4]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[[]typex.Window, I1, I2, I3, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, I1, I2, I3, I4))
						return &caller5x0[[]typex.Window, I1, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, I1, I2, I3, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 I1, a2 I2, a3 I3, a4 I4) {
							fn.(startBundle5x0[[]typex.Window, I1, I2, I3, I4]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[context.Context, []typex.Window, I2, I3, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, I2, I3, I4))
						return &caller5x0[context.Context, []typex.Window, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, I2, I3, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 I2, a3 I3, a4 I4) {
							fn.(startBundle5x0[context.Context, []typex.Window, I2, I3, I4]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[typex.PaneInfo, []typex.Window, I2, I3, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, I2, I3, I4))
						return &caller5x0[typex.PaneInfo, []typex.Window, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, I2, I3, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 I2, a3 I3, a4 I4) {
							fn.(startBundle5x0[typex.PaneInfo, []typex.Window, I2, I3, I4]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[context.Context, typex.PaneInfo, []typex.Window, I3, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, I3, I4))
						return &caller5x0[context.Context, typex.PaneInfo, []typex.Window, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, I3, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 I3, a4 I4) {
							fn.(startBundle5x0[context.Context, typex.PaneInfo, []typex.Window, I3, I4]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[typex.EventTime, I1, I2, I3, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, I1, I2, I3, I4))
						return &caller5x0[typex.EventTime, I1, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, I1, I2, I3, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 I1, a2 I2, a3 I3, a4 I4) {
							fn.(startBundle5x0[typex.EventTime, I1, I2, I3, I4]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[context.Context, typex.EventTime, I2, I3, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, I2, I3, I4))
						return &caller5x0[context.Context, typex.EventTime, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, I2, I3, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 I2, a3 I3, a4 I4) {
							fn.(startBundle5x0[context.Context, typex.EventTime, I2, I3, I4]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[typex.PaneInfo, typex.EventTime, I2, I3, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, I2, I3, I4))
						return &caller5x0[typex.PaneInfo, typex.EventTime, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, I2, I3, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 I2, a3 I3, a4 I4) {
							fn.(startBundle5x0[typex.PaneInfo, typex.EventTime, I2, I3, I4]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[context.Context, typex.PaneInfo, typex.EventTime, I3, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, I3, I4))
						return &caller5x0[context.Context, typex.PaneInfo, typex.EventTime, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, I3, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 I3, a4 I4) {
							fn.(startBundle5x0[context.Context, typex.PaneInfo, typex.EventTime, I3, I4]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[[]typex.Window, typex.EventTime, I2, I3, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, I2, I3, I4))
						return &caller5x0[[]typex.Window, typex.EventTime, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, I2, I3, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 I2, a3 I3, a4 I4) {
							fn.(startBundle5x0[[]typex.Window, typex.EventTime, I2, I3, I4]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[context.Context, []typex.Window, typex.EventTime, I3, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, I3, I4))
						return &caller5x0[context.Context, []typex.Window, typex.EventTime, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, I3, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 I3, a4 I4) {
							fn.(startBundle5x0[context.Context, []typex.Window, typex.EventTime, I3, I4]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[typex.PaneInfo, []typex.Window, typex.EventTime, I3, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, I3, I4))
						return &caller5x0[typex.PaneInfo, []typex.Window, typex.EventTime, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, I3, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 I3, a4 I4) {
							fn.(startBundle5x0[typex.PaneInfo, []typex.Window, typex.EventTime, I3, I4]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I4))
						return &caller5x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 I4) {
							fn.(startBundle5x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I4]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[typex.BundleFinalization, I1, I2, I3, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization, I1, I2, I3, I4))
						return &caller5x0[typex.BundleFinalization, I1, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization, I1, I2, I3, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization, a1 I1, a2 I2, a3 I3, a4 I4) {
							fn.(startBundle5x0[typex.BundleFinalization, I1, I2, I3, I4]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[context.Context, typex.BundleFinalization, I2, I3, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization, I2, I3, I4))
						return &caller5x0[context.Context, typex.BundleFinalization, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization, I2, I3, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization, a2 I2, a3 I3, a4 I4) {
							fn.(startBundle5x0[context.Context, typex.BundleFinalization, I2, I3, I4]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[typex.PaneInfo, typex.BundleFinalization, I2, I3, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization, I2, I3, I4))
						return &caller5x0[typex.PaneInfo, typex.BundleFinalization, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization, I2, I3, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization, a2 I2, a3 I3, a4 I4) {
							fn.(startBundle5x0[typex.PaneInfo, typex.BundleFinalization, I2, I3, I4]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I3, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization, I3, I4))
						return &caller5x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization, I3, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization, a3 I3, a4 I4) {
							fn.(startBundle5x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I3, I4]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[[]typex.Window, typex.BundleFinalization, I2, I3, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization, I2, I3, I4))
						return &caller5x0[[]typex.Window, typex.BundleFinalization, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization, I2, I3, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization, a2 I2, a3 I3, a4 I4) {
							fn.(startBundle5x0[[]typex.Window, typex.BundleFinalization, I2, I3, I4]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[context.Context, []typex.Window, typex.BundleFinalization, I3, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization, I3, I4))
						return &caller5x0[context.Context, []typex.Window, typex.BundleFinalization, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization, I3, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization, a3 I3, a4 I4) {
							fn.(startBundle5x0[context.Context, []typex.Window, typex.BundleFinalization, I3, I4]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3, I4))
						return &caller5x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization, a3 I3, a4 I4) {
							fn.(startBundle5x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3, I4]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4))
						return &caller5x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.BundleFinalization, a4 I4) {
							fn.(startBundle5x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[typex.EventTime, typex.BundleFinalization, I2, I3, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization, I2, I3, I4))
						return &caller5x0[typex.EventTime, typex.BundleFinalization, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization, I2, I3, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization, a2 I2, a3 I3, a4 I4) {
							fn.(startBundle5x0[typex.EventTime, typex.BundleFinalization, I2, I3, I4]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[context.Context, typex.EventTime, typex.BundleFinalization, I3, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization, I3, I4))
						return &caller5x0[context.Context, typex.EventTime, typex.BundleFinalization, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization, I3, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I3, a4 I4) {
							fn.(startBundle5x0[context.Context, typex.EventTime, typex.BundleFinalization, I3, I4]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3, I4))
						return &caller5x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I3, a4 I4) {
							fn.(startBundle5x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3, I4]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4))
						return &caller5x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I4) {
							fn.(startBundle5x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4))
						return &caller5x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I3, a4 I4) {
							fn.(startBundle5x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I4))
						return &caller5x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I4) {
							fn.(startBundle5x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I4]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I4))
						return &caller5x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I4) {
							fn.(startBundle5x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I4]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization))
						return &caller5x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 typex.BundleFinalization) {
							fn.(startBundle5x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				}
			case startBundleOut == 1:
				if _, ok := doFn.(startBundle5x1[I0, I1, I2, I3, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I0, I1, I2, I3, I4) error)
						return &caller5x1[I0, I1, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I0, I1, I2, I3, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I0, a1 I1, a2 I2, a3 I3, a4 I4) error {
							return fn.(startBundle5x1[I0, I1, I2, I3, I4, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[context.Context, I1, I2, I3, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, I1, I2, I3, I4) error)
						return &caller5x1[context.Context, I1, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, I1, I2, I3, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 I1, a2 I2, a3 I3, a4 I4) error {
							return fn.(startBundle5x1[context.Context, I1, I2, I3, I4, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[typex.PaneInfo, I1, I2, I3, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, I1, I2, I3, I4) error)
						return &caller5x1[typex.PaneInfo, I1, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, I1, I2, I3, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 I1, a2 I2, a3 I3, a4 I4) error {
							return fn.(startBundle5x1[typex.PaneInfo, I1, I2, I3, I4, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[context.Context, typex.PaneInfo, I2, I3, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, I2, I3, I4) error)
						return &caller5x1[context.Context, typex.PaneInfo, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, I2, I3, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 I2, a3 I3, a4 I4) error {
							return fn.(startBundle5x1[context.Context, typex.PaneInfo, I2, I3, I4, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[[]typex.Window, I1, I2, I3, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, I1, I2, I3, I4) error)
						return &caller5x1[[]typex.Window, I1, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, I1, I2, I3, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 I1, a2 I2, a3 I3, a4 I4) error {
							return fn.(startBundle5x1[[]typex.Window, I1, I2, I3, I4, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[context.Context, []typex.Window, I2, I3, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, I2, I3, I4) error)
						return &caller5x1[context.Context, []typex.Window, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, I2, I3, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 I2, a3 I3, a4 I4) error {
							return fn.(startBundle5x1[context.Context, []typex.Window, I2, I3, I4, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[typex.PaneInfo, []typex.Window, I2, I3, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, I2, I3, I4) error)
						return &caller5x1[typex.PaneInfo, []typex.Window, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, I2, I3, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 I2, a3 I3, a4 I4) error {
							return fn.(startBundle5x1[typex.PaneInfo, []typex.Window, I2, I3, I4, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[context.Context, typex.PaneInfo, []typex.Window, I3, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, I3, I4) error)
						return &caller5x1[context.Context, typex.PaneInfo, []typex.Window, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, I3, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 I3, a4 I4) error {
							return fn.(startBundle5x1[context.Context, typex.PaneInfo, []typex.Window, I3, I4, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[typex.EventTime, I1, I2, I3, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, I1, I2, I3, I4) error)
						return &caller5x1[typex.EventTime, I1, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, I1, I2, I3, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 I1, a2 I2, a3 I3, a4 I4) error {
							return fn.(startBundle5x1[typex.EventTime, I1, I2, I3, I4, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[context.Context, typex.EventTime, I2, I3, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, I2, I3, I4) error)
						return &caller5x1[context.Context, typex.EventTime, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, I2, I3, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 I2, a3 I3, a4 I4) error {
							return fn.(startBundle5x1[context.Context, typex.EventTime, I2, I3, I4, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[typex.PaneInfo, typex.EventTime, I2, I3, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, I2, I3, I4) error)
						return &caller5x1[typex.PaneInfo, typex.EventTime, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, I2, I3, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 I2, a3 I3, a4 I4) error {
							return fn.(startBundle5x1[typex.PaneInfo, typex.EventTime, I2, I3, I4, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[context.Context, typex.PaneInfo, typex.EventTime, I3, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, I3, I4) error)
						return &caller5x1[context.Context, typex.PaneInfo, typex.EventTime, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, I3, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 I3, a4 I4) error {
							return fn.(startBundle5x1[context.Context, typex.PaneInfo, typex.EventTime, I3, I4, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[[]typex.Window, typex.EventTime, I2, I3, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, I2, I3, I4) error)
						return &caller5x1[[]typex.Window, typex.EventTime, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, I2, I3, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 I2, a3 I3, a4 I4) error {
							return fn.(startBundle5x1[[]typex.Window, typex.EventTime, I2, I3, I4, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[context.Context, []typex.Window, typex.EventTime, I3, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, I3, I4) error)
						return &caller5x1[context.Context, []typex.Window, typex.EventTime, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, I3, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 I3, a4 I4) error {
							return fn.(startBundle5x1[context.Context, []typex.Window, typex.EventTime, I3, I4, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[typex.PaneInfo, []typex.Window, typex.EventTime, I3, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, I3, I4) error)
						return &caller5x1[typex.PaneInfo, []typex.Window, typex.EventTime, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, I3, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 I3, a4 I4) error {
							return fn.(startBundle5x1[typex.PaneInfo, []typex.Window, typex.EventTime, I3, I4, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I4) error)
						return &caller5x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 I4) error {
							return fn.(startBundle5x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I4, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[typex.BundleFinalization, I1, I2, I3, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization, I1, I2, I3, I4) error)
						return &caller5x1[typex.BundleFinalization, I1, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization, I1, I2, I3, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization, a1 I1, a2 I2, a3 I3, a4 I4) error {
							return fn.(startBundle5x1[typex.BundleFinalization, I1, I2, I3, I4, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[context.Context, typex.BundleFinalization, I2, I3, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization, I2, I3, I4) error)
						return &caller5x1[context.Context, typex.BundleFinalization, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization, I2, I3, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization, a2 I2, a3 I3, a4 I4) error {
							return fn.(startBundle5x1[context.Context, typex.BundleFinalization, I2, I3, I4, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[typex.PaneInfo, typex.BundleFinalization, I2, I3, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization, I2, I3, I4) error)
						return &caller5x1[typex.PaneInfo, typex.BundleFinalization, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization, I2, I3, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization, a2 I2, a3 I3, a4 I4) error {
							return fn.(startBundle5x1[typex.PaneInfo, typex.BundleFinalization, I2, I3, I4, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I3, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization, I3, I4) error)
						return &caller5x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization, I3, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization, a3 I3, a4 I4) error {
							return fn.(startBundle5x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I3, I4, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[[]typex.Window, typex.BundleFinalization, I2, I3, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization, I2, I3, I4) error)
						return &caller5x1[[]typex.Window, typex.BundleFinalization, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization, I2, I3, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization, a2 I2, a3 I3, a4 I4) error {
							return fn.(startBundle5x1[[]typex.Window, typex.BundleFinalization, I2, I3, I4, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[context.Context, []typex.Window, typex.BundleFinalization, I3, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization, I3, I4) error)
						return &caller5x1[context.Context, []typex.Window, typex.BundleFinalization, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization, I3, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization, a3 I3, a4 I4) error {
							return fn.(startBundle5x1[context.Context, []typex.Window, typex.BundleFinalization, I3, I4, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3, I4) error)
						return &caller5x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization, a3 I3, a4 I4) error {
							return fn.(startBundle5x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3, I4, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4) error)
						return &caller5x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.BundleFinalization, a4 I4) error {
							return fn.(startBundle5x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[typex.EventTime, typex.BundleFinalization, I2, I3, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization, I2, I3, I4) error)
						return &caller5x1[typex.EventTime, typex.BundleFinalization, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization, I2, I3, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization, a2 I2, a3 I3, a4 I4) error {
							return fn.(startBundle5x1[typex.EventTime, typex.BundleFinalization, I2, I3, I4, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[context.Context, typex.EventTime, typex.BundleFinalization, I3, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization, I3, I4) error)
						return &caller5x1[context.Context, typex.EventTime, typex.BundleFinalization, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization, I3, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I3, a4 I4) error {
							return fn.(startBundle5x1[context.Context, typex.EventTime, typex.BundleFinalization, I3, I4, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3, I4) error)
						return &caller5x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I3, a4 I4) error {
							return fn.(startBundle5x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3, I4, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4) error)
						return &caller5x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I4) error {
							return fn.(startBundle5x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4) error)
						return &caller5x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I3, a4 I4) error {
							return fn.(startBundle5x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I4) error)
						return &caller5x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I4) error {
							return fn.(startBundle5x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I4, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I4) error)
						return &caller5x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I4) error {
							return fn.(startBundle5x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I4, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization) error)
						return &caller5x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 typex.BundleFinalization) error {
							return fn.(startBundle5x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				}
			default:
				panic("Invalid signature for StartBundle")
			}

		case startBundleIn == 6:
			switch {
			case startBundleOut == 0:
				if _, ok := doFn.(startBundle6x0[context.Context, I0, I1, I2, I3, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, I0, I1, I2, I3, I4))
						return &caller6x0[context.Context, I0, I1, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, I0, I1, I2, I3, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 I0, a2 I1, a3 I2, a4 I3, a5 I4) {
							fn.(startBundle6x0[context.Context, I0, I1, I2, I3, I4]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[typex.PaneInfo, I0, I1, I2, I3, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, I0, I1, I2, I3, I4))
						return &caller6x0[typex.PaneInfo, I0, I1, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, I0, I1, I2, I3, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 I0, a2 I1, a3 I2, a4 I3, a5 I4) {
							fn.(startBundle6x0[typex.PaneInfo, I0, I1, I2, I3, I4]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[context.Context, typex.PaneInfo, I1, I2, I3, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, I1, I2, I3, I4))
						return &caller6x0[context.Context, typex.PaneInfo, I1, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, I1, I2, I3, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 I1, a3 I2, a4 I3, a5 I4) {
							fn.(startBundle6x0[context.Context, typex.PaneInfo, I1, I2, I3, I4]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[[]typex.Window, I0, I1, I2, I3, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, I0, I1, I2, I3, I4))
						return &caller6x0[[]typex.Window, I0, I1, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, I0, I1, I2, I3, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 I0, a2 I1, a3 I2, a4 I3, a5 I4) {
							fn.(startBundle6x0[[]typex.Window, I0, I1, I2, I3, I4]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[context.Context, []typex.Window, I1, I2, I3, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, I1, I2, I3, I4))
						return &caller6x0[context.Context, []typex.Window, I1, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, I1, I2, I3, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 I1, a3 I2, a4 I3, a5 I4) {
							fn.(startBundle6x0[context.Context, []typex.Window, I1, I2, I3, I4]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[typex.PaneInfo, []typex.Window, I1, I2, I3, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, I1, I2, I3, I4))
						return &caller6x0[typex.PaneInfo, []typex.Window, I1, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, I1, I2, I3, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 I1, a3 I2, a4 I3, a5 I4) {
							fn.(startBundle6x0[typex.PaneInfo, []typex.Window, I1, I2, I3, I4]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[context.Context, typex.PaneInfo, []typex.Window, I2, I3, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, I2, I3, I4))
						return &caller6x0[context.Context, typex.PaneInfo, []typex.Window, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, I2, I3, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 I2, a4 I3, a5 I4) {
							fn.(startBundle6x0[context.Context, typex.PaneInfo, []typex.Window, I2, I3, I4]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[typex.EventTime, I0, I1, I2, I3, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, I0, I1, I2, I3, I4))
						return &caller6x0[typex.EventTime, I0, I1, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, I0, I1, I2, I3, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 I0, a2 I1, a3 I2, a4 I3, a5 I4) {
							fn.(startBundle6x0[typex.EventTime, I0, I1, I2, I3, I4]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[context.Context, typex.EventTime, I1, I2, I3, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, I1, I2, I3, I4))
						return &caller6x0[context.Context, typex.EventTime, I1, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, I1, I2, I3, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 I1, a3 I2, a4 I3, a5 I4) {
							fn.(startBundle6x0[context.Context, typex.EventTime, I1, I2, I3, I4]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[typex.PaneInfo, typex.EventTime, I1, I2, I3, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, I1, I2, I3, I4))
						return &caller6x0[typex.PaneInfo, typex.EventTime, I1, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, I1, I2, I3, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 I1, a3 I2, a4 I3, a5 I4) {
							fn.(startBundle6x0[typex.PaneInfo, typex.EventTime, I1, I2, I3, I4]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[context.Context, typex.PaneInfo, typex.EventTime, I2, I3, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, I2, I3, I4))
						return &caller6x0[context.Context, typex.PaneInfo, typex.EventTime, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, I2, I3, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 I2, a4 I3, a5 I4) {
							fn.(startBundle6x0[context.Context, typex.PaneInfo, typex.EventTime, I2, I3, I4]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[[]typex.Window, typex.EventTime, I1, I2, I3, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, I1, I2, I3, I4))
						return &caller6x0[[]typex.Window, typex.EventTime, I1, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, I1, I2, I3, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 I1, a3 I2, a4 I3, a5 I4) {
							fn.(startBundle6x0[[]typex.Window, typex.EventTime, I1, I2, I3, I4]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[context.Context, []typex.Window, typex.EventTime, I2, I3, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, I2, I3, I4))
						return &caller6x0[context.Context, []typex.Window, typex.EventTime, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, I2, I3, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 I2, a4 I3, a5 I4) {
							fn.(startBundle6x0[context.Context, []typex.Window, typex.EventTime, I2, I3, I4]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[typex.PaneInfo, []typex.Window, typex.EventTime, I2, I3, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, I2, I3, I4))
						return &caller6x0[typex.PaneInfo, []typex.Window, typex.EventTime, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, I2, I3, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 I2, a4 I3, a5 I4) {
							fn.(startBundle6x0[typex.PaneInfo, []typex.Window, typex.EventTime, I2, I3, I4]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I3, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I3, I4))
						return &caller6x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I3, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 I3, a5 I4) {
							fn.(startBundle6x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I3, I4]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[typex.BundleFinalization, I0, I1, I2, I3, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization, I0, I1, I2, I3, I4))
						return &caller6x0[typex.BundleFinalization, I0, I1, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization, I0, I1, I2, I3, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization, a1 I0, a2 I1, a3 I2, a4 I3, a5 I4) {
							fn.(startBundle6x0[typex.BundleFinalization, I0, I1, I2, I3, I4]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[context.Context, typex.BundleFinalization, I1, I2, I3, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization, I1, I2, I3, I4))
						return &caller6x0[context.Context, typex.BundleFinalization, I1, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization, I1, I2, I3, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization, a2 I1, a3 I2, a4 I3, a5 I4) {
							fn.(startBundle6x0[context.Context, typex.BundleFinalization, I1, I2, I3, I4]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[typex.PaneInfo, typex.BundleFinalization, I1, I2, I3, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization, I1, I2, I3, I4))
						return &caller6x0[typex.PaneInfo, typex.BundleFinalization, I1, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization, I1, I2, I3, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization, a2 I1, a3 I2, a4 I3, a5 I4) {
							fn.(startBundle6x0[typex.PaneInfo, typex.BundleFinalization, I1, I2, I3, I4]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I2, I3, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization, I2, I3, I4))
						return &caller6x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization, I2, I3, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization, a3 I2, a4 I3, a5 I4) {
							fn.(startBundle6x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I2, I3, I4]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[[]typex.Window, typex.BundleFinalization, I1, I2, I3, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization, I1, I2, I3, I4))
						return &caller6x0[[]typex.Window, typex.BundleFinalization, I1, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization, I1, I2, I3, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization, a2 I1, a3 I2, a4 I3, a5 I4) {
							fn.(startBundle6x0[[]typex.Window, typex.BundleFinalization, I1, I2, I3, I4]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[context.Context, []typex.Window, typex.BundleFinalization, I2, I3, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization, I2, I3, I4))
						return &caller6x0[context.Context, []typex.Window, typex.BundleFinalization, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization, I2, I3, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization, a3 I2, a4 I3, a5 I4) {
							fn.(startBundle6x0[context.Context, []typex.Window, typex.BundleFinalization, I2, I3, I4]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2, I3, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2, I3, I4))
						return &caller6x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2, I3, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization, a3 I2, a4 I3, a5 I4) {
							fn.(startBundle6x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2, I3, I4]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3, I4))
						return &caller6x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.BundleFinalization, a4 I3, a5 I4) {
							fn.(startBundle6x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3, I4]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[typex.EventTime, typex.BundleFinalization, I1, I2, I3, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization, I1, I2, I3, I4))
						return &caller6x0[typex.EventTime, typex.BundleFinalization, I1, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization, I1, I2, I3, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization, a2 I1, a3 I2, a4 I3, a5 I4) {
							fn.(startBundle6x0[typex.EventTime, typex.BundleFinalization, I1, I2, I3, I4]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[context.Context, typex.EventTime, typex.BundleFinalization, I2, I3, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization, I2, I3, I4))
						return &caller6x0[context.Context, typex.EventTime, typex.BundleFinalization, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization, I2, I3, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I2, a4 I3, a5 I4) {
							fn.(startBundle6x0[context.Context, typex.EventTime, typex.BundleFinalization, I2, I3, I4]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2, I3, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2, I3, I4))
						return &caller6x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2, I3, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I2, a4 I3, a5 I4) {
							fn.(startBundle6x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2, I3, I4]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3, I4))
						return &caller6x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I3, a5 I4) {
							fn.(startBundle6x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3, I4]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3, I4))
						return &caller6x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I2, a4 I3, a5 I4) {
							fn.(startBundle6x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3, I4]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4))
						return &caller6x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I3, a5 I4) {
							fn.(startBundle6x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4))
						return &caller6x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I3, a5 I4) {
							fn.(startBundle6x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I4))
						return &caller6x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 typex.BundleFinalization, a5 I4) {
							fn.(startBundle6x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I4]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				}
			case startBundleOut == 1:
				if _, ok := doFn.(startBundle6x1[context.Context, I0, I1, I2, I3, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, I0, I1, I2, I3, I4) error)
						return &caller6x1[context.Context, I0, I1, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, I0, I1, I2, I3, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 I0, a2 I1, a3 I2, a4 I3, a5 I4) error {
							return fn.(startBundle6x1[context.Context, I0, I1, I2, I3, I4, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[typex.PaneInfo, I0, I1, I2, I3, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, I0, I1, I2, I3, I4) error)
						return &caller6x1[typex.PaneInfo, I0, I1, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, I0, I1, I2, I3, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 I0, a2 I1, a3 I2, a4 I3, a5 I4) error {
							return fn.(startBundle6x1[typex.PaneInfo, I0, I1, I2, I3, I4, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[context.Context, typex.PaneInfo, I1, I2, I3, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, I1, I2, I3, I4) error)
						return &caller6x1[context.Context, typex.PaneInfo, I1, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, I1, I2, I3, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 I1, a3 I2, a4 I3, a5 I4) error {
							return fn.(startBundle6x1[context.Context, typex.PaneInfo, I1, I2, I3, I4, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[[]typex.Window, I0, I1, I2, I3, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, I0, I1, I2, I3, I4) error)
						return &caller6x1[[]typex.Window, I0, I1, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, I0, I1, I2, I3, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 I0, a2 I1, a3 I2, a4 I3, a5 I4) error {
							return fn.(startBundle6x1[[]typex.Window, I0, I1, I2, I3, I4, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[context.Context, []typex.Window, I1, I2, I3, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, I1, I2, I3, I4) error)
						return &caller6x1[context.Context, []typex.Window, I1, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, I1, I2, I3, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 I1, a3 I2, a4 I3, a5 I4) error {
							return fn.(startBundle6x1[context.Context, []typex.Window, I1, I2, I3, I4, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[typex.PaneInfo, []typex.Window, I1, I2, I3, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, I1, I2, I3, I4) error)
						return &caller6x1[typex.PaneInfo, []typex.Window, I1, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, I1, I2, I3, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 I1, a3 I2, a4 I3, a5 I4) error {
							return fn.(startBundle6x1[typex.PaneInfo, []typex.Window, I1, I2, I3, I4, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[context.Context, typex.PaneInfo, []typex.Window, I2, I3, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, I2, I3, I4) error)
						return &caller6x1[context.Context, typex.PaneInfo, []typex.Window, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, I2, I3, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 I2, a4 I3, a5 I4) error {
							return fn.(startBundle6x1[context.Context, typex.PaneInfo, []typex.Window, I2, I3, I4, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[typex.EventTime, I0, I1, I2, I3, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, I0, I1, I2, I3, I4) error)
						return &caller6x1[typex.EventTime, I0, I1, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, I0, I1, I2, I3, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 I0, a2 I1, a3 I2, a4 I3, a5 I4) error {
							return fn.(startBundle6x1[typex.EventTime, I0, I1, I2, I3, I4, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[context.Context, typex.EventTime, I1, I2, I3, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, I1, I2, I3, I4) error)
						return &caller6x1[context.Context, typex.EventTime, I1, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, I1, I2, I3, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 I1, a3 I2, a4 I3, a5 I4) error {
							return fn.(startBundle6x1[context.Context, typex.EventTime, I1, I2, I3, I4, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[typex.PaneInfo, typex.EventTime, I1, I2, I3, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, I1, I2, I3, I4) error)
						return &caller6x1[typex.PaneInfo, typex.EventTime, I1, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, I1, I2, I3, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 I1, a3 I2, a4 I3, a5 I4) error {
							return fn.(startBundle6x1[typex.PaneInfo, typex.EventTime, I1, I2, I3, I4, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[context.Context, typex.PaneInfo, typex.EventTime, I2, I3, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, I2, I3, I4) error)
						return &caller6x1[context.Context, typex.PaneInfo, typex.EventTime, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, I2, I3, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 I2, a4 I3, a5 I4) error {
							return fn.(startBundle6x1[context.Context, typex.PaneInfo, typex.EventTime, I2, I3, I4, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[[]typex.Window, typex.EventTime, I1, I2, I3, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, I1, I2, I3, I4) error)
						return &caller6x1[[]typex.Window, typex.EventTime, I1, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, I1, I2, I3, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 I1, a3 I2, a4 I3, a5 I4) error {
							return fn.(startBundle6x1[[]typex.Window, typex.EventTime, I1, I2, I3, I4, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[context.Context, []typex.Window, typex.EventTime, I2, I3, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, I2, I3, I4) error)
						return &caller6x1[context.Context, []typex.Window, typex.EventTime, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, I2, I3, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 I2, a4 I3, a5 I4) error {
							return fn.(startBundle6x1[context.Context, []typex.Window, typex.EventTime, I2, I3, I4, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[typex.PaneInfo, []typex.Window, typex.EventTime, I2, I3, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, I2, I3, I4) error)
						return &caller6x1[typex.PaneInfo, []typex.Window, typex.EventTime, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, I2, I3, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 I2, a4 I3, a5 I4) error {
							return fn.(startBundle6x1[typex.PaneInfo, []typex.Window, typex.EventTime, I2, I3, I4, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I3, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I3, I4) error)
						return &caller6x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I3, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 I3, a5 I4) error {
							return fn.(startBundle6x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I3, I4, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[typex.BundleFinalization, I0, I1, I2, I3, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization, I0, I1, I2, I3, I4) error)
						return &caller6x1[typex.BundleFinalization, I0, I1, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization, I0, I1, I2, I3, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization, a1 I0, a2 I1, a3 I2, a4 I3, a5 I4) error {
							return fn.(startBundle6x1[typex.BundleFinalization, I0, I1, I2, I3, I4, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[context.Context, typex.BundleFinalization, I1, I2, I3, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization, I1, I2, I3, I4) error)
						return &caller6x1[context.Context, typex.BundleFinalization, I1, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization, I1, I2, I3, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization, a2 I1, a3 I2, a4 I3, a5 I4) error {
							return fn.(startBundle6x1[context.Context, typex.BundleFinalization, I1, I2, I3, I4, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[typex.PaneInfo, typex.BundleFinalization, I1, I2, I3, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization, I1, I2, I3, I4) error)
						return &caller6x1[typex.PaneInfo, typex.BundleFinalization, I1, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization, I1, I2, I3, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization, a2 I1, a3 I2, a4 I3, a5 I4) error {
							return fn.(startBundle6x1[typex.PaneInfo, typex.BundleFinalization, I1, I2, I3, I4, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I2, I3, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization, I2, I3, I4) error)
						return &caller6x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization, I2, I3, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization, a3 I2, a4 I3, a5 I4) error {
							return fn.(startBundle6x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I2, I3, I4, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[[]typex.Window, typex.BundleFinalization, I1, I2, I3, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization, I1, I2, I3, I4) error)
						return &caller6x1[[]typex.Window, typex.BundleFinalization, I1, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization, I1, I2, I3, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization, a2 I1, a3 I2, a4 I3, a5 I4) error {
							return fn.(startBundle6x1[[]typex.Window, typex.BundleFinalization, I1, I2, I3, I4, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[context.Context, []typex.Window, typex.BundleFinalization, I2, I3, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization, I2, I3, I4) error)
						return &caller6x1[context.Context, []typex.Window, typex.BundleFinalization, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization, I2, I3, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization, a3 I2, a4 I3, a5 I4) error {
							return fn.(startBundle6x1[context.Context, []typex.Window, typex.BundleFinalization, I2, I3, I4, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2, I3, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2, I3, I4) error)
						return &caller6x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2, I3, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization, a3 I2, a4 I3, a5 I4) error {
							return fn.(startBundle6x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2, I3, I4, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3, I4) error)
						return &caller6x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.BundleFinalization, a4 I3, a5 I4) error {
							return fn.(startBundle6x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3, I4, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[typex.EventTime, typex.BundleFinalization, I1, I2, I3, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization, I1, I2, I3, I4) error)
						return &caller6x1[typex.EventTime, typex.BundleFinalization, I1, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization, I1, I2, I3, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization, a2 I1, a3 I2, a4 I3, a5 I4) error {
							return fn.(startBundle6x1[typex.EventTime, typex.BundleFinalization, I1, I2, I3, I4, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[context.Context, typex.EventTime, typex.BundleFinalization, I2, I3, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization, I2, I3, I4) error)
						return &caller6x1[context.Context, typex.EventTime, typex.BundleFinalization, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization, I2, I3, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I2, a4 I3, a5 I4) error {
							return fn.(startBundle6x1[context.Context, typex.EventTime, typex.BundleFinalization, I2, I3, I4, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2, I3, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2, I3, I4) error)
						return &caller6x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2, I3, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I2, a4 I3, a5 I4) error {
							return fn.(startBundle6x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2, I3, I4, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3, I4) error)
						return &caller6x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I3, a5 I4) error {
							return fn.(startBundle6x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3, I4, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3, I4) error)
						return &caller6x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I2, a4 I3, a5 I4) error {
							return fn.(startBundle6x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3, I4, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4) error)
						return &caller6x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I3, a5 I4) error {
							return fn.(startBundle6x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4) error)
						return &caller6x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I3, a5 I4) error {
							return fn.(startBundle6x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I4) error)
						return &caller6x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 typex.BundleFinalization, a5 I4) error {
							return fn.(startBundle6x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I4, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				}
			default:
				panic("Invalid signature for StartBundle")
			}

		case startBundleIn == 7:
			switch {
			case startBundleOut == 0:
				if _, ok := doFn.(startBundle7x0[context.Context, typex.PaneInfo, I0, I1, I2, I3, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, I0, I1, I2, I3, I4))
						return &caller7x0[context.Context, typex.PaneInfo, I0, I1, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, I0, I1, I2, I3, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 I0, a3 I1, a4 I2, a5 I3, a6 I4) {
							fn.(startBundle7x0[context.Context, typex.PaneInfo, I0, I1, I2, I3, I4]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[context.Context, []typex.Window, I0, I1, I2, I3, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, I0, I1, I2, I3, I4))
						return &caller7x0[context.Context, []typex.Window, I0, I1, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, I0, I1, I2, I3, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 I0, a3 I1, a4 I2, a5 I3, a6 I4) {
							fn.(startBundle7x0[context.Context, []typex.Window, I0, I1, I2, I3, I4]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[typex.PaneInfo, []typex.Window, I0, I1, I2, I3, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, I0, I1, I2, I3, I4))
						return &caller7x0[typex.PaneInfo, []typex.Window, I0, I1, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, I0, I1, I2, I3, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 I0, a3 I1, a4 I2, a5 I3, a6 I4) {
							fn.(startBundle7x0[typex.PaneInfo, []typex.Window, I0, I1, I2, I3, I4]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[context.Context, typex.PaneInfo, []typex.Window, I1, I2, I3, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, I1, I2, I3, I4))
						return &caller7x0[context.Context, typex.PaneInfo, []typex.Window, I1, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, I1, I2, I3, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 I1, a4 I2, a5 I3, a6 I4) {
							fn.(startBundle7x0[context.Context, typex.PaneInfo, []typex.Window, I1, I2, I3, I4]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[context.Context, typex.EventTime, I0, I1, I2, I3, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, I0, I1, I2, I3, I4))
						return &caller7x0[context.Context, typex.EventTime, I0, I1, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, I0, I1, I2, I3, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 I0, a3 I1, a4 I2, a5 I3, a6 I4) {
							fn.(startBundle7x0[context.Context, typex.EventTime, I0, I1, I2, I3, I4]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[typex.PaneInfo, typex.EventTime, I0, I1, I2, I3, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, I0, I1, I2, I3, I4))
						return &caller7x0[typex.PaneInfo, typex.EventTime, I0, I1, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, I0, I1, I2, I3, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 I0, a3 I1, a4 I2, a5 I3, a6 I4) {
							fn.(startBundle7x0[typex.PaneInfo, typex.EventTime, I0, I1, I2, I3, I4]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[context.Context, typex.PaneInfo, typex.EventTime, I1, I2, I3, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, I1, I2, I3, I4))
						return &caller7x0[context.Context, typex.PaneInfo, typex.EventTime, I1, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, I1, I2, I3, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 I1, a4 I2, a5 I3, a6 I4) {
							fn.(startBundle7x0[context.Context, typex.PaneInfo, typex.EventTime, I1, I2, I3, I4]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[[]typex.Window, typex.EventTime, I0, I1, I2, I3, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, I0, I1, I2, I3, I4))
						return &caller7x0[[]typex.Window, typex.EventTime, I0, I1, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, I0, I1, I2, I3, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 I0, a3 I1, a4 I2, a5 I3, a6 I4) {
							fn.(startBundle7x0[[]typex.Window, typex.EventTime, I0, I1, I2, I3, I4]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[context.Context, []typex.Window, typex.EventTime, I1, I2, I3, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, I1, I2, I3, I4))
						return &caller7x0[context.Context, []typex.Window, typex.EventTime, I1, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, I1, I2, I3, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 I1, a4 I2, a5 I3, a6 I4) {
							fn.(startBundle7x0[context.Context, []typex.Window, typex.EventTime, I1, I2, I3, I4]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[typex.PaneInfo, []typex.Window, typex.EventTime, I1, I2, I3, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, I1, I2, I3, I4))
						return &caller7x0[typex.PaneInfo, []typex.Window, typex.EventTime, I1, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, I1, I2, I3, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 I1, a4 I2, a5 I3, a6 I4) {
							fn.(startBundle7x0[typex.PaneInfo, []typex.Window, typex.EventTime, I1, I2, I3, I4]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I2, I3, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I2, I3, I4))
						return &caller7x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I2, I3, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 I2, a5 I3, a6 I4) {
							fn.(startBundle7x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I2, I3, I4]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[context.Context, typex.BundleFinalization, I0, I1, I2, I3, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization, I0, I1, I2, I3, I4))
						return &caller7x0[context.Context, typex.BundleFinalization, I0, I1, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization, I0, I1, I2, I3, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization, a2 I0, a3 I1, a4 I2, a5 I3, a6 I4) {
							fn.(startBundle7x0[context.Context, typex.BundleFinalization, I0, I1, I2, I3, I4]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[typex.PaneInfo, typex.BundleFinalization, I0, I1, I2, I3, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization, I0, I1, I2, I3, I4))
						return &caller7x0[typex.PaneInfo, typex.BundleFinalization, I0, I1, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization, I0, I1, I2, I3, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization, a2 I0, a3 I1, a4 I2, a5 I3, a6 I4) {
							fn.(startBundle7x0[typex.PaneInfo, typex.BundleFinalization, I0, I1, I2, I3, I4]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I1, I2, I3, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization, I1, I2, I3, I4))
						return &caller7x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I1, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization, I1, I2, I3, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization, a3 I1, a4 I2, a5 I3, a6 I4) {
							fn.(startBundle7x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I1, I2, I3, I4]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[[]typex.Window, typex.BundleFinalization, I0, I1, I2, I3, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization, I0, I1, I2, I3, I4))
						return &caller7x0[[]typex.Window, typex.BundleFinalization, I0, I1, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization, I0, I1, I2, I3, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization, a2 I0, a3 I1, a4 I2, a5 I3, a6 I4) {
							fn.(startBundle7x0[[]typex.Window, typex.BundleFinalization, I0, I1, I2, I3, I4]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[context.Context, []typex.Window, typex.BundleFinalization, I1, I2, I3, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization, I1, I2, I3, I4))
						return &caller7x0[context.Context, []typex.Window, typex.BundleFinalization, I1, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization, I1, I2, I3, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization, a3 I1, a4 I2, a5 I3, a6 I4) {
							fn.(startBundle7x0[context.Context, []typex.Window, typex.BundleFinalization, I1, I2, I3, I4]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1, I2, I3, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1, I2, I3, I4))
						return &caller7x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1, I2, I3, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization, a3 I1, a4 I2, a5 I3, a6 I4) {
							fn.(startBundle7x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1, I2, I3, I4]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2, I3, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2, I3, I4))
						return &caller7x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2, I3, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.BundleFinalization, a4 I2, a5 I3, a6 I4) {
							fn.(startBundle7x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2, I3, I4]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[typex.EventTime, typex.BundleFinalization, I0, I1, I2, I3, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization, I0, I1, I2, I3, I4))
						return &caller7x0[typex.EventTime, typex.BundleFinalization, I0, I1, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization, I0, I1, I2, I3, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization, a2 I0, a3 I1, a4 I2, a5 I3, a6 I4) {
							fn.(startBundle7x0[typex.EventTime, typex.BundleFinalization, I0, I1, I2, I3, I4]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[context.Context, typex.EventTime, typex.BundleFinalization, I1, I2, I3, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization, I1, I2, I3, I4))
						return &caller7x0[context.Context, typex.EventTime, typex.BundleFinalization, I1, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization, I1, I2, I3, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I1, a4 I2, a5 I3, a6 I4) {
							fn.(startBundle7x0[context.Context, typex.EventTime, typex.BundleFinalization, I1, I2, I3, I4]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1, I2, I3, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1, I2, I3, I4))
						return &caller7x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1, I2, I3, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I1, a4 I2, a5 I3, a6 I4) {
							fn.(startBundle7x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1, I2, I3, I4]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2, I3, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2, I3, I4))
						return &caller7x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2, I3, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I2, a5 I3, a6 I4) {
							fn.(startBundle7x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2, I3, I4]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2, I3, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2, I3, I4))
						return &caller7x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2, I3, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I1, a4 I2, a5 I3, a6 I4) {
							fn.(startBundle7x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2, I3, I4]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3, I4))
						return &caller7x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I2, a5 I3, a6 I4) {
							fn.(startBundle7x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3, I4]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3, I4))
						return &caller7x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I2, a5 I3, a6 I4) {
							fn.(startBundle7x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3, I4]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4))
						return &caller7x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 typex.BundleFinalization, a5 I3, a6 I4) {
							fn.(startBundle7x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				}
			case startBundleOut == 1:
				if _, ok := doFn.(startBundle7x1[context.Context, typex.PaneInfo, I0, I1, I2, I3, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, I0, I1, I2, I3, I4) error)
						return &caller7x1[context.Context, typex.PaneInfo, I0, I1, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, I0, I1, I2, I3, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 I0, a3 I1, a4 I2, a5 I3, a6 I4) error {
							return fn.(startBundle7x1[context.Context, typex.PaneInfo, I0, I1, I2, I3, I4, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[context.Context, []typex.Window, I0, I1, I2, I3, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, I0, I1, I2, I3, I4) error)
						return &caller7x1[context.Context, []typex.Window, I0, I1, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, I0, I1, I2, I3, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 I0, a3 I1, a4 I2, a5 I3, a6 I4) error {
							return fn.(startBundle7x1[context.Context, []typex.Window, I0, I1, I2, I3, I4, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[typex.PaneInfo, []typex.Window, I0, I1, I2, I3, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, I0, I1, I2, I3, I4) error)
						return &caller7x1[typex.PaneInfo, []typex.Window, I0, I1, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, I0, I1, I2, I3, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 I0, a3 I1, a4 I2, a5 I3, a6 I4) error {
							return fn.(startBundle7x1[typex.PaneInfo, []typex.Window, I0, I1, I2, I3, I4, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[context.Context, typex.PaneInfo, []typex.Window, I1, I2, I3, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, I1, I2, I3, I4) error)
						return &caller7x1[context.Context, typex.PaneInfo, []typex.Window, I1, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, I1, I2, I3, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 I1, a4 I2, a5 I3, a6 I4) error {
							return fn.(startBundle7x1[context.Context, typex.PaneInfo, []typex.Window, I1, I2, I3, I4, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[context.Context, typex.EventTime, I0, I1, I2, I3, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, I0, I1, I2, I3, I4) error)
						return &caller7x1[context.Context, typex.EventTime, I0, I1, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, I0, I1, I2, I3, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 I0, a3 I1, a4 I2, a5 I3, a6 I4) error {
							return fn.(startBundle7x1[context.Context, typex.EventTime, I0, I1, I2, I3, I4, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[typex.PaneInfo, typex.EventTime, I0, I1, I2, I3, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, I0, I1, I2, I3, I4) error)
						return &caller7x1[typex.PaneInfo, typex.EventTime, I0, I1, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, I0, I1, I2, I3, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 I0, a3 I1, a4 I2, a5 I3, a6 I4) error {
							return fn.(startBundle7x1[typex.PaneInfo, typex.EventTime, I0, I1, I2, I3, I4, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[context.Context, typex.PaneInfo, typex.EventTime, I1, I2, I3, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, I1, I2, I3, I4) error)
						return &caller7x1[context.Context, typex.PaneInfo, typex.EventTime, I1, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, I1, I2, I3, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 I1, a4 I2, a5 I3, a6 I4) error {
							return fn.(startBundle7x1[context.Context, typex.PaneInfo, typex.EventTime, I1, I2, I3, I4, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[[]typex.Window, typex.EventTime, I0, I1, I2, I3, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, I0, I1, I2, I3, I4) error)
						return &caller7x1[[]typex.Window, typex.EventTime, I0, I1, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, I0, I1, I2, I3, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 I0, a3 I1, a4 I2, a5 I3, a6 I4) error {
							return fn.(startBundle7x1[[]typex.Window, typex.EventTime, I0, I1, I2, I3, I4, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[context.Context, []typex.Window, typex.EventTime, I1, I2, I3, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, I1, I2, I3, I4) error)
						return &caller7x1[context.Context, []typex.Window, typex.EventTime, I1, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, I1, I2, I3, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 I1, a4 I2, a5 I3, a6 I4) error {
							return fn.(startBundle7x1[context.Context, []typex.Window, typex.EventTime, I1, I2, I3, I4, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[typex.PaneInfo, []typex.Window, typex.EventTime, I1, I2, I3, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, I1, I2, I3, I4) error)
						return &caller7x1[typex.PaneInfo, []typex.Window, typex.EventTime, I1, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, I1, I2, I3, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 I1, a4 I2, a5 I3, a6 I4) error {
							return fn.(startBundle7x1[typex.PaneInfo, []typex.Window, typex.EventTime, I1, I2, I3, I4, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I2, I3, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I2, I3, I4) error)
						return &caller7x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I2, I3, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 I2, a5 I3, a6 I4) error {
							return fn.(startBundle7x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I2, I3, I4, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[context.Context, typex.BundleFinalization, I0, I1, I2, I3, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization, I0, I1, I2, I3, I4) error)
						return &caller7x1[context.Context, typex.BundleFinalization, I0, I1, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization, I0, I1, I2, I3, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization, a2 I0, a3 I1, a4 I2, a5 I3, a6 I4) error {
							return fn.(startBundle7x1[context.Context, typex.BundleFinalization, I0, I1, I2, I3, I4, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[typex.PaneInfo, typex.BundleFinalization, I0, I1, I2, I3, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization, I0, I1, I2, I3, I4) error)
						return &caller7x1[typex.PaneInfo, typex.BundleFinalization, I0, I1, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization, I0, I1, I2, I3, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization, a2 I0, a3 I1, a4 I2, a5 I3, a6 I4) error {
							return fn.(startBundle7x1[typex.PaneInfo, typex.BundleFinalization, I0, I1, I2, I3, I4, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I1, I2, I3, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization, I1, I2, I3, I4) error)
						return &caller7x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I1, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization, I1, I2, I3, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization, a3 I1, a4 I2, a5 I3, a6 I4) error {
							return fn.(startBundle7x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I1, I2, I3, I4, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[[]typex.Window, typex.BundleFinalization, I0, I1, I2, I3, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization, I0, I1, I2, I3, I4) error)
						return &caller7x1[[]typex.Window, typex.BundleFinalization, I0, I1, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization, I0, I1, I2, I3, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization, a2 I0, a3 I1, a4 I2, a5 I3, a6 I4) error {
							return fn.(startBundle7x1[[]typex.Window, typex.BundleFinalization, I0, I1, I2, I3, I4, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[context.Context, []typex.Window, typex.BundleFinalization, I1, I2, I3, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization, I1, I2, I3, I4) error)
						return &caller7x1[context.Context, []typex.Window, typex.BundleFinalization, I1, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization, I1, I2, I3, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization, a3 I1, a4 I2, a5 I3, a6 I4) error {
							return fn.(startBundle7x1[context.Context, []typex.Window, typex.BundleFinalization, I1, I2, I3, I4, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1, I2, I3, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1, I2, I3, I4) error)
						return &caller7x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1, I2, I3, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization, a3 I1, a4 I2, a5 I3, a6 I4) error {
							return fn.(startBundle7x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1, I2, I3, I4, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2, I3, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2, I3, I4) error)
						return &caller7x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2, I3, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.BundleFinalization, a4 I2, a5 I3, a6 I4) error {
							return fn.(startBundle7x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2, I3, I4, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[typex.EventTime, typex.BundleFinalization, I0, I1, I2, I3, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization, I0, I1, I2, I3, I4) error)
						return &caller7x1[typex.EventTime, typex.BundleFinalization, I0, I1, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization, I0, I1, I2, I3, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization, a2 I0, a3 I1, a4 I2, a5 I3, a6 I4) error {
							return fn.(startBundle7x1[typex.EventTime, typex.BundleFinalization, I0, I1, I2, I3, I4, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[context.Context, typex.EventTime, typex.BundleFinalization, I1, I2, I3, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization, I1, I2, I3, I4) error)
						return &caller7x1[context.Context, typex.EventTime, typex.BundleFinalization, I1, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization, I1, I2, I3, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I1, a4 I2, a5 I3, a6 I4) error {
							return fn.(startBundle7x1[context.Context, typex.EventTime, typex.BundleFinalization, I1, I2, I3, I4, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1, I2, I3, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1, I2, I3, I4) error)
						return &caller7x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1, I2, I3, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I1, a4 I2, a5 I3, a6 I4) error {
							return fn.(startBundle7x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1, I2, I3, I4, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2, I3, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2, I3, I4) error)
						return &caller7x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2, I3, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I2, a5 I3, a6 I4) error {
							return fn.(startBundle7x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2, I3, I4, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2, I3, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2, I3, I4) error)
						return &caller7x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2, I3, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I1, a4 I2, a5 I3, a6 I4) error {
							return fn.(startBundle7x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2, I3, I4, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3, I4) error)
						return &caller7x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I2, a5 I3, a6 I4) error {
							return fn.(startBundle7x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3, I4, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3, I4) error)
						return &caller7x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I2, a5 I3, a6 I4) error {
							return fn.(startBundle7x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3, I4, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4) error)
						return &caller7x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 typex.BundleFinalization, a5 I3, a6 I4) error {
							return fn.(startBundle7x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				}
			default:
				panic("Invalid signature for StartBundle")
			}

		default:
			panic("Invalid signature for StartBundle")
		}
	}
	return nil
}

func buildStartBundleWrapper6[I0, I1, I2, I3, I4, I5 any](doFn interface{}) func(interface{}) reflectx.Func {
	startBundleIn := -1
	startBundleOut := -1
	startBundleMethod := reflect.ValueOf(doFn).MethodByName("StartBundle")
	if startBundleMethod.IsValid() {
		startBundleIn = startBundleMethod.Type().NumIn()
		startBundleOut = startBundleMethod.Type().NumOut()
		switch {

		case startBundleIn == 0:
			switch {
			case startBundleOut == 0:
				if _, ok := doFn.(startBundle0x0); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func())
						return &caller0x0{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func())(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func() { fn.(startBundle0x0).StartBundle() })
					}
				}
			case startBundleOut == 1:
				if _, ok := doFn.(startBundle0x1[error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func() error)
						return &caller0x1[error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func() error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func() error { return fn.(startBundle0x1[error]).StartBundle() })
					}
				}
			default:
				panic("Invalid signature for StartBundle")
			}

		case startBundleIn == 1:
			switch {
			case startBundleOut == 0:
				if _, ok := doFn.(startBundle1x0[I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I5))
						return &caller1x0[I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I5) { fn.(startBundle1x0[I5]).StartBundle(a0) })
					}
				} else if _, ok := doFn.(startBundle1x0[context.Context]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context))
						return &caller1x0[context.Context]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context) { fn.(startBundle1x0[context.Context]).StartBundle(a0) })
					}
				} else if _, ok := doFn.(startBundle1x0[typex.PaneInfo]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo))
						return &caller1x0[typex.PaneInfo]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo) { fn.(startBundle1x0[typex.PaneInfo]).StartBundle(a0) })
					}
				} else if _, ok := doFn.(startBundle1x0[[]typex.Window]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window))
						return &caller1x0[[]typex.Window]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window) { fn.(startBundle1x0[[]typex.Window]).StartBundle(a0) })
					}
				} else if _, ok := doFn.(startBundle1x0[typex.EventTime]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime))
						return &caller1x0[typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime) { fn.(startBundle1x0[typex.EventTime]).StartBundle(a0) })
					}
				} else if _, ok := doFn.(startBundle1x0[typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization))
						return &caller1x0[typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization) { fn.(startBundle1x0[typex.BundleFinalization]).StartBundle(a0) })
					}
				}
			case startBundleOut == 1:
				if _, ok := doFn.(startBundle1x1[I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I5) error)
						return &caller1x1[I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I5) error { return fn.(startBundle1x1[I5, error]).StartBundle(a0) })
					}
				} else if _, ok := doFn.(startBundle1x1[context.Context, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context) error)
						return &caller1x1[context.Context, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context) error { return fn.(startBundle1x1[context.Context, error]).StartBundle(a0) })
					}
				} else if _, ok := doFn.(startBundle1x1[typex.PaneInfo, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo) error)
						return &caller1x1[typex.PaneInfo, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo) error { return fn.(startBundle1x1[typex.PaneInfo, error]).StartBundle(a0) })
					}
				} else if _, ok := doFn.(startBundle1x1[[]typex.Window, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window) error)
						return &caller1x1[[]typex.Window, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window) error { return fn.(startBundle1x1[[]typex.Window, error]).StartBundle(a0) })
					}
				} else if _, ok := doFn.(startBundle1x1[typex.EventTime, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime) error)
						return &caller1x1[typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime) error { return fn.(startBundle1x1[typex.EventTime, error]).StartBundle(a0) })
					}
				} else if _, ok := doFn.(startBundle1x1[typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization) error)
						return &caller1x1[typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization) error {
							return fn.(startBundle1x1[typex.BundleFinalization, error]).StartBundle(a0)
						})
					}
				}
			default:
				panic("Invalid signature for StartBundle")
			}

		case startBundleIn == 2:
			switch {
			case startBundleOut == 0:
				if _, ok := doFn.(startBundle2x0[I4, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I4, I5))
						return &caller2x0[I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I4, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I4, a1 I5) { fn.(startBundle2x0[I4, I5]).StartBundle(a0, a1) })
					}
				} else if _, ok := doFn.(startBundle2x0[context.Context, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, I5))
						return &caller2x0[context.Context, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 I5) { fn.(startBundle2x0[context.Context, I5]).StartBundle(a0, a1) })
					}
				} else if _, ok := doFn.(startBundle2x0[typex.PaneInfo, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, I5))
						return &caller2x0[typex.PaneInfo, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 I5) { fn.(startBundle2x0[typex.PaneInfo, I5]).StartBundle(a0, a1) })
					}
				} else if _, ok := doFn.(startBundle2x0[context.Context, typex.PaneInfo]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo))
						return &caller2x0[context.Context, typex.PaneInfo]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo) {
							fn.(startBundle2x0[context.Context, typex.PaneInfo]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x0[[]typex.Window, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, I5))
						return &caller2x0[[]typex.Window, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 I5) { fn.(startBundle2x0[[]typex.Window, I5]).StartBundle(a0, a1) })
					}
				} else if _, ok := doFn.(startBundle2x0[context.Context, []typex.Window]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window))
						return &caller2x0[context.Context, []typex.Window]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window) {
							fn.(startBundle2x0[context.Context, []typex.Window]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x0[typex.PaneInfo, []typex.Window]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window))
						return &caller2x0[typex.PaneInfo, []typex.Window]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window) {
							fn.(startBundle2x0[typex.PaneInfo, []typex.Window]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x0[typex.EventTime, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, I5))
						return &caller2x0[typex.EventTime, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 I5) { fn.(startBundle2x0[typex.EventTime, I5]).StartBundle(a0, a1) })
					}
				} else if _, ok := doFn.(startBundle2x0[context.Context, typex.EventTime]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime))
						return &caller2x0[context.Context, typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime) {
							fn.(startBundle2x0[context.Context, typex.EventTime]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x0[typex.PaneInfo, typex.EventTime]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime))
						return &caller2x0[typex.PaneInfo, typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime) {
							fn.(startBundle2x0[typex.PaneInfo, typex.EventTime]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x0[[]typex.Window, typex.EventTime]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime))
						return &caller2x0[[]typex.Window, typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime) {
							fn.(startBundle2x0[[]typex.Window, typex.EventTime]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x0[typex.BundleFinalization, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization, I5))
						return &caller2x0[typex.BundleFinalization, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization, a1 I5) {
							fn.(startBundle2x0[typex.BundleFinalization, I5]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x0[context.Context, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization))
						return &caller2x0[context.Context, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization) {
							fn.(startBundle2x0[context.Context, typex.BundleFinalization]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x0[typex.PaneInfo, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization))
						return &caller2x0[typex.PaneInfo, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization) {
							fn.(startBundle2x0[typex.PaneInfo, typex.BundleFinalization]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x0[[]typex.Window, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization))
						return &caller2x0[[]typex.Window, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization) {
							fn.(startBundle2x0[[]typex.Window, typex.BundleFinalization]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x0[typex.EventTime, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization))
						return &caller2x0[typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization) {
							fn.(startBundle2x0[typex.EventTime, typex.BundleFinalization]).StartBundle(a0, a1)
						})
					}
				}
			case startBundleOut == 1:
				if _, ok := doFn.(startBundle2x1[I4, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I4, I5) error)
						return &caller2x1[I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I4, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I4, a1 I5) error { return fn.(startBundle2x1[I4, I5, error]).StartBundle(a0, a1) })
					}
				} else if _, ok := doFn.(startBundle2x1[context.Context, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, I5) error)
						return &caller2x1[context.Context, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 I5) error {
							return fn.(startBundle2x1[context.Context, I5, error]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x1[typex.PaneInfo, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, I5) error)
						return &caller2x1[typex.PaneInfo, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 I5) error {
							return fn.(startBundle2x1[typex.PaneInfo, I5, error]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x1[context.Context, typex.PaneInfo, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo) error)
						return &caller2x1[context.Context, typex.PaneInfo, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo) error {
							return fn.(startBundle2x1[context.Context, typex.PaneInfo, error]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x1[[]typex.Window, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, I5) error)
						return &caller2x1[[]typex.Window, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 I5) error {
							return fn.(startBundle2x1[[]typex.Window, I5, error]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x1[context.Context, []typex.Window, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window) error)
						return &caller2x1[context.Context, []typex.Window, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window) error {
							return fn.(startBundle2x1[context.Context, []typex.Window, error]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x1[typex.PaneInfo, []typex.Window, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window) error)
						return &caller2x1[typex.PaneInfo, []typex.Window, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window) error {
							return fn.(startBundle2x1[typex.PaneInfo, []typex.Window, error]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x1[typex.EventTime, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, I5) error)
						return &caller2x1[typex.EventTime, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 I5) error {
							return fn.(startBundle2x1[typex.EventTime, I5, error]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x1[context.Context, typex.EventTime, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime) error)
						return &caller2x1[context.Context, typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime) error {
							return fn.(startBundle2x1[context.Context, typex.EventTime, error]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x1[typex.PaneInfo, typex.EventTime, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime) error)
						return &caller2x1[typex.PaneInfo, typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime) error {
							return fn.(startBundle2x1[typex.PaneInfo, typex.EventTime, error]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x1[[]typex.Window, typex.EventTime, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime) error)
						return &caller2x1[[]typex.Window, typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime) error {
							return fn.(startBundle2x1[[]typex.Window, typex.EventTime, error]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x1[typex.BundleFinalization, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization, I5) error)
						return &caller2x1[typex.BundleFinalization, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization, a1 I5) error {
							return fn.(startBundle2x1[typex.BundleFinalization, I5, error]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x1[context.Context, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization) error)
						return &caller2x1[context.Context, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization) error {
							return fn.(startBundle2x1[context.Context, typex.BundleFinalization, error]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x1[typex.PaneInfo, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization) error)
						return &caller2x1[typex.PaneInfo, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization) error {
							return fn.(startBundle2x1[typex.PaneInfo, typex.BundleFinalization, error]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x1[[]typex.Window, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization) error)
						return &caller2x1[[]typex.Window, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization) error {
							return fn.(startBundle2x1[[]typex.Window, typex.BundleFinalization, error]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x1[typex.EventTime, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization) error)
						return &caller2x1[typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization) error {
							return fn.(startBundle2x1[typex.EventTime, typex.BundleFinalization, error]).StartBundle(a0, a1)
						})
					}
				}
			default:
				panic("Invalid signature for StartBundle")
			}

		case startBundleIn == 3:
			switch {
			case startBundleOut == 0:
				if _, ok := doFn.(startBundle3x0[I3, I4, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I3, I4, I5))
						return &caller3x0[I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I3, I4, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I3, a1 I4, a2 I5) { fn.(startBundle3x0[I3, I4, I5]).StartBundle(a0, a1, a2) })
					}
				} else if _, ok := doFn.(startBundle3x0[context.Context, I4, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, I4, I5))
						return &caller3x0[context.Context, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, I4, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 I4, a2 I5) {
							fn.(startBundle3x0[context.Context, I4, I5]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[typex.PaneInfo, I4, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, I4, I5))
						return &caller3x0[typex.PaneInfo, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, I4, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 I4, a2 I5) {
							fn.(startBundle3x0[typex.PaneInfo, I4, I5]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[context.Context, typex.PaneInfo, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, I5))
						return &caller3x0[context.Context, typex.PaneInfo, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 I5) {
							fn.(startBundle3x0[context.Context, typex.PaneInfo, I5]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[[]typex.Window, I4, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, I4, I5))
						return &caller3x0[[]typex.Window, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, I4, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 I4, a2 I5) {
							fn.(startBundle3x0[[]typex.Window, I4, I5]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[context.Context, []typex.Window, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, I5))
						return &caller3x0[context.Context, []typex.Window, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 I5) {
							fn.(startBundle3x0[context.Context, []typex.Window, I5]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[typex.PaneInfo, []typex.Window, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, I5))
						return &caller3x0[typex.PaneInfo, []typex.Window, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 I5) {
							fn.(startBundle3x0[typex.PaneInfo, []typex.Window, I5]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[context.Context, typex.PaneInfo, []typex.Window]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window))
						return &caller3x0[context.Context, typex.PaneInfo, []typex.Window]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window) {
							fn.(startBundle3x0[context.Context, typex.PaneInfo, []typex.Window]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[typex.EventTime, I4, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, I4, I5))
						return &caller3x0[typex.EventTime, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, I4, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 I4, a2 I5) {
							fn.(startBundle3x0[typex.EventTime, I4, I5]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[context.Context, typex.EventTime, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, I5))
						return &caller3x0[context.Context, typex.EventTime, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 I5) {
							fn.(startBundle3x0[context.Context, typex.EventTime, I5]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[typex.PaneInfo, typex.EventTime, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, I5))
						return &caller3x0[typex.PaneInfo, typex.EventTime, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 I5) {
							fn.(startBundle3x0[typex.PaneInfo, typex.EventTime, I5]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[context.Context, typex.PaneInfo, typex.EventTime]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime))
						return &caller3x0[context.Context, typex.PaneInfo, typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime) {
							fn.(startBundle3x0[context.Context, typex.PaneInfo, typex.EventTime]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[[]typex.Window, typex.EventTime, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, I5))
						return &caller3x0[[]typex.Window, typex.EventTime, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 I5) {
							fn.(startBundle3x0[[]typex.Window, typex.EventTime, I5]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[context.Context, []typex.Window, typex.EventTime]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime))
						return &caller3x0[context.Context, []typex.Window, typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime) {
							fn.(startBundle3x0[context.Context, []typex.Window, typex.EventTime]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[typex.PaneInfo, []typex.Window, typex.EventTime]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime))
						return &caller3x0[typex.PaneInfo, []typex.Window, typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime) {
							fn.(startBundle3x0[typex.PaneInfo, []typex.Window, typex.EventTime]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[typex.BundleFinalization, I4, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization, I4, I5))
						return &caller3x0[typex.BundleFinalization, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization, I4, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization, a1 I4, a2 I5) {
							fn.(startBundle3x0[typex.BundleFinalization, I4, I5]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[context.Context, typex.BundleFinalization, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization, I5))
						return &caller3x0[context.Context, typex.BundleFinalization, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization, a2 I5) {
							fn.(startBundle3x0[context.Context, typex.BundleFinalization, I5]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[typex.PaneInfo, typex.BundleFinalization, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization, I5))
						return &caller3x0[typex.PaneInfo, typex.BundleFinalization, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization, a2 I5) {
							fn.(startBundle3x0[typex.PaneInfo, typex.BundleFinalization, I5]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[context.Context, typex.PaneInfo, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization))
						return &caller3x0[context.Context, typex.PaneInfo, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization) {
							fn.(startBundle3x0[context.Context, typex.PaneInfo, typex.BundleFinalization]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[[]typex.Window, typex.BundleFinalization, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization, I5))
						return &caller3x0[[]typex.Window, typex.BundleFinalization, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization, a2 I5) {
							fn.(startBundle3x0[[]typex.Window, typex.BundleFinalization, I5]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[context.Context, []typex.Window, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization))
						return &caller3x0[context.Context, []typex.Window, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization) {
							fn.(startBundle3x0[context.Context, []typex.Window, typex.BundleFinalization]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization))
						return &caller3x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization) {
							fn.(startBundle3x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[typex.EventTime, typex.BundleFinalization, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization, I5))
						return &caller3x0[typex.EventTime, typex.BundleFinalization, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization, a2 I5) {
							fn.(startBundle3x0[typex.EventTime, typex.BundleFinalization, I5]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[context.Context, typex.EventTime, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization))
						return &caller3x0[context.Context, typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization) {
							fn.(startBundle3x0[context.Context, typex.EventTime, typex.BundleFinalization]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization))
						return &caller3x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization) {
							fn.(startBundle3x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[[]typex.Window, typex.EventTime, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization))
						return &caller3x0[[]typex.Window, typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization) {
							fn.(startBundle3x0[[]typex.Window, typex.EventTime, typex.BundleFinalization]).StartBundle(a0, a1, a2)
						})
					}
				}
			case startBundleOut == 1:
				if _, ok := doFn.(startBundle3x1[I3, I4, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I3, I4, I5) error)
						return &caller3x1[I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I3, I4, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I3, a1 I4, a2 I5) error { return fn.(startBundle3x1[I3, I4, I5, error]).StartBundle(a0, a1, a2) })
					}
				} else if _, ok := doFn.(startBundle3x1[context.Context, I4, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, I4, I5) error)
						return &caller3x1[context.Context, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, I4, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 I4, a2 I5) error {
							return fn.(startBundle3x1[context.Context, I4, I5, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[typex.PaneInfo, I4, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, I4, I5) error)
						return &caller3x1[typex.PaneInfo, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, I4, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 I4, a2 I5) error {
							return fn.(startBundle3x1[typex.PaneInfo, I4, I5, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[context.Context, typex.PaneInfo, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, I5) error)
						return &caller3x1[context.Context, typex.PaneInfo, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 I5) error {
							return fn.(startBundle3x1[context.Context, typex.PaneInfo, I5, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[[]typex.Window, I4, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, I4, I5) error)
						return &caller3x1[[]typex.Window, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, I4, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 I4, a2 I5) error {
							return fn.(startBundle3x1[[]typex.Window, I4, I5, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[context.Context, []typex.Window, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, I5) error)
						return &caller3x1[context.Context, []typex.Window, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 I5) error {
							return fn.(startBundle3x1[context.Context, []typex.Window, I5, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[typex.PaneInfo, []typex.Window, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, I5) error)
						return &caller3x1[typex.PaneInfo, []typex.Window, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 I5) error {
							return fn.(startBundle3x1[typex.PaneInfo, []typex.Window, I5, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[context.Context, typex.PaneInfo, []typex.Window, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window) error)
						return &caller3x1[context.Context, typex.PaneInfo, []typex.Window, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window) error {
							return fn.(startBundle3x1[context.Context, typex.PaneInfo, []typex.Window, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[typex.EventTime, I4, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, I4, I5) error)
						return &caller3x1[typex.EventTime, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, I4, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 I4, a2 I5) error {
							return fn.(startBundle3x1[typex.EventTime, I4, I5, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[context.Context, typex.EventTime, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, I5) error)
						return &caller3x1[context.Context, typex.EventTime, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 I5) error {
							return fn.(startBundle3x1[context.Context, typex.EventTime, I5, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[typex.PaneInfo, typex.EventTime, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, I5) error)
						return &caller3x1[typex.PaneInfo, typex.EventTime, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 I5) error {
							return fn.(startBundle3x1[typex.PaneInfo, typex.EventTime, I5, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[context.Context, typex.PaneInfo, typex.EventTime, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime) error)
						return &caller3x1[context.Context, typex.PaneInfo, typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime) error {
							return fn.(startBundle3x1[context.Context, typex.PaneInfo, typex.EventTime, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[[]typex.Window, typex.EventTime, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, I5) error)
						return &caller3x1[[]typex.Window, typex.EventTime, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 I5) error {
							return fn.(startBundle3x1[[]typex.Window, typex.EventTime, I5, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[context.Context, []typex.Window, typex.EventTime, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime) error)
						return &caller3x1[context.Context, []typex.Window, typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime) error {
							return fn.(startBundle3x1[context.Context, []typex.Window, typex.EventTime, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[typex.PaneInfo, []typex.Window, typex.EventTime, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime) error)
						return &caller3x1[typex.PaneInfo, []typex.Window, typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime) error {
							return fn.(startBundle3x1[typex.PaneInfo, []typex.Window, typex.EventTime, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[typex.BundleFinalization, I4, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization, I4, I5) error)
						return &caller3x1[typex.BundleFinalization, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization, I4, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization, a1 I4, a2 I5) error {
							return fn.(startBundle3x1[typex.BundleFinalization, I4, I5, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[context.Context, typex.BundleFinalization, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization, I5) error)
						return &caller3x1[context.Context, typex.BundleFinalization, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization, a2 I5) error {
							return fn.(startBundle3x1[context.Context, typex.BundleFinalization, I5, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[typex.PaneInfo, typex.BundleFinalization, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization, I5) error)
						return &caller3x1[typex.PaneInfo, typex.BundleFinalization, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization, a2 I5) error {
							return fn.(startBundle3x1[typex.PaneInfo, typex.BundleFinalization, I5, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[context.Context, typex.PaneInfo, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization) error)
						return &caller3x1[context.Context, typex.PaneInfo, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization) error {
							return fn.(startBundle3x1[context.Context, typex.PaneInfo, typex.BundleFinalization, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[[]typex.Window, typex.BundleFinalization, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization, I5) error)
						return &caller3x1[[]typex.Window, typex.BundleFinalization, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization, a2 I5) error {
							return fn.(startBundle3x1[[]typex.Window, typex.BundleFinalization, I5, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[context.Context, []typex.Window, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization) error)
						return &caller3x1[context.Context, []typex.Window, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization) error {
							return fn.(startBundle3x1[context.Context, []typex.Window, typex.BundleFinalization, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization) error)
						return &caller3x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization) error {
							return fn.(startBundle3x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[typex.EventTime, typex.BundleFinalization, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization, I5) error)
						return &caller3x1[typex.EventTime, typex.BundleFinalization, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization, a2 I5) error {
							return fn.(startBundle3x1[typex.EventTime, typex.BundleFinalization, I5, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[context.Context, typex.EventTime, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization) error)
						return &caller3x1[context.Context, typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization) error {
							return fn.(startBundle3x1[context.Context, typex.EventTime, typex.BundleFinalization, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization) error)
						return &caller3x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization) error {
							return fn.(startBundle3x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization) error)
						return &caller3x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization) error {
							return fn.(startBundle3x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, error]).StartBundle(a0, a1, a2)
						})
					}
				}
			default:
				panic("Invalid signature for StartBundle")
			}

		case startBundleIn == 4:
			switch {
			case startBundleOut == 0:
				if _, ok := doFn.(startBundle4x0[I2, I3, I4, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I2, I3, I4, I5))
						return &caller4x0[I2, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I2, I3, I4, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I2, a1 I3, a2 I4, a3 I5) { fn.(startBundle4x0[I2, I3, I4, I5]).StartBundle(a0, a1, a2, a3) })
					}
				} else if _, ok := doFn.(startBundle4x0[context.Context, I3, I4, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, I3, I4, I5))
						return &caller4x0[context.Context, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, I3, I4, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 I3, a2 I4, a3 I5) {
							fn.(startBundle4x0[context.Context, I3, I4, I5]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[typex.PaneInfo, I3, I4, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, I3, I4, I5))
						return &caller4x0[typex.PaneInfo, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, I3, I4, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 I3, a2 I4, a3 I5) {
							fn.(startBundle4x0[typex.PaneInfo, I3, I4, I5]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[context.Context, typex.PaneInfo, I4, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, I4, I5))
						return &caller4x0[context.Context, typex.PaneInfo, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, I4, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 I4, a3 I5) {
							fn.(startBundle4x0[context.Context, typex.PaneInfo, I4, I5]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[[]typex.Window, I3, I4, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, I3, I4, I5))
						return &caller4x0[[]typex.Window, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, I3, I4, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 I3, a2 I4, a3 I5) {
							fn.(startBundle4x0[[]typex.Window, I3, I4, I5]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[context.Context, []typex.Window, I4, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, I4, I5))
						return &caller4x0[context.Context, []typex.Window, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, I4, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 I4, a3 I5) {
							fn.(startBundle4x0[context.Context, []typex.Window, I4, I5]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[typex.PaneInfo, []typex.Window, I4, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, I4, I5))
						return &caller4x0[typex.PaneInfo, []typex.Window, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, I4, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 I4, a3 I5) {
							fn.(startBundle4x0[typex.PaneInfo, []typex.Window, I4, I5]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[context.Context, typex.PaneInfo, []typex.Window, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, I5))
						return &caller4x0[context.Context, typex.PaneInfo, []typex.Window, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 I5) {
							fn.(startBundle4x0[context.Context, typex.PaneInfo, []typex.Window, I5]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[typex.EventTime, I3, I4, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, I3, I4, I5))
						return &caller4x0[typex.EventTime, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, I3, I4, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 I3, a2 I4, a3 I5) {
							fn.(startBundle4x0[typex.EventTime, I3, I4, I5]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[context.Context, typex.EventTime, I4, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, I4, I5))
						return &caller4x0[context.Context, typex.EventTime, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, I4, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 I4, a3 I5) {
							fn.(startBundle4x0[context.Context, typex.EventTime, I4, I5]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[typex.PaneInfo, typex.EventTime, I4, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, I4, I5))
						return &caller4x0[typex.PaneInfo, typex.EventTime, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, I4, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 I4, a3 I5) {
							fn.(startBundle4x0[typex.PaneInfo, typex.EventTime, I4, I5]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[context.Context, typex.PaneInfo, typex.EventTime, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, I5))
						return &caller4x0[context.Context, typex.PaneInfo, typex.EventTime, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 I5) {
							fn.(startBundle4x0[context.Context, typex.PaneInfo, typex.EventTime, I5]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[[]typex.Window, typex.EventTime, I4, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, I4, I5))
						return &caller4x0[[]typex.Window, typex.EventTime, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, I4, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 I4, a3 I5) {
							fn.(startBundle4x0[[]typex.Window, typex.EventTime, I4, I5]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[context.Context, []typex.Window, typex.EventTime, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, I5))
						return &caller4x0[context.Context, []typex.Window, typex.EventTime, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 I5) {
							fn.(startBundle4x0[context.Context, []typex.Window, typex.EventTime, I5]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[typex.PaneInfo, []typex.Window, typex.EventTime, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, I5))
						return &caller4x0[typex.PaneInfo, []typex.Window, typex.EventTime, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 I5) {
							fn.(startBundle4x0[typex.PaneInfo, []typex.Window, typex.EventTime, I5]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime))
						return &caller4x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime) {
							fn.(startBundle4x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[typex.BundleFinalization, I3, I4, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization, I3, I4, I5))
						return &caller4x0[typex.BundleFinalization, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization, I3, I4, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization, a1 I3, a2 I4, a3 I5) {
							fn.(startBundle4x0[typex.BundleFinalization, I3, I4, I5]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[context.Context, typex.BundleFinalization, I4, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization, I4, I5))
						return &caller4x0[context.Context, typex.BundleFinalization, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization, I4, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization, a2 I4, a3 I5) {
							fn.(startBundle4x0[context.Context, typex.BundleFinalization, I4, I5]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[typex.PaneInfo, typex.BundleFinalization, I4, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization, I4, I5))
						return &caller4x0[typex.PaneInfo, typex.BundleFinalization, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization, I4, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization, a2 I4, a3 I5) {
							fn.(startBundle4x0[typex.PaneInfo, typex.BundleFinalization, I4, I5]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization, I5))
						return &caller4x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization, a3 I5) {
							fn.(startBundle4x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I5]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[[]typex.Window, typex.BundleFinalization, I4, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization, I4, I5))
						return &caller4x0[[]typex.Window, typex.BundleFinalization, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization, I4, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization, a2 I4, a3 I5) {
							fn.(startBundle4x0[[]typex.Window, typex.BundleFinalization, I4, I5]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[context.Context, []typex.Window, typex.BundleFinalization, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization, I5))
						return &caller4x0[context.Context, []typex.Window, typex.BundleFinalization, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization, a3 I5) {
							fn.(startBundle4x0[context.Context, []typex.Window, typex.BundleFinalization, I5]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I5))
						return &caller4x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization, a3 I5) {
							fn.(startBundle4x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I5]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization))
						return &caller4x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.BundleFinalization) {
							fn.(startBundle4x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[typex.EventTime, typex.BundleFinalization, I4, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization, I4, I5))
						return &caller4x0[typex.EventTime, typex.BundleFinalization, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization, I4, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization, a2 I4, a3 I5) {
							fn.(startBundle4x0[typex.EventTime, typex.BundleFinalization, I4, I5]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[context.Context, typex.EventTime, typex.BundleFinalization, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization, I5))
						return &caller4x0[context.Context, typex.EventTime, typex.BundleFinalization, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I5) {
							fn.(startBundle4x0[context.Context, typex.EventTime, typex.BundleFinalization, I5]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I5))
						return &caller4x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I5) {
							fn.(startBundle4x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I5]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization))
						return &caller4x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 typex.BundleFinalization) {
							fn.(startBundle4x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization, I5))
						return &caller4x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I5) {
							fn.(startBundle4x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I5]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization))
						return &caller4x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization) {
							fn.(startBundle4x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization))
						return &caller4x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization) {
							fn.(startBundle4x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization]).StartBundle(a0, a1, a2, a3)
						})
					}
				}
			case startBundleOut == 1:
				if _, ok := doFn.(startBundle4x1[I2, I3, I4, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I2, I3, I4, I5) error)
						return &caller4x1[I2, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I2, I3, I4, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I2, a1 I3, a2 I4, a3 I5) error {
							return fn.(startBundle4x1[I2, I3, I4, I5, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[context.Context, I3, I4, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, I3, I4, I5) error)
						return &caller4x1[context.Context, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, I3, I4, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 I3, a2 I4, a3 I5) error {
							return fn.(startBundle4x1[context.Context, I3, I4, I5, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[typex.PaneInfo, I3, I4, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, I3, I4, I5) error)
						return &caller4x1[typex.PaneInfo, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, I3, I4, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 I3, a2 I4, a3 I5) error {
							return fn.(startBundle4x1[typex.PaneInfo, I3, I4, I5, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[context.Context, typex.PaneInfo, I4, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, I4, I5) error)
						return &caller4x1[context.Context, typex.PaneInfo, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, I4, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 I4, a3 I5) error {
							return fn.(startBundle4x1[context.Context, typex.PaneInfo, I4, I5, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[[]typex.Window, I3, I4, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, I3, I4, I5) error)
						return &caller4x1[[]typex.Window, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, I3, I4, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 I3, a2 I4, a3 I5) error {
							return fn.(startBundle4x1[[]typex.Window, I3, I4, I5, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[context.Context, []typex.Window, I4, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, I4, I5) error)
						return &caller4x1[context.Context, []typex.Window, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, I4, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 I4, a3 I5) error {
							return fn.(startBundle4x1[context.Context, []typex.Window, I4, I5, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[typex.PaneInfo, []typex.Window, I4, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, I4, I5) error)
						return &caller4x1[typex.PaneInfo, []typex.Window, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, I4, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 I4, a3 I5) error {
							return fn.(startBundle4x1[typex.PaneInfo, []typex.Window, I4, I5, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[context.Context, typex.PaneInfo, []typex.Window, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, I5) error)
						return &caller4x1[context.Context, typex.PaneInfo, []typex.Window, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 I5) error {
							return fn.(startBundle4x1[context.Context, typex.PaneInfo, []typex.Window, I5, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[typex.EventTime, I3, I4, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, I3, I4, I5) error)
						return &caller4x1[typex.EventTime, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, I3, I4, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 I3, a2 I4, a3 I5) error {
							return fn.(startBundle4x1[typex.EventTime, I3, I4, I5, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[context.Context, typex.EventTime, I4, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, I4, I5) error)
						return &caller4x1[context.Context, typex.EventTime, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, I4, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 I4, a3 I5) error {
							return fn.(startBundle4x1[context.Context, typex.EventTime, I4, I5, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[typex.PaneInfo, typex.EventTime, I4, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, I4, I5) error)
						return &caller4x1[typex.PaneInfo, typex.EventTime, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, I4, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 I4, a3 I5) error {
							return fn.(startBundle4x1[typex.PaneInfo, typex.EventTime, I4, I5, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[context.Context, typex.PaneInfo, typex.EventTime, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, I5) error)
						return &caller4x1[context.Context, typex.PaneInfo, typex.EventTime, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 I5) error {
							return fn.(startBundle4x1[context.Context, typex.PaneInfo, typex.EventTime, I5, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[[]typex.Window, typex.EventTime, I4, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, I4, I5) error)
						return &caller4x1[[]typex.Window, typex.EventTime, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, I4, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 I4, a3 I5) error {
							return fn.(startBundle4x1[[]typex.Window, typex.EventTime, I4, I5, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[context.Context, []typex.Window, typex.EventTime, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, I5) error)
						return &caller4x1[context.Context, []typex.Window, typex.EventTime, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 I5) error {
							return fn.(startBundle4x1[context.Context, []typex.Window, typex.EventTime, I5, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[typex.PaneInfo, []typex.Window, typex.EventTime, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, I5) error)
						return &caller4x1[typex.PaneInfo, []typex.Window, typex.EventTime, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 I5) error {
							return fn.(startBundle4x1[typex.PaneInfo, []typex.Window, typex.EventTime, I5, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime) error)
						return &caller4x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime) error {
							return fn.(startBundle4x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[typex.BundleFinalization, I3, I4, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization, I3, I4, I5) error)
						return &caller4x1[typex.BundleFinalization, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization, I3, I4, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization, a1 I3, a2 I4, a3 I5) error {
							return fn.(startBundle4x1[typex.BundleFinalization, I3, I4, I5, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[context.Context, typex.BundleFinalization, I4, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization, I4, I5) error)
						return &caller4x1[context.Context, typex.BundleFinalization, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization, I4, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization, a2 I4, a3 I5) error {
							return fn.(startBundle4x1[context.Context, typex.BundleFinalization, I4, I5, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[typex.PaneInfo, typex.BundleFinalization, I4, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization, I4, I5) error)
						return &caller4x1[typex.PaneInfo, typex.BundleFinalization, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization, I4, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization, a2 I4, a3 I5) error {
							return fn.(startBundle4x1[typex.PaneInfo, typex.BundleFinalization, I4, I5, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization, I5) error)
						return &caller4x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization, a3 I5) error {
							return fn.(startBundle4x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I5, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[[]typex.Window, typex.BundleFinalization, I4, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization, I4, I5) error)
						return &caller4x1[[]typex.Window, typex.BundleFinalization, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization, I4, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization, a2 I4, a3 I5) error {
							return fn.(startBundle4x1[[]typex.Window, typex.BundleFinalization, I4, I5, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[context.Context, []typex.Window, typex.BundleFinalization, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization, I5) error)
						return &caller4x1[context.Context, []typex.Window, typex.BundleFinalization, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization, a3 I5) error {
							return fn.(startBundle4x1[context.Context, []typex.Window, typex.BundleFinalization, I5, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I5) error)
						return &caller4x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization, a3 I5) error {
							return fn.(startBundle4x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I5, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization) error)
						return &caller4x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.BundleFinalization) error {
							return fn.(startBundle4x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[typex.EventTime, typex.BundleFinalization, I4, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization, I4, I5) error)
						return &caller4x1[typex.EventTime, typex.BundleFinalization, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization, I4, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization, a2 I4, a3 I5) error {
							return fn.(startBundle4x1[typex.EventTime, typex.BundleFinalization, I4, I5, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[context.Context, typex.EventTime, typex.BundleFinalization, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization, I5) error)
						return &caller4x1[context.Context, typex.EventTime, typex.BundleFinalization, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I5) error {
							return fn.(startBundle4x1[context.Context, typex.EventTime, typex.BundleFinalization, I5, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I5) error)
						return &caller4x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I5) error {
							return fn.(startBundle4x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I5, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization) error)
						return &caller4x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 typex.BundleFinalization) error {
							return fn.(startBundle4x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization, I5) error)
						return &caller4x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I5) error {
							return fn.(startBundle4x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I5, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization) error)
						return &caller4x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization) error {
							return fn.(startBundle4x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization) error)
						return &caller4x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization) error {
							return fn.(startBundle4x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				}
			default:
				panic("Invalid signature for StartBundle")
			}

		case startBundleIn == 5:
			switch {
			case startBundleOut == 0:
				if _, ok := doFn.(startBundle5x0[I1, I2, I3, I4, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I1, I2, I3, I4, I5))
						return &caller5x0[I1, I2, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I1, I2, I3, I4, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I1, a1 I2, a2 I3, a3 I4, a4 I5) {
							fn.(startBundle5x0[I1, I2, I3, I4, I5]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[context.Context, I2, I3, I4, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, I2, I3, I4, I5))
						return &caller5x0[context.Context, I2, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, I2, I3, I4, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 I2, a2 I3, a3 I4, a4 I5) {
							fn.(startBundle5x0[context.Context, I2, I3, I4, I5]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[typex.PaneInfo, I2, I3, I4, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, I2, I3, I4, I5))
						return &caller5x0[typex.PaneInfo, I2, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, I2, I3, I4, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 I2, a2 I3, a3 I4, a4 I5) {
							fn.(startBundle5x0[typex.PaneInfo, I2, I3, I4, I5]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[context.Context, typex.PaneInfo, I3, I4, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, I3, I4, I5))
						return &caller5x0[context.Context, typex.PaneInfo, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, I3, I4, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 I3, a3 I4, a4 I5) {
							fn.(startBundle5x0[context.Context, typex.PaneInfo, I3, I4, I5]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[[]typex.Window, I2, I3, I4, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, I2, I3, I4, I5))
						return &caller5x0[[]typex.Window, I2, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, I2, I3, I4, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 I2, a2 I3, a3 I4, a4 I5) {
							fn.(startBundle5x0[[]typex.Window, I2, I3, I4, I5]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[context.Context, []typex.Window, I3, I4, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, I3, I4, I5))
						return &caller5x0[context.Context, []typex.Window, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, I3, I4, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 I3, a3 I4, a4 I5) {
							fn.(startBundle5x0[context.Context, []typex.Window, I3, I4, I5]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[typex.PaneInfo, []typex.Window, I3, I4, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, I3, I4, I5))
						return &caller5x0[typex.PaneInfo, []typex.Window, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, I3, I4, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 I3, a3 I4, a4 I5) {
							fn.(startBundle5x0[typex.PaneInfo, []typex.Window, I3, I4, I5]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[context.Context, typex.PaneInfo, []typex.Window, I4, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, I4, I5))
						return &caller5x0[context.Context, typex.PaneInfo, []typex.Window, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, I4, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 I4, a4 I5) {
							fn.(startBundle5x0[context.Context, typex.PaneInfo, []typex.Window, I4, I5]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[typex.EventTime, I2, I3, I4, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, I2, I3, I4, I5))
						return &caller5x0[typex.EventTime, I2, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, I2, I3, I4, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 I2, a2 I3, a3 I4, a4 I5) {
							fn.(startBundle5x0[typex.EventTime, I2, I3, I4, I5]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[context.Context, typex.EventTime, I3, I4, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, I3, I4, I5))
						return &caller5x0[context.Context, typex.EventTime, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, I3, I4, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 I3, a3 I4, a4 I5) {
							fn.(startBundle5x0[context.Context, typex.EventTime, I3, I4, I5]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[typex.PaneInfo, typex.EventTime, I3, I4, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, I3, I4, I5))
						return &caller5x0[typex.PaneInfo, typex.EventTime, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, I3, I4, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 I3, a3 I4, a4 I5) {
							fn.(startBundle5x0[typex.PaneInfo, typex.EventTime, I3, I4, I5]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[context.Context, typex.PaneInfo, typex.EventTime, I4, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, I4, I5))
						return &caller5x0[context.Context, typex.PaneInfo, typex.EventTime, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, I4, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 I4, a4 I5) {
							fn.(startBundle5x0[context.Context, typex.PaneInfo, typex.EventTime, I4, I5]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[[]typex.Window, typex.EventTime, I3, I4, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, I3, I4, I5))
						return &caller5x0[[]typex.Window, typex.EventTime, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, I3, I4, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 I3, a3 I4, a4 I5) {
							fn.(startBundle5x0[[]typex.Window, typex.EventTime, I3, I4, I5]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[context.Context, []typex.Window, typex.EventTime, I4, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, I4, I5))
						return &caller5x0[context.Context, []typex.Window, typex.EventTime, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, I4, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 I4, a4 I5) {
							fn.(startBundle5x0[context.Context, []typex.Window, typex.EventTime, I4, I5]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[typex.PaneInfo, []typex.Window, typex.EventTime, I4, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, I4, I5))
						return &caller5x0[typex.PaneInfo, []typex.Window, typex.EventTime, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, I4, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 I4, a4 I5) {
							fn.(startBundle5x0[typex.PaneInfo, []typex.Window, typex.EventTime, I4, I5]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I5))
						return &caller5x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 I5) {
							fn.(startBundle5x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I5]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[typex.BundleFinalization, I2, I3, I4, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization, I2, I3, I4, I5))
						return &caller5x0[typex.BundleFinalization, I2, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization, I2, I3, I4, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization, a1 I2, a2 I3, a3 I4, a4 I5) {
							fn.(startBundle5x0[typex.BundleFinalization, I2, I3, I4, I5]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[context.Context, typex.BundleFinalization, I3, I4, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization, I3, I4, I5))
						return &caller5x0[context.Context, typex.BundleFinalization, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization, I3, I4, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization, a2 I3, a3 I4, a4 I5) {
							fn.(startBundle5x0[context.Context, typex.BundleFinalization, I3, I4, I5]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[typex.PaneInfo, typex.BundleFinalization, I3, I4, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization, I3, I4, I5))
						return &caller5x0[typex.PaneInfo, typex.BundleFinalization, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization, I3, I4, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization, a2 I3, a3 I4, a4 I5) {
							fn.(startBundle5x0[typex.PaneInfo, typex.BundleFinalization, I3, I4, I5]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I4, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization, I4, I5))
						return &caller5x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization, I4, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization, a3 I4, a4 I5) {
							fn.(startBundle5x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I4, I5]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[[]typex.Window, typex.BundleFinalization, I3, I4, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization, I3, I4, I5))
						return &caller5x0[[]typex.Window, typex.BundleFinalization, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization, I3, I4, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization, a2 I3, a3 I4, a4 I5) {
							fn.(startBundle5x0[[]typex.Window, typex.BundleFinalization, I3, I4, I5]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[context.Context, []typex.Window, typex.BundleFinalization, I4, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization, I4, I5))
						return &caller5x0[context.Context, []typex.Window, typex.BundleFinalization, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization, I4, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization, a3 I4, a4 I5) {
							fn.(startBundle5x0[context.Context, []typex.Window, typex.BundleFinalization, I4, I5]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4, I5))
						return &caller5x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization, a3 I4, a4 I5) {
							fn.(startBundle5x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4, I5]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I5))
						return &caller5x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.BundleFinalization, a4 I5) {
							fn.(startBundle5x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I5]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[typex.EventTime, typex.BundleFinalization, I3, I4, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization, I3, I4, I5))
						return &caller5x0[typex.EventTime, typex.BundleFinalization, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization, I3, I4, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization, a2 I3, a3 I4, a4 I5) {
							fn.(startBundle5x0[typex.EventTime, typex.BundleFinalization, I3, I4, I5]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[context.Context, typex.EventTime, typex.BundleFinalization, I4, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization, I4, I5))
						return &caller5x0[context.Context, typex.EventTime, typex.BundleFinalization, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization, I4, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I4, a4 I5) {
							fn.(startBundle5x0[context.Context, typex.EventTime, typex.BundleFinalization, I4, I5]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4, I5))
						return &caller5x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I4, a4 I5) {
							fn.(startBundle5x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4, I5]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I5))
						return &caller5x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I5) {
							fn.(startBundle5x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I5]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5))
						return &caller5x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I4, a4 I5) {
							fn.(startBundle5x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I5))
						return &caller5x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I5) {
							fn.(startBundle5x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I5]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I5))
						return &caller5x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I5) {
							fn.(startBundle5x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I5]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization))
						return &caller5x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 typex.BundleFinalization) {
							fn.(startBundle5x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				}
			case startBundleOut == 1:
				if _, ok := doFn.(startBundle5x1[I1, I2, I3, I4, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I1, I2, I3, I4, I5) error)
						return &caller5x1[I1, I2, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I1, I2, I3, I4, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I1, a1 I2, a2 I3, a3 I4, a4 I5) error {
							return fn.(startBundle5x1[I1, I2, I3, I4, I5, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[context.Context, I2, I3, I4, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, I2, I3, I4, I5) error)
						return &caller5x1[context.Context, I2, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, I2, I3, I4, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 I2, a2 I3, a3 I4, a4 I5) error {
							return fn.(startBundle5x1[context.Context, I2, I3, I4, I5, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[typex.PaneInfo, I2, I3, I4, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, I2, I3, I4, I5) error)
						return &caller5x1[typex.PaneInfo, I2, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, I2, I3, I4, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 I2, a2 I3, a3 I4, a4 I5) error {
							return fn.(startBundle5x1[typex.PaneInfo, I2, I3, I4, I5, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[context.Context, typex.PaneInfo, I3, I4, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, I3, I4, I5) error)
						return &caller5x1[context.Context, typex.PaneInfo, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, I3, I4, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 I3, a3 I4, a4 I5) error {
							return fn.(startBundle5x1[context.Context, typex.PaneInfo, I3, I4, I5, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[[]typex.Window, I2, I3, I4, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, I2, I3, I4, I5) error)
						return &caller5x1[[]typex.Window, I2, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, I2, I3, I4, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 I2, a2 I3, a3 I4, a4 I5) error {
							return fn.(startBundle5x1[[]typex.Window, I2, I3, I4, I5, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[context.Context, []typex.Window, I3, I4, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, I3, I4, I5) error)
						return &caller5x1[context.Context, []typex.Window, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, I3, I4, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 I3, a3 I4, a4 I5) error {
							return fn.(startBundle5x1[context.Context, []typex.Window, I3, I4, I5, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[typex.PaneInfo, []typex.Window, I3, I4, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, I3, I4, I5) error)
						return &caller5x1[typex.PaneInfo, []typex.Window, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, I3, I4, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 I3, a3 I4, a4 I5) error {
							return fn.(startBundle5x1[typex.PaneInfo, []typex.Window, I3, I4, I5, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[context.Context, typex.PaneInfo, []typex.Window, I4, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, I4, I5) error)
						return &caller5x1[context.Context, typex.PaneInfo, []typex.Window, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, I4, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 I4, a4 I5) error {
							return fn.(startBundle5x1[context.Context, typex.PaneInfo, []typex.Window, I4, I5, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[typex.EventTime, I2, I3, I4, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, I2, I3, I4, I5) error)
						return &caller5x1[typex.EventTime, I2, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, I2, I3, I4, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 I2, a2 I3, a3 I4, a4 I5) error {
							return fn.(startBundle5x1[typex.EventTime, I2, I3, I4, I5, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[context.Context, typex.EventTime, I3, I4, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, I3, I4, I5) error)
						return &caller5x1[context.Context, typex.EventTime, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, I3, I4, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 I3, a3 I4, a4 I5) error {
							return fn.(startBundle5x1[context.Context, typex.EventTime, I3, I4, I5, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[typex.PaneInfo, typex.EventTime, I3, I4, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, I3, I4, I5) error)
						return &caller5x1[typex.PaneInfo, typex.EventTime, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, I3, I4, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 I3, a3 I4, a4 I5) error {
							return fn.(startBundle5x1[typex.PaneInfo, typex.EventTime, I3, I4, I5, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[context.Context, typex.PaneInfo, typex.EventTime, I4, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, I4, I5) error)
						return &caller5x1[context.Context, typex.PaneInfo, typex.EventTime, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, I4, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 I4, a4 I5) error {
							return fn.(startBundle5x1[context.Context, typex.PaneInfo, typex.EventTime, I4, I5, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[[]typex.Window, typex.EventTime, I3, I4, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, I3, I4, I5) error)
						return &caller5x1[[]typex.Window, typex.EventTime, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, I3, I4, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 I3, a3 I4, a4 I5) error {
							return fn.(startBundle5x1[[]typex.Window, typex.EventTime, I3, I4, I5, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[context.Context, []typex.Window, typex.EventTime, I4, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, I4, I5) error)
						return &caller5x1[context.Context, []typex.Window, typex.EventTime, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, I4, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 I4, a4 I5) error {
							return fn.(startBundle5x1[context.Context, []typex.Window, typex.EventTime, I4, I5, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[typex.PaneInfo, []typex.Window, typex.EventTime, I4, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, I4, I5) error)
						return &caller5x1[typex.PaneInfo, []typex.Window, typex.EventTime, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, I4, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 I4, a4 I5) error {
							return fn.(startBundle5x1[typex.PaneInfo, []typex.Window, typex.EventTime, I4, I5, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I5) error)
						return &caller5x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 I5) error {
							return fn.(startBundle5x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I5, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[typex.BundleFinalization, I2, I3, I4, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization, I2, I3, I4, I5) error)
						return &caller5x1[typex.BundleFinalization, I2, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization, I2, I3, I4, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization, a1 I2, a2 I3, a3 I4, a4 I5) error {
							return fn.(startBundle5x1[typex.BundleFinalization, I2, I3, I4, I5, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[context.Context, typex.BundleFinalization, I3, I4, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization, I3, I4, I5) error)
						return &caller5x1[context.Context, typex.BundleFinalization, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization, I3, I4, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization, a2 I3, a3 I4, a4 I5) error {
							return fn.(startBundle5x1[context.Context, typex.BundleFinalization, I3, I4, I5, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[typex.PaneInfo, typex.BundleFinalization, I3, I4, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization, I3, I4, I5) error)
						return &caller5x1[typex.PaneInfo, typex.BundleFinalization, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization, I3, I4, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization, a2 I3, a3 I4, a4 I5) error {
							return fn.(startBundle5x1[typex.PaneInfo, typex.BundleFinalization, I3, I4, I5, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I4, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization, I4, I5) error)
						return &caller5x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization, I4, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization, a3 I4, a4 I5) error {
							return fn.(startBundle5x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I4, I5, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[[]typex.Window, typex.BundleFinalization, I3, I4, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization, I3, I4, I5) error)
						return &caller5x1[[]typex.Window, typex.BundleFinalization, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization, I3, I4, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization, a2 I3, a3 I4, a4 I5) error {
							return fn.(startBundle5x1[[]typex.Window, typex.BundleFinalization, I3, I4, I5, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[context.Context, []typex.Window, typex.BundleFinalization, I4, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization, I4, I5) error)
						return &caller5x1[context.Context, []typex.Window, typex.BundleFinalization, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization, I4, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization, a3 I4, a4 I5) error {
							return fn.(startBundle5x1[context.Context, []typex.Window, typex.BundleFinalization, I4, I5, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4, I5) error)
						return &caller5x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization, a3 I4, a4 I5) error {
							return fn.(startBundle5x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4, I5, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I5) error)
						return &caller5x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.BundleFinalization, a4 I5) error {
							return fn.(startBundle5x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I5, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[typex.EventTime, typex.BundleFinalization, I3, I4, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization, I3, I4, I5) error)
						return &caller5x1[typex.EventTime, typex.BundleFinalization, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization, I3, I4, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization, a2 I3, a3 I4, a4 I5) error {
							return fn.(startBundle5x1[typex.EventTime, typex.BundleFinalization, I3, I4, I5, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[context.Context, typex.EventTime, typex.BundleFinalization, I4, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization, I4, I5) error)
						return &caller5x1[context.Context, typex.EventTime, typex.BundleFinalization, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization, I4, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I4, a4 I5) error {
							return fn.(startBundle5x1[context.Context, typex.EventTime, typex.BundleFinalization, I4, I5, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4, I5) error)
						return &caller5x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I4, a4 I5) error {
							return fn.(startBundle5x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4, I5, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I5) error)
						return &caller5x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I5) error {
							return fn.(startBundle5x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I5, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5) error)
						return &caller5x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I4, a4 I5) error {
							return fn.(startBundle5x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I5) error)
						return &caller5x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I5) error {
							return fn.(startBundle5x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I5, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I5) error)
						return &caller5x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I5) error {
							return fn.(startBundle5x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I5, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization) error)
						return &caller5x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 typex.BundleFinalization) error {
							return fn.(startBundle5x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				}
			default:
				panic("Invalid signature for StartBundle")
			}

		case startBundleIn == 6:
			switch {
			case startBundleOut == 0:
				if _, ok := doFn.(startBundle6x0[I0, I1, I2, I3, I4, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I0, I1, I2, I3, I4, I5))
						return &caller6x0[I0, I1, I2, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I0, I1, I2, I3, I4, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I0, a1 I1, a2 I2, a3 I3, a4 I4, a5 I5) {
							fn.(startBundle6x0[I0, I1, I2, I3, I4, I5]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[context.Context, I1, I2, I3, I4, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, I1, I2, I3, I4, I5))
						return &caller6x0[context.Context, I1, I2, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, I1, I2, I3, I4, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 I1, a2 I2, a3 I3, a4 I4, a5 I5) {
							fn.(startBundle6x0[context.Context, I1, I2, I3, I4, I5]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[typex.PaneInfo, I1, I2, I3, I4, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, I1, I2, I3, I4, I5))
						return &caller6x0[typex.PaneInfo, I1, I2, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, I1, I2, I3, I4, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 I1, a2 I2, a3 I3, a4 I4, a5 I5) {
							fn.(startBundle6x0[typex.PaneInfo, I1, I2, I3, I4, I5]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[context.Context, typex.PaneInfo, I2, I3, I4, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, I2, I3, I4, I5))
						return &caller6x0[context.Context, typex.PaneInfo, I2, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, I2, I3, I4, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 I2, a3 I3, a4 I4, a5 I5) {
							fn.(startBundle6x0[context.Context, typex.PaneInfo, I2, I3, I4, I5]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[[]typex.Window, I1, I2, I3, I4, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, I1, I2, I3, I4, I5))
						return &caller6x0[[]typex.Window, I1, I2, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, I1, I2, I3, I4, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 I1, a2 I2, a3 I3, a4 I4, a5 I5) {
							fn.(startBundle6x0[[]typex.Window, I1, I2, I3, I4, I5]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[context.Context, []typex.Window, I2, I3, I4, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, I2, I3, I4, I5))
						return &caller6x0[context.Context, []typex.Window, I2, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, I2, I3, I4, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 I2, a3 I3, a4 I4, a5 I5) {
							fn.(startBundle6x0[context.Context, []typex.Window, I2, I3, I4, I5]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[typex.PaneInfo, []typex.Window, I2, I3, I4, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, I2, I3, I4, I5))
						return &caller6x0[typex.PaneInfo, []typex.Window, I2, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, I2, I3, I4, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 I2, a3 I3, a4 I4, a5 I5) {
							fn.(startBundle6x0[typex.PaneInfo, []typex.Window, I2, I3, I4, I5]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[context.Context, typex.PaneInfo, []typex.Window, I3, I4, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, I3, I4, I5))
						return &caller6x0[context.Context, typex.PaneInfo, []typex.Window, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, I3, I4, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 I3, a4 I4, a5 I5) {
							fn.(startBundle6x0[context.Context, typex.PaneInfo, []typex.Window, I3, I4, I5]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[typex.EventTime, I1, I2, I3, I4, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, I1, I2, I3, I4, I5))
						return &caller6x0[typex.EventTime, I1, I2, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, I1, I2, I3, I4, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 I1, a2 I2, a3 I3, a4 I4, a5 I5) {
							fn.(startBundle6x0[typex.EventTime, I1, I2, I3, I4, I5]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[context.Context, typex.EventTime, I2, I3, I4, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, I2, I3, I4, I5))
						return &caller6x0[context.Context, typex.EventTime, I2, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, I2, I3, I4, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 I2, a3 I3, a4 I4, a5 I5) {
							fn.(startBundle6x0[context.Context, typex.EventTime, I2, I3, I4, I5]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[typex.PaneInfo, typex.EventTime, I2, I3, I4, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, I2, I3, I4, I5))
						return &caller6x0[typex.PaneInfo, typex.EventTime, I2, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, I2, I3, I4, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 I2, a3 I3, a4 I4, a5 I5) {
							fn.(startBundle6x0[typex.PaneInfo, typex.EventTime, I2, I3, I4, I5]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[context.Context, typex.PaneInfo, typex.EventTime, I3, I4, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, I3, I4, I5))
						return &caller6x0[context.Context, typex.PaneInfo, typex.EventTime, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, I3, I4, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 I3, a4 I4, a5 I5) {
							fn.(startBundle6x0[context.Context, typex.PaneInfo, typex.EventTime, I3, I4, I5]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[[]typex.Window, typex.EventTime, I2, I3, I4, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, I2, I3, I4, I5))
						return &caller6x0[[]typex.Window, typex.EventTime, I2, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, I2, I3, I4, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 I2, a3 I3, a4 I4, a5 I5) {
							fn.(startBundle6x0[[]typex.Window, typex.EventTime, I2, I3, I4, I5]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[context.Context, []typex.Window, typex.EventTime, I3, I4, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, I3, I4, I5))
						return &caller6x0[context.Context, []typex.Window, typex.EventTime, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, I3, I4, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 I3, a4 I4, a5 I5) {
							fn.(startBundle6x0[context.Context, []typex.Window, typex.EventTime, I3, I4, I5]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[typex.PaneInfo, []typex.Window, typex.EventTime, I3, I4, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, I3, I4, I5))
						return &caller6x0[typex.PaneInfo, []typex.Window, typex.EventTime, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, I3, I4, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 I3, a4 I4, a5 I5) {
							fn.(startBundle6x0[typex.PaneInfo, []typex.Window, typex.EventTime, I3, I4, I5]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I4, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I4, I5))
						return &caller6x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I4, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 I4, a5 I5) {
							fn.(startBundle6x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I4, I5]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[typex.BundleFinalization, I1, I2, I3, I4, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization, I1, I2, I3, I4, I5))
						return &caller6x0[typex.BundleFinalization, I1, I2, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization, I1, I2, I3, I4, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization, a1 I1, a2 I2, a3 I3, a4 I4, a5 I5) {
							fn.(startBundle6x0[typex.BundleFinalization, I1, I2, I3, I4, I5]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[context.Context, typex.BundleFinalization, I2, I3, I4, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization, I2, I3, I4, I5))
						return &caller6x0[context.Context, typex.BundleFinalization, I2, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization, I2, I3, I4, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization, a2 I2, a3 I3, a4 I4, a5 I5) {
							fn.(startBundle6x0[context.Context, typex.BundleFinalization, I2, I3, I4, I5]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[typex.PaneInfo, typex.BundleFinalization, I2, I3, I4, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization, I2, I3, I4, I5))
						return &caller6x0[typex.PaneInfo, typex.BundleFinalization, I2, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization, I2, I3, I4, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization, a2 I2, a3 I3, a4 I4, a5 I5) {
							fn.(startBundle6x0[typex.PaneInfo, typex.BundleFinalization, I2, I3, I4, I5]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I3, I4, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization, I3, I4, I5))
						return &caller6x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization, I3, I4, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization, a3 I3, a4 I4, a5 I5) {
							fn.(startBundle6x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I3, I4, I5]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[[]typex.Window, typex.BundleFinalization, I2, I3, I4, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization, I2, I3, I4, I5))
						return &caller6x0[[]typex.Window, typex.BundleFinalization, I2, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization, I2, I3, I4, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization, a2 I2, a3 I3, a4 I4, a5 I5) {
							fn.(startBundle6x0[[]typex.Window, typex.BundleFinalization, I2, I3, I4, I5]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[context.Context, []typex.Window, typex.BundleFinalization, I3, I4, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization, I3, I4, I5))
						return &caller6x0[context.Context, []typex.Window, typex.BundleFinalization, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization, I3, I4, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization, a3 I3, a4 I4, a5 I5) {
							fn.(startBundle6x0[context.Context, []typex.Window, typex.BundleFinalization, I3, I4, I5]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3, I4, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3, I4, I5))
						return &caller6x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3, I4, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization, a3 I3, a4 I4, a5 I5) {
							fn.(startBundle6x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3, I4, I5]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4, I5))
						return &caller6x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.BundleFinalization, a4 I4, a5 I5) {
							fn.(startBundle6x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4, I5]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[typex.EventTime, typex.BundleFinalization, I2, I3, I4, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization, I2, I3, I4, I5))
						return &caller6x0[typex.EventTime, typex.BundleFinalization, I2, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization, I2, I3, I4, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization, a2 I2, a3 I3, a4 I4, a5 I5) {
							fn.(startBundle6x0[typex.EventTime, typex.BundleFinalization, I2, I3, I4, I5]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[context.Context, typex.EventTime, typex.BundleFinalization, I3, I4, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization, I3, I4, I5))
						return &caller6x0[context.Context, typex.EventTime, typex.BundleFinalization, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization, I3, I4, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I3, a4 I4, a5 I5) {
							fn.(startBundle6x0[context.Context, typex.EventTime, typex.BundleFinalization, I3, I4, I5]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3, I4, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3, I4, I5))
						return &caller6x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3, I4, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I3, a4 I4, a5 I5) {
							fn.(startBundle6x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3, I4, I5]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4, I5))
						return &caller6x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I4, a5 I5) {
							fn.(startBundle6x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4, I5]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4, I5))
						return &caller6x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I3, a4 I4, a5 I5) {
							fn.(startBundle6x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4, I5]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5))
						return &caller6x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I4, a5 I5) {
							fn.(startBundle6x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5))
						return &caller6x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I4, a5 I5) {
							fn.(startBundle6x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I5))
						return &caller6x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 typex.BundleFinalization, a5 I5) {
							fn.(startBundle6x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I5]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				}
			case startBundleOut == 1:
				if _, ok := doFn.(startBundle6x1[I0, I1, I2, I3, I4, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I0, I1, I2, I3, I4, I5) error)
						return &caller6x1[I0, I1, I2, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I0, I1, I2, I3, I4, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I0, a1 I1, a2 I2, a3 I3, a4 I4, a5 I5) error {
							return fn.(startBundle6x1[I0, I1, I2, I3, I4, I5, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[context.Context, I1, I2, I3, I4, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, I1, I2, I3, I4, I5) error)
						return &caller6x1[context.Context, I1, I2, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, I1, I2, I3, I4, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 I1, a2 I2, a3 I3, a4 I4, a5 I5) error {
							return fn.(startBundle6x1[context.Context, I1, I2, I3, I4, I5, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[typex.PaneInfo, I1, I2, I3, I4, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, I1, I2, I3, I4, I5) error)
						return &caller6x1[typex.PaneInfo, I1, I2, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, I1, I2, I3, I4, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 I1, a2 I2, a3 I3, a4 I4, a5 I5) error {
							return fn.(startBundle6x1[typex.PaneInfo, I1, I2, I3, I4, I5, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[context.Context, typex.PaneInfo, I2, I3, I4, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, I2, I3, I4, I5) error)
						return &caller6x1[context.Context, typex.PaneInfo, I2, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, I2, I3, I4, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 I2, a3 I3, a4 I4, a5 I5) error {
							return fn.(startBundle6x1[context.Context, typex.PaneInfo, I2, I3, I4, I5, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[[]typex.Window, I1, I2, I3, I4, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, I1, I2, I3, I4, I5) error)
						return &caller6x1[[]typex.Window, I1, I2, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, I1, I2, I3, I4, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 I1, a2 I2, a3 I3, a4 I4, a5 I5) error {
							return fn.(startBundle6x1[[]typex.Window, I1, I2, I3, I4, I5, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[context.Context, []typex.Window, I2, I3, I4, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, I2, I3, I4, I5) error)
						return &caller6x1[context.Context, []typex.Window, I2, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, I2, I3, I4, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 I2, a3 I3, a4 I4, a5 I5) error {
							return fn.(startBundle6x1[context.Context, []typex.Window, I2, I3, I4, I5, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[typex.PaneInfo, []typex.Window, I2, I3, I4, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, I2, I3, I4, I5) error)
						return &caller6x1[typex.PaneInfo, []typex.Window, I2, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, I2, I3, I4, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 I2, a3 I3, a4 I4, a5 I5) error {
							return fn.(startBundle6x1[typex.PaneInfo, []typex.Window, I2, I3, I4, I5, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[context.Context, typex.PaneInfo, []typex.Window, I3, I4, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, I3, I4, I5) error)
						return &caller6x1[context.Context, typex.PaneInfo, []typex.Window, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, I3, I4, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 I3, a4 I4, a5 I5) error {
							return fn.(startBundle6x1[context.Context, typex.PaneInfo, []typex.Window, I3, I4, I5, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[typex.EventTime, I1, I2, I3, I4, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, I1, I2, I3, I4, I5) error)
						return &caller6x1[typex.EventTime, I1, I2, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, I1, I2, I3, I4, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 I1, a2 I2, a3 I3, a4 I4, a5 I5) error {
							return fn.(startBundle6x1[typex.EventTime, I1, I2, I3, I4, I5, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[context.Context, typex.EventTime, I2, I3, I4, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, I2, I3, I4, I5) error)
						return &caller6x1[context.Context, typex.EventTime, I2, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, I2, I3, I4, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 I2, a3 I3, a4 I4, a5 I5) error {
							return fn.(startBundle6x1[context.Context, typex.EventTime, I2, I3, I4, I5, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[typex.PaneInfo, typex.EventTime, I2, I3, I4, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, I2, I3, I4, I5) error)
						return &caller6x1[typex.PaneInfo, typex.EventTime, I2, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, I2, I3, I4, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 I2, a3 I3, a4 I4, a5 I5) error {
							return fn.(startBundle6x1[typex.PaneInfo, typex.EventTime, I2, I3, I4, I5, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[context.Context, typex.PaneInfo, typex.EventTime, I3, I4, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, I3, I4, I5) error)
						return &caller6x1[context.Context, typex.PaneInfo, typex.EventTime, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, I3, I4, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 I3, a4 I4, a5 I5) error {
							return fn.(startBundle6x1[context.Context, typex.PaneInfo, typex.EventTime, I3, I4, I5, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[[]typex.Window, typex.EventTime, I2, I3, I4, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, I2, I3, I4, I5) error)
						return &caller6x1[[]typex.Window, typex.EventTime, I2, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, I2, I3, I4, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 I2, a3 I3, a4 I4, a5 I5) error {
							return fn.(startBundle6x1[[]typex.Window, typex.EventTime, I2, I3, I4, I5, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[context.Context, []typex.Window, typex.EventTime, I3, I4, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, I3, I4, I5) error)
						return &caller6x1[context.Context, []typex.Window, typex.EventTime, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, I3, I4, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 I3, a4 I4, a5 I5) error {
							return fn.(startBundle6x1[context.Context, []typex.Window, typex.EventTime, I3, I4, I5, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[typex.PaneInfo, []typex.Window, typex.EventTime, I3, I4, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, I3, I4, I5) error)
						return &caller6x1[typex.PaneInfo, []typex.Window, typex.EventTime, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, I3, I4, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 I3, a4 I4, a5 I5) error {
							return fn.(startBundle6x1[typex.PaneInfo, []typex.Window, typex.EventTime, I3, I4, I5, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I4, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I4, I5) error)
						return &caller6x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I4, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 I4, a5 I5) error {
							return fn.(startBundle6x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I4, I5, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[typex.BundleFinalization, I1, I2, I3, I4, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization, I1, I2, I3, I4, I5) error)
						return &caller6x1[typex.BundleFinalization, I1, I2, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization, I1, I2, I3, I4, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization, a1 I1, a2 I2, a3 I3, a4 I4, a5 I5) error {
							return fn.(startBundle6x1[typex.BundleFinalization, I1, I2, I3, I4, I5, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[context.Context, typex.BundleFinalization, I2, I3, I4, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization, I2, I3, I4, I5) error)
						return &caller6x1[context.Context, typex.BundleFinalization, I2, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization, I2, I3, I4, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization, a2 I2, a3 I3, a4 I4, a5 I5) error {
							return fn.(startBundle6x1[context.Context, typex.BundleFinalization, I2, I3, I4, I5, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[typex.PaneInfo, typex.BundleFinalization, I2, I3, I4, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization, I2, I3, I4, I5) error)
						return &caller6x1[typex.PaneInfo, typex.BundleFinalization, I2, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization, I2, I3, I4, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization, a2 I2, a3 I3, a4 I4, a5 I5) error {
							return fn.(startBundle6x1[typex.PaneInfo, typex.BundleFinalization, I2, I3, I4, I5, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I3, I4, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization, I3, I4, I5) error)
						return &caller6x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization, I3, I4, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization, a3 I3, a4 I4, a5 I5) error {
							return fn.(startBundle6x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I3, I4, I5, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[[]typex.Window, typex.BundleFinalization, I2, I3, I4, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization, I2, I3, I4, I5) error)
						return &caller6x1[[]typex.Window, typex.BundleFinalization, I2, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization, I2, I3, I4, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization, a2 I2, a3 I3, a4 I4, a5 I5) error {
							return fn.(startBundle6x1[[]typex.Window, typex.BundleFinalization, I2, I3, I4, I5, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[context.Context, []typex.Window, typex.BundleFinalization, I3, I4, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization, I3, I4, I5) error)
						return &caller6x1[context.Context, []typex.Window, typex.BundleFinalization, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization, I3, I4, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization, a3 I3, a4 I4, a5 I5) error {
							return fn.(startBundle6x1[context.Context, []typex.Window, typex.BundleFinalization, I3, I4, I5, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3, I4, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3, I4, I5) error)
						return &caller6x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3, I4, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization, a3 I3, a4 I4, a5 I5) error {
							return fn.(startBundle6x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3, I4, I5, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4, I5) error)
						return &caller6x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.BundleFinalization, a4 I4, a5 I5) error {
							return fn.(startBundle6x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4, I5, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[typex.EventTime, typex.BundleFinalization, I2, I3, I4, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization, I2, I3, I4, I5) error)
						return &caller6x1[typex.EventTime, typex.BundleFinalization, I2, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization, I2, I3, I4, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization, a2 I2, a3 I3, a4 I4, a5 I5) error {
							return fn.(startBundle6x1[typex.EventTime, typex.BundleFinalization, I2, I3, I4, I5, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[context.Context, typex.EventTime, typex.BundleFinalization, I3, I4, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization, I3, I4, I5) error)
						return &caller6x1[context.Context, typex.EventTime, typex.BundleFinalization, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization, I3, I4, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I3, a4 I4, a5 I5) error {
							return fn.(startBundle6x1[context.Context, typex.EventTime, typex.BundleFinalization, I3, I4, I5, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3, I4, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3, I4, I5) error)
						return &caller6x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3, I4, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I3, a4 I4, a5 I5) error {
							return fn.(startBundle6x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3, I4, I5, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4, I5) error)
						return &caller6x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I4, a5 I5) error {
							return fn.(startBundle6x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4, I5, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4, I5) error)
						return &caller6x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I3, a4 I4, a5 I5) error {
							return fn.(startBundle6x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4, I5, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5) error)
						return &caller6x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I4, a5 I5) error {
							return fn.(startBundle6x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5) error)
						return &caller6x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I4, a5 I5) error {
							return fn.(startBundle6x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I5) error)
						return &caller6x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 typex.BundleFinalization, a5 I5) error {
							return fn.(startBundle6x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I5, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				}
			default:
				panic("Invalid signature for StartBundle")
			}

		case startBundleIn == 7:
			switch {
			case startBundleOut == 0:
				if _, ok := doFn.(startBundle7x0[context.Context, I0, I1, I2, I3, I4, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, I0, I1, I2, I3, I4, I5))
						return &caller7x0[context.Context, I0, I1, I2, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, I0, I1, I2, I3, I4, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 I0, a2 I1, a3 I2, a4 I3, a5 I4, a6 I5) {
							fn.(startBundle7x0[context.Context, I0, I1, I2, I3, I4, I5]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[typex.PaneInfo, I0, I1, I2, I3, I4, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, I0, I1, I2, I3, I4, I5))
						return &caller7x0[typex.PaneInfo, I0, I1, I2, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, I0, I1, I2, I3, I4, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 I0, a2 I1, a3 I2, a4 I3, a5 I4, a6 I5) {
							fn.(startBundle7x0[typex.PaneInfo, I0, I1, I2, I3, I4, I5]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[context.Context, typex.PaneInfo, I1, I2, I3, I4, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, I1, I2, I3, I4, I5))
						return &caller7x0[context.Context, typex.PaneInfo, I1, I2, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, I1, I2, I3, I4, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 I1, a3 I2, a4 I3, a5 I4, a6 I5) {
							fn.(startBundle7x0[context.Context, typex.PaneInfo, I1, I2, I3, I4, I5]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[[]typex.Window, I0, I1, I2, I3, I4, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, I0, I1, I2, I3, I4, I5))
						return &caller7x0[[]typex.Window, I0, I1, I2, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, I0, I1, I2, I3, I4, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 I0, a2 I1, a3 I2, a4 I3, a5 I4, a6 I5) {
							fn.(startBundle7x0[[]typex.Window, I0, I1, I2, I3, I4, I5]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[context.Context, []typex.Window, I1, I2, I3, I4, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, I1, I2, I3, I4, I5))
						return &caller7x0[context.Context, []typex.Window, I1, I2, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, I1, I2, I3, I4, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 I1, a3 I2, a4 I3, a5 I4, a6 I5) {
							fn.(startBundle7x0[context.Context, []typex.Window, I1, I2, I3, I4, I5]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[typex.PaneInfo, []typex.Window, I1, I2, I3, I4, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, I1, I2, I3, I4, I5))
						return &caller7x0[typex.PaneInfo, []typex.Window, I1, I2, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, I1, I2, I3, I4, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 I1, a3 I2, a4 I3, a5 I4, a6 I5) {
							fn.(startBundle7x0[typex.PaneInfo, []typex.Window, I1, I2, I3, I4, I5]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[context.Context, typex.PaneInfo, []typex.Window, I2, I3, I4, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, I2, I3, I4, I5))
						return &caller7x0[context.Context, typex.PaneInfo, []typex.Window, I2, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, I2, I3, I4, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 I2, a4 I3, a5 I4, a6 I5) {
							fn.(startBundle7x0[context.Context, typex.PaneInfo, []typex.Window, I2, I3, I4, I5]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[typex.EventTime, I0, I1, I2, I3, I4, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, I0, I1, I2, I3, I4, I5))
						return &caller7x0[typex.EventTime, I0, I1, I2, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, I0, I1, I2, I3, I4, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 I0, a2 I1, a3 I2, a4 I3, a5 I4, a6 I5) {
							fn.(startBundle7x0[typex.EventTime, I0, I1, I2, I3, I4, I5]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[context.Context, typex.EventTime, I1, I2, I3, I4, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, I1, I2, I3, I4, I5))
						return &caller7x0[context.Context, typex.EventTime, I1, I2, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, I1, I2, I3, I4, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 I1, a3 I2, a4 I3, a5 I4, a6 I5) {
							fn.(startBundle7x0[context.Context, typex.EventTime, I1, I2, I3, I4, I5]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[typex.PaneInfo, typex.EventTime, I1, I2, I3, I4, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, I1, I2, I3, I4, I5))
						return &caller7x0[typex.PaneInfo, typex.EventTime, I1, I2, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, I1, I2, I3, I4, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 I1, a3 I2, a4 I3, a5 I4, a6 I5) {
							fn.(startBundle7x0[typex.PaneInfo, typex.EventTime, I1, I2, I3, I4, I5]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[context.Context, typex.PaneInfo, typex.EventTime, I2, I3, I4, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, I2, I3, I4, I5))
						return &caller7x0[context.Context, typex.PaneInfo, typex.EventTime, I2, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, I2, I3, I4, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 I2, a4 I3, a5 I4, a6 I5) {
							fn.(startBundle7x0[context.Context, typex.PaneInfo, typex.EventTime, I2, I3, I4, I5]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[[]typex.Window, typex.EventTime, I1, I2, I3, I4, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, I1, I2, I3, I4, I5))
						return &caller7x0[[]typex.Window, typex.EventTime, I1, I2, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, I1, I2, I3, I4, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 I1, a3 I2, a4 I3, a5 I4, a6 I5) {
							fn.(startBundle7x0[[]typex.Window, typex.EventTime, I1, I2, I3, I4, I5]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[context.Context, []typex.Window, typex.EventTime, I2, I3, I4, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, I2, I3, I4, I5))
						return &caller7x0[context.Context, []typex.Window, typex.EventTime, I2, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, I2, I3, I4, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 I2, a4 I3, a5 I4, a6 I5) {
							fn.(startBundle7x0[context.Context, []typex.Window, typex.EventTime, I2, I3, I4, I5]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[typex.PaneInfo, []typex.Window, typex.EventTime, I2, I3, I4, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, I2, I3, I4, I5))
						return &caller7x0[typex.PaneInfo, []typex.Window, typex.EventTime, I2, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, I2, I3, I4, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 I2, a4 I3, a5 I4, a6 I5) {
							fn.(startBundle7x0[typex.PaneInfo, []typex.Window, typex.EventTime, I2, I3, I4, I5]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I3, I4, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I3, I4, I5))
						return &caller7x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I3, I4, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 I3, a5 I4, a6 I5) {
							fn.(startBundle7x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I3, I4, I5]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[typex.BundleFinalization, I0, I1, I2, I3, I4, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization, I0, I1, I2, I3, I4, I5))
						return &caller7x0[typex.BundleFinalization, I0, I1, I2, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization, I0, I1, I2, I3, I4, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization, a1 I0, a2 I1, a3 I2, a4 I3, a5 I4, a6 I5) {
							fn.(startBundle7x0[typex.BundleFinalization, I0, I1, I2, I3, I4, I5]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[context.Context, typex.BundleFinalization, I1, I2, I3, I4, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization, I1, I2, I3, I4, I5))
						return &caller7x0[context.Context, typex.BundleFinalization, I1, I2, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization, I1, I2, I3, I4, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization, a2 I1, a3 I2, a4 I3, a5 I4, a6 I5) {
							fn.(startBundle7x0[context.Context, typex.BundleFinalization, I1, I2, I3, I4, I5]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[typex.PaneInfo, typex.BundleFinalization, I1, I2, I3, I4, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization, I1, I2, I3, I4, I5))
						return &caller7x0[typex.PaneInfo, typex.BundleFinalization, I1, I2, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization, I1, I2, I3, I4, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization, a2 I1, a3 I2, a4 I3, a5 I4, a6 I5) {
							fn.(startBundle7x0[typex.PaneInfo, typex.BundleFinalization, I1, I2, I3, I4, I5]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I2, I3, I4, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization, I2, I3, I4, I5))
						return &caller7x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I2, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization, I2, I3, I4, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization, a3 I2, a4 I3, a5 I4, a6 I5) {
							fn.(startBundle7x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I2, I3, I4, I5]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[[]typex.Window, typex.BundleFinalization, I1, I2, I3, I4, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization, I1, I2, I3, I4, I5))
						return &caller7x0[[]typex.Window, typex.BundleFinalization, I1, I2, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization, I1, I2, I3, I4, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization, a2 I1, a3 I2, a4 I3, a5 I4, a6 I5) {
							fn.(startBundle7x0[[]typex.Window, typex.BundleFinalization, I1, I2, I3, I4, I5]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[context.Context, []typex.Window, typex.BundleFinalization, I2, I3, I4, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization, I2, I3, I4, I5))
						return &caller7x0[context.Context, []typex.Window, typex.BundleFinalization, I2, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization, I2, I3, I4, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization, a3 I2, a4 I3, a5 I4, a6 I5) {
							fn.(startBundle7x0[context.Context, []typex.Window, typex.BundleFinalization, I2, I3, I4, I5]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2, I3, I4, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2, I3, I4, I5))
						return &caller7x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2, I3, I4, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization, a3 I2, a4 I3, a5 I4, a6 I5) {
							fn.(startBundle7x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2, I3, I4, I5]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3, I4, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3, I4, I5))
						return &caller7x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3, I4, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.BundleFinalization, a4 I3, a5 I4, a6 I5) {
							fn.(startBundle7x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3, I4, I5]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[typex.EventTime, typex.BundleFinalization, I1, I2, I3, I4, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization, I1, I2, I3, I4, I5))
						return &caller7x0[typex.EventTime, typex.BundleFinalization, I1, I2, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization, I1, I2, I3, I4, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization, a2 I1, a3 I2, a4 I3, a5 I4, a6 I5) {
							fn.(startBundle7x0[typex.EventTime, typex.BundleFinalization, I1, I2, I3, I4, I5]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[context.Context, typex.EventTime, typex.BundleFinalization, I2, I3, I4, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization, I2, I3, I4, I5))
						return &caller7x0[context.Context, typex.EventTime, typex.BundleFinalization, I2, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization, I2, I3, I4, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I2, a4 I3, a5 I4, a6 I5) {
							fn.(startBundle7x0[context.Context, typex.EventTime, typex.BundleFinalization, I2, I3, I4, I5]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2, I3, I4, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2, I3, I4, I5))
						return &caller7x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2, I3, I4, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I2, a4 I3, a5 I4, a6 I5) {
							fn.(startBundle7x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2, I3, I4, I5]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3, I4, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3, I4, I5))
						return &caller7x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3, I4, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I3, a5 I4, a6 I5) {
							fn.(startBundle7x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3, I4, I5]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3, I4, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3, I4, I5))
						return &caller7x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3, I4, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I2, a4 I3, a5 I4, a6 I5) {
							fn.(startBundle7x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3, I4, I5]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4, I5))
						return &caller7x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I3, a5 I4, a6 I5) {
							fn.(startBundle7x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4, I5]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4, I5))
						return &caller7x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I3, a5 I4, a6 I5) {
							fn.(startBundle7x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4, I5]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5))
						return &caller7x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 typex.BundleFinalization, a5 I4, a6 I5) {
							fn.(startBundle7x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				}
			case startBundleOut == 1:
				if _, ok := doFn.(startBundle7x1[context.Context, I0, I1, I2, I3, I4, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, I0, I1, I2, I3, I4, I5) error)
						return &caller7x1[context.Context, I0, I1, I2, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, I0, I1, I2, I3, I4, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 I0, a2 I1, a3 I2, a4 I3, a5 I4, a6 I5) error {
							return fn.(startBundle7x1[context.Context, I0, I1, I2, I3, I4, I5, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[typex.PaneInfo, I0, I1, I2, I3, I4, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, I0, I1, I2, I3, I4, I5) error)
						return &caller7x1[typex.PaneInfo, I0, I1, I2, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, I0, I1, I2, I3, I4, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 I0, a2 I1, a3 I2, a4 I3, a5 I4, a6 I5) error {
							return fn.(startBundle7x1[typex.PaneInfo, I0, I1, I2, I3, I4, I5, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[context.Context, typex.PaneInfo, I1, I2, I3, I4, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, I1, I2, I3, I4, I5) error)
						return &caller7x1[context.Context, typex.PaneInfo, I1, I2, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, I1, I2, I3, I4, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 I1, a3 I2, a4 I3, a5 I4, a6 I5) error {
							return fn.(startBundle7x1[context.Context, typex.PaneInfo, I1, I2, I3, I4, I5, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[[]typex.Window, I0, I1, I2, I3, I4, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, I0, I1, I2, I3, I4, I5) error)
						return &caller7x1[[]typex.Window, I0, I1, I2, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, I0, I1, I2, I3, I4, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 I0, a2 I1, a3 I2, a4 I3, a5 I4, a6 I5) error {
							return fn.(startBundle7x1[[]typex.Window, I0, I1, I2, I3, I4, I5, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[context.Context, []typex.Window, I1, I2, I3, I4, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, I1, I2, I3, I4, I5) error)
						return &caller7x1[context.Context, []typex.Window, I1, I2, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, I1, I2, I3, I4, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 I1, a3 I2, a4 I3, a5 I4, a6 I5) error {
							return fn.(startBundle7x1[context.Context, []typex.Window, I1, I2, I3, I4, I5, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[typex.PaneInfo, []typex.Window, I1, I2, I3, I4, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, I1, I2, I3, I4, I5) error)
						return &caller7x1[typex.PaneInfo, []typex.Window, I1, I2, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, I1, I2, I3, I4, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 I1, a3 I2, a4 I3, a5 I4, a6 I5) error {
							return fn.(startBundle7x1[typex.PaneInfo, []typex.Window, I1, I2, I3, I4, I5, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[context.Context, typex.PaneInfo, []typex.Window, I2, I3, I4, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, I2, I3, I4, I5) error)
						return &caller7x1[context.Context, typex.PaneInfo, []typex.Window, I2, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, I2, I3, I4, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 I2, a4 I3, a5 I4, a6 I5) error {
							return fn.(startBundle7x1[context.Context, typex.PaneInfo, []typex.Window, I2, I3, I4, I5, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[typex.EventTime, I0, I1, I2, I3, I4, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, I0, I1, I2, I3, I4, I5) error)
						return &caller7x1[typex.EventTime, I0, I1, I2, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, I0, I1, I2, I3, I4, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 I0, a2 I1, a3 I2, a4 I3, a5 I4, a6 I5) error {
							return fn.(startBundle7x1[typex.EventTime, I0, I1, I2, I3, I4, I5, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[context.Context, typex.EventTime, I1, I2, I3, I4, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, I1, I2, I3, I4, I5) error)
						return &caller7x1[context.Context, typex.EventTime, I1, I2, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, I1, I2, I3, I4, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 I1, a3 I2, a4 I3, a5 I4, a6 I5) error {
							return fn.(startBundle7x1[context.Context, typex.EventTime, I1, I2, I3, I4, I5, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[typex.PaneInfo, typex.EventTime, I1, I2, I3, I4, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, I1, I2, I3, I4, I5) error)
						return &caller7x1[typex.PaneInfo, typex.EventTime, I1, I2, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, I1, I2, I3, I4, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 I1, a3 I2, a4 I3, a5 I4, a6 I5) error {
							return fn.(startBundle7x1[typex.PaneInfo, typex.EventTime, I1, I2, I3, I4, I5, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[context.Context, typex.PaneInfo, typex.EventTime, I2, I3, I4, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, I2, I3, I4, I5) error)
						return &caller7x1[context.Context, typex.PaneInfo, typex.EventTime, I2, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, I2, I3, I4, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 I2, a4 I3, a5 I4, a6 I5) error {
							return fn.(startBundle7x1[context.Context, typex.PaneInfo, typex.EventTime, I2, I3, I4, I5, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[[]typex.Window, typex.EventTime, I1, I2, I3, I4, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, I1, I2, I3, I4, I5) error)
						return &caller7x1[[]typex.Window, typex.EventTime, I1, I2, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, I1, I2, I3, I4, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 I1, a3 I2, a4 I3, a5 I4, a6 I5) error {
							return fn.(startBundle7x1[[]typex.Window, typex.EventTime, I1, I2, I3, I4, I5, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[context.Context, []typex.Window, typex.EventTime, I2, I3, I4, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, I2, I3, I4, I5) error)
						return &caller7x1[context.Context, []typex.Window, typex.EventTime, I2, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, I2, I3, I4, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 I2, a4 I3, a5 I4, a6 I5) error {
							return fn.(startBundle7x1[context.Context, []typex.Window, typex.EventTime, I2, I3, I4, I5, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[typex.PaneInfo, []typex.Window, typex.EventTime, I2, I3, I4, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, I2, I3, I4, I5) error)
						return &caller7x1[typex.PaneInfo, []typex.Window, typex.EventTime, I2, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, I2, I3, I4, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 I2, a4 I3, a5 I4, a6 I5) error {
							return fn.(startBundle7x1[typex.PaneInfo, []typex.Window, typex.EventTime, I2, I3, I4, I5, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I3, I4, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I3, I4, I5) error)
						return &caller7x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I3, I4, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 I3, a5 I4, a6 I5) error {
							return fn.(startBundle7x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I3, I4, I5, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[typex.BundleFinalization, I0, I1, I2, I3, I4, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization, I0, I1, I2, I3, I4, I5) error)
						return &caller7x1[typex.BundleFinalization, I0, I1, I2, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization, I0, I1, I2, I3, I4, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization, a1 I0, a2 I1, a3 I2, a4 I3, a5 I4, a6 I5) error {
							return fn.(startBundle7x1[typex.BundleFinalization, I0, I1, I2, I3, I4, I5, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[context.Context, typex.BundleFinalization, I1, I2, I3, I4, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization, I1, I2, I3, I4, I5) error)
						return &caller7x1[context.Context, typex.BundleFinalization, I1, I2, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization, I1, I2, I3, I4, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization, a2 I1, a3 I2, a4 I3, a5 I4, a6 I5) error {
							return fn.(startBundle7x1[context.Context, typex.BundleFinalization, I1, I2, I3, I4, I5, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[typex.PaneInfo, typex.BundleFinalization, I1, I2, I3, I4, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization, I1, I2, I3, I4, I5) error)
						return &caller7x1[typex.PaneInfo, typex.BundleFinalization, I1, I2, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization, I1, I2, I3, I4, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization, a2 I1, a3 I2, a4 I3, a5 I4, a6 I5) error {
							return fn.(startBundle7x1[typex.PaneInfo, typex.BundleFinalization, I1, I2, I3, I4, I5, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I2, I3, I4, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization, I2, I3, I4, I5) error)
						return &caller7x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I2, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization, I2, I3, I4, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization, a3 I2, a4 I3, a5 I4, a6 I5) error {
							return fn.(startBundle7x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I2, I3, I4, I5, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[[]typex.Window, typex.BundleFinalization, I1, I2, I3, I4, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization, I1, I2, I3, I4, I5) error)
						return &caller7x1[[]typex.Window, typex.BundleFinalization, I1, I2, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization, I1, I2, I3, I4, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization, a2 I1, a3 I2, a4 I3, a5 I4, a6 I5) error {
							return fn.(startBundle7x1[[]typex.Window, typex.BundleFinalization, I1, I2, I3, I4, I5, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[context.Context, []typex.Window, typex.BundleFinalization, I2, I3, I4, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization, I2, I3, I4, I5) error)
						return &caller7x1[context.Context, []typex.Window, typex.BundleFinalization, I2, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization, I2, I3, I4, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization, a3 I2, a4 I3, a5 I4, a6 I5) error {
							return fn.(startBundle7x1[context.Context, []typex.Window, typex.BundleFinalization, I2, I3, I4, I5, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2, I3, I4, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2, I3, I4, I5) error)
						return &caller7x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2, I3, I4, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization, a3 I2, a4 I3, a5 I4, a6 I5) error {
							return fn.(startBundle7x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2, I3, I4, I5, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3, I4, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3, I4, I5) error)
						return &caller7x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3, I4, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.BundleFinalization, a4 I3, a5 I4, a6 I5) error {
							return fn.(startBundle7x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3, I4, I5, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[typex.EventTime, typex.BundleFinalization, I1, I2, I3, I4, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization, I1, I2, I3, I4, I5) error)
						return &caller7x1[typex.EventTime, typex.BundleFinalization, I1, I2, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization, I1, I2, I3, I4, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization, a2 I1, a3 I2, a4 I3, a5 I4, a6 I5) error {
							return fn.(startBundle7x1[typex.EventTime, typex.BundleFinalization, I1, I2, I3, I4, I5, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[context.Context, typex.EventTime, typex.BundleFinalization, I2, I3, I4, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization, I2, I3, I4, I5) error)
						return &caller7x1[context.Context, typex.EventTime, typex.BundleFinalization, I2, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization, I2, I3, I4, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I2, a4 I3, a5 I4, a6 I5) error {
							return fn.(startBundle7x1[context.Context, typex.EventTime, typex.BundleFinalization, I2, I3, I4, I5, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2, I3, I4, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2, I3, I4, I5) error)
						return &caller7x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2, I3, I4, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I2, a4 I3, a5 I4, a6 I5) error {
							return fn.(startBundle7x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2, I3, I4, I5, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3, I4, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3, I4, I5) error)
						return &caller7x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3, I4, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I3, a5 I4, a6 I5) error {
							return fn.(startBundle7x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3, I4, I5, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3, I4, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3, I4, I5) error)
						return &caller7x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3, I4, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I2, a4 I3, a5 I4, a6 I5) error {
							return fn.(startBundle7x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3, I4, I5, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4, I5) error)
						return &caller7x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I3, a5 I4, a6 I5) error {
							return fn.(startBundle7x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4, I5, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4, I5) error)
						return &caller7x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I3, a5 I4, a6 I5) error {
							return fn.(startBundle7x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4, I5, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5) error)
						return &caller7x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 typex.BundleFinalization, a5 I4, a6 I5) error {
							return fn.(startBundle7x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				}
			default:
				panic("Invalid signature for StartBundle")
			}

		default:
			panic("Invalid signature for StartBundle")
		}
	}
	return nil
}

func buildStartBundleWrapper7[I0, I1, I2, I3, I4, I5, I6 any](doFn interface{}) func(interface{}) reflectx.Func {
	startBundleIn := -1
	startBundleOut := -1
	startBundleMethod := reflect.ValueOf(doFn).MethodByName("StartBundle")
	if startBundleMethod.IsValid() {
		startBundleIn = startBundleMethod.Type().NumIn()
		startBundleOut = startBundleMethod.Type().NumOut()
		switch {

		case startBundleIn == 0:
			switch {
			case startBundleOut == 0:
				if _, ok := doFn.(startBundle0x0); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func())
						return &caller0x0{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func())(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func() { fn.(startBundle0x0).StartBundle() })
					}
				}
			case startBundleOut == 1:
				if _, ok := doFn.(startBundle0x1[error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func() error)
						return &caller0x1[error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func() error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func() error { return fn.(startBundle0x1[error]).StartBundle() })
					}
				}
			default:
				panic("Invalid signature for StartBundle")
			}

		case startBundleIn == 1:
			switch {
			case startBundleOut == 0:
				if _, ok := doFn.(startBundle1x0[I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I6))
						return &caller1x0[I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I6) { fn.(startBundle1x0[I6]).StartBundle(a0) })
					}
				} else if _, ok := doFn.(startBundle1x0[context.Context]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context))
						return &caller1x0[context.Context]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context) { fn.(startBundle1x0[context.Context]).StartBundle(a0) })
					}
				} else if _, ok := doFn.(startBundle1x0[typex.PaneInfo]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo))
						return &caller1x0[typex.PaneInfo]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo) { fn.(startBundle1x0[typex.PaneInfo]).StartBundle(a0) })
					}
				} else if _, ok := doFn.(startBundle1x0[[]typex.Window]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window))
						return &caller1x0[[]typex.Window]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window) { fn.(startBundle1x0[[]typex.Window]).StartBundle(a0) })
					}
				} else if _, ok := doFn.(startBundle1x0[typex.EventTime]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime))
						return &caller1x0[typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime) { fn.(startBundle1x0[typex.EventTime]).StartBundle(a0) })
					}
				} else if _, ok := doFn.(startBundle1x0[typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization))
						return &caller1x0[typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization) { fn.(startBundle1x0[typex.BundleFinalization]).StartBundle(a0) })
					}
				}
			case startBundleOut == 1:
				if _, ok := doFn.(startBundle1x1[I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I6) error)
						return &caller1x1[I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I6) error { return fn.(startBundle1x1[I6, error]).StartBundle(a0) })
					}
				} else if _, ok := doFn.(startBundle1x1[context.Context, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context) error)
						return &caller1x1[context.Context, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context) error { return fn.(startBundle1x1[context.Context, error]).StartBundle(a0) })
					}
				} else if _, ok := doFn.(startBundle1x1[typex.PaneInfo, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo) error)
						return &caller1x1[typex.PaneInfo, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo) error { return fn.(startBundle1x1[typex.PaneInfo, error]).StartBundle(a0) })
					}
				} else if _, ok := doFn.(startBundle1x1[[]typex.Window, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window) error)
						return &caller1x1[[]typex.Window, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window) error { return fn.(startBundle1x1[[]typex.Window, error]).StartBundle(a0) })
					}
				} else if _, ok := doFn.(startBundle1x1[typex.EventTime, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime) error)
						return &caller1x1[typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime) error { return fn.(startBundle1x1[typex.EventTime, error]).StartBundle(a0) })
					}
				} else if _, ok := doFn.(startBundle1x1[typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization) error)
						return &caller1x1[typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization) error {
							return fn.(startBundle1x1[typex.BundleFinalization, error]).StartBundle(a0)
						})
					}
				}
			default:
				panic("Invalid signature for StartBundle")
			}

		case startBundleIn == 2:
			switch {
			case startBundleOut == 0:
				if _, ok := doFn.(startBundle2x0[I5, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I5, I6))
						return &caller2x0[I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I5, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I5, a1 I6) { fn.(startBundle2x0[I5, I6]).StartBundle(a0, a1) })
					}
				} else if _, ok := doFn.(startBundle2x0[context.Context, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, I6))
						return &caller2x0[context.Context, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 I6) { fn.(startBundle2x0[context.Context, I6]).StartBundle(a0, a1) })
					}
				} else if _, ok := doFn.(startBundle2x0[typex.PaneInfo, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, I6))
						return &caller2x0[typex.PaneInfo, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 I6) { fn.(startBundle2x0[typex.PaneInfo, I6]).StartBundle(a0, a1) })
					}
				} else if _, ok := doFn.(startBundle2x0[context.Context, typex.PaneInfo]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo))
						return &caller2x0[context.Context, typex.PaneInfo]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo) {
							fn.(startBundle2x0[context.Context, typex.PaneInfo]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x0[[]typex.Window, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, I6))
						return &caller2x0[[]typex.Window, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 I6) { fn.(startBundle2x0[[]typex.Window, I6]).StartBundle(a0, a1) })
					}
				} else if _, ok := doFn.(startBundle2x0[context.Context, []typex.Window]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window))
						return &caller2x0[context.Context, []typex.Window]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window) {
							fn.(startBundle2x0[context.Context, []typex.Window]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x0[typex.PaneInfo, []typex.Window]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window))
						return &caller2x0[typex.PaneInfo, []typex.Window]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window) {
							fn.(startBundle2x0[typex.PaneInfo, []typex.Window]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x0[typex.EventTime, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, I6))
						return &caller2x0[typex.EventTime, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 I6) { fn.(startBundle2x0[typex.EventTime, I6]).StartBundle(a0, a1) })
					}
				} else if _, ok := doFn.(startBundle2x0[context.Context, typex.EventTime]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime))
						return &caller2x0[context.Context, typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime) {
							fn.(startBundle2x0[context.Context, typex.EventTime]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x0[typex.PaneInfo, typex.EventTime]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime))
						return &caller2x0[typex.PaneInfo, typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime) {
							fn.(startBundle2x0[typex.PaneInfo, typex.EventTime]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x0[[]typex.Window, typex.EventTime]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime))
						return &caller2x0[[]typex.Window, typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime) {
							fn.(startBundle2x0[[]typex.Window, typex.EventTime]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x0[typex.BundleFinalization, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization, I6))
						return &caller2x0[typex.BundleFinalization, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization, a1 I6) {
							fn.(startBundle2x0[typex.BundleFinalization, I6]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x0[context.Context, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization))
						return &caller2x0[context.Context, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization) {
							fn.(startBundle2x0[context.Context, typex.BundleFinalization]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x0[typex.PaneInfo, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization))
						return &caller2x0[typex.PaneInfo, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization) {
							fn.(startBundle2x0[typex.PaneInfo, typex.BundleFinalization]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x0[[]typex.Window, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization))
						return &caller2x0[[]typex.Window, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization) {
							fn.(startBundle2x0[[]typex.Window, typex.BundleFinalization]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x0[typex.EventTime, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization))
						return &caller2x0[typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization) {
							fn.(startBundle2x0[typex.EventTime, typex.BundleFinalization]).StartBundle(a0, a1)
						})
					}
				}
			case startBundleOut == 1:
				if _, ok := doFn.(startBundle2x1[I5, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I5, I6) error)
						return &caller2x1[I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I5, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I5, a1 I6) error { return fn.(startBundle2x1[I5, I6, error]).StartBundle(a0, a1) })
					}
				} else if _, ok := doFn.(startBundle2x1[context.Context, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, I6) error)
						return &caller2x1[context.Context, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 I6) error {
							return fn.(startBundle2x1[context.Context, I6, error]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x1[typex.PaneInfo, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, I6) error)
						return &caller2x1[typex.PaneInfo, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 I6) error {
							return fn.(startBundle2x1[typex.PaneInfo, I6, error]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x1[context.Context, typex.PaneInfo, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo) error)
						return &caller2x1[context.Context, typex.PaneInfo, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo) error {
							return fn.(startBundle2x1[context.Context, typex.PaneInfo, error]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x1[[]typex.Window, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, I6) error)
						return &caller2x1[[]typex.Window, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 I6) error {
							return fn.(startBundle2x1[[]typex.Window, I6, error]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x1[context.Context, []typex.Window, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window) error)
						return &caller2x1[context.Context, []typex.Window, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window) error {
							return fn.(startBundle2x1[context.Context, []typex.Window, error]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x1[typex.PaneInfo, []typex.Window, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window) error)
						return &caller2x1[typex.PaneInfo, []typex.Window, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window) error {
							return fn.(startBundle2x1[typex.PaneInfo, []typex.Window, error]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x1[typex.EventTime, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, I6) error)
						return &caller2x1[typex.EventTime, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 I6) error {
							return fn.(startBundle2x1[typex.EventTime, I6, error]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x1[context.Context, typex.EventTime, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime) error)
						return &caller2x1[context.Context, typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime) error {
							return fn.(startBundle2x1[context.Context, typex.EventTime, error]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x1[typex.PaneInfo, typex.EventTime, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime) error)
						return &caller2x1[typex.PaneInfo, typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime) error {
							return fn.(startBundle2x1[typex.PaneInfo, typex.EventTime, error]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x1[[]typex.Window, typex.EventTime, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime) error)
						return &caller2x1[[]typex.Window, typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime) error {
							return fn.(startBundle2x1[[]typex.Window, typex.EventTime, error]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x1[typex.BundleFinalization, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization, I6) error)
						return &caller2x1[typex.BundleFinalization, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization, a1 I6) error {
							return fn.(startBundle2x1[typex.BundleFinalization, I6, error]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x1[context.Context, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization) error)
						return &caller2x1[context.Context, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization) error {
							return fn.(startBundle2x1[context.Context, typex.BundleFinalization, error]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x1[typex.PaneInfo, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization) error)
						return &caller2x1[typex.PaneInfo, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization) error {
							return fn.(startBundle2x1[typex.PaneInfo, typex.BundleFinalization, error]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x1[[]typex.Window, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization) error)
						return &caller2x1[[]typex.Window, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization) error {
							return fn.(startBundle2x1[[]typex.Window, typex.BundleFinalization, error]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x1[typex.EventTime, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization) error)
						return &caller2x1[typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization) error {
							return fn.(startBundle2x1[typex.EventTime, typex.BundleFinalization, error]).StartBundle(a0, a1)
						})
					}
				}
			default:
				panic("Invalid signature for StartBundle")
			}

		case startBundleIn == 3:
			switch {
			case startBundleOut == 0:
				if _, ok := doFn.(startBundle3x0[I4, I5, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I4, I5, I6))
						return &caller3x0[I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I4, I5, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I4, a1 I5, a2 I6) { fn.(startBundle3x0[I4, I5, I6]).StartBundle(a0, a1, a2) })
					}
				} else if _, ok := doFn.(startBundle3x0[context.Context, I5, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, I5, I6))
						return &caller3x0[context.Context, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, I5, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 I5, a2 I6) {
							fn.(startBundle3x0[context.Context, I5, I6]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[typex.PaneInfo, I5, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, I5, I6))
						return &caller3x0[typex.PaneInfo, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, I5, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 I5, a2 I6) {
							fn.(startBundle3x0[typex.PaneInfo, I5, I6]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[context.Context, typex.PaneInfo, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, I6))
						return &caller3x0[context.Context, typex.PaneInfo, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 I6) {
							fn.(startBundle3x0[context.Context, typex.PaneInfo, I6]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[[]typex.Window, I5, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, I5, I6))
						return &caller3x0[[]typex.Window, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, I5, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 I5, a2 I6) {
							fn.(startBundle3x0[[]typex.Window, I5, I6]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[context.Context, []typex.Window, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, I6))
						return &caller3x0[context.Context, []typex.Window, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 I6) {
							fn.(startBundle3x0[context.Context, []typex.Window, I6]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[typex.PaneInfo, []typex.Window, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, I6))
						return &caller3x0[typex.PaneInfo, []typex.Window, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 I6) {
							fn.(startBundle3x0[typex.PaneInfo, []typex.Window, I6]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[context.Context, typex.PaneInfo, []typex.Window]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window))
						return &caller3x0[context.Context, typex.PaneInfo, []typex.Window]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window) {
							fn.(startBundle3x0[context.Context, typex.PaneInfo, []typex.Window]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[typex.EventTime, I5, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, I5, I6))
						return &caller3x0[typex.EventTime, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, I5, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 I5, a2 I6) {
							fn.(startBundle3x0[typex.EventTime, I5, I6]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[context.Context, typex.EventTime, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, I6))
						return &caller3x0[context.Context, typex.EventTime, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 I6) {
							fn.(startBundle3x0[context.Context, typex.EventTime, I6]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[typex.PaneInfo, typex.EventTime, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, I6))
						return &caller3x0[typex.PaneInfo, typex.EventTime, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 I6) {
							fn.(startBundle3x0[typex.PaneInfo, typex.EventTime, I6]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[context.Context, typex.PaneInfo, typex.EventTime]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime))
						return &caller3x0[context.Context, typex.PaneInfo, typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime) {
							fn.(startBundle3x0[context.Context, typex.PaneInfo, typex.EventTime]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[[]typex.Window, typex.EventTime, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, I6))
						return &caller3x0[[]typex.Window, typex.EventTime, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 I6) {
							fn.(startBundle3x0[[]typex.Window, typex.EventTime, I6]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[context.Context, []typex.Window, typex.EventTime]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime))
						return &caller3x0[context.Context, []typex.Window, typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime) {
							fn.(startBundle3x0[context.Context, []typex.Window, typex.EventTime]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[typex.PaneInfo, []typex.Window, typex.EventTime]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime))
						return &caller3x0[typex.PaneInfo, []typex.Window, typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime) {
							fn.(startBundle3x0[typex.PaneInfo, []typex.Window, typex.EventTime]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[typex.BundleFinalization, I5, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization, I5, I6))
						return &caller3x0[typex.BundleFinalization, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization, I5, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization, a1 I5, a2 I6) {
							fn.(startBundle3x0[typex.BundleFinalization, I5, I6]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[context.Context, typex.BundleFinalization, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization, I6))
						return &caller3x0[context.Context, typex.BundleFinalization, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization, a2 I6) {
							fn.(startBundle3x0[context.Context, typex.BundleFinalization, I6]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[typex.PaneInfo, typex.BundleFinalization, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization, I6))
						return &caller3x0[typex.PaneInfo, typex.BundleFinalization, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization, a2 I6) {
							fn.(startBundle3x0[typex.PaneInfo, typex.BundleFinalization, I6]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[context.Context, typex.PaneInfo, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization))
						return &caller3x0[context.Context, typex.PaneInfo, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization) {
							fn.(startBundle3x0[context.Context, typex.PaneInfo, typex.BundleFinalization]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[[]typex.Window, typex.BundleFinalization, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization, I6))
						return &caller3x0[[]typex.Window, typex.BundleFinalization, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization, a2 I6) {
							fn.(startBundle3x0[[]typex.Window, typex.BundleFinalization, I6]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[context.Context, []typex.Window, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization))
						return &caller3x0[context.Context, []typex.Window, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization) {
							fn.(startBundle3x0[context.Context, []typex.Window, typex.BundleFinalization]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization))
						return &caller3x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization) {
							fn.(startBundle3x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[typex.EventTime, typex.BundleFinalization, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization, I6))
						return &caller3x0[typex.EventTime, typex.BundleFinalization, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization, a2 I6) {
							fn.(startBundle3x0[typex.EventTime, typex.BundleFinalization, I6]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[context.Context, typex.EventTime, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization))
						return &caller3x0[context.Context, typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization) {
							fn.(startBundle3x0[context.Context, typex.EventTime, typex.BundleFinalization]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization))
						return &caller3x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization) {
							fn.(startBundle3x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[[]typex.Window, typex.EventTime, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization))
						return &caller3x0[[]typex.Window, typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization) {
							fn.(startBundle3x0[[]typex.Window, typex.EventTime, typex.BundleFinalization]).StartBundle(a0, a1, a2)
						})
					}
				}
			case startBundleOut == 1:
				if _, ok := doFn.(startBundle3x1[I4, I5, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I4, I5, I6) error)
						return &caller3x1[I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I4, I5, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I4, a1 I5, a2 I6) error { return fn.(startBundle3x1[I4, I5, I6, error]).StartBundle(a0, a1, a2) })
					}
				} else if _, ok := doFn.(startBundle3x1[context.Context, I5, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, I5, I6) error)
						return &caller3x1[context.Context, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, I5, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 I5, a2 I6) error {
							return fn.(startBundle3x1[context.Context, I5, I6, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[typex.PaneInfo, I5, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, I5, I6) error)
						return &caller3x1[typex.PaneInfo, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, I5, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 I5, a2 I6) error {
							return fn.(startBundle3x1[typex.PaneInfo, I5, I6, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[context.Context, typex.PaneInfo, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, I6) error)
						return &caller3x1[context.Context, typex.PaneInfo, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 I6) error {
							return fn.(startBundle3x1[context.Context, typex.PaneInfo, I6, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[[]typex.Window, I5, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, I5, I6) error)
						return &caller3x1[[]typex.Window, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, I5, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 I5, a2 I6) error {
							return fn.(startBundle3x1[[]typex.Window, I5, I6, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[context.Context, []typex.Window, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, I6) error)
						return &caller3x1[context.Context, []typex.Window, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 I6) error {
							return fn.(startBundle3x1[context.Context, []typex.Window, I6, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[typex.PaneInfo, []typex.Window, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, I6) error)
						return &caller3x1[typex.PaneInfo, []typex.Window, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 I6) error {
							return fn.(startBundle3x1[typex.PaneInfo, []typex.Window, I6, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[context.Context, typex.PaneInfo, []typex.Window, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window) error)
						return &caller3x1[context.Context, typex.PaneInfo, []typex.Window, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window) error {
							return fn.(startBundle3x1[context.Context, typex.PaneInfo, []typex.Window, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[typex.EventTime, I5, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, I5, I6) error)
						return &caller3x1[typex.EventTime, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, I5, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 I5, a2 I6) error {
							return fn.(startBundle3x1[typex.EventTime, I5, I6, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[context.Context, typex.EventTime, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, I6) error)
						return &caller3x1[context.Context, typex.EventTime, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 I6) error {
							return fn.(startBundle3x1[context.Context, typex.EventTime, I6, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[typex.PaneInfo, typex.EventTime, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, I6) error)
						return &caller3x1[typex.PaneInfo, typex.EventTime, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 I6) error {
							return fn.(startBundle3x1[typex.PaneInfo, typex.EventTime, I6, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[context.Context, typex.PaneInfo, typex.EventTime, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime) error)
						return &caller3x1[context.Context, typex.PaneInfo, typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime) error {
							return fn.(startBundle3x1[context.Context, typex.PaneInfo, typex.EventTime, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[[]typex.Window, typex.EventTime, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, I6) error)
						return &caller3x1[[]typex.Window, typex.EventTime, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 I6) error {
							return fn.(startBundle3x1[[]typex.Window, typex.EventTime, I6, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[context.Context, []typex.Window, typex.EventTime, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime) error)
						return &caller3x1[context.Context, []typex.Window, typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime) error {
							return fn.(startBundle3x1[context.Context, []typex.Window, typex.EventTime, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[typex.PaneInfo, []typex.Window, typex.EventTime, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime) error)
						return &caller3x1[typex.PaneInfo, []typex.Window, typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime) error {
							return fn.(startBundle3x1[typex.PaneInfo, []typex.Window, typex.EventTime, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[typex.BundleFinalization, I5, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization, I5, I6) error)
						return &caller3x1[typex.BundleFinalization, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization, I5, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization, a1 I5, a2 I6) error {
							return fn.(startBundle3x1[typex.BundleFinalization, I5, I6, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[context.Context, typex.BundleFinalization, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization, I6) error)
						return &caller3x1[context.Context, typex.BundleFinalization, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization, a2 I6) error {
							return fn.(startBundle3x1[context.Context, typex.BundleFinalization, I6, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[typex.PaneInfo, typex.BundleFinalization, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization, I6) error)
						return &caller3x1[typex.PaneInfo, typex.BundleFinalization, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization, a2 I6) error {
							return fn.(startBundle3x1[typex.PaneInfo, typex.BundleFinalization, I6, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[context.Context, typex.PaneInfo, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization) error)
						return &caller3x1[context.Context, typex.PaneInfo, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization) error {
							return fn.(startBundle3x1[context.Context, typex.PaneInfo, typex.BundleFinalization, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[[]typex.Window, typex.BundleFinalization, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization, I6) error)
						return &caller3x1[[]typex.Window, typex.BundleFinalization, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization, a2 I6) error {
							return fn.(startBundle3x1[[]typex.Window, typex.BundleFinalization, I6, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[context.Context, []typex.Window, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization) error)
						return &caller3x1[context.Context, []typex.Window, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization) error {
							return fn.(startBundle3x1[context.Context, []typex.Window, typex.BundleFinalization, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization) error)
						return &caller3x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization) error {
							return fn.(startBundle3x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[typex.EventTime, typex.BundleFinalization, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization, I6) error)
						return &caller3x1[typex.EventTime, typex.BundleFinalization, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization, a2 I6) error {
							return fn.(startBundle3x1[typex.EventTime, typex.BundleFinalization, I6, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[context.Context, typex.EventTime, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization) error)
						return &caller3x1[context.Context, typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization) error {
							return fn.(startBundle3x1[context.Context, typex.EventTime, typex.BundleFinalization, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization) error)
						return &caller3x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization) error {
							return fn.(startBundle3x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization) error)
						return &caller3x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization) error {
							return fn.(startBundle3x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, error]).StartBundle(a0, a1, a2)
						})
					}
				}
			default:
				panic("Invalid signature for StartBundle")
			}

		case startBundleIn == 4:
			switch {
			case startBundleOut == 0:
				if _, ok := doFn.(startBundle4x0[I3, I4, I5, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I3, I4, I5, I6))
						return &caller4x0[I3, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I3, I4, I5, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I3, a1 I4, a2 I5, a3 I6) { fn.(startBundle4x0[I3, I4, I5, I6]).StartBundle(a0, a1, a2, a3) })
					}
				} else if _, ok := doFn.(startBundle4x0[context.Context, I4, I5, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, I4, I5, I6))
						return &caller4x0[context.Context, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, I4, I5, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 I4, a2 I5, a3 I6) {
							fn.(startBundle4x0[context.Context, I4, I5, I6]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[typex.PaneInfo, I4, I5, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, I4, I5, I6))
						return &caller4x0[typex.PaneInfo, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, I4, I5, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 I4, a2 I5, a3 I6) {
							fn.(startBundle4x0[typex.PaneInfo, I4, I5, I6]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[context.Context, typex.PaneInfo, I5, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, I5, I6))
						return &caller4x0[context.Context, typex.PaneInfo, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, I5, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 I5, a3 I6) {
							fn.(startBundle4x0[context.Context, typex.PaneInfo, I5, I6]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[[]typex.Window, I4, I5, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, I4, I5, I6))
						return &caller4x0[[]typex.Window, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, I4, I5, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 I4, a2 I5, a3 I6) {
							fn.(startBundle4x0[[]typex.Window, I4, I5, I6]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[context.Context, []typex.Window, I5, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, I5, I6))
						return &caller4x0[context.Context, []typex.Window, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, I5, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 I5, a3 I6) {
							fn.(startBundle4x0[context.Context, []typex.Window, I5, I6]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[typex.PaneInfo, []typex.Window, I5, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, I5, I6))
						return &caller4x0[typex.PaneInfo, []typex.Window, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, I5, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 I5, a3 I6) {
							fn.(startBundle4x0[typex.PaneInfo, []typex.Window, I5, I6]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[context.Context, typex.PaneInfo, []typex.Window, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, I6))
						return &caller4x0[context.Context, typex.PaneInfo, []typex.Window, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 I6) {
							fn.(startBundle4x0[context.Context, typex.PaneInfo, []typex.Window, I6]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[typex.EventTime, I4, I5, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, I4, I5, I6))
						return &caller4x0[typex.EventTime, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, I4, I5, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 I4, a2 I5, a3 I6) {
							fn.(startBundle4x0[typex.EventTime, I4, I5, I6]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[context.Context, typex.EventTime, I5, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, I5, I6))
						return &caller4x0[context.Context, typex.EventTime, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, I5, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 I5, a3 I6) {
							fn.(startBundle4x0[context.Context, typex.EventTime, I5, I6]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[typex.PaneInfo, typex.EventTime, I5, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, I5, I6))
						return &caller4x0[typex.PaneInfo, typex.EventTime, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, I5, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 I5, a3 I6) {
							fn.(startBundle4x0[typex.PaneInfo, typex.EventTime, I5, I6]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[context.Context, typex.PaneInfo, typex.EventTime, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, I6))
						return &caller4x0[context.Context, typex.PaneInfo, typex.EventTime, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 I6) {
							fn.(startBundle4x0[context.Context, typex.PaneInfo, typex.EventTime, I6]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[[]typex.Window, typex.EventTime, I5, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, I5, I6))
						return &caller4x0[[]typex.Window, typex.EventTime, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, I5, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 I5, a3 I6) {
							fn.(startBundle4x0[[]typex.Window, typex.EventTime, I5, I6]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[context.Context, []typex.Window, typex.EventTime, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, I6))
						return &caller4x0[context.Context, []typex.Window, typex.EventTime, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 I6) {
							fn.(startBundle4x0[context.Context, []typex.Window, typex.EventTime, I6]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[typex.PaneInfo, []typex.Window, typex.EventTime, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, I6))
						return &caller4x0[typex.PaneInfo, []typex.Window, typex.EventTime, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 I6) {
							fn.(startBundle4x0[typex.PaneInfo, []typex.Window, typex.EventTime, I6]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime))
						return &caller4x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime) {
							fn.(startBundle4x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[typex.BundleFinalization, I4, I5, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization, I4, I5, I6))
						return &caller4x0[typex.BundleFinalization, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization, I4, I5, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization, a1 I4, a2 I5, a3 I6) {
							fn.(startBundle4x0[typex.BundleFinalization, I4, I5, I6]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[context.Context, typex.BundleFinalization, I5, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization, I5, I6))
						return &caller4x0[context.Context, typex.BundleFinalization, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization, I5, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization, a2 I5, a3 I6) {
							fn.(startBundle4x0[context.Context, typex.BundleFinalization, I5, I6]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[typex.PaneInfo, typex.BundleFinalization, I5, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization, I5, I6))
						return &caller4x0[typex.PaneInfo, typex.BundleFinalization, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization, I5, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization, a2 I5, a3 I6) {
							fn.(startBundle4x0[typex.PaneInfo, typex.BundleFinalization, I5, I6]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization, I6))
						return &caller4x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization, a3 I6) {
							fn.(startBundle4x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I6]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[[]typex.Window, typex.BundleFinalization, I5, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization, I5, I6))
						return &caller4x0[[]typex.Window, typex.BundleFinalization, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization, I5, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization, a2 I5, a3 I6) {
							fn.(startBundle4x0[[]typex.Window, typex.BundleFinalization, I5, I6]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[context.Context, []typex.Window, typex.BundleFinalization, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization, I6))
						return &caller4x0[context.Context, []typex.Window, typex.BundleFinalization, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization, a3 I6) {
							fn.(startBundle4x0[context.Context, []typex.Window, typex.BundleFinalization, I6]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I6))
						return &caller4x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization, a3 I6) {
							fn.(startBundle4x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I6]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization))
						return &caller4x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.BundleFinalization) {
							fn.(startBundle4x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[typex.EventTime, typex.BundleFinalization, I5, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization, I5, I6))
						return &caller4x0[typex.EventTime, typex.BundleFinalization, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization, I5, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization, a2 I5, a3 I6) {
							fn.(startBundle4x0[typex.EventTime, typex.BundleFinalization, I5, I6]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[context.Context, typex.EventTime, typex.BundleFinalization, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization, I6))
						return &caller4x0[context.Context, typex.EventTime, typex.BundleFinalization, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I6) {
							fn.(startBundle4x0[context.Context, typex.EventTime, typex.BundleFinalization, I6]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I6))
						return &caller4x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I6) {
							fn.(startBundle4x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I6]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization))
						return &caller4x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 typex.BundleFinalization) {
							fn.(startBundle4x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization, I6))
						return &caller4x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I6) {
							fn.(startBundle4x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I6]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization))
						return &caller4x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization) {
							fn.(startBundle4x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization))
						return &caller4x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization) {
							fn.(startBundle4x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization]).StartBundle(a0, a1, a2, a3)
						})
					}
				}
			case startBundleOut == 1:
				if _, ok := doFn.(startBundle4x1[I3, I4, I5, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I3, I4, I5, I6) error)
						return &caller4x1[I3, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I3, I4, I5, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I3, a1 I4, a2 I5, a3 I6) error {
							return fn.(startBundle4x1[I3, I4, I5, I6, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[context.Context, I4, I5, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, I4, I5, I6) error)
						return &caller4x1[context.Context, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, I4, I5, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 I4, a2 I5, a3 I6) error {
							return fn.(startBundle4x1[context.Context, I4, I5, I6, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[typex.PaneInfo, I4, I5, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, I4, I5, I6) error)
						return &caller4x1[typex.PaneInfo, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, I4, I5, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 I4, a2 I5, a3 I6) error {
							return fn.(startBundle4x1[typex.PaneInfo, I4, I5, I6, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[context.Context, typex.PaneInfo, I5, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, I5, I6) error)
						return &caller4x1[context.Context, typex.PaneInfo, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, I5, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 I5, a3 I6) error {
							return fn.(startBundle4x1[context.Context, typex.PaneInfo, I5, I6, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[[]typex.Window, I4, I5, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, I4, I5, I6) error)
						return &caller4x1[[]typex.Window, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, I4, I5, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 I4, a2 I5, a3 I6) error {
							return fn.(startBundle4x1[[]typex.Window, I4, I5, I6, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[context.Context, []typex.Window, I5, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, I5, I6) error)
						return &caller4x1[context.Context, []typex.Window, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, I5, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 I5, a3 I6) error {
							return fn.(startBundle4x1[context.Context, []typex.Window, I5, I6, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[typex.PaneInfo, []typex.Window, I5, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, I5, I6) error)
						return &caller4x1[typex.PaneInfo, []typex.Window, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, I5, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 I5, a3 I6) error {
							return fn.(startBundle4x1[typex.PaneInfo, []typex.Window, I5, I6, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[context.Context, typex.PaneInfo, []typex.Window, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, I6) error)
						return &caller4x1[context.Context, typex.PaneInfo, []typex.Window, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 I6) error {
							return fn.(startBundle4x1[context.Context, typex.PaneInfo, []typex.Window, I6, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[typex.EventTime, I4, I5, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, I4, I5, I6) error)
						return &caller4x1[typex.EventTime, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, I4, I5, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 I4, a2 I5, a3 I6) error {
							return fn.(startBundle4x1[typex.EventTime, I4, I5, I6, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[context.Context, typex.EventTime, I5, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, I5, I6) error)
						return &caller4x1[context.Context, typex.EventTime, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, I5, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 I5, a3 I6) error {
							return fn.(startBundle4x1[context.Context, typex.EventTime, I5, I6, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[typex.PaneInfo, typex.EventTime, I5, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, I5, I6) error)
						return &caller4x1[typex.PaneInfo, typex.EventTime, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, I5, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 I5, a3 I6) error {
							return fn.(startBundle4x1[typex.PaneInfo, typex.EventTime, I5, I6, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[context.Context, typex.PaneInfo, typex.EventTime, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, I6) error)
						return &caller4x1[context.Context, typex.PaneInfo, typex.EventTime, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 I6) error {
							return fn.(startBundle4x1[context.Context, typex.PaneInfo, typex.EventTime, I6, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[[]typex.Window, typex.EventTime, I5, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, I5, I6) error)
						return &caller4x1[[]typex.Window, typex.EventTime, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, I5, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 I5, a3 I6) error {
							return fn.(startBundle4x1[[]typex.Window, typex.EventTime, I5, I6, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[context.Context, []typex.Window, typex.EventTime, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, I6) error)
						return &caller4x1[context.Context, []typex.Window, typex.EventTime, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 I6) error {
							return fn.(startBundle4x1[context.Context, []typex.Window, typex.EventTime, I6, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[typex.PaneInfo, []typex.Window, typex.EventTime, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, I6) error)
						return &caller4x1[typex.PaneInfo, []typex.Window, typex.EventTime, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 I6) error {
							return fn.(startBundle4x1[typex.PaneInfo, []typex.Window, typex.EventTime, I6, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime) error)
						return &caller4x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime) error {
							return fn.(startBundle4x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[typex.BundleFinalization, I4, I5, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization, I4, I5, I6) error)
						return &caller4x1[typex.BundleFinalization, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization, I4, I5, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization, a1 I4, a2 I5, a3 I6) error {
							return fn.(startBundle4x1[typex.BundleFinalization, I4, I5, I6, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[context.Context, typex.BundleFinalization, I5, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization, I5, I6) error)
						return &caller4x1[context.Context, typex.BundleFinalization, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization, I5, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization, a2 I5, a3 I6) error {
							return fn.(startBundle4x1[context.Context, typex.BundleFinalization, I5, I6, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[typex.PaneInfo, typex.BundleFinalization, I5, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization, I5, I6) error)
						return &caller4x1[typex.PaneInfo, typex.BundleFinalization, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization, I5, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization, a2 I5, a3 I6) error {
							return fn.(startBundle4x1[typex.PaneInfo, typex.BundleFinalization, I5, I6, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization, I6) error)
						return &caller4x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization, a3 I6) error {
							return fn.(startBundle4x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I6, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[[]typex.Window, typex.BundleFinalization, I5, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization, I5, I6) error)
						return &caller4x1[[]typex.Window, typex.BundleFinalization, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization, I5, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization, a2 I5, a3 I6) error {
							return fn.(startBundle4x1[[]typex.Window, typex.BundleFinalization, I5, I6, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[context.Context, []typex.Window, typex.BundleFinalization, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization, I6) error)
						return &caller4x1[context.Context, []typex.Window, typex.BundleFinalization, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization, a3 I6) error {
							return fn.(startBundle4x1[context.Context, []typex.Window, typex.BundleFinalization, I6, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I6) error)
						return &caller4x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization, a3 I6) error {
							return fn.(startBundle4x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I6, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization) error)
						return &caller4x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.BundleFinalization) error {
							return fn.(startBundle4x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[typex.EventTime, typex.BundleFinalization, I5, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization, I5, I6) error)
						return &caller4x1[typex.EventTime, typex.BundleFinalization, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization, I5, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization, a2 I5, a3 I6) error {
							return fn.(startBundle4x1[typex.EventTime, typex.BundleFinalization, I5, I6, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[context.Context, typex.EventTime, typex.BundleFinalization, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization, I6) error)
						return &caller4x1[context.Context, typex.EventTime, typex.BundleFinalization, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I6) error {
							return fn.(startBundle4x1[context.Context, typex.EventTime, typex.BundleFinalization, I6, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I6) error)
						return &caller4x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I6) error {
							return fn.(startBundle4x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I6, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization) error)
						return &caller4x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 typex.BundleFinalization) error {
							return fn.(startBundle4x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization, I6) error)
						return &caller4x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I6) error {
							return fn.(startBundle4x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I6, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization) error)
						return &caller4x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization) error {
							return fn.(startBundle4x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization) error)
						return &caller4x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization) error {
							return fn.(startBundle4x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				}
			default:
				panic("Invalid signature for StartBundle")
			}

		case startBundleIn == 5:
			switch {
			case startBundleOut == 0:
				if _, ok := doFn.(startBundle5x0[I2, I3, I4, I5, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I2, I3, I4, I5, I6))
						return &caller5x0[I2, I3, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I2, I3, I4, I5, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I2, a1 I3, a2 I4, a3 I5, a4 I6) {
							fn.(startBundle5x0[I2, I3, I4, I5, I6]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[context.Context, I3, I4, I5, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, I3, I4, I5, I6))
						return &caller5x0[context.Context, I3, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, I3, I4, I5, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 I3, a2 I4, a3 I5, a4 I6) {
							fn.(startBundle5x0[context.Context, I3, I4, I5, I6]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[typex.PaneInfo, I3, I4, I5, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, I3, I4, I5, I6))
						return &caller5x0[typex.PaneInfo, I3, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, I3, I4, I5, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 I3, a2 I4, a3 I5, a4 I6) {
							fn.(startBundle5x0[typex.PaneInfo, I3, I4, I5, I6]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[context.Context, typex.PaneInfo, I4, I5, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, I4, I5, I6))
						return &caller5x0[context.Context, typex.PaneInfo, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, I4, I5, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 I4, a3 I5, a4 I6) {
							fn.(startBundle5x0[context.Context, typex.PaneInfo, I4, I5, I6]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[[]typex.Window, I3, I4, I5, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, I3, I4, I5, I6))
						return &caller5x0[[]typex.Window, I3, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, I3, I4, I5, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 I3, a2 I4, a3 I5, a4 I6) {
							fn.(startBundle5x0[[]typex.Window, I3, I4, I5, I6]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[context.Context, []typex.Window, I4, I5, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, I4, I5, I6))
						return &caller5x0[context.Context, []typex.Window, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, I4, I5, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 I4, a3 I5, a4 I6) {
							fn.(startBundle5x0[context.Context, []typex.Window, I4, I5, I6]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[typex.PaneInfo, []typex.Window, I4, I5, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, I4, I5, I6))
						return &caller5x0[typex.PaneInfo, []typex.Window, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, I4, I5, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 I4, a3 I5, a4 I6) {
							fn.(startBundle5x0[typex.PaneInfo, []typex.Window, I4, I5, I6]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[context.Context, typex.PaneInfo, []typex.Window, I5, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, I5, I6))
						return &caller5x0[context.Context, typex.PaneInfo, []typex.Window, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, I5, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 I5, a4 I6) {
							fn.(startBundle5x0[context.Context, typex.PaneInfo, []typex.Window, I5, I6]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[typex.EventTime, I3, I4, I5, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, I3, I4, I5, I6))
						return &caller5x0[typex.EventTime, I3, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, I3, I4, I5, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 I3, a2 I4, a3 I5, a4 I6) {
							fn.(startBundle5x0[typex.EventTime, I3, I4, I5, I6]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[context.Context, typex.EventTime, I4, I5, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, I4, I5, I6))
						return &caller5x0[context.Context, typex.EventTime, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, I4, I5, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 I4, a3 I5, a4 I6) {
							fn.(startBundle5x0[context.Context, typex.EventTime, I4, I5, I6]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[typex.PaneInfo, typex.EventTime, I4, I5, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, I4, I5, I6))
						return &caller5x0[typex.PaneInfo, typex.EventTime, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, I4, I5, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 I4, a3 I5, a4 I6) {
							fn.(startBundle5x0[typex.PaneInfo, typex.EventTime, I4, I5, I6]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[context.Context, typex.PaneInfo, typex.EventTime, I5, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, I5, I6))
						return &caller5x0[context.Context, typex.PaneInfo, typex.EventTime, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, I5, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 I5, a4 I6) {
							fn.(startBundle5x0[context.Context, typex.PaneInfo, typex.EventTime, I5, I6]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[[]typex.Window, typex.EventTime, I4, I5, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, I4, I5, I6))
						return &caller5x0[[]typex.Window, typex.EventTime, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, I4, I5, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 I4, a3 I5, a4 I6) {
							fn.(startBundle5x0[[]typex.Window, typex.EventTime, I4, I5, I6]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[context.Context, []typex.Window, typex.EventTime, I5, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, I5, I6))
						return &caller5x0[context.Context, []typex.Window, typex.EventTime, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, I5, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 I5, a4 I6) {
							fn.(startBundle5x0[context.Context, []typex.Window, typex.EventTime, I5, I6]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[typex.PaneInfo, []typex.Window, typex.EventTime, I5, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, I5, I6))
						return &caller5x0[typex.PaneInfo, []typex.Window, typex.EventTime, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, I5, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 I5, a4 I6) {
							fn.(startBundle5x0[typex.PaneInfo, []typex.Window, typex.EventTime, I5, I6]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I6))
						return &caller5x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 I6) {
							fn.(startBundle5x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I6]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[typex.BundleFinalization, I3, I4, I5, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization, I3, I4, I5, I6))
						return &caller5x0[typex.BundleFinalization, I3, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization, I3, I4, I5, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization, a1 I3, a2 I4, a3 I5, a4 I6) {
							fn.(startBundle5x0[typex.BundleFinalization, I3, I4, I5, I6]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[context.Context, typex.BundleFinalization, I4, I5, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization, I4, I5, I6))
						return &caller5x0[context.Context, typex.BundleFinalization, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization, I4, I5, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization, a2 I4, a3 I5, a4 I6) {
							fn.(startBundle5x0[context.Context, typex.BundleFinalization, I4, I5, I6]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[typex.PaneInfo, typex.BundleFinalization, I4, I5, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization, I4, I5, I6))
						return &caller5x0[typex.PaneInfo, typex.BundleFinalization, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization, I4, I5, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization, a2 I4, a3 I5, a4 I6) {
							fn.(startBundle5x0[typex.PaneInfo, typex.BundleFinalization, I4, I5, I6]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I5, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization, I5, I6))
						return &caller5x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization, I5, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization, a3 I5, a4 I6) {
							fn.(startBundle5x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I5, I6]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[[]typex.Window, typex.BundleFinalization, I4, I5, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization, I4, I5, I6))
						return &caller5x0[[]typex.Window, typex.BundleFinalization, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization, I4, I5, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization, a2 I4, a3 I5, a4 I6) {
							fn.(startBundle5x0[[]typex.Window, typex.BundleFinalization, I4, I5, I6]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[context.Context, []typex.Window, typex.BundleFinalization, I5, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization, I5, I6))
						return &caller5x0[context.Context, []typex.Window, typex.BundleFinalization, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization, I5, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization, a3 I5, a4 I6) {
							fn.(startBundle5x0[context.Context, []typex.Window, typex.BundleFinalization, I5, I6]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I5, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I5, I6))
						return &caller5x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I5, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization, a3 I5, a4 I6) {
							fn.(startBundle5x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I5, I6]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I6))
						return &caller5x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.BundleFinalization, a4 I6) {
							fn.(startBundle5x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I6]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[typex.EventTime, typex.BundleFinalization, I4, I5, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization, I4, I5, I6))
						return &caller5x0[typex.EventTime, typex.BundleFinalization, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization, I4, I5, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization, a2 I4, a3 I5, a4 I6) {
							fn.(startBundle5x0[typex.EventTime, typex.BundleFinalization, I4, I5, I6]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[context.Context, typex.EventTime, typex.BundleFinalization, I5, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization, I5, I6))
						return &caller5x0[context.Context, typex.EventTime, typex.BundleFinalization, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization, I5, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I5, a4 I6) {
							fn.(startBundle5x0[context.Context, typex.EventTime, typex.BundleFinalization, I5, I6]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I5, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I5, I6))
						return &caller5x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I5, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I5, a4 I6) {
							fn.(startBundle5x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I5, I6]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I6))
						return &caller5x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I6) {
							fn.(startBundle5x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I6]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6))
						return &caller5x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I5, a4 I6) {
							fn.(startBundle5x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I6))
						return &caller5x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I6) {
							fn.(startBundle5x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I6]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I6))
						return &caller5x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I6) {
							fn.(startBundle5x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I6]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization))
						return &caller5x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 typex.BundleFinalization) {
							fn.(startBundle5x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				}
			case startBundleOut == 1:
				if _, ok := doFn.(startBundle5x1[I2, I3, I4, I5, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I2, I3, I4, I5, I6) error)
						return &caller5x1[I2, I3, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I2, I3, I4, I5, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I2, a1 I3, a2 I4, a3 I5, a4 I6) error {
							return fn.(startBundle5x1[I2, I3, I4, I5, I6, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[context.Context, I3, I4, I5, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, I3, I4, I5, I6) error)
						return &caller5x1[context.Context, I3, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, I3, I4, I5, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 I3, a2 I4, a3 I5, a4 I6) error {
							return fn.(startBundle5x1[context.Context, I3, I4, I5, I6, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[typex.PaneInfo, I3, I4, I5, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, I3, I4, I5, I6) error)
						return &caller5x1[typex.PaneInfo, I3, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, I3, I4, I5, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 I3, a2 I4, a3 I5, a4 I6) error {
							return fn.(startBundle5x1[typex.PaneInfo, I3, I4, I5, I6, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[context.Context, typex.PaneInfo, I4, I5, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, I4, I5, I6) error)
						return &caller5x1[context.Context, typex.PaneInfo, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, I4, I5, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 I4, a3 I5, a4 I6) error {
							return fn.(startBundle5x1[context.Context, typex.PaneInfo, I4, I5, I6, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[[]typex.Window, I3, I4, I5, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, I3, I4, I5, I6) error)
						return &caller5x1[[]typex.Window, I3, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, I3, I4, I5, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 I3, a2 I4, a3 I5, a4 I6) error {
							return fn.(startBundle5x1[[]typex.Window, I3, I4, I5, I6, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[context.Context, []typex.Window, I4, I5, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, I4, I5, I6) error)
						return &caller5x1[context.Context, []typex.Window, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, I4, I5, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 I4, a3 I5, a4 I6) error {
							return fn.(startBundle5x1[context.Context, []typex.Window, I4, I5, I6, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[typex.PaneInfo, []typex.Window, I4, I5, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, I4, I5, I6) error)
						return &caller5x1[typex.PaneInfo, []typex.Window, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, I4, I5, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 I4, a3 I5, a4 I6) error {
							return fn.(startBundle5x1[typex.PaneInfo, []typex.Window, I4, I5, I6, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[context.Context, typex.PaneInfo, []typex.Window, I5, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, I5, I6) error)
						return &caller5x1[context.Context, typex.PaneInfo, []typex.Window, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, I5, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 I5, a4 I6) error {
							return fn.(startBundle5x1[context.Context, typex.PaneInfo, []typex.Window, I5, I6, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[typex.EventTime, I3, I4, I5, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, I3, I4, I5, I6) error)
						return &caller5x1[typex.EventTime, I3, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, I3, I4, I5, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 I3, a2 I4, a3 I5, a4 I6) error {
							return fn.(startBundle5x1[typex.EventTime, I3, I4, I5, I6, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[context.Context, typex.EventTime, I4, I5, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, I4, I5, I6) error)
						return &caller5x1[context.Context, typex.EventTime, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, I4, I5, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 I4, a3 I5, a4 I6) error {
							return fn.(startBundle5x1[context.Context, typex.EventTime, I4, I5, I6, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[typex.PaneInfo, typex.EventTime, I4, I5, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, I4, I5, I6) error)
						return &caller5x1[typex.PaneInfo, typex.EventTime, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, I4, I5, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 I4, a3 I5, a4 I6) error {
							return fn.(startBundle5x1[typex.PaneInfo, typex.EventTime, I4, I5, I6, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[context.Context, typex.PaneInfo, typex.EventTime, I5, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, I5, I6) error)
						return &caller5x1[context.Context, typex.PaneInfo, typex.EventTime, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, I5, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 I5, a4 I6) error {
							return fn.(startBundle5x1[context.Context, typex.PaneInfo, typex.EventTime, I5, I6, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[[]typex.Window, typex.EventTime, I4, I5, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, I4, I5, I6) error)
						return &caller5x1[[]typex.Window, typex.EventTime, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, I4, I5, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 I4, a3 I5, a4 I6) error {
							return fn.(startBundle5x1[[]typex.Window, typex.EventTime, I4, I5, I6, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[context.Context, []typex.Window, typex.EventTime, I5, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, I5, I6) error)
						return &caller5x1[context.Context, []typex.Window, typex.EventTime, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, I5, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 I5, a4 I6) error {
							return fn.(startBundle5x1[context.Context, []typex.Window, typex.EventTime, I5, I6, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[typex.PaneInfo, []typex.Window, typex.EventTime, I5, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, I5, I6) error)
						return &caller5x1[typex.PaneInfo, []typex.Window, typex.EventTime, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, I5, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 I5, a4 I6) error {
							return fn.(startBundle5x1[typex.PaneInfo, []typex.Window, typex.EventTime, I5, I6, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I6) error)
						return &caller5x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 I6) error {
							return fn.(startBundle5x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I6, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[typex.BundleFinalization, I3, I4, I5, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization, I3, I4, I5, I6) error)
						return &caller5x1[typex.BundleFinalization, I3, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization, I3, I4, I5, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization, a1 I3, a2 I4, a3 I5, a4 I6) error {
							return fn.(startBundle5x1[typex.BundleFinalization, I3, I4, I5, I6, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[context.Context, typex.BundleFinalization, I4, I5, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization, I4, I5, I6) error)
						return &caller5x1[context.Context, typex.BundleFinalization, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization, I4, I5, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization, a2 I4, a3 I5, a4 I6) error {
							return fn.(startBundle5x1[context.Context, typex.BundleFinalization, I4, I5, I6, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[typex.PaneInfo, typex.BundleFinalization, I4, I5, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization, I4, I5, I6) error)
						return &caller5x1[typex.PaneInfo, typex.BundleFinalization, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization, I4, I5, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization, a2 I4, a3 I5, a4 I6) error {
							return fn.(startBundle5x1[typex.PaneInfo, typex.BundleFinalization, I4, I5, I6, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I5, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization, I5, I6) error)
						return &caller5x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization, I5, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization, a3 I5, a4 I6) error {
							return fn.(startBundle5x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I5, I6, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[[]typex.Window, typex.BundleFinalization, I4, I5, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization, I4, I5, I6) error)
						return &caller5x1[[]typex.Window, typex.BundleFinalization, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization, I4, I5, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization, a2 I4, a3 I5, a4 I6) error {
							return fn.(startBundle5x1[[]typex.Window, typex.BundleFinalization, I4, I5, I6, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[context.Context, []typex.Window, typex.BundleFinalization, I5, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization, I5, I6) error)
						return &caller5x1[context.Context, []typex.Window, typex.BundleFinalization, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization, I5, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization, a3 I5, a4 I6) error {
							return fn.(startBundle5x1[context.Context, []typex.Window, typex.BundleFinalization, I5, I6, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I5, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I5, I6) error)
						return &caller5x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I5, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization, a3 I5, a4 I6) error {
							return fn.(startBundle5x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I5, I6, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I6) error)
						return &caller5x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.BundleFinalization, a4 I6) error {
							return fn.(startBundle5x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I6, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[typex.EventTime, typex.BundleFinalization, I4, I5, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization, I4, I5, I6) error)
						return &caller5x1[typex.EventTime, typex.BundleFinalization, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization, I4, I5, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization, a2 I4, a3 I5, a4 I6) error {
							return fn.(startBundle5x1[typex.EventTime, typex.BundleFinalization, I4, I5, I6, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[context.Context, typex.EventTime, typex.BundleFinalization, I5, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization, I5, I6) error)
						return &caller5x1[context.Context, typex.EventTime, typex.BundleFinalization, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization, I5, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I5, a4 I6) error {
							return fn.(startBundle5x1[context.Context, typex.EventTime, typex.BundleFinalization, I5, I6, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I5, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I5, I6) error)
						return &caller5x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I5, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I5, a4 I6) error {
							return fn.(startBundle5x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I5, I6, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I6) error)
						return &caller5x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I6) error {
							return fn.(startBundle5x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I6, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6) error)
						return &caller5x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I5, a4 I6) error {
							return fn.(startBundle5x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I6) error)
						return &caller5x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I6) error {
							return fn.(startBundle5x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I6, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I6) error)
						return &caller5x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I6) error {
							return fn.(startBundle5x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I6, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization) error)
						return &caller5x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 typex.BundleFinalization) error {
							return fn.(startBundle5x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				}
			default:
				panic("Invalid signature for StartBundle")
			}

		case startBundleIn == 6:
			switch {
			case startBundleOut == 0:
				if _, ok := doFn.(startBundle6x0[I1, I2, I3, I4, I5, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I1, I2, I3, I4, I5, I6))
						return &caller6x0[I1, I2, I3, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I1, I2, I3, I4, I5, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I1, a1 I2, a2 I3, a3 I4, a4 I5, a5 I6) {
							fn.(startBundle6x0[I1, I2, I3, I4, I5, I6]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[context.Context, I2, I3, I4, I5, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, I2, I3, I4, I5, I6))
						return &caller6x0[context.Context, I2, I3, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, I2, I3, I4, I5, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 I2, a2 I3, a3 I4, a4 I5, a5 I6) {
							fn.(startBundle6x0[context.Context, I2, I3, I4, I5, I6]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[typex.PaneInfo, I2, I3, I4, I5, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, I2, I3, I4, I5, I6))
						return &caller6x0[typex.PaneInfo, I2, I3, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, I2, I3, I4, I5, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 I2, a2 I3, a3 I4, a4 I5, a5 I6) {
							fn.(startBundle6x0[typex.PaneInfo, I2, I3, I4, I5, I6]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[context.Context, typex.PaneInfo, I3, I4, I5, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, I3, I4, I5, I6))
						return &caller6x0[context.Context, typex.PaneInfo, I3, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, I3, I4, I5, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 I3, a3 I4, a4 I5, a5 I6) {
							fn.(startBundle6x0[context.Context, typex.PaneInfo, I3, I4, I5, I6]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[[]typex.Window, I2, I3, I4, I5, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, I2, I3, I4, I5, I6))
						return &caller6x0[[]typex.Window, I2, I3, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, I2, I3, I4, I5, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 I2, a2 I3, a3 I4, a4 I5, a5 I6) {
							fn.(startBundle6x0[[]typex.Window, I2, I3, I4, I5, I6]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[context.Context, []typex.Window, I3, I4, I5, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, I3, I4, I5, I6))
						return &caller6x0[context.Context, []typex.Window, I3, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, I3, I4, I5, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 I3, a3 I4, a4 I5, a5 I6) {
							fn.(startBundle6x0[context.Context, []typex.Window, I3, I4, I5, I6]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[typex.PaneInfo, []typex.Window, I3, I4, I5, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, I3, I4, I5, I6))
						return &caller6x0[typex.PaneInfo, []typex.Window, I3, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, I3, I4, I5, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 I3, a3 I4, a4 I5, a5 I6) {
							fn.(startBundle6x0[typex.PaneInfo, []typex.Window, I3, I4, I5, I6]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[context.Context, typex.PaneInfo, []typex.Window, I4, I5, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, I4, I5, I6))
						return &caller6x0[context.Context, typex.PaneInfo, []typex.Window, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, I4, I5, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 I4, a4 I5, a5 I6) {
							fn.(startBundle6x0[context.Context, typex.PaneInfo, []typex.Window, I4, I5, I6]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[typex.EventTime, I2, I3, I4, I5, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, I2, I3, I4, I5, I6))
						return &caller6x0[typex.EventTime, I2, I3, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, I2, I3, I4, I5, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 I2, a2 I3, a3 I4, a4 I5, a5 I6) {
							fn.(startBundle6x0[typex.EventTime, I2, I3, I4, I5, I6]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[context.Context, typex.EventTime, I3, I4, I5, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, I3, I4, I5, I6))
						return &caller6x0[context.Context, typex.EventTime, I3, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, I3, I4, I5, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 I3, a3 I4, a4 I5, a5 I6) {
							fn.(startBundle6x0[context.Context, typex.EventTime, I3, I4, I5, I6]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[typex.PaneInfo, typex.EventTime, I3, I4, I5, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, I3, I4, I5, I6))
						return &caller6x0[typex.PaneInfo, typex.EventTime, I3, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, I3, I4, I5, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 I3, a3 I4, a4 I5, a5 I6) {
							fn.(startBundle6x0[typex.PaneInfo, typex.EventTime, I3, I4, I5, I6]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[context.Context, typex.PaneInfo, typex.EventTime, I4, I5, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, I4, I5, I6))
						return &caller6x0[context.Context, typex.PaneInfo, typex.EventTime, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, I4, I5, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 I4, a4 I5, a5 I6) {
							fn.(startBundle6x0[context.Context, typex.PaneInfo, typex.EventTime, I4, I5, I6]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[[]typex.Window, typex.EventTime, I3, I4, I5, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, I3, I4, I5, I6))
						return &caller6x0[[]typex.Window, typex.EventTime, I3, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, I3, I4, I5, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 I3, a3 I4, a4 I5, a5 I6) {
							fn.(startBundle6x0[[]typex.Window, typex.EventTime, I3, I4, I5, I6]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[context.Context, []typex.Window, typex.EventTime, I4, I5, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, I4, I5, I6))
						return &caller6x0[context.Context, []typex.Window, typex.EventTime, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, I4, I5, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 I4, a4 I5, a5 I6) {
							fn.(startBundle6x0[context.Context, []typex.Window, typex.EventTime, I4, I5, I6]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[typex.PaneInfo, []typex.Window, typex.EventTime, I4, I5, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, I4, I5, I6))
						return &caller6x0[typex.PaneInfo, []typex.Window, typex.EventTime, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, I4, I5, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 I4, a4 I5, a5 I6) {
							fn.(startBundle6x0[typex.PaneInfo, []typex.Window, typex.EventTime, I4, I5, I6]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I5, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I5, I6))
						return &caller6x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I5, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 I5, a5 I6) {
							fn.(startBundle6x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I5, I6]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[typex.BundleFinalization, I2, I3, I4, I5, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization, I2, I3, I4, I5, I6))
						return &caller6x0[typex.BundleFinalization, I2, I3, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization, I2, I3, I4, I5, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization, a1 I2, a2 I3, a3 I4, a4 I5, a5 I6) {
							fn.(startBundle6x0[typex.BundleFinalization, I2, I3, I4, I5, I6]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[context.Context, typex.BundleFinalization, I3, I4, I5, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization, I3, I4, I5, I6))
						return &caller6x0[context.Context, typex.BundleFinalization, I3, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization, I3, I4, I5, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization, a2 I3, a3 I4, a4 I5, a5 I6) {
							fn.(startBundle6x0[context.Context, typex.BundleFinalization, I3, I4, I5, I6]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[typex.PaneInfo, typex.BundleFinalization, I3, I4, I5, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization, I3, I4, I5, I6))
						return &caller6x0[typex.PaneInfo, typex.BundleFinalization, I3, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization, I3, I4, I5, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization, a2 I3, a3 I4, a4 I5, a5 I6) {
							fn.(startBundle6x0[typex.PaneInfo, typex.BundleFinalization, I3, I4, I5, I6]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I4, I5, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization, I4, I5, I6))
						return &caller6x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization, I4, I5, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization, a3 I4, a4 I5, a5 I6) {
							fn.(startBundle6x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I4, I5, I6]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[[]typex.Window, typex.BundleFinalization, I3, I4, I5, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization, I3, I4, I5, I6))
						return &caller6x0[[]typex.Window, typex.BundleFinalization, I3, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization, I3, I4, I5, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization, a2 I3, a3 I4, a4 I5, a5 I6) {
							fn.(startBundle6x0[[]typex.Window, typex.BundleFinalization, I3, I4, I5, I6]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[context.Context, []typex.Window, typex.BundleFinalization, I4, I5, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization, I4, I5, I6))
						return &caller6x0[context.Context, []typex.Window, typex.BundleFinalization, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization, I4, I5, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization, a3 I4, a4 I5, a5 I6) {
							fn.(startBundle6x0[context.Context, []typex.Window, typex.BundleFinalization, I4, I5, I6]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4, I5, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4, I5, I6))
						return &caller6x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4, I5, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization, a3 I4, a4 I5, a5 I6) {
							fn.(startBundle6x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4, I5, I6]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I5, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I5, I6))
						return &caller6x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I5, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.BundleFinalization, a4 I5, a5 I6) {
							fn.(startBundle6x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I5, I6]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[typex.EventTime, typex.BundleFinalization, I3, I4, I5, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization, I3, I4, I5, I6))
						return &caller6x0[typex.EventTime, typex.BundleFinalization, I3, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization, I3, I4, I5, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization, a2 I3, a3 I4, a4 I5, a5 I6) {
							fn.(startBundle6x0[typex.EventTime, typex.BundleFinalization, I3, I4, I5, I6]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[context.Context, typex.EventTime, typex.BundleFinalization, I4, I5, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization, I4, I5, I6))
						return &caller6x0[context.Context, typex.EventTime, typex.BundleFinalization, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization, I4, I5, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I4, a4 I5, a5 I6) {
							fn.(startBundle6x0[context.Context, typex.EventTime, typex.BundleFinalization, I4, I5, I6]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4, I5, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4, I5, I6))
						return &caller6x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4, I5, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I4, a4 I5, a5 I6) {
							fn.(startBundle6x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4, I5, I6]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I5, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I5, I6))
						return &caller6x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I5, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I5, a5 I6) {
							fn.(startBundle6x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I5, I6]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5, I6))
						return &caller6x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I4, a4 I5, a5 I6) {
							fn.(startBundle6x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5, I6]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6))
						return &caller6x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I5, a5 I6) {
							fn.(startBundle6x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6))
						return &caller6x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I5, a5 I6) {
							fn.(startBundle6x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I6))
						return &caller6x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 typex.BundleFinalization, a5 I6) {
							fn.(startBundle6x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I6]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				}
			case startBundleOut == 1:
				if _, ok := doFn.(startBundle6x1[I1, I2, I3, I4, I5, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I1, I2, I3, I4, I5, I6) error)
						return &caller6x1[I1, I2, I3, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I1, I2, I3, I4, I5, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I1, a1 I2, a2 I3, a3 I4, a4 I5, a5 I6) error {
							return fn.(startBundle6x1[I1, I2, I3, I4, I5, I6, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[context.Context, I2, I3, I4, I5, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, I2, I3, I4, I5, I6) error)
						return &caller6x1[context.Context, I2, I3, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, I2, I3, I4, I5, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 I2, a2 I3, a3 I4, a4 I5, a5 I6) error {
							return fn.(startBundle6x1[context.Context, I2, I3, I4, I5, I6, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[typex.PaneInfo, I2, I3, I4, I5, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, I2, I3, I4, I5, I6) error)
						return &caller6x1[typex.PaneInfo, I2, I3, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, I2, I3, I4, I5, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 I2, a2 I3, a3 I4, a4 I5, a5 I6) error {
							return fn.(startBundle6x1[typex.PaneInfo, I2, I3, I4, I5, I6, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[context.Context, typex.PaneInfo, I3, I4, I5, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, I3, I4, I5, I6) error)
						return &caller6x1[context.Context, typex.PaneInfo, I3, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, I3, I4, I5, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 I3, a3 I4, a4 I5, a5 I6) error {
							return fn.(startBundle6x1[context.Context, typex.PaneInfo, I3, I4, I5, I6, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[[]typex.Window, I2, I3, I4, I5, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, I2, I3, I4, I5, I6) error)
						return &caller6x1[[]typex.Window, I2, I3, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, I2, I3, I4, I5, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 I2, a2 I3, a3 I4, a4 I5, a5 I6) error {
							return fn.(startBundle6x1[[]typex.Window, I2, I3, I4, I5, I6, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[context.Context, []typex.Window, I3, I4, I5, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, I3, I4, I5, I6) error)
						return &caller6x1[context.Context, []typex.Window, I3, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, I3, I4, I5, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 I3, a3 I4, a4 I5, a5 I6) error {
							return fn.(startBundle6x1[context.Context, []typex.Window, I3, I4, I5, I6, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[typex.PaneInfo, []typex.Window, I3, I4, I5, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, I3, I4, I5, I6) error)
						return &caller6x1[typex.PaneInfo, []typex.Window, I3, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, I3, I4, I5, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 I3, a3 I4, a4 I5, a5 I6) error {
							return fn.(startBundle6x1[typex.PaneInfo, []typex.Window, I3, I4, I5, I6, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[context.Context, typex.PaneInfo, []typex.Window, I4, I5, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, I4, I5, I6) error)
						return &caller6x1[context.Context, typex.PaneInfo, []typex.Window, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, I4, I5, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 I4, a4 I5, a5 I6) error {
							return fn.(startBundle6x1[context.Context, typex.PaneInfo, []typex.Window, I4, I5, I6, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[typex.EventTime, I2, I3, I4, I5, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, I2, I3, I4, I5, I6) error)
						return &caller6x1[typex.EventTime, I2, I3, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, I2, I3, I4, I5, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 I2, a2 I3, a3 I4, a4 I5, a5 I6) error {
							return fn.(startBundle6x1[typex.EventTime, I2, I3, I4, I5, I6, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[context.Context, typex.EventTime, I3, I4, I5, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, I3, I4, I5, I6) error)
						return &caller6x1[context.Context, typex.EventTime, I3, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, I3, I4, I5, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 I3, a3 I4, a4 I5, a5 I6) error {
							return fn.(startBundle6x1[context.Context, typex.EventTime, I3, I4, I5, I6, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[typex.PaneInfo, typex.EventTime, I3, I4, I5, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, I3, I4, I5, I6) error)
						return &caller6x1[typex.PaneInfo, typex.EventTime, I3, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, I3, I4, I5, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 I3, a3 I4, a4 I5, a5 I6) error {
							return fn.(startBundle6x1[typex.PaneInfo, typex.EventTime, I3, I4, I5, I6, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[context.Context, typex.PaneInfo, typex.EventTime, I4, I5, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, I4, I5, I6) error)
						return &caller6x1[context.Context, typex.PaneInfo, typex.EventTime, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, I4, I5, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 I4, a4 I5, a5 I6) error {
							return fn.(startBundle6x1[context.Context, typex.PaneInfo, typex.EventTime, I4, I5, I6, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[[]typex.Window, typex.EventTime, I3, I4, I5, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, I3, I4, I5, I6) error)
						return &caller6x1[[]typex.Window, typex.EventTime, I3, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, I3, I4, I5, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 I3, a3 I4, a4 I5, a5 I6) error {
							return fn.(startBundle6x1[[]typex.Window, typex.EventTime, I3, I4, I5, I6, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[context.Context, []typex.Window, typex.EventTime, I4, I5, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, I4, I5, I6) error)
						return &caller6x1[context.Context, []typex.Window, typex.EventTime, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, I4, I5, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 I4, a4 I5, a5 I6) error {
							return fn.(startBundle6x1[context.Context, []typex.Window, typex.EventTime, I4, I5, I6, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[typex.PaneInfo, []typex.Window, typex.EventTime, I4, I5, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, I4, I5, I6) error)
						return &caller6x1[typex.PaneInfo, []typex.Window, typex.EventTime, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, I4, I5, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 I4, a4 I5, a5 I6) error {
							return fn.(startBundle6x1[typex.PaneInfo, []typex.Window, typex.EventTime, I4, I5, I6, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I5, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I5, I6) error)
						return &caller6x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I5, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 I5, a5 I6) error {
							return fn.(startBundle6x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I5, I6, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[typex.BundleFinalization, I2, I3, I4, I5, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization, I2, I3, I4, I5, I6) error)
						return &caller6x1[typex.BundleFinalization, I2, I3, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization, I2, I3, I4, I5, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization, a1 I2, a2 I3, a3 I4, a4 I5, a5 I6) error {
							return fn.(startBundle6x1[typex.BundleFinalization, I2, I3, I4, I5, I6, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[context.Context, typex.BundleFinalization, I3, I4, I5, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization, I3, I4, I5, I6) error)
						return &caller6x1[context.Context, typex.BundleFinalization, I3, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization, I3, I4, I5, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization, a2 I3, a3 I4, a4 I5, a5 I6) error {
							return fn.(startBundle6x1[context.Context, typex.BundleFinalization, I3, I4, I5, I6, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[typex.PaneInfo, typex.BundleFinalization, I3, I4, I5, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization, I3, I4, I5, I6) error)
						return &caller6x1[typex.PaneInfo, typex.BundleFinalization, I3, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization, I3, I4, I5, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization, a2 I3, a3 I4, a4 I5, a5 I6) error {
							return fn.(startBundle6x1[typex.PaneInfo, typex.BundleFinalization, I3, I4, I5, I6, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I4, I5, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization, I4, I5, I6) error)
						return &caller6x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization, I4, I5, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization, a3 I4, a4 I5, a5 I6) error {
							return fn.(startBundle6x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I4, I5, I6, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[[]typex.Window, typex.BundleFinalization, I3, I4, I5, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization, I3, I4, I5, I6) error)
						return &caller6x1[[]typex.Window, typex.BundleFinalization, I3, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization, I3, I4, I5, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization, a2 I3, a3 I4, a4 I5, a5 I6) error {
							return fn.(startBundle6x1[[]typex.Window, typex.BundleFinalization, I3, I4, I5, I6, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[context.Context, []typex.Window, typex.BundleFinalization, I4, I5, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization, I4, I5, I6) error)
						return &caller6x1[context.Context, []typex.Window, typex.BundleFinalization, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization, I4, I5, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization, a3 I4, a4 I5, a5 I6) error {
							return fn.(startBundle6x1[context.Context, []typex.Window, typex.BundleFinalization, I4, I5, I6, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4, I5, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4, I5, I6) error)
						return &caller6x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4, I5, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization, a3 I4, a4 I5, a5 I6) error {
							return fn.(startBundle6x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4, I5, I6, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I5, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I5, I6) error)
						return &caller6x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I5, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.BundleFinalization, a4 I5, a5 I6) error {
							return fn.(startBundle6x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I5, I6, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[typex.EventTime, typex.BundleFinalization, I3, I4, I5, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization, I3, I4, I5, I6) error)
						return &caller6x1[typex.EventTime, typex.BundleFinalization, I3, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization, I3, I4, I5, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization, a2 I3, a3 I4, a4 I5, a5 I6) error {
							return fn.(startBundle6x1[typex.EventTime, typex.BundleFinalization, I3, I4, I5, I6, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[context.Context, typex.EventTime, typex.BundleFinalization, I4, I5, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization, I4, I5, I6) error)
						return &caller6x1[context.Context, typex.EventTime, typex.BundleFinalization, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization, I4, I5, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I4, a4 I5, a5 I6) error {
							return fn.(startBundle6x1[context.Context, typex.EventTime, typex.BundleFinalization, I4, I5, I6, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4, I5, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4, I5, I6) error)
						return &caller6x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4, I5, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I4, a4 I5, a5 I6) error {
							return fn.(startBundle6x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4, I5, I6, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I5, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I5, I6) error)
						return &caller6x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I5, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I5, a5 I6) error {
							return fn.(startBundle6x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I5, I6, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5, I6) error)
						return &caller6x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I4, a4 I5, a5 I6) error {
							return fn.(startBundle6x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5, I6, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6) error)
						return &caller6x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I5, a5 I6) error {
							return fn.(startBundle6x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6) error)
						return &caller6x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I5, a5 I6) error {
							return fn.(startBundle6x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I6) error)
						return &caller6x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 typex.BundleFinalization, a5 I6) error {
							return fn.(startBundle6x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I6, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				}
			default:
				panic("Invalid signature for StartBundle")
			}

		case startBundleIn == 7:
			switch {
			case startBundleOut == 0:
				if _, ok := doFn.(startBundle7x0[I0, I1, I2, I3, I4, I5, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I0, I1, I2, I3, I4, I5, I6))
						return &caller7x0[I0, I1, I2, I3, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I0, I1, I2, I3, I4, I5, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I0, a1 I1, a2 I2, a3 I3, a4 I4, a5 I5, a6 I6) {
							fn.(startBundle7x0[I0, I1, I2, I3, I4, I5, I6]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[context.Context, I1, I2, I3, I4, I5, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, I1, I2, I3, I4, I5, I6))
						return &caller7x0[context.Context, I1, I2, I3, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, I1, I2, I3, I4, I5, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 I1, a2 I2, a3 I3, a4 I4, a5 I5, a6 I6) {
							fn.(startBundle7x0[context.Context, I1, I2, I3, I4, I5, I6]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[typex.PaneInfo, I1, I2, I3, I4, I5, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, I1, I2, I3, I4, I5, I6))
						return &caller7x0[typex.PaneInfo, I1, I2, I3, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, I1, I2, I3, I4, I5, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 I1, a2 I2, a3 I3, a4 I4, a5 I5, a6 I6) {
							fn.(startBundle7x0[typex.PaneInfo, I1, I2, I3, I4, I5, I6]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[context.Context, typex.PaneInfo, I2, I3, I4, I5, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, I2, I3, I4, I5, I6))
						return &caller7x0[context.Context, typex.PaneInfo, I2, I3, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, I2, I3, I4, I5, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 I2, a3 I3, a4 I4, a5 I5, a6 I6) {
							fn.(startBundle7x0[context.Context, typex.PaneInfo, I2, I3, I4, I5, I6]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[[]typex.Window, I1, I2, I3, I4, I5, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, I1, I2, I3, I4, I5, I6))
						return &caller7x0[[]typex.Window, I1, I2, I3, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, I1, I2, I3, I4, I5, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 I1, a2 I2, a3 I3, a4 I4, a5 I5, a6 I6) {
							fn.(startBundle7x0[[]typex.Window, I1, I2, I3, I4, I5, I6]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[context.Context, []typex.Window, I2, I3, I4, I5, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, I2, I3, I4, I5, I6))
						return &caller7x0[context.Context, []typex.Window, I2, I3, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, I2, I3, I4, I5, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 I2, a3 I3, a4 I4, a5 I5, a6 I6) {
							fn.(startBundle7x0[context.Context, []typex.Window, I2, I3, I4, I5, I6]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[typex.PaneInfo, []typex.Window, I2, I3, I4, I5, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, I2, I3, I4, I5, I6))
						return &caller7x0[typex.PaneInfo, []typex.Window, I2, I3, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, I2, I3, I4, I5, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 I2, a3 I3, a4 I4, a5 I5, a6 I6) {
							fn.(startBundle7x0[typex.PaneInfo, []typex.Window, I2, I3, I4, I5, I6]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[context.Context, typex.PaneInfo, []typex.Window, I3, I4, I5, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, I3, I4, I5, I6))
						return &caller7x0[context.Context, typex.PaneInfo, []typex.Window, I3, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, I3, I4, I5, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 I3, a4 I4, a5 I5, a6 I6) {
							fn.(startBundle7x0[context.Context, typex.PaneInfo, []typex.Window, I3, I4, I5, I6]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[typex.EventTime, I1, I2, I3, I4, I5, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, I1, I2, I3, I4, I5, I6))
						return &caller7x0[typex.EventTime, I1, I2, I3, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, I1, I2, I3, I4, I5, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 I1, a2 I2, a3 I3, a4 I4, a5 I5, a6 I6) {
							fn.(startBundle7x0[typex.EventTime, I1, I2, I3, I4, I5, I6]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[context.Context, typex.EventTime, I2, I3, I4, I5, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, I2, I3, I4, I5, I6))
						return &caller7x0[context.Context, typex.EventTime, I2, I3, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, I2, I3, I4, I5, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 I2, a3 I3, a4 I4, a5 I5, a6 I6) {
							fn.(startBundle7x0[context.Context, typex.EventTime, I2, I3, I4, I5, I6]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[typex.PaneInfo, typex.EventTime, I2, I3, I4, I5, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, I2, I3, I4, I5, I6))
						return &caller7x0[typex.PaneInfo, typex.EventTime, I2, I3, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, I2, I3, I4, I5, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 I2, a3 I3, a4 I4, a5 I5, a6 I6) {
							fn.(startBundle7x0[typex.PaneInfo, typex.EventTime, I2, I3, I4, I5, I6]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[context.Context, typex.PaneInfo, typex.EventTime, I3, I4, I5, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, I3, I4, I5, I6))
						return &caller7x0[context.Context, typex.PaneInfo, typex.EventTime, I3, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, I3, I4, I5, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 I3, a4 I4, a5 I5, a6 I6) {
							fn.(startBundle7x0[context.Context, typex.PaneInfo, typex.EventTime, I3, I4, I5, I6]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[[]typex.Window, typex.EventTime, I2, I3, I4, I5, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, I2, I3, I4, I5, I6))
						return &caller7x0[[]typex.Window, typex.EventTime, I2, I3, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, I2, I3, I4, I5, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 I2, a3 I3, a4 I4, a5 I5, a6 I6) {
							fn.(startBundle7x0[[]typex.Window, typex.EventTime, I2, I3, I4, I5, I6]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[context.Context, []typex.Window, typex.EventTime, I3, I4, I5, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, I3, I4, I5, I6))
						return &caller7x0[context.Context, []typex.Window, typex.EventTime, I3, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, I3, I4, I5, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 I3, a4 I4, a5 I5, a6 I6) {
							fn.(startBundle7x0[context.Context, []typex.Window, typex.EventTime, I3, I4, I5, I6]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[typex.PaneInfo, []typex.Window, typex.EventTime, I3, I4, I5, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, I3, I4, I5, I6))
						return &caller7x0[typex.PaneInfo, []typex.Window, typex.EventTime, I3, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, I3, I4, I5, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 I3, a4 I4, a5 I5, a6 I6) {
							fn.(startBundle7x0[typex.PaneInfo, []typex.Window, typex.EventTime, I3, I4, I5, I6]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I4, I5, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I4, I5, I6))
						return &caller7x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I4, I5, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 I4, a5 I5, a6 I6) {
							fn.(startBundle7x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I4, I5, I6]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[typex.BundleFinalization, I1, I2, I3, I4, I5, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization, I1, I2, I3, I4, I5, I6))
						return &caller7x0[typex.BundleFinalization, I1, I2, I3, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization, I1, I2, I3, I4, I5, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization, a1 I1, a2 I2, a3 I3, a4 I4, a5 I5, a6 I6) {
							fn.(startBundle7x0[typex.BundleFinalization, I1, I2, I3, I4, I5, I6]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[context.Context, typex.BundleFinalization, I2, I3, I4, I5, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization, I2, I3, I4, I5, I6))
						return &caller7x0[context.Context, typex.BundleFinalization, I2, I3, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization, I2, I3, I4, I5, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization, a2 I2, a3 I3, a4 I4, a5 I5, a6 I6) {
							fn.(startBundle7x0[context.Context, typex.BundleFinalization, I2, I3, I4, I5, I6]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[typex.PaneInfo, typex.BundleFinalization, I2, I3, I4, I5, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization, I2, I3, I4, I5, I6))
						return &caller7x0[typex.PaneInfo, typex.BundleFinalization, I2, I3, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization, I2, I3, I4, I5, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization, a2 I2, a3 I3, a4 I4, a5 I5, a6 I6) {
							fn.(startBundle7x0[typex.PaneInfo, typex.BundleFinalization, I2, I3, I4, I5, I6]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I3, I4, I5, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization, I3, I4, I5, I6))
						return &caller7x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I3, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization, I3, I4, I5, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization, a3 I3, a4 I4, a5 I5, a6 I6) {
							fn.(startBundle7x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I3, I4, I5, I6]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[[]typex.Window, typex.BundleFinalization, I2, I3, I4, I5, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization, I2, I3, I4, I5, I6))
						return &caller7x0[[]typex.Window, typex.BundleFinalization, I2, I3, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization, I2, I3, I4, I5, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization, a2 I2, a3 I3, a4 I4, a5 I5, a6 I6) {
							fn.(startBundle7x0[[]typex.Window, typex.BundleFinalization, I2, I3, I4, I5, I6]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[context.Context, []typex.Window, typex.BundleFinalization, I3, I4, I5, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization, I3, I4, I5, I6))
						return &caller7x0[context.Context, []typex.Window, typex.BundleFinalization, I3, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization, I3, I4, I5, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization, a3 I3, a4 I4, a5 I5, a6 I6) {
							fn.(startBundle7x0[context.Context, []typex.Window, typex.BundleFinalization, I3, I4, I5, I6]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3, I4, I5, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3, I4, I5, I6))
						return &caller7x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3, I4, I5, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization, a3 I3, a4 I4, a5 I5, a6 I6) {
							fn.(startBundle7x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3, I4, I5, I6]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4, I5, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4, I5, I6))
						return &caller7x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4, I5, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.BundleFinalization, a4 I4, a5 I5, a6 I6) {
							fn.(startBundle7x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4, I5, I6]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[typex.EventTime, typex.BundleFinalization, I2, I3, I4, I5, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization, I2, I3, I4, I5, I6))
						return &caller7x0[typex.EventTime, typex.BundleFinalization, I2, I3, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization, I2, I3, I4, I5, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization, a2 I2, a3 I3, a4 I4, a5 I5, a6 I6) {
							fn.(startBundle7x0[typex.EventTime, typex.BundleFinalization, I2, I3, I4, I5, I6]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[context.Context, typex.EventTime, typex.BundleFinalization, I3, I4, I5, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization, I3, I4, I5, I6))
						return &caller7x0[context.Context, typex.EventTime, typex.BundleFinalization, I3, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization, I3, I4, I5, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I3, a4 I4, a5 I5, a6 I6) {
							fn.(startBundle7x0[context.Context, typex.EventTime, typex.BundleFinalization, I3, I4, I5, I6]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3, I4, I5, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3, I4, I5, I6))
						return &caller7x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3, I4, I5, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I3, a4 I4, a5 I5, a6 I6) {
							fn.(startBundle7x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3, I4, I5, I6]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4, I5, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4, I5, I6))
						return &caller7x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4, I5, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I4, a5 I5, a6 I6) {
							fn.(startBundle7x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4, I5, I6]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4, I5, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4, I5, I6))
						return &caller7x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4, I5, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I3, a4 I4, a5 I5, a6 I6) {
							fn.(startBundle7x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4, I5, I6]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5, I6))
						return &caller7x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I4, a5 I5, a6 I6) {
							fn.(startBundle7x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5, I6]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5, I6))
						return &caller7x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I4, a5 I5, a6 I6) {
							fn.(startBundle7x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5, I6]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6))
						return &caller7x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 typex.BundleFinalization, a5 I5, a6 I6) {
							fn.(startBundle7x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				}
			case startBundleOut == 1:
				if _, ok := doFn.(startBundle7x1[I0, I1, I2, I3, I4, I5, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I0, I1, I2, I3, I4, I5, I6) error)
						return &caller7x1[I0, I1, I2, I3, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I0, I1, I2, I3, I4, I5, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I0, a1 I1, a2 I2, a3 I3, a4 I4, a5 I5, a6 I6) error {
							return fn.(startBundle7x1[I0, I1, I2, I3, I4, I5, I6, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[context.Context, I1, I2, I3, I4, I5, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, I1, I2, I3, I4, I5, I6) error)
						return &caller7x1[context.Context, I1, I2, I3, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, I1, I2, I3, I4, I5, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 I1, a2 I2, a3 I3, a4 I4, a5 I5, a6 I6) error {
							return fn.(startBundle7x1[context.Context, I1, I2, I3, I4, I5, I6, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[typex.PaneInfo, I1, I2, I3, I4, I5, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, I1, I2, I3, I4, I5, I6) error)
						return &caller7x1[typex.PaneInfo, I1, I2, I3, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, I1, I2, I3, I4, I5, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 I1, a2 I2, a3 I3, a4 I4, a5 I5, a6 I6) error {
							return fn.(startBundle7x1[typex.PaneInfo, I1, I2, I3, I4, I5, I6, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[context.Context, typex.PaneInfo, I2, I3, I4, I5, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, I2, I3, I4, I5, I6) error)
						return &caller7x1[context.Context, typex.PaneInfo, I2, I3, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, I2, I3, I4, I5, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 I2, a3 I3, a4 I4, a5 I5, a6 I6) error {
							return fn.(startBundle7x1[context.Context, typex.PaneInfo, I2, I3, I4, I5, I6, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[[]typex.Window, I1, I2, I3, I4, I5, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, I1, I2, I3, I4, I5, I6) error)
						return &caller7x1[[]typex.Window, I1, I2, I3, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, I1, I2, I3, I4, I5, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 I1, a2 I2, a3 I3, a4 I4, a5 I5, a6 I6) error {
							return fn.(startBundle7x1[[]typex.Window, I1, I2, I3, I4, I5, I6, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[context.Context, []typex.Window, I2, I3, I4, I5, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, I2, I3, I4, I5, I6) error)
						return &caller7x1[context.Context, []typex.Window, I2, I3, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, I2, I3, I4, I5, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 I2, a3 I3, a4 I4, a5 I5, a6 I6) error {
							return fn.(startBundle7x1[context.Context, []typex.Window, I2, I3, I4, I5, I6, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[typex.PaneInfo, []typex.Window, I2, I3, I4, I5, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, I2, I3, I4, I5, I6) error)
						return &caller7x1[typex.PaneInfo, []typex.Window, I2, I3, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, I2, I3, I4, I5, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 I2, a3 I3, a4 I4, a5 I5, a6 I6) error {
							return fn.(startBundle7x1[typex.PaneInfo, []typex.Window, I2, I3, I4, I5, I6, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[context.Context, typex.PaneInfo, []typex.Window, I3, I4, I5, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, I3, I4, I5, I6) error)
						return &caller7x1[context.Context, typex.PaneInfo, []typex.Window, I3, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, I3, I4, I5, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 I3, a4 I4, a5 I5, a6 I6) error {
							return fn.(startBundle7x1[context.Context, typex.PaneInfo, []typex.Window, I3, I4, I5, I6, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[typex.EventTime, I1, I2, I3, I4, I5, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, I1, I2, I3, I4, I5, I6) error)
						return &caller7x1[typex.EventTime, I1, I2, I3, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, I1, I2, I3, I4, I5, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 I1, a2 I2, a3 I3, a4 I4, a5 I5, a6 I6) error {
							return fn.(startBundle7x1[typex.EventTime, I1, I2, I3, I4, I5, I6, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[context.Context, typex.EventTime, I2, I3, I4, I5, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, I2, I3, I4, I5, I6) error)
						return &caller7x1[context.Context, typex.EventTime, I2, I3, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, I2, I3, I4, I5, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 I2, a3 I3, a4 I4, a5 I5, a6 I6) error {
							return fn.(startBundle7x1[context.Context, typex.EventTime, I2, I3, I4, I5, I6, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[typex.PaneInfo, typex.EventTime, I2, I3, I4, I5, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, I2, I3, I4, I5, I6) error)
						return &caller7x1[typex.PaneInfo, typex.EventTime, I2, I3, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, I2, I3, I4, I5, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 I2, a3 I3, a4 I4, a5 I5, a6 I6) error {
							return fn.(startBundle7x1[typex.PaneInfo, typex.EventTime, I2, I3, I4, I5, I6, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[context.Context, typex.PaneInfo, typex.EventTime, I3, I4, I5, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, I3, I4, I5, I6) error)
						return &caller7x1[context.Context, typex.PaneInfo, typex.EventTime, I3, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, I3, I4, I5, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 I3, a4 I4, a5 I5, a6 I6) error {
							return fn.(startBundle7x1[context.Context, typex.PaneInfo, typex.EventTime, I3, I4, I5, I6, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[[]typex.Window, typex.EventTime, I2, I3, I4, I5, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, I2, I3, I4, I5, I6) error)
						return &caller7x1[[]typex.Window, typex.EventTime, I2, I3, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, I2, I3, I4, I5, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 I2, a3 I3, a4 I4, a5 I5, a6 I6) error {
							return fn.(startBundle7x1[[]typex.Window, typex.EventTime, I2, I3, I4, I5, I6, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[context.Context, []typex.Window, typex.EventTime, I3, I4, I5, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, I3, I4, I5, I6) error)
						return &caller7x1[context.Context, []typex.Window, typex.EventTime, I3, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, I3, I4, I5, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 I3, a4 I4, a5 I5, a6 I6) error {
							return fn.(startBundle7x1[context.Context, []typex.Window, typex.EventTime, I3, I4, I5, I6, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[typex.PaneInfo, []typex.Window, typex.EventTime, I3, I4, I5, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, I3, I4, I5, I6) error)
						return &caller7x1[typex.PaneInfo, []typex.Window, typex.EventTime, I3, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, I3, I4, I5, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 I3, a4 I4, a5 I5, a6 I6) error {
							return fn.(startBundle7x1[typex.PaneInfo, []typex.Window, typex.EventTime, I3, I4, I5, I6, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I4, I5, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I4, I5, I6) error)
						return &caller7x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I4, I5, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 I4, a5 I5, a6 I6) error {
							return fn.(startBundle7x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I4, I5, I6, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[typex.BundleFinalization, I1, I2, I3, I4, I5, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization, I1, I2, I3, I4, I5, I6) error)
						return &caller7x1[typex.BundleFinalization, I1, I2, I3, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization, I1, I2, I3, I4, I5, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization, a1 I1, a2 I2, a3 I3, a4 I4, a5 I5, a6 I6) error {
							return fn.(startBundle7x1[typex.BundleFinalization, I1, I2, I3, I4, I5, I6, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[context.Context, typex.BundleFinalization, I2, I3, I4, I5, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization, I2, I3, I4, I5, I6) error)
						return &caller7x1[context.Context, typex.BundleFinalization, I2, I3, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization, I2, I3, I4, I5, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization, a2 I2, a3 I3, a4 I4, a5 I5, a6 I6) error {
							return fn.(startBundle7x1[context.Context, typex.BundleFinalization, I2, I3, I4, I5, I6, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[typex.PaneInfo, typex.BundleFinalization, I2, I3, I4, I5, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization, I2, I3, I4, I5, I6) error)
						return &caller7x1[typex.PaneInfo, typex.BundleFinalization, I2, I3, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization, I2, I3, I4, I5, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization, a2 I2, a3 I3, a4 I4, a5 I5, a6 I6) error {
							return fn.(startBundle7x1[typex.PaneInfo, typex.BundleFinalization, I2, I3, I4, I5, I6, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I3, I4, I5, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization, I3, I4, I5, I6) error)
						return &caller7x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I3, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization, I3, I4, I5, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization, a3 I3, a4 I4, a5 I5, a6 I6) error {
							return fn.(startBundle7x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I3, I4, I5, I6, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[[]typex.Window, typex.BundleFinalization, I2, I3, I4, I5, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization, I2, I3, I4, I5, I6) error)
						return &caller7x1[[]typex.Window, typex.BundleFinalization, I2, I3, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization, I2, I3, I4, I5, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization, a2 I2, a3 I3, a4 I4, a5 I5, a6 I6) error {
							return fn.(startBundle7x1[[]typex.Window, typex.BundleFinalization, I2, I3, I4, I5, I6, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[context.Context, []typex.Window, typex.BundleFinalization, I3, I4, I5, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization, I3, I4, I5, I6) error)
						return &caller7x1[context.Context, []typex.Window, typex.BundleFinalization, I3, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization, I3, I4, I5, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization, a3 I3, a4 I4, a5 I5, a6 I6) error {
							return fn.(startBundle7x1[context.Context, []typex.Window, typex.BundleFinalization, I3, I4, I5, I6, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3, I4, I5, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3, I4, I5, I6) error)
						return &caller7x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3, I4, I5, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization, a3 I3, a4 I4, a5 I5, a6 I6) error {
							return fn.(startBundle7x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3, I4, I5, I6, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4, I5, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4, I5, I6) error)
						return &caller7x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4, I5, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.BundleFinalization, a4 I4, a5 I5, a6 I6) error {
							return fn.(startBundle7x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4, I5, I6, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[typex.EventTime, typex.BundleFinalization, I2, I3, I4, I5, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization, I2, I3, I4, I5, I6) error)
						return &caller7x1[typex.EventTime, typex.BundleFinalization, I2, I3, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization, I2, I3, I4, I5, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization, a2 I2, a3 I3, a4 I4, a5 I5, a6 I6) error {
							return fn.(startBundle7x1[typex.EventTime, typex.BundleFinalization, I2, I3, I4, I5, I6, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[context.Context, typex.EventTime, typex.BundleFinalization, I3, I4, I5, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization, I3, I4, I5, I6) error)
						return &caller7x1[context.Context, typex.EventTime, typex.BundleFinalization, I3, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization, I3, I4, I5, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I3, a4 I4, a5 I5, a6 I6) error {
							return fn.(startBundle7x1[context.Context, typex.EventTime, typex.BundleFinalization, I3, I4, I5, I6, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3, I4, I5, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3, I4, I5, I6) error)
						return &caller7x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3, I4, I5, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I3, a4 I4, a5 I5, a6 I6) error {
							return fn.(startBundle7x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3, I4, I5, I6, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4, I5, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4, I5, I6) error)
						return &caller7x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4, I5, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I4, a5 I5, a6 I6) error {
							return fn.(startBundle7x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4, I5, I6, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4, I5, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4, I5, I6) error)
						return &caller7x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4, I5, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I3, a4 I4, a5 I5, a6 I6) error {
							return fn.(startBundle7x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4, I5, I6, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5, I6) error)
						return &caller7x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I4, a5 I5, a6 I6) error {
							return fn.(startBundle7x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5, I6, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5, I6) error)
						return &caller7x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I4, a5 I5, a6 I6) error {
							return fn.(startBundle7x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5, I6, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6) error)
						return &caller7x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 typex.BundleFinalization, a5 I5, a6 I6) error {
							return fn.(startBundle7x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				}
			default:
				panic("Invalid signature for StartBundle")
			}

		default:
			panic("Invalid signature for StartBundle")
		}
	}
	return nil
}

func buildStartBundleWrapper8[I0, I1, I2, I3, I4, I5, I6, I7 any](doFn interface{}) func(interface{}) reflectx.Func {
	startBundleIn := -1
	startBundleOut := -1
	startBundleMethod := reflect.ValueOf(doFn).MethodByName("StartBundle")
	if startBundleMethod.IsValid() {
		startBundleIn = startBundleMethod.Type().NumIn()
		startBundleOut = startBundleMethod.Type().NumOut()
		switch {

		case startBundleIn == 0:
			switch {
			case startBundleOut == 0:
				if _, ok := doFn.(startBundle0x0); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func())
						return &caller0x0{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func())(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func() { fn.(startBundle0x0).StartBundle() })
					}
				}
			case startBundleOut == 1:
				if _, ok := doFn.(startBundle0x1[error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func() error)
						return &caller0x1[error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func() error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func() error { return fn.(startBundle0x1[error]).StartBundle() })
					}
				}
			default:
				panic("Invalid signature for StartBundle")
			}

		case startBundleIn == 1:
			switch {
			case startBundleOut == 0:
				if _, ok := doFn.(startBundle1x0[I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I7))
						return &caller1x0[I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I7) { fn.(startBundle1x0[I7]).StartBundle(a0) })
					}
				} else if _, ok := doFn.(startBundle1x0[context.Context]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context))
						return &caller1x0[context.Context]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context) { fn.(startBundle1x0[context.Context]).StartBundle(a0) })
					}
				} else if _, ok := doFn.(startBundle1x0[typex.PaneInfo]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo))
						return &caller1x0[typex.PaneInfo]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo) { fn.(startBundle1x0[typex.PaneInfo]).StartBundle(a0) })
					}
				} else if _, ok := doFn.(startBundle1x0[[]typex.Window]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window))
						return &caller1x0[[]typex.Window]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window) { fn.(startBundle1x0[[]typex.Window]).StartBundle(a0) })
					}
				} else if _, ok := doFn.(startBundle1x0[typex.EventTime]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime))
						return &caller1x0[typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime) { fn.(startBundle1x0[typex.EventTime]).StartBundle(a0) })
					}
				} else if _, ok := doFn.(startBundle1x0[typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization))
						return &caller1x0[typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization) { fn.(startBundle1x0[typex.BundleFinalization]).StartBundle(a0) })
					}
				}
			case startBundleOut == 1:
				if _, ok := doFn.(startBundle1x1[I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I7) error)
						return &caller1x1[I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I7) error { return fn.(startBundle1x1[I7, error]).StartBundle(a0) })
					}
				} else if _, ok := doFn.(startBundle1x1[context.Context, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context) error)
						return &caller1x1[context.Context, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context) error { return fn.(startBundle1x1[context.Context, error]).StartBundle(a0) })
					}
				} else if _, ok := doFn.(startBundle1x1[typex.PaneInfo, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo) error)
						return &caller1x1[typex.PaneInfo, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo) error { return fn.(startBundle1x1[typex.PaneInfo, error]).StartBundle(a0) })
					}
				} else if _, ok := doFn.(startBundle1x1[[]typex.Window, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window) error)
						return &caller1x1[[]typex.Window, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window) error { return fn.(startBundle1x1[[]typex.Window, error]).StartBundle(a0) })
					}
				} else if _, ok := doFn.(startBundle1x1[typex.EventTime, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime) error)
						return &caller1x1[typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime) error { return fn.(startBundle1x1[typex.EventTime, error]).StartBundle(a0) })
					}
				} else if _, ok := doFn.(startBundle1x1[typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization) error)
						return &caller1x1[typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization) error {
							return fn.(startBundle1x1[typex.BundleFinalization, error]).StartBundle(a0)
						})
					}
				}
			default:
				panic("Invalid signature for StartBundle")
			}

		case startBundleIn == 2:
			switch {
			case startBundleOut == 0:
				if _, ok := doFn.(startBundle2x0[I6, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I6, I7))
						return &caller2x0[I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I6, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I6, a1 I7) { fn.(startBundle2x0[I6, I7]).StartBundle(a0, a1) })
					}
				} else if _, ok := doFn.(startBundle2x0[context.Context, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, I7))
						return &caller2x0[context.Context, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 I7) { fn.(startBundle2x0[context.Context, I7]).StartBundle(a0, a1) })
					}
				} else if _, ok := doFn.(startBundle2x0[typex.PaneInfo, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, I7))
						return &caller2x0[typex.PaneInfo, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 I7) { fn.(startBundle2x0[typex.PaneInfo, I7]).StartBundle(a0, a1) })
					}
				} else if _, ok := doFn.(startBundle2x0[context.Context, typex.PaneInfo]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo))
						return &caller2x0[context.Context, typex.PaneInfo]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo) {
							fn.(startBundle2x0[context.Context, typex.PaneInfo]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x0[[]typex.Window, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, I7))
						return &caller2x0[[]typex.Window, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 I7) { fn.(startBundle2x0[[]typex.Window, I7]).StartBundle(a0, a1) })
					}
				} else if _, ok := doFn.(startBundle2x0[context.Context, []typex.Window]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window))
						return &caller2x0[context.Context, []typex.Window]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window) {
							fn.(startBundle2x0[context.Context, []typex.Window]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x0[typex.PaneInfo, []typex.Window]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window))
						return &caller2x0[typex.PaneInfo, []typex.Window]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window) {
							fn.(startBundle2x0[typex.PaneInfo, []typex.Window]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x0[typex.EventTime, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, I7))
						return &caller2x0[typex.EventTime, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 I7) { fn.(startBundle2x0[typex.EventTime, I7]).StartBundle(a0, a1) })
					}
				} else if _, ok := doFn.(startBundle2x0[context.Context, typex.EventTime]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime))
						return &caller2x0[context.Context, typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime) {
							fn.(startBundle2x0[context.Context, typex.EventTime]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x0[typex.PaneInfo, typex.EventTime]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime))
						return &caller2x0[typex.PaneInfo, typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime) {
							fn.(startBundle2x0[typex.PaneInfo, typex.EventTime]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x0[[]typex.Window, typex.EventTime]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime))
						return &caller2x0[[]typex.Window, typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime) {
							fn.(startBundle2x0[[]typex.Window, typex.EventTime]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x0[typex.BundleFinalization, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization, I7))
						return &caller2x0[typex.BundleFinalization, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization, a1 I7) {
							fn.(startBundle2x0[typex.BundleFinalization, I7]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x0[context.Context, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization))
						return &caller2x0[context.Context, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization) {
							fn.(startBundle2x0[context.Context, typex.BundleFinalization]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x0[typex.PaneInfo, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization))
						return &caller2x0[typex.PaneInfo, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization) {
							fn.(startBundle2x0[typex.PaneInfo, typex.BundleFinalization]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x0[[]typex.Window, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization))
						return &caller2x0[[]typex.Window, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization) {
							fn.(startBundle2x0[[]typex.Window, typex.BundleFinalization]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x0[typex.EventTime, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization))
						return &caller2x0[typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization) {
							fn.(startBundle2x0[typex.EventTime, typex.BundleFinalization]).StartBundle(a0, a1)
						})
					}
				}
			case startBundleOut == 1:
				if _, ok := doFn.(startBundle2x1[I6, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I6, I7) error)
						return &caller2x1[I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I6, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I6, a1 I7) error { return fn.(startBundle2x1[I6, I7, error]).StartBundle(a0, a1) })
					}
				} else if _, ok := doFn.(startBundle2x1[context.Context, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, I7) error)
						return &caller2x1[context.Context, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 I7) error {
							return fn.(startBundle2x1[context.Context, I7, error]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x1[typex.PaneInfo, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, I7) error)
						return &caller2x1[typex.PaneInfo, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 I7) error {
							return fn.(startBundle2x1[typex.PaneInfo, I7, error]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x1[context.Context, typex.PaneInfo, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo) error)
						return &caller2x1[context.Context, typex.PaneInfo, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo) error {
							return fn.(startBundle2x1[context.Context, typex.PaneInfo, error]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x1[[]typex.Window, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, I7) error)
						return &caller2x1[[]typex.Window, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 I7) error {
							return fn.(startBundle2x1[[]typex.Window, I7, error]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x1[context.Context, []typex.Window, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window) error)
						return &caller2x1[context.Context, []typex.Window, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window) error {
							return fn.(startBundle2x1[context.Context, []typex.Window, error]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x1[typex.PaneInfo, []typex.Window, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window) error)
						return &caller2x1[typex.PaneInfo, []typex.Window, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window) error {
							return fn.(startBundle2x1[typex.PaneInfo, []typex.Window, error]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x1[typex.EventTime, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, I7) error)
						return &caller2x1[typex.EventTime, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 I7) error {
							return fn.(startBundle2x1[typex.EventTime, I7, error]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x1[context.Context, typex.EventTime, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime) error)
						return &caller2x1[context.Context, typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime) error {
							return fn.(startBundle2x1[context.Context, typex.EventTime, error]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x1[typex.PaneInfo, typex.EventTime, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime) error)
						return &caller2x1[typex.PaneInfo, typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime) error {
							return fn.(startBundle2x1[typex.PaneInfo, typex.EventTime, error]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x1[[]typex.Window, typex.EventTime, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime) error)
						return &caller2x1[[]typex.Window, typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime) error {
							return fn.(startBundle2x1[[]typex.Window, typex.EventTime, error]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x1[typex.BundleFinalization, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization, I7) error)
						return &caller2x1[typex.BundleFinalization, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization, a1 I7) error {
							return fn.(startBundle2x1[typex.BundleFinalization, I7, error]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x1[context.Context, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization) error)
						return &caller2x1[context.Context, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization) error {
							return fn.(startBundle2x1[context.Context, typex.BundleFinalization, error]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x1[typex.PaneInfo, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization) error)
						return &caller2x1[typex.PaneInfo, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization) error {
							return fn.(startBundle2x1[typex.PaneInfo, typex.BundleFinalization, error]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x1[[]typex.Window, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization) error)
						return &caller2x1[[]typex.Window, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization) error {
							return fn.(startBundle2x1[[]typex.Window, typex.BundleFinalization, error]).StartBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(startBundle2x1[typex.EventTime, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization) error)
						return &caller2x1[typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization) error {
							return fn.(startBundle2x1[typex.EventTime, typex.BundleFinalization, error]).StartBundle(a0, a1)
						})
					}
				}
			default:
				panic("Invalid signature for StartBundle")
			}

		case startBundleIn == 3:
			switch {
			case startBundleOut == 0:
				if _, ok := doFn.(startBundle3x0[I5, I6, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I5, I6, I7))
						return &caller3x0[I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I5, I6, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I5, a1 I6, a2 I7) { fn.(startBundle3x0[I5, I6, I7]).StartBundle(a0, a1, a2) })
					}
				} else if _, ok := doFn.(startBundle3x0[context.Context, I6, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, I6, I7))
						return &caller3x0[context.Context, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, I6, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 I6, a2 I7) {
							fn.(startBundle3x0[context.Context, I6, I7]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[typex.PaneInfo, I6, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, I6, I7))
						return &caller3x0[typex.PaneInfo, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, I6, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 I6, a2 I7) {
							fn.(startBundle3x0[typex.PaneInfo, I6, I7]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[context.Context, typex.PaneInfo, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, I7))
						return &caller3x0[context.Context, typex.PaneInfo, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 I7) {
							fn.(startBundle3x0[context.Context, typex.PaneInfo, I7]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[[]typex.Window, I6, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, I6, I7))
						return &caller3x0[[]typex.Window, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, I6, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 I6, a2 I7) {
							fn.(startBundle3x0[[]typex.Window, I6, I7]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[context.Context, []typex.Window, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, I7))
						return &caller3x0[context.Context, []typex.Window, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 I7) {
							fn.(startBundle3x0[context.Context, []typex.Window, I7]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[typex.PaneInfo, []typex.Window, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, I7))
						return &caller3x0[typex.PaneInfo, []typex.Window, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 I7) {
							fn.(startBundle3x0[typex.PaneInfo, []typex.Window, I7]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[context.Context, typex.PaneInfo, []typex.Window]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window))
						return &caller3x0[context.Context, typex.PaneInfo, []typex.Window]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window) {
							fn.(startBundle3x0[context.Context, typex.PaneInfo, []typex.Window]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[typex.EventTime, I6, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, I6, I7))
						return &caller3x0[typex.EventTime, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, I6, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 I6, a2 I7) {
							fn.(startBundle3x0[typex.EventTime, I6, I7]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[context.Context, typex.EventTime, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, I7))
						return &caller3x0[context.Context, typex.EventTime, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 I7) {
							fn.(startBundle3x0[context.Context, typex.EventTime, I7]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[typex.PaneInfo, typex.EventTime, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, I7))
						return &caller3x0[typex.PaneInfo, typex.EventTime, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 I7) {
							fn.(startBundle3x0[typex.PaneInfo, typex.EventTime, I7]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[context.Context, typex.PaneInfo, typex.EventTime]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime))
						return &caller3x0[context.Context, typex.PaneInfo, typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime) {
							fn.(startBundle3x0[context.Context, typex.PaneInfo, typex.EventTime]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[[]typex.Window, typex.EventTime, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, I7))
						return &caller3x0[[]typex.Window, typex.EventTime, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 I7) {
							fn.(startBundle3x0[[]typex.Window, typex.EventTime, I7]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[context.Context, []typex.Window, typex.EventTime]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime))
						return &caller3x0[context.Context, []typex.Window, typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime) {
							fn.(startBundle3x0[context.Context, []typex.Window, typex.EventTime]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[typex.PaneInfo, []typex.Window, typex.EventTime]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime))
						return &caller3x0[typex.PaneInfo, []typex.Window, typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime) {
							fn.(startBundle3x0[typex.PaneInfo, []typex.Window, typex.EventTime]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[typex.BundleFinalization, I6, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization, I6, I7))
						return &caller3x0[typex.BundleFinalization, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization, I6, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization, a1 I6, a2 I7) {
							fn.(startBundle3x0[typex.BundleFinalization, I6, I7]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[context.Context, typex.BundleFinalization, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization, I7))
						return &caller3x0[context.Context, typex.BundleFinalization, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization, a2 I7) {
							fn.(startBundle3x0[context.Context, typex.BundleFinalization, I7]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[typex.PaneInfo, typex.BundleFinalization, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization, I7))
						return &caller3x0[typex.PaneInfo, typex.BundleFinalization, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization, a2 I7) {
							fn.(startBundle3x0[typex.PaneInfo, typex.BundleFinalization, I7]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[context.Context, typex.PaneInfo, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization))
						return &caller3x0[context.Context, typex.PaneInfo, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization) {
							fn.(startBundle3x0[context.Context, typex.PaneInfo, typex.BundleFinalization]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[[]typex.Window, typex.BundleFinalization, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization, I7))
						return &caller3x0[[]typex.Window, typex.BundleFinalization, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization, a2 I7) {
							fn.(startBundle3x0[[]typex.Window, typex.BundleFinalization, I7]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[context.Context, []typex.Window, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization))
						return &caller3x0[context.Context, []typex.Window, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization) {
							fn.(startBundle3x0[context.Context, []typex.Window, typex.BundleFinalization]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization))
						return &caller3x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization) {
							fn.(startBundle3x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[typex.EventTime, typex.BundleFinalization, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization, I7))
						return &caller3x0[typex.EventTime, typex.BundleFinalization, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization, a2 I7) {
							fn.(startBundle3x0[typex.EventTime, typex.BundleFinalization, I7]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[context.Context, typex.EventTime, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization))
						return &caller3x0[context.Context, typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization) {
							fn.(startBundle3x0[context.Context, typex.EventTime, typex.BundleFinalization]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization))
						return &caller3x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization) {
							fn.(startBundle3x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x0[[]typex.Window, typex.EventTime, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization))
						return &caller3x0[[]typex.Window, typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization) {
							fn.(startBundle3x0[[]typex.Window, typex.EventTime, typex.BundleFinalization]).StartBundle(a0, a1, a2)
						})
					}
				}
			case startBundleOut == 1:
				if _, ok := doFn.(startBundle3x1[I5, I6, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I5, I6, I7) error)
						return &caller3x1[I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I5, I6, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I5, a1 I6, a2 I7) error { return fn.(startBundle3x1[I5, I6, I7, error]).StartBundle(a0, a1, a2) })
					}
				} else if _, ok := doFn.(startBundle3x1[context.Context, I6, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, I6, I7) error)
						return &caller3x1[context.Context, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, I6, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 I6, a2 I7) error {
							return fn.(startBundle3x1[context.Context, I6, I7, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[typex.PaneInfo, I6, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, I6, I7) error)
						return &caller3x1[typex.PaneInfo, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, I6, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 I6, a2 I7) error {
							return fn.(startBundle3x1[typex.PaneInfo, I6, I7, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[context.Context, typex.PaneInfo, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, I7) error)
						return &caller3x1[context.Context, typex.PaneInfo, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 I7) error {
							return fn.(startBundle3x1[context.Context, typex.PaneInfo, I7, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[[]typex.Window, I6, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, I6, I7) error)
						return &caller3x1[[]typex.Window, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, I6, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 I6, a2 I7) error {
							return fn.(startBundle3x1[[]typex.Window, I6, I7, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[context.Context, []typex.Window, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, I7) error)
						return &caller3x1[context.Context, []typex.Window, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 I7) error {
							return fn.(startBundle3x1[context.Context, []typex.Window, I7, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[typex.PaneInfo, []typex.Window, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, I7) error)
						return &caller3x1[typex.PaneInfo, []typex.Window, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 I7) error {
							return fn.(startBundle3x1[typex.PaneInfo, []typex.Window, I7, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[context.Context, typex.PaneInfo, []typex.Window, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window) error)
						return &caller3x1[context.Context, typex.PaneInfo, []typex.Window, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window) error {
							return fn.(startBundle3x1[context.Context, typex.PaneInfo, []typex.Window, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[typex.EventTime, I6, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, I6, I7) error)
						return &caller3x1[typex.EventTime, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, I6, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 I6, a2 I7) error {
							return fn.(startBundle3x1[typex.EventTime, I6, I7, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[context.Context, typex.EventTime, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, I7) error)
						return &caller3x1[context.Context, typex.EventTime, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 I7) error {
							return fn.(startBundle3x1[context.Context, typex.EventTime, I7, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[typex.PaneInfo, typex.EventTime, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, I7) error)
						return &caller3x1[typex.PaneInfo, typex.EventTime, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 I7) error {
							return fn.(startBundle3x1[typex.PaneInfo, typex.EventTime, I7, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[context.Context, typex.PaneInfo, typex.EventTime, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime) error)
						return &caller3x1[context.Context, typex.PaneInfo, typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime) error {
							return fn.(startBundle3x1[context.Context, typex.PaneInfo, typex.EventTime, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[[]typex.Window, typex.EventTime, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, I7) error)
						return &caller3x1[[]typex.Window, typex.EventTime, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 I7) error {
							return fn.(startBundle3x1[[]typex.Window, typex.EventTime, I7, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[context.Context, []typex.Window, typex.EventTime, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime) error)
						return &caller3x1[context.Context, []typex.Window, typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime) error {
							return fn.(startBundle3x1[context.Context, []typex.Window, typex.EventTime, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[typex.PaneInfo, []typex.Window, typex.EventTime, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime) error)
						return &caller3x1[typex.PaneInfo, []typex.Window, typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime) error {
							return fn.(startBundle3x1[typex.PaneInfo, []typex.Window, typex.EventTime, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[typex.BundleFinalization, I6, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization, I6, I7) error)
						return &caller3x1[typex.BundleFinalization, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization, I6, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization, a1 I6, a2 I7) error {
							return fn.(startBundle3x1[typex.BundleFinalization, I6, I7, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[context.Context, typex.BundleFinalization, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization, I7) error)
						return &caller3x1[context.Context, typex.BundleFinalization, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization, a2 I7) error {
							return fn.(startBundle3x1[context.Context, typex.BundleFinalization, I7, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[typex.PaneInfo, typex.BundleFinalization, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization, I7) error)
						return &caller3x1[typex.PaneInfo, typex.BundleFinalization, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization, a2 I7) error {
							return fn.(startBundle3x1[typex.PaneInfo, typex.BundleFinalization, I7, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[context.Context, typex.PaneInfo, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization) error)
						return &caller3x1[context.Context, typex.PaneInfo, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization) error {
							return fn.(startBundle3x1[context.Context, typex.PaneInfo, typex.BundleFinalization, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[[]typex.Window, typex.BundleFinalization, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization, I7) error)
						return &caller3x1[[]typex.Window, typex.BundleFinalization, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization, a2 I7) error {
							return fn.(startBundle3x1[[]typex.Window, typex.BundleFinalization, I7, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[context.Context, []typex.Window, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization) error)
						return &caller3x1[context.Context, []typex.Window, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization) error {
							return fn.(startBundle3x1[context.Context, []typex.Window, typex.BundleFinalization, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization) error)
						return &caller3x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization) error {
							return fn.(startBundle3x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[typex.EventTime, typex.BundleFinalization, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization, I7) error)
						return &caller3x1[typex.EventTime, typex.BundleFinalization, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization, a2 I7) error {
							return fn.(startBundle3x1[typex.EventTime, typex.BundleFinalization, I7, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[context.Context, typex.EventTime, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization) error)
						return &caller3x1[context.Context, typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization) error {
							return fn.(startBundle3x1[context.Context, typex.EventTime, typex.BundleFinalization, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization) error)
						return &caller3x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization) error {
							return fn.(startBundle3x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, error]).StartBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(startBundle3x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization) error)
						return &caller3x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization) error {
							return fn.(startBundle3x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, error]).StartBundle(a0, a1, a2)
						})
					}
				}
			default:
				panic("Invalid signature for StartBundle")
			}

		case startBundleIn == 4:
			switch {
			case startBundleOut == 0:
				if _, ok := doFn.(startBundle4x0[I4, I5, I6, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I4, I5, I6, I7))
						return &caller4x0[I4, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I4, I5, I6, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I4, a1 I5, a2 I6, a3 I7) { fn.(startBundle4x0[I4, I5, I6, I7]).StartBundle(a0, a1, a2, a3) })
					}
				} else if _, ok := doFn.(startBundle4x0[context.Context, I5, I6, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, I5, I6, I7))
						return &caller4x0[context.Context, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, I5, I6, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 I5, a2 I6, a3 I7) {
							fn.(startBundle4x0[context.Context, I5, I6, I7]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[typex.PaneInfo, I5, I6, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, I5, I6, I7))
						return &caller4x0[typex.PaneInfo, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, I5, I6, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 I5, a2 I6, a3 I7) {
							fn.(startBundle4x0[typex.PaneInfo, I5, I6, I7]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[context.Context, typex.PaneInfo, I6, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, I6, I7))
						return &caller4x0[context.Context, typex.PaneInfo, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, I6, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 I6, a3 I7) {
							fn.(startBundle4x0[context.Context, typex.PaneInfo, I6, I7]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[[]typex.Window, I5, I6, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, I5, I6, I7))
						return &caller4x0[[]typex.Window, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, I5, I6, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 I5, a2 I6, a3 I7) {
							fn.(startBundle4x0[[]typex.Window, I5, I6, I7]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[context.Context, []typex.Window, I6, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, I6, I7))
						return &caller4x0[context.Context, []typex.Window, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, I6, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 I6, a3 I7) {
							fn.(startBundle4x0[context.Context, []typex.Window, I6, I7]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[typex.PaneInfo, []typex.Window, I6, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, I6, I7))
						return &caller4x0[typex.PaneInfo, []typex.Window, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, I6, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 I6, a3 I7) {
							fn.(startBundle4x0[typex.PaneInfo, []typex.Window, I6, I7]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[context.Context, typex.PaneInfo, []typex.Window, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, I7))
						return &caller4x0[context.Context, typex.PaneInfo, []typex.Window, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 I7) {
							fn.(startBundle4x0[context.Context, typex.PaneInfo, []typex.Window, I7]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[typex.EventTime, I5, I6, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, I5, I6, I7))
						return &caller4x0[typex.EventTime, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, I5, I6, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 I5, a2 I6, a3 I7) {
							fn.(startBundle4x0[typex.EventTime, I5, I6, I7]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[context.Context, typex.EventTime, I6, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, I6, I7))
						return &caller4x0[context.Context, typex.EventTime, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, I6, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 I6, a3 I7) {
							fn.(startBundle4x0[context.Context, typex.EventTime, I6, I7]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[typex.PaneInfo, typex.EventTime, I6, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, I6, I7))
						return &caller4x0[typex.PaneInfo, typex.EventTime, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, I6, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 I6, a3 I7) {
							fn.(startBundle4x0[typex.PaneInfo, typex.EventTime, I6, I7]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[context.Context, typex.PaneInfo, typex.EventTime, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, I7))
						return &caller4x0[context.Context, typex.PaneInfo, typex.EventTime, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 I7) {
							fn.(startBundle4x0[context.Context, typex.PaneInfo, typex.EventTime, I7]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[[]typex.Window, typex.EventTime, I6, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, I6, I7))
						return &caller4x0[[]typex.Window, typex.EventTime, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, I6, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 I6, a3 I7) {
							fn.(startBundle4x0[[]typex.Window, typex.EventTime, I6, I7]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[context.Context, []typex.Window, typex.EventTime, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, I7))
						return &caller4x0[context.Context, []typex.Window, typex.EventTime, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 I7) {
							fn.(startBundle4x0[context.Context, []typex.Window, typex.EventTime, I7]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[typex.PaneInfo, []typex.Window, typex.EventTime, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, I7))
						return &caller4x0[typex.PaneInfo, []typex.Window, typex.EventTime, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 I7) {
							fn.(startBundle4x0[typex.PaneInfo, []typex.Window, typex.EventTime, I7]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime))
						return &caller4x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime) {
							fn.(startBundle4x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[typex.BundleFinalization, I5, I6, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization, I5, I6, I7))
						return &caller4x0[typex.BundleFinalization, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization, I5, I6, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization, a1 I5, a2 I6, a3 I7) {
							fn.(startBundle4x0[typex.BundleFinalization, I5, I6, I7]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[context.Context, typex.BundleFinalization, I6, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization, I6, I7))
						return &caller4x0[context.Context, typex.BundleFinalization, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization, I6, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization, a2 I6, a3 I7) {
							fn.(startBundle4x0[context.Context, typex.BundleFinalization, I6, I7]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[typex.PaneInfo, typex.BundleFinalization, I6, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization, I6, I7))
						return &caller4x0[typex.PaneInfo, typex.BundleFinalization, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization, I6, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization, a2 I6, a3 I7) {
							fn.(startBundle4x0[typex.PaneInfo, typex.BundleFinalization, I6, I7]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization, I7))
						return &caller4x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization, a3 I7) {
							fn.(startBundle4x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I7]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[[]typex.Window, typex.BundleFinalization, I6, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization, I6, I7))
						return &caller4x0[[]typex.Window, typex.BundleFinalization, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization, I6, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization, a2 I6, a3 I7) {
							fn.(startBundle4x0[[]typex.Window, typex.BundleFinalization, I6, I7]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[context.Context, []typex.Window, typex.BundleFinalization, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization, I7))
						return &caller4x0[context.Context, []typex.Window, typex.BundleFinalization, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization, a3 I7) {
							fn.(startBundle4x0[context.Context, []typex.Window, typex.BundleFinalization, I7]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I7))
						return &caller4x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization, a3 I7) {
							fn.(startBundle4x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I7]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization))
						return &caller4x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.BundleFinalization) {
							fn.(startBundle4x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[typex.EventTime, typex.BundleFinalization, I6, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization, I6, I7))
						return &caller4x0[typex.EventTime, typex.BundleFinalization, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization, I6, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization, a2 I6, a3 I7) {
							fn.(startBundle4x0[typex.EventTime, typex.BundleFinalization, I6, I7]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[context.Context, typex.EventTime, typex.BundleFinalization, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization, I7))
						return &caller4x0[context.Context, typex.EventTime, typex.BundleFinalization, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I7) {
							fn.(startBundle4x0[context.Context, typex.EventTime, typex.BundleFinalization, I7]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I7))
						return &caller4x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I7) {
							fn.(startBundle4x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I7]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization))
						return &caller4x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 typex.BundleFinalization) {
							fn.(startBundle4x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization, I7))
						return &caller4x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I7) {
							fn.(startBundle4x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I7]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization))
						return &caller4x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization) {
							fn.(startBundle4x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization))
						return &caller4x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization) {
							fn.(startBundle4x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization]).StartBundle(a0, a1, a2, a3)
						})
					}
				}
			case startBundleOut == 1:
				if _, ok := doFn.(startBundle4x1[I4, I5, I6, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I4, I5, I6, I7) error)
						return &caller4x1[I4, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I4, I5, I6, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I4, a1 I5, a2 I6, a3 I7) error {
							return fn.(startBundle4x1[I4, I5, I6, I7, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[context.Context, I5, I6, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, I5, I6, I7) error)
						return &caller4x1[context.Context, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, I5, I6, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 I5, a2 I6, a3 I7) error {
							return fn.(startBundle4x1[context.Context, I5, I6, I7, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[typex.PaneInfo, I5, I6, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, I5, I6, I7) error)
						return &caller4x1[typex.PaneInfo, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, I5, I6, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 I5, a2 I6, a3 I7) error {
							return fn.(startBundle4x1[typex.PaneInfo, I5, I6, I7, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[context.Context, typex.PaneInfo, I6, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, I6, I7) error)
						return &caller4x1[context.Context, typex.PaneInfo, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, I6, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 I6, a3 I7) error {
							return fn.(startBundle4x1[context.Context, typex.PaneInfo, I6, I7, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[[]typex.Window, I5, I6, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, I5, I6, I7) error)
						return &caller4x1[[]typex.Window, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, I5, I6, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 I5, a2 I6, a3 I7) error {
							return fn.(startBundle4x1[[]typex.Window, I5, I6, I7, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[context.Context, []typex.Window, I6, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, I6, I7) error)
						return &caller4x1[context.Context, []typex.Window, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, I6, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 I6, a3 I7) error {
							return fn.(startBundle4x1[context.Context, []typex.Window, I6, I7, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[typex.PaneInfo, []typex.Window, I6, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, I6, I7) error)
						return &caller4x1[typex.PaneInfo, []typex.Window, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, I6, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 I6, a3 I7) error {
							return fn.(startBundle4x1[typex.PaneInfo, []typex.Window, I6, I7, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[context.Context, typex.PaneInfo, []typex.Window, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, I7) error)
						return &caller4x1[context.Context, typex.PaneInfo, []typex.Window, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 I7) error {
							return fn.(startBundle4x1[context.Context, typex.PaneInfo, []typex.Window, I7, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[typex.EventTime, I5, I6, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, I5, I6, I7) error)
						return &caller4x1[typex.EventTime, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, I5, I6, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 I5, a2 I6, a3 I7) error {
							return fn.(startBundle4x1[typex.EventTime, I5, I6, I7, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[context.Context, typex.EventTime, I6, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, I6, I7) error)
						return &caller4x1[context.Context, typex.EventTime, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, I6, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 I6, a3 I7) error {
							return fn.(startBundle4x1[context.Context, typex.EventTime, I6, I7, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[typex.PaneInfo, typex.EventTime, I6, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, I6, I7) error)
						return &caller4x1[typex.PaneInfo, typex.EventTime, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, I6, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 I6, a3 I7) error {
							return fn.(startBundle4x1[typex.PaneInfo, typex.EventTime, I6, I7, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[context.Context, typex.PaneInfo, typex.EventTime, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, I7) error)
						return &caller4x1[context.Context, typex.PaneInfo, typex.EventTime, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 I7) error {
							return fn.(startBundle4x1[context.Context, typex.PaneInfo, typex.EventTime, I7, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[[]typex.Window, typex.EventTime, I6, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, I6, I7) error)
						return &caller4x1[[]typex.Window, typex.EventTime, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, I6, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 I6, a3 I7) error {
							return fn.(startBundle4x1[[]typex.Window, typex.EventTime, I6, I7, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[context.Context, []typex.Window, typex.EventTime, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, I7) error)
						return &caller4x1[context.Context, []typex.Window, typex.EventTime, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 I7) error {
							return fn.(startBundle4x1[context.Context, []typex.Window, typex.EventTime, I7, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[typex.PaneInfo, []typex.Window, typex.EventTime, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, I7) error)
						return &caller4x1[typex.PaneInfo, []typex.Window, typex.EventTime, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 I7) error {
							return fn.(startBundle4x1[typex.PaneInfo, []typex.Window, typex.EventTime, I7, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime) error)
						return &caller4x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime) error {
							return fn.(startBundle4x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[typex.BundleFinalization, I5, I6, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization, I5, I6, I7) error)
						return &caller4x1[typex.BundleFinalization, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization, I5, I6, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization, a1 I5, a2 I6, a3 I7) error {
							return fn.(startBundle4x1[typex.BundleFinalization, I5, I6, I7, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[context.Context, typex.BundleFinalization, I6, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization, I6, I7) error)
						return &caller4x1[context.Context, typex.BundleFinalization, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization, I6, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization, a2 I6, a3 I7) error {
							return fn.(startBundle4x1[context.Context, typex.BundleFinalization, I6, I7, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[typex.PaneInfo, typex.BundleFinalization, I6, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization, I6, I7) error)
						return &caller4x1[typex.PaneInfo, typex.BundleFinalization, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization, I6, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization, a2 I6, a3 I7) error {
							return fn.(startBundle4x1[typex.PaneInfo, typex.BundleFinalization, I6, I7, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization, I7) error)
						return &caller4x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization, a3 I7) error {
							return fn.(startBundle4x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I7, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[[]typex.Window, typex.BundleFinalization, I6, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization, I6, I7) error)
						return &caller4x1[[]typex.Window, typex.BundleFinalization, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization, I6, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization, a2 I6, a3 I7) error {
							return fn.(startBundle4x1[[]typex.Window, typex.BundleFinalization, I6, I7, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[context.Context, []typex.Window, typex.BundleFinalization, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization, I7) error)
						return &caller4x1[context.Context, []typex.Window, typex.BundleFinalization, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization, a3 I7) error {
							return fn.(startBundle4x1[context.Context, []typex.Window, typex.BundleFinalization, I7, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I7) error)
						return &caller4x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization, a3 I7) error {
							return fn.(startBundle4x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I7, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization) error)
						return &caller4x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.BundleFinalization) error {
							return fn.(startBundle4x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[typex.EventTime, typex.BundleFinalization, I6, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization, I6, I7) error)
						return &caller4x1[typex.EventTime, typex.BundleFinalization, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization, I6, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization, a2 I6, a3 I7) error {
							return fn.(startBundle4x1[typex.EventTime, typex.BundleFinalization, I6, I7, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[context.Context, typex.EventTime, typex.BundleFinalization, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization, I7) error)
						return &caller4x1[context.Context, typex.EventTime, typex.BundleFinalization, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I7) error {
							return fn.(startBundle4x1[context.Context, typex.EventTime, typex.BundleFinalization, I7, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I7) error)
						return &caller4x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I7) error {
							return fn.(startBundle4x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I7, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization) error)
						return &caller4x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 typex.BundleFinalization) error {
							return fn.(startBundle4x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization, I7) error)
						return &caller4x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I7) error {
							return fn.(startBundle4x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I7, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization) error)
						return &caller4x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization) error {
							return fn.(startBundle4x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(startBundle4x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization) error)
						return &caller4x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization) error {
							return fn.(startBundle4x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, error]).StartBundle(a0, a1, a2, a3)
						})
					}
				}
			default:
				panic("Invalid signature for StartBundle")
			}

		case startBundleIn == 5:
			switch {
			case startBundleOut == 0:
				if _, ok := doFn.(startBundle5x0[I3, I4, I5, I6, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I3, I4, I5, I6, I7))
						return &caller5x0[I3, I4, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I3, I4, I5, I6, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I3, a1 I4, a2 I5, a3 I6, a4 I7) {
							fn.(startBundle5x0[I3, I4, I5, I6, I7]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[context.Context, I4, I5, I6, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, I4, I5, I6, I7))
						return &caller5x0[context.Context, I4, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, I4, I5, I6, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 I4, a2 I5, a3 I6, a4 I7) {
							fn.(startBundle5x0[context.Context, I4, I5, I6, I7]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[typex.PaneInfo, I4, I5, I6, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, I4, I5, I6, I7))
						return &caller5x0[typex.PaneInfo, I4, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, I4, I5, I6, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 I4, a2 I5, a3 I6, a4 I7) {
							fn.(startBundle5x0[typex.PaneInfo, I4, I5, I6, I7]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[context.Context, typex.PaneInfo, I5, I6, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, I5, I6, I7))
						return &caller5x0[context.Context, typex.PaneInfo, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, I5, I6, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 I5, a3 I6, a4 I7) {
							fn.(startBundle5x0[context.Context, typex.PaneInfo, I5, I6, I7]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[[]typex.Window, I4, I5, I6, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, I4, I5, I6, I7))
						return &caller5x0[[]typex.Window, I4, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, I4, I5, I6, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 I4, a2 I5, a3 I6, a4 I7) {
							fn.(startBundle5x0[[]typex.Window, I4, I5, I6, I7]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[context.Context, []typex.Window, I5, I6, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, I5, I6, I7))
						return &caller5x0[context.Context, []typex.Window, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, I5, I6, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 I5, a3 I6, a4 I7) {
							fn.(startBundle5x0[context.Context, []typex.Window, I5, I6, I7]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[typex.PaneInfo, []typex.Window, I5, I6, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, I5, I6, I7))
						return &caller5x0[typex.PaneInfo, []typex.Window, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, I5, I6, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 I5, a3 I6, a4 I7) {
							fn.(startBundle5x0[typex.PaneInfo, []typex.Window, I5, I6, I7]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[context.Context, typex.PaneInfo, []typex.Window, I6, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, I6, I7))
						return &caller5x0[context.Context, typex.PaneInfo, []typex.Window, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, I6, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 I6, a4 I7) {
							fn.(startBundle5x0[context.Context, typex.PaneInfo, []typex.Window, I6, I7]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[typex.EventTime, I4, I5, I6, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, I4, I5, I6, I7))
						return &caller5x0[typex.EventTime, I4, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, I4, I5, I6, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 I4, a2 I5, a3 I6, a4 I7) {
							fn.(startBundle5x0[typex.EventTime, I4, I5, I6, I7]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[context.Context, typex.EventTime, I5, I6, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, I5, I6, I7))
						return &caller5x0[context.Context, typex.EventTime, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, I5, I6, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 I5, a3 I6, a4 I7) {
							fn.(startBundle5x0[context.Context, typex.EventTime, I5, I6, I7]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[typex.PaneInfo, typex.EventTime, I5, I6, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, I5, I6, I7))
						return &caller5x0[typex.PaneInfo, typex.EventTime, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, I5, I6, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 I5, a3 I6, a4 I7) {
							fn.(startBundle5x0[typex.PaneInfo, typex.EventTime, I5, I6, I7]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[context.Context, typex.PaneInfo, typex.EventTime, I6, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, I6, I7))
						return &caller5x0[context.Context, typex.PaneInfo, typex.EventTime, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, I6, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 I6, a4 I7) {
							fn.(startBundle5x0[context.Context, typex.PaneInfo, typex.EventTime, I6, I7]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[[]typex.Window, typex.EventTime, I5, I6, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, I5, I6, I7))
						return &caller5x0[[]typex.Window, typex.EventTime, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, I5, I6, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 I5, a3 I6, a4 I7) {
							fn.(startBundle5x0[[]typex.Window, typex.EventTime, I5, I6, I7]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[context.Context, []typex.Window, typex.EventTime, I6, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, I6, I7))
						return &caller5x0[context.Context, []typex.Window, typex.EventTime, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, I6, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 I6, a4 I7) {
							fn.(startBundle5x0[context.Context, []typex.Window, typex.EventTime, I6, I7]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[typex.PaneInfo, []typex.Window, typex.EventTime, I6, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, I6, I7))
						return &caller5x0[typex.PaneInfo, []typex.Window, typex.EventTime, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, I6, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 I6, a4 I7) {
							fn.(startBundle5x0[typex.PaneInfo, []typex.Window, typex.EventTime, I6, I7]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I7))
						return &caller5x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 I7) {
							fn.(startBundle5x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I7]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[typex.BundleFinalization, I4, I5, I6, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization, I4, I5, I6, I7))
						return &caller5x0[typex.BundleFinalization, I4, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization, I4, I5, I6, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization, a1 I4, a2 I5, a3 I6, a4 I7) {
							fn.(startBundle5x0[typex.BundleFinalization, I4, I5, I6, I7]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[context.Context, typex.BundleFinalization, I5, I6, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization, I5, I6, I7))
						return &caller5x0[context.Context, typex.BundleFinalization, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization, I5, I6, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization, a2 I5, a3 I6, a4 I7) {
							fn.(startBundle5x0[context.Context, typex.BundleFinalization, I5, I6, I7]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[typex.PaneInfo, typex.BundleFinalization, I5, I6, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization, I5, I6, I7))
						return &caller5x0[typex.PaneInfo, typex.BundleFinalization, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization, I5, I6, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization, a2 I5, a3 I6, a4 I7) {
							fn.(startBundle5x0[typex.PaneInfo, typex.BundleFinalization, I5, I6, I7]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I6, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization, I6, I7))
						return &caller5x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization, I6, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization, a3 I6, a4 I7) {
							fn.(startBundle5x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I6, I7]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[[]typex.Window, typex.BundleFinalization, I5, I6, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization, I5, I6, I7))
						return &caller5x0[[]typex.Window, typex.BundleFinalization, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization, I5, I6, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization, a2 I5, a3 I6, a4 I7) {
							fn.(startBundle5x0[[]typex.Window, typex.BundleFinalization, I5, I6, I7]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[context.Context, []typex.Window, typex.BundleFinalization, I6, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization, I6, I7))
						return &caller5x0[context.Context, []typex.Window, typex.BundleFinalization, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization, I6, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization, a3 I6, a4 I7) {
							fn.(startBundle5x0[context.Context, []typex.Window, typex.BundleFinalization, I6, I7]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I6, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I6, I7))
						return &caller5x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I6, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization, a3 I6, a4 I7) {
							fn.(startBundle5x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I6, I7]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I7))
						return &caller5x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.BundleFinalization, a4 I7) {
							fn.(startBundle5x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I7]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[typex.EventTime, typex.BundleFinalization, I5, I6, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization, I5, I6, I7))
						return &caller5x0[typex.EventTime, typex.BundleFinalization, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization, I5, I6, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization, a2 I5, a3 I6, a4 I7) {
							fn.(startBundle5x0[typex.EventTime, typex.BundleFinalization, I5, I6, I7]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[context.Context, typex.EventTime, typex.BundleFinalization, I6, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization, I6, I7))
						return &caller5x0[context.Context, typex.EventTime, typex.BundleFinalization, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization, I6, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I6, a4 I7) {
							fn.(startBundle5x0[context.Context, typex.EventTime, typex.BundleFinalization, I6, I7]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I6, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I6, I7))
						return &caller5x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I6, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I6, a4 I7) {
							fn.(startBundle5x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I6, I7]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I7))
						return &caller5x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I7) {
							fn.(startBundle5x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I7]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I6, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization, I6, I7))
						return &caller5x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization, I6, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I6, a4 I7) {
							fn.(startBundle5x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I6, I7]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I7))
						return &caller5x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I7) {
							fn.(startBundle5x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I7]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I7))
						return &caller5x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I7) {
							fn.(startBundle5x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I7]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization))
						return &caller5x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 typex.BundleFinalization) {
							fn.(startBundle5x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				}
			case startBundleOut == 1:
				if _, ok := doFn.(startBundle5x1[I3, I4, I5, I6, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I3, I4, I5, I6, I7) error)
						return &caller5x1[I3, I4, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I3, I4, I5, I6, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I3, a1 I4, a2 I5, a3 I6, a4 I7) error {
							return fn.(startBundle5x1[I3, I4, I5, I6, I7, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[context.Context, I4, I5, I6, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, I4, I5, I6, I7) error)
						return &caller5x1[context.Context, I4, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, I4, I5, I6, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 I4, a2 I5, a3 I6, a4 I7) error {
							return fn.(startBundle5x1[context.Context, I4, I5, I6, I7, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[typex.PaneInfo, I4, I5, I6, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, I4, I5, I6, I7) error)
						return &caller5x1[typex.PaneInfo, I4, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, I4, I5, I6, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 I4, a2 I5, a3 I6, a4 I7) error {
							return fn.(startBundle5x1[typex.PaneInfo, I4, I5, I6, I7, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[context.Context, typex.PaneInfo, I5, I6, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, I5, I6, I7) error)
						return &caller5x1[context.Context, typex.PaneInfo, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, I5, I6, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 I5, a3 I6, a4 I7) error {
							return fn.(startBundle5x1[context.Context, typex.PaneInfo, I5, I6, I7, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[[]typex.Window, I4, I5, I6, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, I4, I5, I6, I7) error)
						return &caller5x1[[]typex.Window, I4, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, I4, I5, I6, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 I4, a2 I5, a3 I6, a4 I7) error {
							return fn.(startBundle5x1[[]typex.Window, I4, I5, I6, I7, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[context.Context, []typex.Window, I5, I6, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, I5, I6, I7) error)
						return &caller5x1[context.Context, []typex.Window, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, I5, I6, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 I5, a3 I6, a4 I7) error {
							return fn.(startBundle5x1[context.Context, []typex.Window, I5, I6, I7, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[typex.PaneInfo, []typex.Window, I5, I6, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, I5, I6, I7) error)
						return &caller5x1[typex.PaneInfo, []typex.Window, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, I5, I6, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 I5, a3 I6, a4 I7) error {
							return fn.(startBundle5x1[typex.PaneInfo, []typex.Window, I5, I6, I7, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[context.Context, typex.PaneInfo, []typex.Window, I6, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, I6, I7) error)
						return &caller5x1[context.Context, typex.PaneInfo, []typex.Window, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, I6, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 I6, a4 I7) error {
							return fn.(startBundle5x1[context.Context, typex.PaneInfo, []typex.Window, I6, I7, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[typex.EventTime, I4, I5, I6, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, I4, I5, I6, I7) error)
						return &caller5x1[typex.EventTime, I4, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, I4, I5, I6, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 I4, a2 I5, a3 I6, a4 I7) error {
							return fn.(startBundle5x1[typex.EventTime, I4, I5, I6, I7, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[context.Context, typex.EventTime, I5, I6, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, I5, I6, I7) error)
						return &caller5x1[context.Context, typex.EventTime, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, I5, I6, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 I5, a3 I6, a4 I7) error {
							return fn.(startBundle5x1[context.Context, typex.EventTime, I5, I6, I7, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[typex.PaneInfo, typex.EventTime, I5, I6, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, I5, I6, I7) error)
						return &caller5x1[typex.PaneInfo, typex.EventTime, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, I5, I6, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 I5, a3 I6, a4 I7) error {
							return fn.(startBundle5x1[typex.PaneInfo, typex.EventTime, I5, I6, I7, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[context.Context, typex.PaneInfo, typex.EventTime, I6, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, I6, I7) error)
						return &caller5x1[context.Context, typex.PaneInfo, typex.EventTime, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, I6, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 I6, a4 I7) error {
							return fn.(startBundle5x1[context.Context, typex.PaneInfo, typex.EventTime, I6, I7, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[[]typex.Window, typex.EventTime, I5, I6, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, I5, I6, I7) error)
						return &caller5x1[[]typex.Window, typex.EventTime, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, I5, I6, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 I5, a3 I6, a4 I7) error {
							return fn.(startBundle5x1[[]typex.Window, typex.EventTime, I5, I6, I7, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[context.Context, []typex.Window, typex.EventTime, I6, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, I6, I7) error)
						return &caller5x1[context.Context, []typex.Window, typex.EventTime, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, I6, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 I6, a4 I7) error {
							return fn.(startBundle5x1[context.Context, []typex.Window, typex.EventTime, I6, I7, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[typex.PaneInfo, []typex.Window, typex.EventTime, I6, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, I6, I7) error)
						return &caller5x1[typex.PaneInfo, []typex.Window, typex.EventTime, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, I6, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 I6, a4 I7) error {
							return fn.(startBundle5x1[typex.PaneInfo, []typex.Window, typex.EventTime, I6, I7, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I7) error)
						return &caller5x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 I7) error {
							return fn.(startBundle5x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I7, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[typex.BundleFinalization, I4, I5, I6, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization, I4, I5, I6, I7) error)
						return &caller5x1[typex.BundleFinalization, I4, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization, I4, I5, I6, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization, a1 I4, a2 I5, a3 I6, a4 I7) error {
							return fn.(startBundle5x1[typex.BundleFinalization, I4, I5, I6, I7, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[context.Context, typex.BundleFinalization, I5, I6, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization, I5, I6, I7) error)
						return &caller5x1[context.Context, typex.BundleFinalization, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization, I5, I6, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization, a2 I5, a3 I6, a4 I7) error {
							return fn.(startBundle5x1[context.Context, typex.BundleFinalization, I5, I6, I7, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[typex.PaneInfo, typex.BundleFinalization, I5, I6, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization, I5, I6, I7) error)
						return &caller5x1[typex.PaneInfo, typex.BundleFinalization, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization, I5, I6, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization, a2 I5, a3 I6, a4 I7) error {
							return fn.(startBundle5x1[typex.PaneInfo, typex.BundleFinalization, I5, I6, I7, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I6, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization, I6, I7) error)
						return &caller5x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization, I6, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization, a3 I6, a4 I7) error {
							return fn.(startBundle5x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I6, I7, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[[]typex.Window, typex.BundleFinalization, I5, I6, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization, I5, I6, I7) error)
						return &caller5x1[[]typex.Window, typex.BundleFinalization, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization, I5, I6, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization, a2 I5, a3 I6, a4 I7) error {
							return fn.(startBundle5x1[[]typex.Window, typex.BundleFinalization, I5, I6, I7, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[context.Context, []typex.Window, typex.BundleFinalization, I6, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization, I6, I7) error)
						return &caller5x1[context.Context, []typex.Window, typex.BundleFinalization, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization, I6, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization, a3 I6, a4 I7) error {
							return fn.(startBundle5x1[context.Context, []typex.Window, typex.BundleFinalization, I6, I7, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I6, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I6, I7) error)
						return &caller5x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I6, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization, a3 I6, a4 I7) error {
							return fn.(startBundle5x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I6, I7, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I7) error)
						return &caller5x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.BundleFinalization, a4 I7) error {
							return fn.(startBundle5x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I7, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[typex.EventTime, typex.BundleFinalization, I5, I6, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization, I5, I6, I7) error)
						return &caller5x1[typex.EventTime, typex.BundleFinalization, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization, I5, I6, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization, a2 I5, a3 I6, a4 I7) error {
							return fn.(startBundle5x1[typex.EventTime, typex.BundleFinalization, I5, I6, I7, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[context.Context, typex.EventTime, typex.BundleFinalization, I6, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization, I6, I7) error)
						return &caller5x1[context.Context, typex.EventTime, typex.BundleFinalization, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization, I6, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I6, a4 I7) error {
							return fn.(startBundle5x1[context.Context, typex.EventTime, typex.BundleFinalization, I6, I7, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I6, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I6, I7) error)
						return &caller5x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I6, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I6, a4 I7) error {
							return fn.(startBundle5x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I6, I7, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I7) error)
						return &caller5x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I7) error {
							return fn.(startBundle5x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I7, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I6, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization, I6, I7) error)
						return &caller5x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization, I6, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I6, a4 I7) error {
							return fn.(startBundle5x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I6, I7, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I7) error)
						return &caller5x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I7) error {
							return fn.(startBundle5x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I7, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I7) error)
						return &caller5x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I7) error {
							return fn.(startBundle5x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I7, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(startBundle5x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization) error)
						return &caller5x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 typex.BundleFinalization) error {
							return fn.(startBundle5x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, error]).StartBundle(a0, a1, a2, a3, a4)
						})
					}
				}
			default:
				panic("Invalid signature for StartBundle")
			}

		case startBundleIn == 6:
			switch {
			case startBundleOut == 0:
				if _, ok := doFn.(startBundle6x0[I2, I3, I4, I5, I6, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I2, I3, I4, I5, I6, I7))
						return &caller6x0[I2, I3, I4, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I2, I3, I4, I5, I6, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I2, a1 I3, a2 I4, a3 I5, a4 I6, a5 I7) {
							fn.(startBundle6x0[I2, I3, I4, I5, I6, I7]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[context.Context, I3, I4, I5, I6, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, I3, I4, I5, I6, I7))
						return &caller6x0[context.Context, I3, I4, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, I3, I4, I5, I6, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 I3, a2 I4, a3 I5, a4 I6, a5 I7) {
							fn.(startBundle6x0[context.Context, I3, I4, I5, I6, I7]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[typex.PaneInfo, I3, I4, I5, I6, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, I3, I4, I5, I6, I7))
						return &caller6x0[typex.PaneInfo, I3, I4, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, I3, I4, I5, I6, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 I3, a2 I4, a3 I5, a4 I6, a5 I7) {
							fn.(startBundle6x0[typex.PaneInfo, I3, I4, I5, I6, I7]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[context.Context, typex.PaneInfo, I4, I5, I6, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, I4, I5, I6, I7))
						return &caller6x0[context.Context, typex.PaneInfo, I4, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, I4, I5, I6, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 I4, a3 I5, a4 I6, a5 I7) {
							fn.(startBundle6x0[context.Context, typex.PaneInfo, I4, I5, I6, I7]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[[]typex.Window, I3, I4, I5, I6, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, I3, I4, I5, I6, I7))
						return &caller6x0[[]typex.Window, I3, I4, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, I3, I4, I5, I6, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 I3, a2 I4, a3 I5, a4 I6, a5 I7) {
							fn.(startBundle6x0[[]typex.Window, I3, I4, I5, I6, I7]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[context.Context, []typex.Window, I4, I5, I6, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, I4, I5, I6, I7))
						return &caller6x0[context.Context, []typex.Window, I4, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, I4, I5, I6, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 I4, a3 I5, a4 I6, a5 I7) {
							fn.(startBundle6x0[context.Context, []typex.Window, I4, I5, I6, I7]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[typex.PaneInfo, []typex.Window, I4, I5, I6, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, I4, I5, I6, I7))
						return &caller6x0[typex.PaneInfo, []typex.Window, I4, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, I4, I5, I6, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 I4, a3 I5, a4 I6, a5 I7) {
							fn.(startBundle6x0[typex.PaneInfo, []typex.Window, I4, I5, I6, I7]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[context.Context, typex.PaneInfo, []typex.Window, I5, I6, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, I5, I6, I7))
						return &caller6x0[context.Context, typex.PaneInfo, []typex.Window, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, I5, I6, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 I5, a4 I6, a5 I7) {
							fn.(startBundle6x0[context.Context, typex.PaneInfo, []typex.Window, I5, I6, I7]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[typex.EventTime, I3, I4, I5, I6, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, I3, I4, I5, I6, I7))
						return &caller6x0[typex.EventTime, I3, I4, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, I3, I4, I5, I6, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 I3, a2 I4, a3 I5, a4 I6, a5 I7) {
							fn.(startBundle6x0[typex.EventTime, I3, I4, I5, I6, I7]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[context.Context, typex.EventTime, I4, I5, I6, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, I4, I5, I6, I7))
						return &caller6x0[context.Context, typex.EventTime, I4, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, I4, I5, I6, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 I4, a3 I5, a4 I6, a5 I7) {
							fn.(startBundle6x0[context.Context, typex.EventTime, I4, I5, I6, I7]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[typex.PaneInfo, typex.EventTime, I4, I5, I6, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, I4, I5, I6, I7))
						return &caller6x0[typex.PaneInfo, typex.EventTime, I4, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, I4, I5, I6, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 I4, a3 I5, a4 I6, a5 I7) {
							fn.(startBundle6x0[typex.PaneInfo, typex.EventTime, I4, I5, I6, I7]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[context.Context, typex.PaneInfo, typex.EventTime, I5, I6, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, I5, I6, I7))
						return &caller6x0[context.Context, typex.PaneInfo, typex.EventTime, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, I5, I6, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 I5, a4 I6, a5 I7) {
							fn.(startBundle6x0[context.Context, typex.PaneInfo, typex.EventTime, I5, I6, I7]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[[]typex.Window, typex.EventTime, I4, I5, I6, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, I4, I5, I6, I7))
						return &caller6x0[[]typex.Window, typex.EventTime, I4, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, I4, I5, I6, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 I4, a3 I5, a4 I6, a5 I7) {
							fn.(startBundle6x0[[]typex.Window, typex.EventTime, I4, I5, I6, I7]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[context.Context, []typex.Window, typex.EventTime, I5, I6, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, I5, I6, I7))
						return &caller6x0[context.Context, []typex.Window, typex.EventTime, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, I5, I6, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 I5, a4 I6, a5 I7) {
							fn.(startBundle6x0[context.Context, []typex.Window, typex.EventTime, I5, I6, I7]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[typex.PaneInfo, []typex.Window, typex.EventTime, I5, I6, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, I5, I6, I7))
						return &caller6x0[typex.PaneInfo, []typex.Window, typex.EventTime, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, I5, I6, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 I5, a4 I6, a5 I7) {
							fn.(startBundle6x0[typex.PaneInfo, []typex.Window, typex.EventTime, I5, I6, I7]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I6, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I6, I7))
						return &caller6x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I6, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 I6, a5 I7) {
							fn.(startBundle6x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I6, I7]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[typex.BundleFinalization, I3, I4, I5, I6, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization, I3, I4, I5, I6, I7))
						return &caller6x0[typex.BundleFinalization, I3, I4, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization, I3, I4, I5, I6, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization, a1 I3, a2 I4, a3 I5, a4 I6, a5 I7) {
							fn.(startBundle6x0[typex.BundleFinalization, I3, I4, I5, I6, I7]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[context.Context, typex.BundleFinalization, I4, I5, I6, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization, I4, I5, I6, I7))
						return &caller6x0[context.Context, typex.BundleFinalization, I4, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization, I4, I5, I6, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization, a2 I4, a3 I5, a4 I6, a5 I7) {
							fn.(startBundle6x0[context.Context, typex.BundleFinalization, I4, I5, I6, I7]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[typex.PaneInfo, typex.BundleFinalization, I4, I5, I6, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization, I4, I5, I6, I7))
						return &caller6x0[typex.PaneInfo, typex.BundleFinalization, I4, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization, I4, I5, I6, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization, a2 I4, a3 I5, a4 I6, a5 I7) {
							fn.(startBundle6x0[typex.PaneInfo, typex.BundleFinalization, I4, I5, I6, I7]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I5, I6, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization, I5, I6, I7))
						return &caller6x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization, I5, I6, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization, a3 I5, a4 I6, a5 I7) {
							fn.(startBundle6x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I5, I6, I7]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[[]typex.Window, typex.BundleFinalization, I4, I5, I6, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization, I4, I5, I6, I7))
						return &caller6x0[[]typex.Window, typex.BundleFinalization, I4, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization, I4, I5, I6, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization, a2 I4, a3 I5, a4 I6, a5 I7) {
							fn.(startBundle6x0[[]typex.Window, typex.BundleFinalization, I4, I5, I6, I7]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[context.Context, []typex.Window, typex.BundleFinalization, I5, I6, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization, I5, I6, I7))
						return &caller6x0[context.Context, []typex.Window, typex.BundleFinalization, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization, I5, I6, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization, a3 I5, a4 I6, a5 I7) {
							fn.(startBundle6x0[context.Context, []typex.Window, typex.BundleFinalization, I5, I6, I7]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I5, I6, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I5, I6, I7))
						return &caller6x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I5, I6, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization, a3 I5, a4 I6, a5 I7) {
							fn.(startBundle6x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I5, I6, I7]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I6, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I6, I7))
						return &caller6x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I6, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.BundleFinalization, a4 I6, a5 I7) {
							fn.(startBundle6x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I6, I7]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[typex.EventTime, typex.BundleFinalization, I4, I5, I6, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization, I4, I5, I6, I7))
						return &caller6x0[typex.EventTime, typex.BundleFinalization, I4, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization, I4, I5, I6, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization, a2 I4, a3 I5, a4 I6, a5 I7) {
							fn.(startBundle6x0[typex.EventTime, typex.BundleFinalization, I4, I5, I6, I7]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[context.Context, typex.EventTime, typex.BundleFinalization, I5, I6, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization, I5, I6, I7))
						return &caller6x0[context.Context, typex.EventTime, typex.BundleFinalization, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization, I5, I6, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I5, a4 I6, a5 I7) {
							fn.(startBundle6x0[context.Context, typex.EventTime, typex.BundleFinalization, I5, I6, I7]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I5, I6, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I5, I6, I7))
						return &caller6x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I5, I6, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I5, a4 I6, a5 I7) {
							fn.(startBundle6x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I5, I6, I7]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I6, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I6, I7))
						return &caller6x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I6, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I6, a5 I7) {
							fn.(startBundle6x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I6, I7]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6, I7))
						return &caller6x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I5, a4 I6, a5 I7) {
							fn.(startBundle6x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6, I7]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I6, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I6, I7))
						return &caller6x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I6, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I6, a5 I7) {
							fn.(startBundle6x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I6, I7]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I6, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I6, I7))
						return &caller6x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I6, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I6, a5 I7) {
							fn.(startBundle6x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I6, I7]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I7))
						return &caller6x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 typex.BundleFinalization, a5 I7) {
							fn.(startBundle6x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I7]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				}
			case startBundleOut == 1:
				if _, ok := doFn.(startBundle6x1[I2, I3, I4, I5, I6, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I2, I3, I4, I5, I6, I7) error)
						return &caller6x1[I2, I3, I4, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I2, I3, I4, I5, I6, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I2, a1 I3, a2 I4, a3 I5, a4 I6, a5 I7) error {
							return fn.(startBundle6x1[I2, I3, I4, I5, I6, I7, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[context.Context, I3, I4, I5, I6, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, I3, I4, I5, I6, I7) error)
						return &caller6x1[context.Context, I3, I4, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, I3, I4, I5, I6, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 I3, a2 I4, a3 I5, a4 I6, a5 I7) error {
							return fn.(startBundle6x1[context.Context, I3, I4, I5, I6, I7, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[typex.PaneInfo, I3, I4, I5, I6, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, I3, I4, I5, I6, I7) error)
						return &caller6x1[typex.PaneInfo, I3, I4, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, I3, I4, I5, I6, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 I3, a2 I4, a3 I5, a4 I6, a5 I7) error {
							return fn.(startBundle6x1[typex.PaneInfo, I3, I4, I5, I6, I7, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[context.Context, typex.PaneInfo, I4, I5, I6, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, I4, I5, I6, I7) error)
						return &caller6x1[context.Context, typex.PaneInfo, I4, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, I4, I5, I6, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 I4, a3 I5, a4 I6, a5 I7) error {
							return fn.(startBundle6x1[context.Context, typex.PaneInfo, I4, I5, I6, I7, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[[]typex.Window, I3, I4, I5, I6, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, I3, I4, I5, I6, I7) error)
						return &caller6x1[[]typex.Window, I3, I4, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, I3, I4, I5, I6, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 I3, a2 I4, a3 I5, a4 I6, a5 I7) error {
							return fn.(startBundle6x1[[]typex.Window, I3, I4, I5, I6, I7, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[context.Context, []typex.Window, I4, I5, I6, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, I4, I5, I6, I7) error)
						return &caller6x1[context.Context, []typex.Window, I4, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, I4, I5, I6, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 I4, a3 I5, a4 I6, a5 I7) error {
							return fn.(startBundle6x1[context.Context, []typex.Window, I4, I5, I6, I7, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[typex.PaneInfo, []typex.Window, I4, I5, I6, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, I4, I5, I6, I7) error)
						return &caller6x1[typex.PaneInfo, []typex.Window, I4, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, I4, I5, I6, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 I4, a3 I5, a4 I6, a5 I7) error {
							return fn.(startBundle6x1[typex.PaneInfo, []typex.Window, I4, I5, I6, I7, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[context.Context, typex.PaneInfo, []typex.Window, I5, I6, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, I5, I6, I7) error)
						return &caller6x1[context.Context, typex.PaneInfo, []typex.Window, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, I5, I6, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 I5, a4 I6, a5 I7) error {
							return fn.(startBundle6x1[context.Context, typex.PaneInfo, []typex.Window, I5, I6, I7, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[typex.EventTime, I3, I4, I5, I6, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, I3, I4, I5, I6, I7) error)
						return &caller6x1[typex.EventTime, I3, I4, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, I3, I4, I5, I6, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 I3, a2 I4, a3 I5, a4 I6, a5 I7) error {
							return fn.(startBundle6x1[typex.EventTime, I3, I4, I5, I6, I7, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[context.Context, typex.EventTime, I4, I5, I6, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, I4, I5, I6, I7) error)
						return &caller6x1[context.Context, typex.EventTime, I4, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, I4, I5, I6, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 I4, a3 I5, a4 I6, a5 I7) error {
							return fn.(startBundle6x1[context.Context, typex.EventTime, I4, I5, I6, I7, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[typex.PaneInfo, typex.EventTime, I4, I5, I6, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, I4, I5, I6, I7) error)
						return &caller6x1[typex.PaneInfo, typex.EventTime, I4, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, I4, I5, I6, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 I4, a3 I5, a4 I6, a5 I7) error {
							return fn.(startBundle6x1[typex.PaneInfo, typex.EventTime, I4, I5, I6, I7, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[context.Context, typex.PaneInfo, typex.EventTime, I5, I6, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, I5, I6, I7) error)
						return &caller6x1[context.Context, typex.PaneInfo, typex.EventTime, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, I5, I6, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 I5, a4 I6, a5 I7) error {
							return fn.(startBundle6x1[context.Context, typex.PaneInfo, typex.EventTime, I5, I6, I7, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[[]typex.Window, typex.EventTime, I4, I5, I6, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, I4, I5, I6, I7) error)
						return &caller6x1[[]typex.Window, typex.EventTime, I4, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, I4, I5, I6, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 I4, a3 I5, a4 I6, a5 I7) error {
							return fn.(startBundle6x1[[]typex.Window, typex.EventTime, I4, I5, I6, I7, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[context.Context, []typex.Window, typex.EventTime, I5, I6, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, I5, I6, I7) error)
						return &caller6x1[context.Context, []typex.Window, typex.EventTime, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, I5, I6, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 I5, a4 I6, a5 I7) error {
							return fn.(startBundle6x1[context.Context, []typex.Window, typex.EventTime, I5, I6, I7, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[typex.PaneInfo, []typex.Window, typex.EventTime, I5, I6, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, I5, I6, I7) error)
						return &caller6x1[typex.PaneInfo, []typex.Window, typex.EventTime, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, I5, I6, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 I5, a4 I6, a5 I7) error {
							return fn.(startBundle6x1[typex.PaneInfo, []typex.Window, typex.EventTime, I5, I6, I7, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I6, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I6, I7) error)
						return &caller6x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I6, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 I6, a5 I7) error {
							return fn.(startBundle6x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I6, I7, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[typex.BundleFinalization, I3, I4, I5, I6, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization, I3, I4, I5, I6, I7) error)
						return &caller6x1[typex.BundleFinalization, I3, I4, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization, I3, I4, I5, I6, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization, a1 I3, a2 I4, a3 I5, a4 I6, a5 I7) error {
							return fn.(startBundle6x1[typex.BundleFinalization, I3, I4, I5, I6, I7, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[context.Context, typex.BundleFinalization, I4, I5, I6, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization, I4, I5, I6, I7) error)
						return &caller6x1[context.Context, typex.BundleFinalization, I4, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization, I4, I5, I6, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization, a2 I4, a3 I5, a4 I6, a5 I7) error {
							return fn.(startBundle6x1[context.Context, typex.BundleFinalization, I4, I5, I6, I7, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[typex.PaneInfo, typex.BundleFinalization, I4, I5, I6, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization, I4, I5, I6, I7) error)
						return &caller6x1[typex.PaneInfo, typex.BundleFinalization, I4, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization, I4, I5, I6, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization, a2 I4, a3 I5, a4 I6, a5 I7) error {
							return fn.(startBundle6x1[typex.PaneInfo, typex.BundleFinalization, I4, I5, I6, I7, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I5, I6, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization, I5, I6, I7) error)
						return &caller6x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization, I5, I6, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization, a3 I5, a4 I6, a5 I7) error {
							return fn.(startBundle6x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I5, I6, I7, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[[]typex.Window, typex.BundleFinalization, I4, I5, I6, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization, I4, I5, I6, I7) error)
						return &caller6x1[[]typex.Window, typex.BundleFinalization, I4, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization, I4, I5, I6, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization, a2 I4, a3 I5, a4 I6, a5 I7) error {
							return fn.(startBundle6x1[[]typex.Window, typex.BundleFinalization, I4, I5, I6, I7, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[context.Context, []typex.Window, typex.BundleFinalization, I5, I6, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization, I5, I6, I7) error)
						return &caller6x1[context.Context, []typex.Window, typex.BundleFinalization, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization, I5, I6, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization, a3 I5, a4 I6, a5 I7) error {
							return fn.(startBundle6x1[context.Context, []typex.Window, typex.BundleFinalization, I5, I6, I7, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I5, I6, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I5, I6, I7) error)
						return &caller6x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I5, I6, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization, a3 I5, a4 I6, a5 I7) error {
							return fn.(startBundle6x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I5, I6, I7, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I6, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I6, I7) error)
						return &caller6x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I6, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.BundleFinalization, a4 I6, a5 I7) error {
							return fn.(startBundle6x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I6, I7, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[typex.EventTime, typex.BundleFinalization, I4, I5, I6, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization, I4, I5, I6, I7) error)
						return &caller6x1[typex.EventTime, typex.BundleFinalization, I4, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization, I4, I5, I6, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization, a2 I4, a3 I5, a4 I6, a5 I7) error {
							return fn.(startBundle6x1[typex.EventTime, typex.BundleFinalization, I4, I5, I6, I7, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[context.Context, typex.EventTime, typex.BundleFinalization, I5, I6, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization, I5, I6, I7) error)
						return &caller6x1[context.Context, typex.EventTime, typex.BundleFinalization, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization, I5, I6, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I5, a4 I6, a5 I7) error {
							return fn.(startBundle6x1[context.Context, typex.EventTime, typex.BundleFinalization, I5, I6, I7, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I5, I6, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I5, I6, I7) error)
						return &caller6x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I5, I6, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I5, a4 I6, a5 I7) error {
							return fn.(startBundle6x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I5, I6, I7, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I6, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I6, I7) error)
						return &caller6x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I6, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I6, a5 I7) error {
							return fn.(startBundle6x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I6, I7, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6, I7) error)
						return &caller6x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I5, a4 I6, a5 I7) error {
							return fn.(startBundle6x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6, I7, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I6, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I6, I7) error)
						return &caller6x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I6, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I6, a5 I7) error {
							return fn.(startBundle6x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I6, I7, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I6, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I6, I7) error)
						return &caller6x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I6, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I6, a5 I7) error {
							return fn.(startBundle6x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I6, I7, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(startBundle6x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I7) error)
						return &caller6x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 typex.BundleFinalization, a5 I7) error {
							return fn.(startBundle6x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I7, error]).StartBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				}
			default:
				panic("Invalid signature for StartBundle")
			}

		case startBundleIn == 7:
			switch {
			case startBundleOut == 0:
				if _, ok := doFn.(startBundle7x0[I1, I2, I3, I4, I5, I6, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I1, I2, I3, I4, I5, I6, I7))
						return &caller7x0[I1, I2, I3, I4, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I1, I2, I3, I4, I5, I6, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I1, a1 I2, a2 I3, a3 I4, a4 I5, a5 I6, a6 I7) {
							fn.(startBundle7x0[I1, I2, I3, I4, I5, I6, I7]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[context.Context, I2, I3, I4, I5, I6, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, I2, I3, I4, I5, I6, I7))
						return &caller7x0[context.Context, I2, I3, I4, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, I2, I3, I4, I5, I6, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 I2, a2 I3, a3 I4, a4 I5, a5 I6, a6 I7) {
							fn.(startBundle7x0[context.Context, I2, I3, I4, I5, I6, I7]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[typex.PaneInfo, I2, I3, I4, I5, I6, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, I2, I3, I4, I5, I6, I7))
						return &caller7x0[typex.PaneInfo, I2, I3, I4, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, I2, I3, I4, I5, I6, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 I2, a2 I3, a3 I4, a4 I5, a5 I6, a6 I7) {
							fn.(startBundle7x0[typex.PaneInfo, I2, I3, I4, I5, I6, I7]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[context.Context, typex.PaneInfo, I3, I4, I5, I6, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, I3, I4, I5, I6, I7))
						return &caller7x0[context.Context, typex.PaneInfo, I3, I4, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, I3, I4, I5, I6, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 I3, a3 I4, a4 I5, a5 I6, a6 I7) {
							fn.(startBundle7x0[context.Context, typex.PaneInfo, I3, I4, I5, I6, I7]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[[]typex.Window, I2, I3, I4, I5, I6, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, I2, I3, I4, I5, I6, I7))
						return &caller7x0[[]typex.Window, I2, I3, I4, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, I2, I3, I4, I5, I6, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 I2, a2 I3, a3 I4, a4 I5, a5 I6, a6 I7) {
							fn.(startBundle7x0[[]typex.Window, I2, I3, I4, I5, I6, I7]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[context.Context, []typex.Window, I3, I4, I5, I6, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, I3, I4, I5, I6, I7))
						return &caller7x0[context.Context, []typex.Window, I3, I4, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, I3, I4, I5, I6, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 I3, a3 I4, a4 I5, a5 I6, a6 I7) {
							fn.(startBundle7x0[context.Context, []typex.Window, I3, I4, I5, I6, I7]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[typex.PaneInfo, []typex.Window, I3, I4, I5, I6, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, I3, I4, I5, I6, I7))
						return &caller7x0[typex.PaneInfo, []typex.Window, I3, I4, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, I3, I4, I5, I6, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 I3, a3 I4, a4 I5, a5 I6, a6 I7) {
							fn.(startBundle7x0[typex.PaneInfo, []typex.Window, I3, I4, I5, I6, I7]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[context.Context, typex.PaneInfo, []typex.Window, I4, I5, I6, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, I4, I5, I6, I7))
						return &caller7x0[context.Context, typex.PaneInfo, []typex.Window, I4, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, I4, I5, I6, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 I4, a4 I5, a5 I6, a6 I7) {
							fn.(startBundle7x0[context.Context, typex.PaneInfo, []typex.Window, I4, I5, I6, I7]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[typex.EventTime, I2, I3, I4, I5, I6, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, I2, I3, I4, I5, I6, I7))
						return &caller7x0[typex.EventTime, I2, I3, I4, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, I2, I3, I4, I5, I6, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 I2, a2 I3, a3 I4, a4 I5, a5 I6, a6 I7) {
							fn.(startBundle7x0[typex.EventTime, I2, I3, I4, I5, I6, I7]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[context.Context, typex.EventTime, I3, I4, I5, I6, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, I3, I4, I5, I6, I7))
						return &caller7x0[context.Context, typex.EventTime, I3, I4, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, I3, I4, I5, I6, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 I3, a3 I4, a4 I5, a5 I6, a6 I7) {
							fn.(startBundle7x0[context.Context, typex.EventTime, I3, I4, I5, I6, I7]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[typex.PaneInfo, typex.EventTime, I3, I4, I5, I6, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, I3, I4, I5, I6, I7))
						return &caller7x0[typex.PaneInfo, typex.EventTime, I3, I4, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, I3, I4, I5, I6, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 I3, a3 I4, a4 I5, a5 I6, a6 I7) {
							fn.(startBundle7x0[typex.PaneInfo, typex.EventTime, I3, I4, I5, I6, I7]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[context.Context, typex.PaneInfo, typex.EventTime, I4, I5, I6, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, I4, I5, I6, I7))
						return &caller7x0[context.Context, typex.PaneInfo, typex.EventTime, I4, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, I4, I5, I6, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 I4, a4 I5, a5 I6, a6 I7) {
							fn.(startBundle7x0[context.Context, typex.PaneInfo, typex.EventTime, I4, I5, I6, I7]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[[]typex.Window, typex.EventTime, I3, I4, I5, I6, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, I3, I4, I5, I6, I7))
						return &caller7x0[[]typex.Window, typex.EventTime, I3, I4, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, I3, I4, I5, I6, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 I3, a3 I4, a4 I5, a5 I6, a6 I7) {
							fn.(startBundle7x0[[]typex.Window, typex.EventTime, I3, I4, I5, I6, I7]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[context.Context, []typex.Window, typex.EventTime, I4, I5, I6, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, I4, I5, I6, I7))
						return &caller7x0[context.Context, []typex.Window, typex.EventTime, I4, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, I4, I5, I6, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 I4, a4 I5, a5 I6, a6 I7) {
							fn.(startBundle7x0[context.Context, []typex.Window, typex.EventTime, I4, I5, I6, I7]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[typex.PaneInfo, []typex.Window, typex.EventTime, I4, I5, I6, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, I4, I5, I6, I7))
						return &caller7x0[typex.PaneInfo, []typex.Window, typex.EventTime, I4, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, I4, I5, I6, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 I4, a4 I5, a5 I6, a6 I7) {
							fn.(startBundle7x0[typex.PaneInfo, []typex.Window, typex.EventTime, I4, I5, I6, I7]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I5, I6, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I5, I6, I7))
						return &caller7x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I5, I6, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 I5, a5 I6, a6 I7) {
							fn.(startBundle7x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I5, I6, I7]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[typex.BundleFinalization, I2, I3, I4, I5, I6, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization, I2, I3, I4, I5, I6, I7))
						return &caller7x0[typex.BundleFinalization, I2, I3, I4, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization, I2, I3, I4, I5, I6, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization, a1 I2, a2 I3, a3 I4, a4 I5, a5 I6, a6 I7) {
							fn.(startBundle7x0[typex.BundleFinalization, I2, I3, I4, I5, I6, I7]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[context.Context, typex.BundleFinalization, I3, I4, I5, I6, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization, I3, I4, I5, I6, I7))
						return &caller7x0[context.Context, typex.BundleFinalization, I3, I4, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization, I3, I4, I5, I6, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization, a2 I3, a3 I4, a4 I5, a5 I6, a6 I7) {
							fn.(startBundle7x0[context.Context, typex.BundleFinalization, I3, I4, I5, I6, I7]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[typex.PaneInfo, typex.BundleFinalization, I3, I4, I5, I6, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization, I3, I4, I5, I6, I7))
						return &caller7x0[typex.PaneInfo, typex.BundleFinalization, I3, I4, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization, I3, I4, I5, I6, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization, a2 I3, a3 I4, a4 I5, a5 I6, a6 I7) {
							fn.(startBundle7x0[typex.PaneInfo, typex.BundleFinalization, I3, I4, I5, I6, I7]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I4, I5, I6, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization, I4, I5, I6, I7))
						return &caller7x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I4, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization, I4, I5, I6, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization, a3 I4, a4 I5, a5 I6, a6 I7) {
							fn.(startBundle7x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I4, I5, I6, I7]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[[]typex.Window, typex.BundleFinalization, I3, I4, I5, I6, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization, I3, I4, I5, I6, I7))
						return &caller7x0[[]typex.Window, typex.BundleFinalization, I3, I4, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization, I3, I4, I5, I6, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization, a2 I3, a3 I4, a4 I5, a5 I6, a6 I7) {
							fn.(startBundle7x0[[]typex.Window, typex.BundleFinalization, I3, I4, I5, I6, I7]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[context.Context, []typex.Window, typex.BundleFinalization, I4, I5, I6, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization, I4, I5, I6, I7))
						return &caller7x0[context.Context, []typex.Window, typex.BundleFinalization, I4, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization, I4, I5, I6, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization, a3 I4, a4 I5, a5 I6, a6 I7) {
							fn.(startBundle7x0[context.Context, []typex.Window, typex.BundleFinalization, I4, I5, I6, I7]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4, I5, I6, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4, I5, I6, I7))
						return &caller7x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4, I5, I6, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization, a3 I4, a4 I5, a5 I6, a6 I7) {
							fn.(startBundle7x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4, I5, I6, I7]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I5, I6, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I5, I6, I7))
						return &caller7x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I5, I6, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.BundleFinalization, a4 I5, a5 I6, a6 I7) {
							fn.(startBundle7x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I5, I6, I7]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[typex.EventTime, typex.BundleFinalization, I3, I4, I5, I6, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization, I3, I4, I5, I6, I7))
						return &caller7x0[typex.EventTime, typex.BundleFinalization, I3, I4, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization, I3, I4, I5, I6, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization, a2 I3, a3 I4, a4 I5, a5 I6, a6 I7) {
							fn.(startBundle7x0[typex.EventTime, typex.BundleFinalization, I3, I4, I5, I6, I7]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[context.Context, typex.EventTime, typex.BundleFinalization, I4, I5, I6, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization, I4, I5, I6, I7))
						return &caller7x0[context.Context, typex.EventTime, typex.BundleFinalization, I4, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization, I4, I5, I6, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I4, a4 I5, a5 I6, a6 I7) {
							fn.(startBundle7x0[context.Context, typex.EventTime, typex.BundleFinalization, I4, I5, I6, I7]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4, I5, I6, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4, I5, I6, I7))
						return &caller7x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4, I5, I6, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I4, a4 I5, a5 I6, a6 I7) {
							fn.(startBundle7x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4, I5, I6, I7]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I5, I6, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I5, I6, I7))
						return &caller7x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I5, I6, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I5, a5 I6, a6 I7) {
							fn.(startBundle7x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I5, I6, I7]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5, I6, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5, I6, I7))
						return &caller7x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5, I6, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I4, a4 I5, a5 I6, a6 I7) {
							fn.(startBundle7x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5, I6, I7]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6, I7))
						return &caller7x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I5, a5 I6, a6 I7) {
							fn.(startBundle7x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6, I7]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6, I7))
						return &caller7x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I5, a5 I6, a6 I7) {
							fn.(startBundle7x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6, I7]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I6, I7]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I6, I7))
						return &caller7x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I6, I7))(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 typex.BundleFinalization, a5 I6, a6 I7) {
							fn.(startBundle7x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I6, I7]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				}
			case startBundleOut == 1:
				if _, ok := doFn.(startBundle7x1[I1, I2, I3, I4, I5, I6, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I1, I2, I3, I4, I5, I6, I7) error)
						return &caller7x1[I1, I2, I3, I4, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I1, I2, I3, I4, I5, I6, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I1, a1 I2, a2 I3, a3 I4, a4 I5, a5 I6, a6 I7) error {
							return fn.(startBundle7x1[I1, I2, I3, I4, I5, I6, I7, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[context.Context, I2, I3, I4, I5, I6, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, I2, I3, I4, I5, I6, I7) error)
						return &caller7x1[context.Context, I2, I3, I4, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, I2, I3, I4, I5, I6, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 I2, a2 I3, a3 I4, a4 I5, a5 I6, a6 I7) error {
							return fn.(startBundle7x1[context.Context, I2, I3, I4, I5, I6, I7, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[typex.PaneInfo, I2, I3, I4, I5, I6, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, I2, I3, I4, I5, I6, I7) error)
						return &caller7x1[typex.PaneInfo, I2, I3, I4, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, I2, I3, I4, I5, I6, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 I2, a2 I3, a3 I4, a4 I5, a5 I6, a6 I7) error {
							return fn.(startBundle7x1[typex.PaneInfo, I2, I3, I4, I5, I6, I7, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[context.Context, typex.PaneInfo, I3, I4, I5, I6, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, I3, I4, I5, I6, I7) error)
						return &caller7x1[context.Context, typex.PaneInfo, I3, I4, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, I3, I4, I5, I6, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 I3, a3 I4, a4 I5, a5 I6, a6 I7) error {
							return fn.(startBundle7x1[context.Context, typex.PaneInfo, I3, I4, I5, I6, I7, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[[]typex.Window, I2, I3, I4, I5, I6, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, I2, I3, I4, I5, I6, I7) error)
						return &caller7x1[[]typex.Window, I2, I3, I4, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, I2, I3, I4, I5, I6, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 I2, a2 I3, a3 I4, a4 I5, a5 I6, a6 I7) error {
							return fn.(startBundle7x1[[]typex.Window, I2, I3, I4, I5, I6, I7, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[context.Context, []typex.Window, I3, I4, I5, I6, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, I3, I4, I5, I6, I7) error)
						return &caller7x1[context.Context, []typex.Window, I3, I4, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, I3, I4, I5, I6, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 I3, a3 I4, a4 I5, a5 I6, a6 I7) error {
							return fn.(startBundle7x1[context.Context, []typex.Window, I3, I4, I5, I6, I7, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[typex.PaneInfo, []typex.Window, I3, I4, I5, I6, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, I3, I4, I5, I6, I7) error)
						return &caller7x1[typex.PaneInfo, []typex.Window, I3, I4, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, I3, I4, I5, I6, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 I3, a3 I4, a4 I5, a5 I6, a6 I7) error {
							return fn.(startBundle7x1[typex.PaneInfo, []typex.Window, I3, I4, I5, I6, I7, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[context.Context, typex.PaneInfo, []typex.Window, I4, I5, I6, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, I4, I5, I6, I7) error)
						return &caller7x1[context.Context, typex.PaneInfo, []typex.Window, I4, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, I4, I5, I6, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 I4, a4 I5, a5 I6, a6 I7) error {
							return fn.(startBundle7x1[context.Context, typex.PaneInfo, []typex.Window, I4, I5, I6, I7, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[typex.EventTime, I2, I3, I4, I5, I6, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, I2, I3, I4, I5, I6, I7) error)
						return &caller7x1[typex.EventTime, I2, I3, I4, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, I2, I3, I4, I5, I6, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 I2, a2 I3, a3 I4, a4 I5, a5 I6, a6 I7) error {
							return fn.(startBundle7x1[typex.EventTime, I2, I3, I4, I5, I6, I7, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[context.Context, typex.EventTime, I3, I4, I5, I6, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, I3, I4, I5, I6, I7) error)
						return &caller7x1[context.Context, typex.EventTime, I3, I4, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, I3, I4, I5, I6, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 I3, a3 I4, a4 I5, a5 I6, a6 I7) error {
							return fn.(startBundle7x1[context.Context, typex.EventTime, I3, I4, I5, I6, I7, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[typex.PaneInfo, typex.EventTime, I3, I4, I5, I6, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, I3, I4, I5, I6, I7) error)
						return &caller7x1[typex.PaneInfo, typex.EventTime, I3, I4, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, I3, I4, I5, I6, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 I3, a3 I4, a4 I5, a5 I6, a6 I7) error {
							return fn.(startBundle7x1[typex.PaneInfo, typex.EventTime, I3, I4, I5, I6, I7, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[context.Context, typex.PaneInfo, typex.EventTime, I4, I5, I6, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, I4, I5, I6, I7) error)
						return &caller7x1[context.Context, typex.PaneInfo, typex.EventTime, I4, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, I4, I5, I6, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 I4, a4 I5, a5 I6, a6 I7) error {
							return fn.(startBundle7x1[context.Context, typex.PaneInfo, typex.EventTime, I4, I5, I6, I7, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[[]typex.Window, typex.EventTime, I3, I4, I5, I6, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, I3, I4, I5, I6, I7) error)
						return &caller7x1[[]typex.Window, typex.EventTime, I3, I4, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, I3, I4, I5, I6, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 I3, a3 I4, a4 I5, a5 I6, a6 I7) error {
							return fn.(startBundle7x1[[]typex.Window, typex.EventTime, I3, I4, I5, I6, I7, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[context.Context, []typex.Window, typex.EventTime, I4, I5, I6, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, I4, I5, I6, I7) error)
						return &caller7x1[context.Context, []typex.Window, typex.EventTime, I4, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, I4, I5, I6, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 I4, a4 I5, a5 I6, a6 I7) error {
							return fn.(startBundle7x1[context.Context, []typex.Window, typex.EventTime, I4, I5, I6, I7, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[typex.PaneInfo, []typex.Window, typex.EventTime, I4, I5, I6, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, I4, I5, I6, I7) error)
						return &caller7x1[typex.PaneInfo, []typex.Window, typex.EventTime, I4, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, I4, I5, I6, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 I4, a4 I5, a5 I6, a6 I7) error {
							return fn.(startBundle7x1[typex.PaneInfo, []typex.Window, typex.EventTime, I4, I5, I6, I7, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I5, I6, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I5, I6, I7) error)
						return &caller7x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I5, I6, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 I5, a5 I6, a6 I7) error {
							return fn.(startBundle7x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I5, I6, I7, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[typex.BundleFinalization, I2, I3, I4, I5, I6, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization, I2, I3, I4, I5, I6, I7) error)
						return &caller7x1[typex.BundleFinalization, I2, I3, I4, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization, I2, I3, I4, I5, I6, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization, a1 I2, a2 I3, a3 I4, a4 I5, a5 I6, a6 I7) error {
							return fn.(startBundle7x1[typex.BundleFinalization, I2, I3, I4, I5, I6, I7, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[context.Context, typex.BundleFinalization, I3, I4, I5, I6, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization, I3, I4, I5, I6, I7) error)
						return &caller7x1[context.Context, typex.BundleFinalization, I3, I4, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization, I3, I4, I5, I6, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization, a2 I3, a3 I4, a4 I5, a5 I6, a6 I7) error {
							return fn.(startBundle7x1[context.Context, typex.BundleFinalization, I3, I4, I5, I6, I7, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[typex.PaneInfo, typex.BundleFinalization, I3, I4, I5, I6, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization, I3, I4, I5, I6, I7) error)
						return &caller7x1[typex.PaneInfo, typex.BundleFinalization, I3, I4, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization, I3, I4, I5, I6, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization, a2 I3, a3 I4, a4 I5, a5 I6, a6 I7) error {
							return fn.(startBundle7x1[typex.PaneInfo, typex.BundleFinalization, I3, I4, I5, I6, I7, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I4, I5, I6, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization, I4, I5, I6, I7) error)
						return &caller7x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I4, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization, I4, I5, I6, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization, a3 I4, a4 I5, a5 I6, a6 I7) error {
							return fn.(startBundle7x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I4, I5, I6, I7, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[[]typex.Window, typex.BundleFinalization, I3, I4, I5, I6, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization, I3, I4, I5, I6, I7) error)
						return &caller7x1[[]typex.Window, typex.BundleFinalization, I3, I4, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization, I3, I4, I5, I6, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization, a2 I3, a3 I4, a4 I5, a5 I6, a6 I7) error {
							return fn.(startBundle7x1[[]typex.Window, typex.BundleFinalization, I3, I4, I5, I6, I7, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[context.Context, []typex.Window, typex.BundleFinalization, I4, I5, I6, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization, I4, I5, I6, I7) error)
						return &caller7x1[context.Context, []typex.Window, typex.BundleFinalization, I4, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization, I4, I5, I6, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization, a3 I4, a4 I5, a5 I6, a6 I7) error {
							return fn.(startBundle7x1[context.Context, []typex.Window, typex.BundleFinalization, I4, I5, I6, I7, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4, I5, I6, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4, I5, I6, I7) error)
						return &caller7x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4, I5, I6, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization, a3 I4, a4 I5, a5 I6, a6 I7) error {
							return fn.(startBundle7x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4, I5, I6, I7, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I5, I6, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I5, I6, I7) error)
						return &caller7x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I5, I6, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.BundleFinalization, a4 I5, a5 I6, a6 I7) error {
							return fn.(startBundle7x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I5, I6, I7, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[typex.EventTime, typex.BundleFinalization, I3, I4, I5, I6, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization, I3, I4, I5, I6, I7) error)
						return &caller7x1[typex.EventTime, typex.BundleFinalization, I3, I4, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization, I3, I4, I5, I6, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization, a2 I3, a3 I4, a4 I5, a5 I6, a6 I7) error {
							return fn.(startBundle7x1[typex.EventTime, typex.BundleFinalization, I3, I4, I5, I6, I7, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[context.Context, typex.EventTime, typex.BundleFinalization, I4, I5, I6, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization, I4, I5, I6, I7) error)
						return &caller7x1[context.Context, typex.EventTime, typex.BundleFinalization, I4, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization, I4, I5, I6, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I4, a4 I5, a5 I6, a6 I7) error {
							return fn.(startBundle7x1[context.Context, typex.EventTime, typex.BundleFinalization, I4, I5, I6, I7, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4, I5, I6, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4, I5, I6, I7) error)
						return &caller7x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4, I5, I6, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I4, a4 I5, a5 I6, a6 I7) error {
							return fn.(startBundle7x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4, I5, I6, I7, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I5, I6, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I5, I6, I7) error)
						return &caller7x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I5, I6, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I5, a5 I6, a6 I7) error {
							return fn.(startBundle7x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I5, I6, I7, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5, I6, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5, I6, I7) error)
						return &caller7x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5, I6, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I4, a4 I5, a5 I6, a6 I7) error {
							return fn.(startBundle7x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5, I6, I7, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6, I7) error)
						return &caller7x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I5, a5 I6, a6 I7) error {
							return fn.(startBundle7x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6, I7, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6, I7) error)
						return &caller7x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I5, a5 I6, a6 I7) error {
							return fn.(startBundle7x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6, I7, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(startBundle7x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I6, I7, error]); ok {
					startBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I6, I7) error)
						return &caller7x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I6, I7) error)(nil)).Elem(), startBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 typex.BundleFinalization, a5 I6, a6 I7) error {
							return fn.(startBundle7x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I6, I7, error]).StartBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				}
			default:
				panic("Invalid signature for StartBundle")
			}

		default:
			panic("Invalid signature for StartBundle")
		}
	}
	return nil
}

func buildFinishBundleWrapper0(doFn interface{}) func(interface{}) reflectx.Func {
	finishBundleIn := -1
	finishBundleOut := -1
	finishBundleMethod := reflect.ValueOf(doFn).MethodByName("FinishBundle")
	if finishBundleMethod.IsValid() {
		finishBundleIn = finishBundleMethod.Type().NumIn()
		finishBundleOut = finishBundleMethod.Type().NumOut()
		switch {

		case finishBundleIn == 0:
			switch {
			case finishBundleOut == 0:
				if _, ok := doFn.(finishBundle0x0); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func())
						return &caller0x0{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func())(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func() { fn.(finishBundle0x0).FinishBundle() })
					}
				}
			case finishBundleOut == 1:
				if _, ok := doFn.(finishBundle0x1[error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func() error)
						return &caller0x1[error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func() error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func() error { return fn.(finishBundle0x1[error]).FinishBundle() })
					}
				}
			default:
				panic("Invalid signature for FinishBundle")
			}

		case finishBundleIn == 1:
			switch {
			case finishBundleOut == 0:
				if _, ok := doFn.(finishBundle1x0[context.Context]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context))
						return &caller1x0[context.Context]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context) { fn.(finishBundle1x0[context.Context]).FinishBundle(a0) })
					}
				} else if _, ok := doFn.(finishBundle1x0[typex.PaneInfo]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo))
						return &caller1x0[typex.PaneInfo]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo) { fn.(finishBundle1x0[typex.PaneInfo]).FinishBundle(a0) })
					}
				} else if _, ok := doFn.(finishBundle1x0[[]typex.Window]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window))
						return &caller1x0[[]typex.Window]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window) { fn.(finishBundle1x0[[]typex.Window]).FinishBundle(a0) })
					}
				} else if _, ok := doFn.(finishBundle1x0[typex.EventTime]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime))
						return &caller1x0[typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime) { fn.(finishBundle1x0[typex.EventTime]).FinishBundle(a0) })
					}
				} else if _, ok := doFn.(finishBundle1x0[typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization))
						return &caller1x0[typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization) { fn.(finishBundle1x0[typex.BundleFinalization]).FinishBundle(a0) })
					}
				}
			case finishBundleOut == 1:
				if _, ok := doFn.(finishBundle1x1[context.Context, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context) error)
						return &caller1x1[context.Context, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context) error { return fn.(finishBundle1x1[context.Context, error]).FinishBundle(a0) })
					}
				} else if _, ok := doFn.(finishBundle1x1[typex.PaneInfo, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo) error)
						return &caller1x1[typex.PaneInfo, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo) error { return fn.(finishBundle1x1[typex.PaneInfo, error]).FinishBundle(a0) })
					}
				} else if _, ok := doFn.(finishBundle1x1[[]typex.Window, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window) error)
						return &caller1x1[[]typex.Window, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window) error { return fn.(finishBundle1x1[[]typex.Window, error]).FinishBundle(a0) })
					}
				} else if _, ok := doFn.(finishBundle1x1[typex.EventTime, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime) error)
						return &caller1x1[typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime) error { return fn.(finishBundle1x1[typex.EventTime, error]).FinishBundle(a0) })
					}
				} else if _, ok := doFn.(finishBundle1x1[typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization) error)
						return &caller1x1[typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization) error {
							return fn.(finishBundle1x1[typex.BundleFinalization, error]).FinishBundle(a0)
						})
					}
				}
			default:
				panic("Invalid signature for FinishBundle")
			}

		case finishBundleIn == 2:
			switch {
			case finishBundleOut == 0:
				if _, ok := doFn.(finishBundle2x0[context.Context, typex.PaneInfo]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo))
						return &caller2x0[context.Context, typex.PaneInfo]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo) {
							fn.(finishBundle2x0[context.Context, typex.PaneInfo]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x0[context.Context, []typex.Window]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window))
						return &caller2x0[context.Context, []typex.Window]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window) {
							fn.(finishBundle2x0[context.Context, []typex.Window]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x0[typex.PaneInfo, []typex.Window]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window))
						return &caller2x0[typex.PaneInfo, []typex.Window]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window) {
							fn.(finishBundle2x0[typex.PaneInfo, []typex.Window]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x0[context.Context, typex.EventTime]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime))
						return &caller2x0[context.Context, typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime) {
							fn.(finishBundle2x0[context.Context, typex.EventTime]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x0[typex.PaneInfo, typex.EventTime]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime))
						return &caller2x0[typex.PaneInfo, typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime) {
							fn.(finishBundle2x0[typex.PaneInfo, typex.EventTime]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x0[[]typex.Window, typex.EventTime]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime))
						return &caller2x0[[]typex.Window, typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime) {
							fn.(finishBundle2x0[[]typex.Window, typex.EventTime]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x0[context.Context, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization))
						return &caller2x0[context.Context, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization) {
							fn.(finishBundle2x0[context.Context, typex.BundleFinalization]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x0[typex.PaneInfo, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization))
						return &caller2x0[typex.PaneInfo, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization) {
							fn.(finishBundle2x0[typex.PaneInfo, typex.BundleFinalization]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x0[[]typex.Window, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization))
						return &caller2x0[[]typex.Window, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization) {
							fn.(finishBundle2x0[[]typex.Window, typex.BundleFinalization]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x0[typex.EventTime, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization))
						return &caller2x0[typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization) {
							fn.(finishBundle2x0[typex.EventTime, typex.BundleFinalization]).FinishBundle(a0, a1)
						})
					}
				}
			case finishBundleOut == 1:
				if _, ok := doFn.(finishBundle2x1[context.Context, typex.PaneInfo, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo) error)
						return &caller2x1[context.Context, typex.PaneInfo, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo) error {
							return fn.(finishBundle2x1[context.Context, typex.PaneInfo, error]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x1[context.Context, []typex.Window, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window) error)
						return &caller2x1[context.Context, []typex.Window, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window) error {
							return fn.(finishBundle2x1[context.Context, []typex.Window, error]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x1[typex.PaneInfo, []typex.Window, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window) error)
						return &caller2x1[typex.PaneInfo, []typex.Window, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window) error {
							return fn.(finishBundle2x1[typex.PaneInfo, []typex.Window, error]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x1[context.Context, typex.EventTime, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime) error)
						return &caller2x1[context.Context, typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime) error {
							return fn.(finishBundle2x1[context.Context, typex.EventTime, error]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x1[typex.PaneInfo, typex.EventTime, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime) error)
						return &caller2x1[typex.PaneInfo, typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime) error {
							return fn.(finishBundle2x1[typex.PaneInfo, typex.EventTime, error]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x1[[]typex.Window, typex.EventTime, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime) error)
						return &caller2x1[[]typex.Window, typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime) error {
							return fn.(finishBundle2x1[[]typex.Window, typex.EventTime, error]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x1[context.Context, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization) error)
						return &caller2x1[context.Context, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization) error {
							return fn.(finishBundle2x1[context.Context, typex.BundleFinalization, error]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x1[typex.PaneInfo, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization) error)
						return &caller2x1[typex.PaneInfo, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization) error {
							return fn.(finishBundle2x1[typex.PaneInfo, typex.BundleFinalization, error]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x1[[]typex.Window, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization) error)
						return &caller2x1[[]typex.Window, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization) error {
							return fn.(finishBundle2x1[[]typex.Window, typex.BundleFinalization, error]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x1[typex.EventTime, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization) error)
						return &caller2x1[typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization) error {
							return fn.(finishBundle2x1[typex.EventTime, typex.BundleFinalization, error]).FinishBundle(a0, a1)
						})
					}
				}
			default:
				panic("Invalid signature for FinishBundle")
			}

		case finishBundleIn == 3:
			switch {
			case finishBundleOut == 0:
				if _, ok := doFn.(finishBundle3x0[context.Context, typex.PaneInfo, []typex.Window]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window))
						return &caller3x0[context.Context, typex.PaneInfo, []typex.Window]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window) {
							fn.(finishBundle3x0[context.Context, typex.PaneInfo, []typex.Window]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[context.Context, typex.PaneInfo, typex.EventTime]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime))
						return &caller3x0[context.Context, typex.PaneInfo, typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime) {
							fn.(finishBundle3x0[context.Context, typex.PaneInfo, typex.EventTime]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[context.Context, []typex.Window, typex.EventTime]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime))
						return &caller3x0[context.Context, []typex.Window, typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime) {
							fn.(finishBundle3x0[context.Context, []typex.Window, typex.EventTime]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[typex.PaneInfo, []typex.Window, typex.EventTime]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime))
						return &caller3x0[typex.PaneInfo, []typex.Window, typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime) {
							fn.(finishBundle3x0[typex.PaneInfo, []typex.Window, typex.EventTime]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[context.Context, typex.PaneInfo, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization))
						return &caller3x0[context.Context, typex.PaneInfo, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization) {
							fn.(finishBundle3x0[context.Context, typex.PaneInfo, typex.BundleFinalization]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[context.Context, []typex.Window, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization))
						return &caller3x0[context.Context, []typex.Window, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization) {
							fn.(finishBundle3x0[context.Context, []typex.Window, typex.BundleFinalization]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization))
						return &caller3x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization) {
							fn.(finishBundle3x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[context.Context, typex.EventTime, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization))
						return &caller3x0[context.Context, typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization) {
							fn.(finishBundle3x0[context.Context, typex.EventTime, typex.BundleFinalization]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization))
						return &caller3x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization) {
							fn.(finishBundle3x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[[]typex.Window, typex.EventTime, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization))
						return &caller3x0[[]typex.Window, typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization) {
							fn.(finishBundle3x0[[]typex.Window, typex.EventTime, typex.BundleFinalization]).FinishBundle(a0, a1, a2)
						})
					}
				}
			case finishBundleOut == 1:
				if _, ok := doFn.(finishBundle3x1[context.Context, typex.PaneInfo, []typex.Window, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window) error)
						return &caller3x1[context.Context, typex.PaneInfo, []typex.Window, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window) error {
							return fn.(finishBundle3x1[context.Context, typex.PaneInfo, []typex.Window, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[context.Context, typex.PaneInfo, typex.EventTime, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime) error)
						return &caller3x1[context.Context, typex.PaneInfo, typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime) error {
							return fn.(finishBundle3x1[context.Context, typex.PaneInfo, typex.EventTime, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[context.Context, []typex.Window, typex.EventTime, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime) error)
						return &caller3x1[context.Context, []typex.Window, typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime) error {
							return fn.(finishBundle3x1[context.Context, []typex.Window, typex.EventTime, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[typex.PaneInfo, []typex.Window, typex.EventTime, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime) error)
						return &caller3x1[typex.PaneInfo, []typex.Window, typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime) error {
							return fn.(finishBundle3x1[typex.PaneInfo, []typex.Window, typex.EventTime, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[context.Context, typex.PaneInfo, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization) error)
						return &caller3x1[context.Context, typex.PaneInfo, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization) error {
							return fn.(finishBundle3x1[context.Context, typex.PaneInfo, typex.BundleFinalization, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[context.Context, []typex.Window, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization) error)
						return &caller3x1[context.Context, []typex.Window, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization) error {
							return fn.(finishBundle3x1[context.Context, []typex.Window, typex.BundleFinalization, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization) error)
						return &caller3x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization) error {
							return fn.(finishBundle3x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[context.Context, typex.EventTime, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization) error)
						return &caller3x1[context.Context, typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization) error {
							return fn.(finishBundle3x1[context.Context, typex.EventTime, typex.BundleFinalization, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization) error)
						return &caller3x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization) error {
							return fn.(finishBundle3x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization) error)
						return &caller3x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization) error {
							return fn.(finishBundle3x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, error]).FinishBundle(a0, a1, a2)
						})
					}
				}
			default:
				panic("Invalid signature for FinishBundle")
			}

		case finishBundleIn == 4:
			switch {
			case finishBundleOut == 0:
				if _, ok := doFn.(finishBundle4x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime))
						return &caller4x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime) {
							fn.(finishBundle4x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization))
						return &caller4x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.BundleFinalization) {
							fn.(finishBundle4x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization))
						return &caller4x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 typex.BundleFinalization) {
							fn.(finishBundle4x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization))
						return &caller4x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization) {
							fn.(finishBundle4x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization))
						return &caller4x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization) {
							fn.(finishBundle4x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization]).FinishBundle(a0, a1, a2, a3)
						})
					}
				}
			case finishBundleOut == 1:
				if _, ok := doFn.(finishBundle4x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime) error)
						return &caller4x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime) error {
							return fn.(finishBundle4x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization) error)
						return &caller4x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.BundleFinalization) error {
							return fn.(finishBundle4x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization) error)
						return &caller4x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 typex.BundleFinalization) error {
							return fn.(finishBundle4x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization) error)
						return &caller4x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization) error {
							return fn.(finishBundle4x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization) error)
						return &caller4x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization) error {
							return fn.(finishBundle4x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				}
			default:
				panic("Invalid signature for FinishBundle")
			}

		case finishBundleIn == 5:
			switch {
			case finishBundleOut == 0:
				if _, ok := doFn.(finishBundle5x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization))
						return &caller5x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 typex.BundleFinalization) {
							fn.(finishBundle5x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				}
			case finishBundleOut == 1:
				if _, ok := doFn.(finishBundle5x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization) error)
						return &caller5x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 typex.BundleFinalization) error {
							return fn.(finishBundle5x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				}
			default:
				panic("Invalid signature for FinishBundle")
			}

		case finishBundleIn == 6:
			switch {
			default:
				panic("Invalid signature for FinishBundle")
			}

		case finishBundleIn == 7:
			switch {
			default:
				panic("Invalid signature for FinishBundle")
			}

		default:
			panic("Invalid signature for FinishBundle")
		}
	}
	return nil
}

func buildFinishBundleWrapper1[I0 any](doFn interface{}) func(interface{}) reflectx.Func {
	finishBundleIn := -1
	finishBundleOut := -1
	finishBundleMethod := reflect.ValueOf(doFn).MethodByName("FinishBundle")
	if finishBundleMethod.IsValid() {
		finishBundleIn = finishBundleMethod.Type().NumIn()
		finishBundleOut = finishBundleMethod.Type().NumOut()
		switch {

		case finishBundleIn == 0:
			switch {
			case finishBundleOut == 0:
				if _, ok := doFn.(finishBundle0x0); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func())
						return &caller0x0{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func())(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func() { fn.(finishBundle0x0).FinishBundle() })
					}
				}
			case finishBundleOut == 1:
				if _, ok := doFn.(finishBundle0x1[error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func() error)
						return &caller0x1[error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func() error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func() error { return fn.(finishBundle0x1[error]).FinishBundle() })
					}
				}
			default:
				panic("Invalid signature for FinishBundle")
			}

		case finishBundleIn == 1:
			switch {
			case finishBundleOut == 0:
				if _, ok := doFn.(finishBundle1x0[I0]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I0))
						return &caller1x0[I0]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I0))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I0) { fn.(finishBundle1x0[I0]).FinishBundle(a0) })
					}
				} else if _, ok := doFn.(finishBundle1x0[context.Context]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context))
						return &caller1x0[context.Context]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context) { fn.(finishBundle1x0[context.Context]).FinishBundle(a0) })
					}
				} else if _, ok := doFn.(finishBundle1x0[typex.PaneInfo]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo))
						return &caller1x0[typex.PaneInfo]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo) { fn.(finishBundle1x0[typex.PaneInfo]).FinishBundle(a0) })
					}
				} else if _, ok := doFn.(finishBundle1x0[[]typex.Window]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window))
						return &caller1x0[[]typex.Window]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window) { fn.(finishBundle1x0[[]typex.Window]).FinishBundle(a0) })
					}
				} else if _, ok := doFn.(finishBundle1x0[typex.EventTime]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime))
						return &caller1x0[typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime) { fn.(finishBundle1x0[typex.EventTime]).FinishBundle(a0) })
					}
				} else if _, ok := doFn.(finishBundle1x0[typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization))
						return &caller1x0[typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization) { fn.(finishBundle1x0[typex.BundleFinalization]).FinishBundle(a0) })
					}
				}
			case finishBundleOut == 1:
				if _, ok := doFn.(finishBundle1x1[I0, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I0) error)
						return &caller1x1[I0, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I0) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I0) error { return fn.(finishBundle1x1[I0, error]).FinishBundle(a0) })
					}
				} else if _, ok := doFn.(finishBundle1x1[context.Context, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context) error)
						return &caller1x1[context.Context, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context) error { return fn.(finishBundle1x1[context.Context, error]).FinishBundle(a0) })
					}
				} else if _, ok := doFn.(finishBundle1x1[typex.PaneInfo, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo) error)
						return &caller1x1[typex.PaneInfo, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo) error { return fn.(finishBundle1x1[typex.PaneInfo, error]).FinishBundle(a0) })
					}
				} else if _, ok := doFn.(finishBundle1x1[[]typex.Window, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window) error)
						return &caller1x1[[]typex.Window, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window) error { return fn.(finishBundle1x1[[]typex.Window, error]).FinishBundle(a0) })
					}
				} else if _, ok := doFn.(finishBundle1x1[typex.EventTime, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime) error)
						return &caller1x1[typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime) error { return fn.(finishBundle1x1[typex.EventTime, error]).FinishBundle(a0) })
					}
				} else if _, ok := doFn.(finishBundle1x1[typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization) error)
						return &caller1x1[typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization) error {
							return fn.(finishBundle1x1[typex.BundleFinalization, error]).FinishBundle(a0)
						})
					}
				}
			default:
				panic("Invalid signature for FinishBundle")
			}

		case finishBundleIn == 2:
			switch {
			case finishBundleOut == 0:
				if _, ok := doFn.(finishBundle2x0[context.Context, I0]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, I0))
						return &caller2x0[context.Context, I0]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, I0))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 I0) { fn.(finishBundle2x0[context.Context, I0]).FinishBundle(a0, a1) })
					}
				} else if _, ok := doFn.(finishBundle2x0[typex.PaneInfo, I0]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, I0))
						return &caller2x0[typex.PaneInfo, I0]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, I0))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 I0) { fn.(finishBundle2x0[typex.PaneInfo, I0]).FinishBundle(a0, a1) })
					}
				} else if _, ok := doFn.(finishBundle2x0[context.Context, typex.PaneInfo]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo))
						return &caller2x0[context.Context, typex.PaneInfo]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo) {
							fn.(finishBundle2x0[context.Context, typex.PaneInfo]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x0[[]typex.Window, I0]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, I0))
						return &caller2x0[[]typex.Window, I0]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, I0))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 I0) { fn.(finishBundle2x0[[]typex.Window, I0]).FinishBundle(a0, a1) })
					}
				} else if _, ok := doFn.(finishBundle2x0[context.Context, []typex.Window]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window))
						return &caller2x0[context.Context, []typex.Window]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window) {
							fn.(finishBundle2x0[context.Context, []typex.Window]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x0[typex.PaneInfo, []typex.Window]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window))
						return &caller2x0[typex.PaneInfo, []typex.Window]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window) {
							fn.(finishBundle2x0[typex.PaneInfo, []typex.Window]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x0[typex.EventTime, I0]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, I0))
						return &caller2x0[typex.EventTime, I0]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, I0))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 I0) { fn.(finishBundle2x0[typex.EventTime, I0]).FinishBundle(a0, a1) })
					}
				} else if _, ok := doFn.(finishBundle2x0[context.Context, typex.EventTime]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime))
						return &caller2x0[context.Context, typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime) {
							fn.(finishBundle2x0[context.Context, typex.EventTime]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x0[typex.PaneInfo, typex.EventTime]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime))
						return &caller2x0[typex.PaneInfo, typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime) {
							fn.(finishBundle2x0[typex.PaneInfo, typex.EventTime]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x0[[]typex.Window, typex.EventTime]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime))
						return &caller2x0[[]typex.Window, typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime) {
							fn.(finishBundle2x0[[]typex.Window, typex.EventTime]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x0[typex.BundleFinalization, I0]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization, I0))
						return &caller2x0[typex.BundleFinalization, I0]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization, I0))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization, a1 I0) {
							fn.(finishBundle2x0[typex.BundleFinalization, I0]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x0[context.Context, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization))
						return &caller2x0[context.Context, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization) {
							fn.(finishBundle2x0[context.Context, typex.BundleFinalization]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x0[typex.PaneInfo, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization))
						return &caller2x0[typex.PaneInfo, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization) {
							fn.(finishBundle2x0[typex.PaneInfo, typex.BundleFinalization]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x0[[]typex.Window, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization))
						return &caller2x0[[]typex.Window, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization) {
							fn.(finishBundle2x0[[]typex.Window, typex.BundleFinalization]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x0[typex.EventTime, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization))
						return &caller2x0[typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization) {
							fn.(finishBundle2x0[typex.EventTime, typex.BundleFinalization]).FinishBundle(a0, a1)
						})
					}
				}
			case finishBundleOut == 1:
				if _, ok := doFn.(finishBundle2x1[context.Context, I0, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, I0) error)
						return &caller2x1[context.Context, I0, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, I0) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 I0) error {
							return fn.(finishBundle2x1[context.Context, I0, error]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x1[typex.PaneInfo, I0, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, I0) error)
						return &caller2x1[typex.PaneInfo, I0, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, I0) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 I0) error {
							return fn.(finishBundle2x1[typex.PaneInfo, I0, error]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x1[context.Context, typex.PaneInfo, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo) error)
						return &caller2x1[context.Context, typex.PaneInfo, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo) error {
							return fn.(finishBundle2x1[context.Context, typex.PaneInfo, error]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x1[[]typex.Window, I0, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, I0) error)
						return &caller2x1[[]typex.Window, I0, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, I0) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 I0) error {
							return fn.(finishBundle2x1[[]typex.Window, I0, error]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x1[context.Context, []typex.Window, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window) error)
						return &caller2x1[context.Context, []typex.Window, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window) error {
							return fn.(finishBundle2x1[context.Context, []typex.Window, error]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x1[typex.PaneInfo, []typex.Window, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window) error)
						return &caller2x1[typex.PaneInfo, []typex.Window, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window) error {
							return fn.(finishBundle2x1[typex.PaneInfo, []typex.Window, error]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x1[typex.EventTime, I0, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, I0) error)
						return &caller2x1[typex.EventTime, I0, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, I0) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 I0) error {
							return fn.(finishBundle2x1[typex.EventTime, I0, error]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x1[context.Context, typex.EventTime, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime) error)
						return &caller2x1[context.Context, typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime) error {
							return fn.(finishBundle2x1[context.Context, typex.EventTime, error]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x1[typex.PaneInfo, typex.EventTime, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime) error)
						return &caller2x1[typex.PaneInfo, typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime) error {
							return fn.(finishBundle2x1[typex.PaneInfo, typex.EventTime, error]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x1[[]typex.Window, typex.EventTime, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime) error)
						return &caller2x1[[]typex.Window, typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime) error {
							return fn.(finishBundle2x1[[]typex.Window, typex.EventTime, error]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x1[typex.BundleFinalization, I0, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization, I0) error)
						return &caller2x1[typex.BundleFinalization, I0, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization, I0) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization, a1 I0) error {
							return fn.(finishBundle2x1[typex.BundleFinalization, I0, error]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x1[context.Context, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization) error)
						return &caller2x1[context.Context, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization) error {
							return fn.(finishBundle2x1[context.Context, typex.BundleFinalization, error]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x1[typex.PaneInfo, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization) error)
						return &caller2x1[typex.PaneInfo, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization) error {
							return fn.(finishBundle2x1[typex.PaneInfo, typex.BundleFinalization, error]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x1[[]typex.Window, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization) error)
						return &caller2x1[[]typex.Window, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization) error {
							return fn.(finishBundle2x1[[]typex.Window, typex.BundleFinalization, error]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x1[typex.EventTime, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization) error)
						return &caller2x1[typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization) error {
							return fn.(finishBundle2x1[typex.EventTime, typex.BundleFinalization, error]).FinishBundle(a0, a1)
						})
					}
				}
			default:
				panic("Invalid signature for FinishBundle")
			}

		case finishBundleIn == 3:
			switch {
			case finishBundleOut == 0:
				if _, ok := doFn.(finishBundle3x0[context.Context, typex.PaneInfo, I0]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, I0))
						return &caller3x0[context.Context, typex.PaneInfo, I0]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, I0))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 I0) {
							fn.(finishBundle3x0[context.Context, typex.PaneInfo, I0]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[context.Context, []typex.Window, I0]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, I0))
						return &caller3x0[context.Context, []typex.Window, I0]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, I0))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 I0) {
							fn.(finishBundle3x0[context.Context, []typex.Window, I0]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[typex.PaneInfo, []typex.Window, I0]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, I0))
						return &caller3x0[typex.PaneInfo, []typex.Window, I0]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, I0))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 I0) {
							fn.(finishBundle3x0[typex.PaneInfo, []typex.Window, I0]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[context.Context, typex.PaneInfo, []typex.Window]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window))
						return &caller3x0[context.Context, typex.PaneInfo, []typex.Window]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window) {
							fn.(finishBundle3x0[context.Context, typex.PaneInfo, []typex.Window]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[context.Context, typex.EventTime, I0]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, I0))
						return &caller3x0[context.Context, typex.EventTime, I0]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, I0))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 I0) {
							fn.(finishBundle3x0[context.Context, typex.EventTime, I0]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[typex.PaneInfo, typex.EventTime, I0]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, I0))
						return &caller3x0[typex.PaneInfo, typex.EventTime, I0]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, I0))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 I0) {
							fn.(finishBundle3x0[typex.PaneInfo, typex.EventTime, I0]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[context.Context, typex.PaneInfo, typex.EventTime]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime))
						return &caller3x0[context.Context, typex.PaneInfo, typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime) {
							fn.(finishBundle3x0[context.Context, typex.PaneInfo, typex.EventTime]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[[]typex.Window, typex.EventTime, I0]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, I0))
						return &caller3x0[[]typex.Window, typex.EventTime, I0]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, I0))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 I0) {
							fn.(finishBundle3x0[[]typex.Window, typex.EventTime, I0]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[context.Context, []typex.Window, typex.EventTime]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime))
						return &caller3x0[context.Context, []typex.Window, typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime) {
							fn.(finishBundle3x0[context.Context, []typex.Window, typex.EventTime]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[typex.PaneInfo, []typex.Window, typex.EventTime]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime))
						return &caller3x0[typex.PaneInfo, []typex.Window, typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime) {
							fn.(finishBundle3x0[typex.PaneInfo, []typex.Window, typex.EventTime]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[context.Context, typex.BundleFinalization, I0]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization, I0))
						return &caller3x0[context.Context, typex.BundleFinalization, I0]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization, I0))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization, a2 I0) {
							fn.(finishBundle3x0[context.Context, typex.BundleFinalization, I0]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[typex.PaneInfo, typex.BundleFinalization, I0]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization, I0))
						return &caller3x0[typex.PaneInfo, typex.BundleFinalization, I0]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization, I0))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization, a2 I0) {
							fn.(finishBundle3x0[typex.PaneInfo, typex.BundleFinalization, I0]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[context.Context, typex.PaneInfo, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization))
						return &caller3x0[context.Context, typex.PaneInfo, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization) {
							fn.(finishBundle3x0[context.Context, typex.PaneInfo, typex.BundleFinalization]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[[]typex.Window, typex.BundleFinalization, I0]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization, I0))
						return &caller3x0[[]typex.Window, typex.BundleFinalization, I0]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization, I0))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization, a2 I0) {
							fn.(finishBundle3x0[[]typex.Window, typex.BundleFinalization, I0]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[context.Context, []typex.Window, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization))
						return &caller3x0[context.Context, []typex.Window, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization) {
							fn.(finishBundle3x0[context.Context, []typex.Window, typex.BundleFinalization]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization))
						return &caller3x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization) {
							fn.(finishBundle3x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[typex.EventTime, typex.BundleFinalization, I0]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization, I0))
						return &caller3x0[typex.EventTime, typex.BundleFinalization, I0]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization, I0))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization, a2 I0) {
							fn.(finishBundle3x0[typex.EventTime, typex.BundleFinalization, I0]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[context.Context, typex.EventTime, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization))
						return &caller3x0[context.Context, typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization) {
							fn.(finishBundle3x0[context.Context, typex.EventTime, typex.BundleFinalization]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization))
						return &caller3x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization) {
							fn.(finishBundle3x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[[]typex.Window, typex.EventTime, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization))
						return &caller3x0[[]typex.Window, typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization) {
							fn.(finishBundle3x0[[]typex.Window, typex.EventTime, typex.BundleFinalization]).FinishBundle(a0, a1, a2)
						})
					}
				}
			case finishBundleOut == 1:
				if _, ok := doFn.(finishBundle3x1[context.Context, typex.PaneInfo, I0, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, I0) error)
						return &caller3x1[context.Context, typex.PaneInfo, I0, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, I0) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 I0) error {
							return fn.(finishBundle3x1[context.Context, typex.PaneInfo, I0, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[context.Context, []typex.Window, I0, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, I0) error)
						return &caller3x1[context.Context, []typex.Window, I0, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, I0) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 I0) error {
							return fn.(finishBundle3x1[context.Context, []typex.Window, I0, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[typex.PaneInfo, []typex.Window, I0, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, I0) error)
						return &caller3x1[typex.PaneInfo, []typex.Window, I0, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, I0) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 I0) error {
							return fn.(finishBundle3x1[typex.PaneInfo, []typex.Window, I0, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[context.Context, typex.PaneInfo, []typex.Window, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window) error)
						return &caller3x1[context.Context, typex.PaneInfo, []typex.Window, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window) error {
							return fn.(finishBundle3x1[context.Context, typex.PaneInfo, []typex.Window, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[context.Context, typex.EventTime, I0, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, I0) error)
						return &caller3x1[context.Context, typex.EventTime, I0, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, I0) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 I0) error {
							return fn.(finishBundle3x1[context.Context, typex.EventTime, I0, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[typex.PaneInfo, typex.EventTime, I0, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, I0) error)
						return &caller3x1[typex.PaneInfo, typex.EventTime, I0, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, I0) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 I0) error {
							return fn.(finishBundle3x1[typex.PaneInfo, typex.EventTime, I0, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[context.Context, typex.PaneInfo, typex.EventTime, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime) error)
						return &caller3x1[context.Context, typex.PaneInfo, typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime) error {
							return fn.(finishBundle3x1[context.Context, typex.PaneInfo, typex.EventTime, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[[]typex.Window, typex.EventTime, I0, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, I0) error)
						return &caller3x1[[]typex.Window, typex.EventTime, I0, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, I0) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 I0) error {
							return fn.(finishBundle3x1[[]typex.Window, typex.EventTime, I0, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[context.Context, []typex.Window, typex.EventTime, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime) error)
						return &caller3x1[context.Context, []typex.Window, typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime) error {
							return fn.(finishBundle3x1[context.Context, []typex.Window, typex.EventTime, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[typex.PaneInfo, []typex.Window, typex.EventTime, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime) error)
						return &caller3x1[typex.PaneInfo, []typex.Window, typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime) error {
							return fn.(finishBundle3x1[typex.PaneInfo, []typex.Window, typex.EventTime, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[context.Context, typex.BundleFinalization, I0, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization, I0) error)
						return &caller3x1[context.Context, typex.BundleFinalization, I0, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization, I0) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization, a2 I0) error {
							return fn.(finishBundle3x1[context.Context, typex.BundleFinalization, I0, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[typex.PaneInfo, typex.BundleFinalization, I0, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization, I0) error)
						return &caller3x1[typex.PaneInfo, typex.BundleFinalization, I0, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization, I0) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization, a2 I0) error {
							return fn.(finishBundle3x1[typex.PaneInfo, typex.BundleFinalization, I0, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[context.Context, typex.PaneInfo, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization) error)
						return &caller3x1[context.Context, typex.PaneInfo, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization) error {
							return fn.(finishBundle3x1[context.Context, typex.PaneInfo, typex.BundleFinalization, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[[]typex.Window, typex.BundleFinalization, I0, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization, I0) error)
						return &caller3x1[[]typex.Window, typex.BundleFinalization, I0, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization, I0) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization, a2 I0) error {
							return fn.(finishBundle3x1[[]typex.Window, typex.BundleFinalization, I0, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[context.Context, []typex.Window, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization) error)
						return &caller3x1[context.Context, []typex.Window, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization) error {
							return fn.(finishBundle3x1[context.Context, []typex.Window, typex.BundleFinalization, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization) error)
						return &caller3x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization) error {
							return fn.(finishBundle3x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[typex.EventTime, typex.BundleFinalization, I0, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization, I0) error)
						return &caller3x1[typex.EventTime, typex.BundleFinalization, I0, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization, I0) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization, a2 I0) error {
							return fn.(finishBundle3x1[typex.EventTime, typex.BundleFinalization, I0, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[context.Context, typex.EventTime, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization) error)
						return &caller3x1[context.Context, typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization) error {
							return fn.(finishBundle3x1[context.Context, typex.EventTime, typex.BundleFinalization, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization) error)
						return &caller3x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization) error {
							return fn.(finishBundle3x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization) error)
						return &caller3x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization) error {
							return fn.(finishBundle3x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, error]).FinishBundle(a0, a1, a2)
						})
					}
				}
			default:
				panic("Invalid signature for FinishBundle")
			}

		case finishBundleIn == 4:
			switch {
			case finishBundleOut == 0:
				if _, ok := doFn.(finishBundle4x0[context.Context, typex.PaneInfo, []typex.Window, I0]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, I0))
						return &caller4x0[context.Context, typex.PaneInfo, []typex.Window, I0]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, I0))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 I0) {
							fn.(finishBundle4x0[context.Context, typex.PaneInfo, []typex.Window, I0]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[context.Context, typex.PaneInfo, typex.EventTime, I0]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, I0))
						return &caller4x0[context.Context, typex.PaneInfo, typex.EventTime, I0]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, I0))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 I0) {
							fn.(finishBundle4x0[context.Context, typex.PaneInfo, typex.EventTime, I0]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[context.Context, []typex.Window, typex.EventTime, I0]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, I0))
						return &caller4x0[context.Context, []typex.Window, typex.EventTime, I0]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, I0))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 I0) {
							fn.(finishBundle4x0[context.Context, []typex.Window, typex.EventTime, I0]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[typex.PaneInfo, []typex.Window, typex.EventTime, I0]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, I0))
						return &caller4x0[typex.PaneInfo, []typex.Window, typex.EventTime, I0]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, I0))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 I0) {
							fn.(finishBundle4x0[typex.PaneInfo, []typex.Window, typex.EventTime, I0]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime))
						return &caller4x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime) {
							fn.(finishBundle4x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I0]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization, I0))
						return &caller4x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I0]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization, I0))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization, a3 I0) {
							fn.(finishBundle4x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I0]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[context.Context, []typex.Window, typex.BundleFinalization, I0]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization, I0))
						return &caller4x0[context.Context, []typex.Window, typex.BundleFinalization, I0]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization, I0))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization, a3 I0) {
							fn.(finishBundle4x0[context.Context, []typex.Window, typex.BundleFinalization, I0]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0))
						return &caller4x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization, a3 I0) {
							fn.(finishBundle4x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization))
						return &caller4x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.BundleFinalization) {
							fn.(finishBundle4x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[context.Context, typex.EventTime, typex.BundleFinalization, I0]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization, I0))
						return &caller4x0[context.Context, typex.EventTime, typex.BundleFinalization, I0]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization, I0))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I0) {
							fn.(finishBundle4x0[context.Context, typex.EventTime, typex.BundleFinalization, I0]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0))
						return &caller4x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I0) {
							fn.(finishBundle4x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization))
						return &caller4x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 typex.BundleFinalization) {
							fn.(finishBundle4x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I0]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization, I0))
						return &caller4x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I0]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization, I0))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I0) {
							fn.(finishBundle4x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I0]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization))
						return &caller4x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization) {
							fn.(finishBundle4x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization))
						return &caller4x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization) {
							fn.(finishBundle4x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization]).FinishBundle(a0, a1, a2, a3)
						})
					}
				}
			case finishBundleOut == 1:
				if _, ok := doFn.(finishBundle4x1[context.Context, typex.PaneInfo, []typex.Window, I0, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, I0) error)
						return &caller4x1[context.Context, typex.PaneInfo, []typex.Window, I0, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, I0) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 I0) error {
							return fn.(finishBundle4x1[context.Context, typex.PaneInfo, []typex.Window, I0, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[context.Context, typex.PaneInfo, typex.EventTime, I0, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, I0) error)
						return &caller4x1[context.Context, typex.PaneInfo, typex.EventTime, I0, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, I0) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 I0) error {
							return fn.(finishBundle4x1[context.Context, typex.PaneInfo, typex.EventTime, I0, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[context.Context, []typex.Window, typex.EventTime, I0, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, I0) error)
						return &caller4x1[context.Context, []typex.Window, typex.EventTime, I0, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, I0) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 I0) error {
							return fn.(finishBundle4x1[context.Context, []typex.Window, typex.EventTime, I0, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[typex.PaneInfo, []typex.Window, typex.EventTime, I0, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, I0) error)
						return &caller4x1[typex.PaneInfo, []typex.Window, typex.EventTime, I0, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, I0) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 I0) error {
							return fn.(finishBundle4x1[typex.PaneInfo, []typex.Window, typex.EventTime, I0, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime) error)
						return &caller4x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime) error {
							return fn.(finishBundle4x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I0, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization, I0) error)
						return &caller4x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I0, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization, I0) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization, a3 I0) error {
							return fn.(finishBundle4x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I0, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[context.Context, []typex.Window, typex.BundleFinalization, I0, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization, I0) error)
						return &caller4x1[context.Context, []typex.Window, typex.BundleFinalization, I0, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization, I0) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization, a3 I0) error {
							return fn.(finishBundle4x1[context.Context, []typex.Window, typex.BundleFinalization, I0, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0) error)
						return &caller4x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization, a3 I0) error {
							return fn.(finishBundle4x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization) error)
						return &caller4x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.BundleFinalization) error {
							return fn.(finishBundle4x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[context.Context, typex.EventTime, typex.BundleFinalization, I0, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization, I0) error)
						return &caller4x1[context.Context, typex.EventTime, typex.BundleFinalization, I0, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization, I0) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I0) error {
							return fn.(finishBundle4x1[context.Context, typex.EventTime, typex.BundleFinalization, I0, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0) error)
						return &caller4x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I0) error {
							return fn.(finishBundle4x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization) error)
						return &caller4x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 typex.BundleFinalization) error {
							return fn.(finishBundle4x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I0, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization, I0) error)
						return &caller4x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I0, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization, I0) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I0) error {
							return fn.(finishBundle4x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I0, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization) error)
						return &caller4x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization) error {
							return fn.(finishBundle4x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization) error)
						return &caller4x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization) error {
							return fn.(finishBundle4x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				}
			default:
				panic("Invalid signature for FinishBundle")
			}

		case finishBundleIn == 5:
			switch {
			case finishBundleOut == 0:
				if _, ok := doFn.(finishBundle5x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I0]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I0))
						return &caller5x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I0]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I0))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 I0) {
							fn.(finishBundle5x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I0]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0))
						return &caller5x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.BundleFinalization, a4 I0) {
							fn.(finishBundle5x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0))
						return &caller5x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I0) {
							fn.(finishBundle5x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I0]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I0))
						return &caller5x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I0]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I0))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I0) {
							fn.(finishBundle5x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I0]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I0]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I0))
						return &caller5x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I0]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I0))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I0) {
							fn.(finishBundle5x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I0]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization))
						return &caller5x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 typex.BundleFinalization) {
							fn.(finishBundle5x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				}
			case finishBundleOut == 1:
				if _, ok := doFn.(finishBundle5x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I0, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I0) error)
						return &caller5x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I0, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I0) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 I0) error {
							return fn.(finishBundle5x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I0, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0) error)
						return &caller5x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.BundleFinalization, a4 I0) error {
							return fn.(finishBundle5x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0) error)
						return &caller5x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I0) error {
							return fn.(finishBundle5x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I0, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I0) error)
						return &caller5x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I0, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I0) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I0) error {
							return fn.(finishBundle5x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I0, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I0, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I0) error)
						return &caller5x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I0, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I0) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I0) error {
							return fn.(finishBundle5x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I0, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization) error)
						return &caller5x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 typex.BundleFinalization) error {
							return fn.(finishBundle5x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				}
			default:
				panic("Invalid signature for FinishBundle")
			}

		case finishBundleIn == 6:
			switch {
			case finishBundleOut == 0:
				if _, ok := doFn.(finishBundle6x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I0]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I0))
						return &caller6x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I0]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I0))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 typex.BundleFinalization, a5 I0) {
							fn.(finishBundle6x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I0]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				}
			case finishBundleOut == 1:
				if _, ok := doFn.(finishBundle6x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I0, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I0) error)
						return &caller6x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I0, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I0) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 typex.BundleFinalization, a5 I0) error {
							return fn.(finishBundle6x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I0, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				}
			default:
				panic("Invalid signature for FinishBundle")
			}

		case finishBundleIn == 7:
			switch {
			default:
				panic("Invalid signature for FinishBundle")
			}

		default:
			panic("Invalid signature for FinishBundle")
		}
	}
	return nil
}

func buildFinishBundleWrapper2[I0, I1 any](doFn interface{}) func(interface{}) reflectx.Func {
	finishBundleIn := -1
	finishBundleOut := -1
	finishBundleMethod := reflect.ValueOf(doFn).MethodByName("FinishBundle")
	if finishBundleMethod.IsValid() {
		finishBundleIn = finishBundleMethod.Type().NumIn()
		finishBundleOut = finishBundleMethod.Type().NumOut()
		switch {

		case finishBundleIn == 0:
			switch {
			case finishBundleOut == 0:
				if _, ok := doFn.(finishBundle0x0); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func())
						return &caller0x0{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func())(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func() { fn.(finishBundle0x0).FinishBundle() })
					}
				}
			case finishBundleOut == 1:
				if _, ok := doFn.(finishBundle0x1[error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func() error)
						return &caller0x1[error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func() error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func() error { return fn.(finishBundle0x1[error]).FinishBundle() })
					}
				}
			default:
				panic("Invalid signature for FinishBundle")
			}

		case finishBundleIn == 1:
			switch {
			case finishBundleOut == 0:
				if _, ok := doFn.(finishBundle1x0[I1]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I1))
						return &caller1x0[I1]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I1))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I1) { fn.(finishBundle1x0[I1]).FinishBundle(a0) })
					}
				} else if _, ok := doFn.(finishBundle1x0[context.Context]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context))
						return &caller1x0[context.Context]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context) { fn.(finishBundle1x0[context.Context]).FinishBundle(a0) })
					}
				} else if _, ok := doFn.(finishBundle1x0[typex.PaneInfo]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo))
						return &caller1x0[typex.PaneInfo]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo) { fn.(finishBundle1x0[typex.PaneInfo]).FinishBundle(a0) })
					}
				} else if _, ok := doFn.(finishBundle1x0[[]typex.Window]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window))
						return &caller1x0[[]typex.Window]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window) { fn.(finishBundle1x0[[]typex.Window]).FinishBundle(a0) })
					}
				} else if _, ok := doFn.(finishBundle1x0[typex.EventTime]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime))
						return &caller1x0[typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime) { fn.(finishBundle1x0[typex.EventTime]).FinishBundle(a0) })
					}
				} else if _, ok := doFn.(finishBundle1x0[typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization))
						return &caller1x0[typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization) { fn.(finishBundle1x0[typex.BundleFinalization]).FinishBundle(a0) })
					}
				}
			case finishBundleOut == 1:
				if _, ok := doFn.(finishBundle1x1[I1, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I1) error)
						return &caller1x1[I1, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I1) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I1) error { return fn.(finishBundle1x1[I1, error]).FinishBundle(a0) })
					}
				} else if _, ok := doFn.(finishBundle1x1[context.Context, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context) error)
						return &caller1x1[context.Context, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context) error { return fn.(finishBundle1x1[context.Context, error]).FinishBundle(a0) })
					}
				} else if _, ok := doFn.(finishBundle1x1[typex.PaneInfo, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo) error)
						return &caller1x1[typex.PaneInfo, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo) error { return fn.(finishBundle1x1[typex.PaneInfo, error]).FinishBundle(a0) })
					}
				} else if _, ok := doFn.(finishBundle1x1[[]typex.Window, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window) error)
						return &caller1x1[[]typex.Window, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window) error { return fn.(finishBundle1x1[[]typex.Window, error]).FinishBundle(a0) })
					}
				} else if _, ok := doFn.(finishBundle1x1[typex.EventTime, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime) error)
						return &caller1x1[typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime) error { return fn.(finishBundle1x1[typex.EventTime, error]).FinishBundle(a0) })
					}
				} else if _, ok := doFn.(finishBundle1x1[typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization) error)
						return &caller1x1[typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization) error {
							return fn.(finishBundle1x1[typex.BundleFinalization, error]).FinishBundle(a0)
						})
					}
				}
			default:
				panic("Invalid signature for FinishBundle")
			}

		case finishBundleIn == 2:
			switch {
			case finishBundleOut == 0:
				if _, ok := doFn.(finishBundle2x0[I0, I1]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I0, I1))
						return &caller2x0[I0, I1]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I0, I1))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I0, a1 I1) { fn.(finishBundle2x0[I0, I1]).FinishBundle(a0, a1) })
					}
				} else if _, ok := doFn.(finishBundle2x0[context.Context, I1]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, I1))
						return &caller2x0[context.Context, I1]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, I1))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 I1) { fn.(finishBundle2x0[context.Context, I1]).FinishBundle(a0, a1) })
					}
				} else if _, ok := doFn.(finishBundle2x0[typex.PaneInfo, I1]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, I1))
						return &caller2x0[typex.PaneInfo, I1]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, I1))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 I1) { fn.(finishBundle2x0[typex.PaneInfo, I1]).FinishBundle(a0, a1) })
					}
				} else if _, ok := doFn.(finishBundle2x0[context.Context, typex.PaneInfo]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo))
						return &caller2x0[context.Context, typex.PaneInfo]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo) {
							fn.(finishBundle2x0[context.Context, typex.PaneInfo]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x0[[]typex.Window, I1]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, I1))
						return &caller2x0[[]typex.Window, I1]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, I1))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 I1) { fn.(finishBundle2x0[[]typex.Window, I1]).FinishBundle(a0, a1) })
					}
				} else if _, ok := doFn.(finishBundle2x0[context.Context, []typex.Window]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window))
						return &caller2x0[context.Context, []typex.Window]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window) {
							fn.(finishBundle2x0[context.Context, []typex.Window]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x0[typex.PaneInfo, []typex.Window]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window))
						return &caller2x0[typex.PaneInfo, []typex.Window]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window) {
							fn.(finishBundle2x0[typex.PaneInfo, []typex.Window]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x0[typex.EventTime, I1]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, I1))
						return &caller2x0[typex.EventTime, I1]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, I1))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 I1) { fn.(finishBundle2x0[typex.EventTime, I1]).FinishBundle(a0, a1) })
					}
				} else if _, ok := doFn.(finishBundle2x0[context.Context, typex.EventTime]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime))
						return &caller2x0[context.Context, typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime) {
							fn.(finishBundle2x0[context.Context, typex.EventTime]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x0[typex.PaneInfo, typex.EventTime]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime))
						return &caller2x0[typex.PaneInfo, typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime) {
							fn.(finishBundle2x0[typex.PaneInfo, typex.EventTime]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x0[[]typex.Window, typex.EventTime]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime))
						return &caller2x0[[]typex.Window, typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime) {
							fn.(finishBundle2x0[[]typex.Window, typex.EventTime]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x0[typex.BundleFinalization, I1]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization, I1))
						return &caller2x0[typex.BundleFinalization, I1]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization, I1))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization, a1 I1) {
							fn.(finishBundle2x0[typex.BundleFinalization, I1]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x0[context.Context, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization))
						return &caller2x0[context.Context, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization) {
							fn.(finishBundle2x0[context.Context, typex.BundleFinalization]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x0[typex.PaneInfo, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization))
						return &caller2x0[typex.PaneInfo, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization) {
							fn.(finishBundle2x0[typex.PaneInfo, typex.BundleFinalization]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x0[[]typex.Window, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization))
						return &caller2x0[[]typex.Window, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization) {
							fn.(finishBundle2x0[[]typex.Window, typex.BundleFinalization]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x0[typex.EventTime, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization))
						return &caller2x0[typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization) {
							fn.(finishBundle2x0[typex.EventTime, typex.BundleFinalization]).FinishBundle(a0, a1)
						})
					}
				}
			case finishBundleOut == 1:
				if _, ok := doFn.(finishBundle2x1[I0, I1, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I0, I1) error)
						return &caller2x1[I0, I1, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I0, I1) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I0, a1 I1) error { return fn.(finishBundle2x1[I0, I1, error]).FinishBundle(a0, a1) })
					}
				} else if _, ok := doFn.(finishBundle2x1[context.Context, I1, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, I1) error)
						return &caller2x1[context.Context, I1, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, I1) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 I1) error {
							return fn.(finishBundle2x1[context.Context, I1, error]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x1[typex.PaneInfo, I1, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, I1) error)
						return &caller2x1[typex.PaneInfo, I1, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, I1) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 I1) error {
							return fn.(finishBundle2x1[typex.PaneInfo, I1, error]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x1[context.Context, typex.PaneInfo, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo) error)
						return &caller2x1[context.Context, typex.PaneInfo, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo) error {
							return fn.(finishBundle2x1[context.Context, typex.PaneInfo, error]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x1[[]typex.Window, I1, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, I1) error)
						return &caller2x1[[]typex.Window, I1, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, I1) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 I1) error {
							return fn.(finishBundle2x1[[]typex.Window, I1, error]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x1[context.Context, []typex.Window, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window) error)
						return &caller2x1[context.Context, []typex.Window, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window) error {
							return fn.(finishBundle2x1[context.Context, []typex.Window, error]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x1[typex.PaneInfo, []typex.Window, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window) error)
						return &caller2x1[typex.PaneInfo, []typex.Window, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window) error {
							return fn.(finishBundle2x1[typex.PaneInfo, []typex.Window, error]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x1[typex.EventTime, I1, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, I1) error)
						return &caller2x1[typex.EventTime, I1, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, I1) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 I1) error {
							return fn.(finishBundle2x1[typex.EventTime, I1, error]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x1[context.Context, typex.EventTime, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime) error)
						return &caller2x1[context.Context, typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime) error {
							return fn.(finishBundle2x1[context.Context, typex.EventTime, error]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x1[typex.PaneInfo, typex.EventTime, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime) error)
						return &caller2x1[typex.PaneInfo, typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime) error {
							return fn.(finishBundle2x1[typex.PaneInfo, typex.EventTime, error]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x1[[]typex.Window, typex.EventTime, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime) error)
						return &caller2x1[[]typex.Window, typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime) error {
							return fn.(finishBundle2x1[[]typex.Window, typex.EventTime, error]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x1[typex.BundleFinalization, I1, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization, I1) error)
						return &caller2x1[typex.BundleFinalization, I1, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization, I1) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization, a1 I1) error {
							return fn.(finishBundle2x1[typex.BundleFinalization, I1, error]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x1[context.Context, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization) error)
						return &caller2x1[context.Context, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization) error {
							return fn.(finishBundle2x1[context.Context, typex.BundleFinalization, error]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x1[typex.PaneInfo, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization) error)
						return &caller2x1[typex.PaneInfo, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization) error {
							return fn.(finishBundle2x1[typex.PaneInfo, typex.BundleFinalization, error]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x1[[]typex.Window, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization) error)
						return &caller2x1[[]typex.Window, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization) error {
							return fn.(finishBundle2x1[[]typex.Window, typex.BundleFinalization, error]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x1[typex.EventTime, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization) error)
						return &caller2x1[typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization) error {
							return fn.(finishBundle2x1[typex.EventTime, typex.BundleFinalization, error]).FinishBundle(a0, a1)
						})
					}
				}
			default:
				panic("Invalid signature for FinishBundle")
			}

		case finishBundleIn == 3:
			switch {
			case finishBundleOut == 0:
				if _, ok := doFn.(finishBundle3x0[context.Context, I0, I1]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, I0, I1))
						return &caller3x0[context.Context, I0, I1]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, I0, I1))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 I0, a2 I1) {
							fn.(finishBundle3x0[context.Context, I0, I1]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[typex.PaneInfo, I0, I1]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, I0, I1))
						return &caller3x0[typex.PaneInfo, I0, I1]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, I0, I1))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 I0, a2 I1) {
							fn.(finishBundle3x0[typex.PaneInfo, I0, I1]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[context.Context, typex.PaneInfo, I1]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, I1))
						return &caller3x0[context.Context, typex.PaneInfo, I1]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, I1))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 I1) {
							fn.(finishBundle3x0[context.Context, typex.PaneInfo, I1]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[[]typex.Window, I0, I1]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, I0, I1))
						return &caller3x0[[]typex.Window, I0, I1]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, I0, I1))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 I0, a2 I1) {
							fn.(finishBundle3x0[[]typex.Window, I0, I1]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[context.Context, []typex.Window, I1]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, I1))
						return &caller3x0[context.Context, []typex.Window, I1]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, I1))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 I1) {
							fn.(finishBundle3x0[context.Context, []typex.Window, I1]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[typex.PaneInfo, []typex.Window, I1]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, I1))
						return &caller3x0[typex.PaneInfo, []typex.Window, I1]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, I1))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 I1) {
							fn.(finishBundle3x0[typex.PaneInfo, []typex.Window, I1]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[context.Context, typex.PaneInfo, []typex.Window]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window))
						return &caller3x0[context.Context, typex.PaneInfo, []typex.Window]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window) {
							fn.(finishBundle3x0[context.Context, typex.PaneInfo, []typex.Window]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[typex.EventTime, I0, I1]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, I0, I1))
						return &caller3x0[typex.EventTime, I0, I1]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, I0, I1))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 I0, a2 I1) {
							fn.(finishBundle3x0[typex.EventTime, I0, I1]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[context.Context, typex.EventTime, I1]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, I1))
						return &caller3x0[context.Context, typex.EventTime, I1]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, I1))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 I1) {
							fn.(finishBundle3x0[context.Context, typex.EventTime, I1]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[typex.PaneInfo, typex.EventTime, I1]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, I1))
						return &caller3x0[typex.PaneInfo, typex.EventTime, I1]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, I1))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 I1) {
							fn.(finishBundle3x0[typex.PaneInfo, typex.EventTime, I1]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[context.Context, typex.PaneInfo, typex.EventTime]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime))
						return &caller3x0[context.Context, typex.PaneInfo, typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime) {
							fn.(finishBundle3x0[context.Context, typex.PaneInfo, typex.EventTime]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[[]typex.Window, typex.EventTime, I1]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, I1))
						return &caller3x0[[]typex.Window, typex.EventTime, I1]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, I1))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 I1) {
							fn.(finishBundle3x0[[]typex.Window, typex.EventTime, I1]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[context.Context, []typex.Window, typex.EventTime]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime))
						return &caller3x0[context.Context, []typex.Window, typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime) {
							fn.(finishBundle3x0[context.Context, []typex.Window, typex.EventTime]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[typex.PaneInfo, []typex.Window, typex.EventTime]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime))
						return &caller3x0[typex.PaneInfo, []typex.Window, typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime) {
							fn.(finishBundle3x0[typex.PaneInfo, []typex.Window, typex.EventTime]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[typex.BundleFinalization, I0, I1]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization, I0, I1))
						return &caller3x0[typex.BundleFinalization, I0, I1]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization, I0, I1))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization, a1 I0, a2 I1) {
							fn.(finishBundle3x0[typex.BundleFinalization, I0, I1]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[context.Context, typex.BundleFinalization, I1]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization, I1))
						return &caller3x0[context.Context, typex.BundleFinalization, I1]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization, I1))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization, a2 I1) {
							fn.(finishBundle3x0[context.Context, typex.BundleFinalization, I1]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[typex.PaneInfo, typex.BundleFinalization, I1]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization, I1))
						return &caller3x0[typex.PaneInfo, typex.BundleFinalization, I1]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization, I1))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization, a2 I1) {
							fn.(finishBundle3x0[typex.PaneInfo, typex.BundleFinalization, I1]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[context.Context, typex.PaneInfo, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization))
						return &caller3x0[context.Context, typex.PaneInfo, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization) {
							fn.(finishBundle3x0[context.Context, typex.PaneInfo, typex.BundleFinalization]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[[]typex.Window, typex.BundleFinalization, I1]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization, I1))
						return &caller3x0[[]typex.Window, typex.BundleFinalization, I1]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization, I1))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization, a2 I1) {
							fn.(finishBundle3x0[[]typex.Window, typex.BundleFinalization, I1]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[context.Context, []typex.Window, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization))
						return &caller3x0[context.Context, []typex.Window, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization) {
							fn.(finishBundle3x0[context.Context, []typex.Window, typex.BundleFinalization]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization))
						return &caller3x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization) {
							fn.(finishBundle3x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[typex.EventTime, typex.BundleFinalization, I1]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization, I1))
						return &caller3x0[typex.EventTime, typex.BundleFinalization, I1]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization, I1))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization, a2 I1) {
							fn.(finishBundle3x0[typex.EventTime, typex.BundleFinalization, I1]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[context.Context, typex.EventTime, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization))
						return &caller3x0[context.Context, typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization) {
							fn.(finishBundle3x0[context.Context, typex.EventTime, typex.BundleFinalization]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization))
						return &caller3x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization) {
							fn.(finishBundle3x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[[]typex.Window, typex.EventTime, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization))
						return &caller3x0[[]typex.Window, typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization) {
							fn.(finishBundle3x0[[]typex.Window, typex.EventTime, typex.BundleFinalization]).FinishBundle(a0, a1, a2)
						})
					}
				}
			case finishBundleOut == 1:
				if _, ok := doFn.(finishBundle3x1[context.Context, I0, I1, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, I0, I1) error)
						return &caller3x1[context.Context, I0, I1, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, I0, I1) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 I0, a2 I1) error {
							return fn.(finishBundle3x1[context.Context, I0, I1, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[typex.PaneInfo, I0, I1, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, I0, I1) error)
						return &caller3x1[typex.PaneInfo, I0, I1, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, I0, I1) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 I0, a2 I1) error {
							return fn.(finishBundle3x1[typex.PaneInfo, I0, I1, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[context.Context, typex.PaneInfo, I1, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, I1) error)
						return &caller3x1[context.Context, typex.PaneInfo, I1, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, I1) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 I1) error {
							return fn.(finishBundle3x1[context.Context, typex.PaneInfo, I1, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[[]typex.Window, I0, I1, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, I0, I1) error)
						return &caller3x1[[]typex.Window, I0, I1, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, I0, I1) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 I0, a2 I1) error {
							return fn.(finishBundle3x1[[]typex.Window, I0, I1, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[context.Context, []typex.Window, I1, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, I1) error)
						return &caller3x1[context.Context, []typex.Window, I1, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, I1) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 I1) error {
							return fn.(finishBundle3x1[context.Context, []typex.Window, I1, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[typex.PaneInfo, []typex.Window, I1, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, I1) error)
						return &caller3x1[typex.PaneInfo, []typex.Window, I1, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, I1) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 I1) error {
							return fn.(finishBundle3x1[typex.PaneInfo, []typex.Window, I1, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[context.Context, typex.PaneInfo, []typex.Window, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window) error)
						return &caller3x1[context.Context, typex.PaneInfo, []typex.Window, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window) error {
							return fn.(finishBundle3x1[context.Context, typex.PaneInfo, []typex.Window, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[typex.EventTime, I0, I1, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, I0, I1) error)
						return &caller3x1[typex.EventTime, I0, I1, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, I0, I1) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 I0, a2 I1) error {
							return fn.(finishBundle3x1[typex.EventTime, I0, I1, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[context.Context, typex.EventTime, I1, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, I1) error)
						return &caller3x1[context.Context, typex.EventTime, I1, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, I1) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 I1) error {
							return fn.(finishBundle3x1[context.Context, typex.EventTime, I1, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[typex.PaneInfo, typex.EventTime, I1, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, I1) error)
						return &caller3x1[typex.PaneInfo, typex.EventTime, I1, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, I1) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 I1) error {
							return fn.(finishBundle3x1[typex.PaneInfo, typex.EventTime, I1, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[context.Context, typex.PaneInfo, typex.EventTime, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime) error)
						return &caller3x1[context.Context, typex.PaneInfo, typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime) error {
							return fn.(finishBundle3x1[context.Context, typex.PaneInfo, typex.EventTime, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[[]typex.Window, typex.EventTime, I1, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, I1) error)
						return &caller3x1[[]typex.Window, typex.EventTime, I1, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, I1) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 I1) error {
							return fn.(finishBundle3x1[[]typex.Window, typex.EventTime, I1, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[context.Context, []typex.Window, typex.EventTime, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime) error)
						return &caller3x1[context.Context, []typex.Window, typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime) error {
							return fn.(finishBundle3x1[context.Context, []typex.Window, typex.EventTime, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[typex.PaneInfo, []typex.Window, typex.EventTime, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime) error)
						return &caller3x1[typex.PaneInfo, []typex.Window, typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime) error {
							return fn.(finishBundle3x1[typex.PaneInfo, []typex.Window, typex.EventTime, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[typex.BundleFinalization, I0, I1, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization, I0, I1) error)
						return &caller3x1[typex.BundleFinalization, I0, I1, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization, I0, I1) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization, a1 I0, a2 I1) error {
							return fn.(finishBundle3x1[typex.BundleFinalization, I0, I1, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[context.Context, typex.BundleFinalization, I1, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization, I1) error)
						return &caller3x1[context.Context, typex.BundleFinalization, I1, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization, I1) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization, a2 I1) error {
							return fn.(finishBundle3x1[context.Context, typex.BundleFinalization, I1, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[typex.PaneInfo, typex.BundleFinalization, I1, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization, I1) error)
						return &caller3x1[typex.PaneInfo, typex.BundleFinalization, I1, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization, I1) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization, a2 I1) error {
							return fn.(finishBundle3x1[typex.PaneInfo, typex.BundleFinalization, I1, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[context.Context, typex.PaneInfo, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization) error)
						return &caller3x1[context.Context, typex.PaneInfo, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization) error {
							return fn.(finishBundle3x1[context.Context, typex.PaneInfo, typex.BundleFinalization, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[[]typex.Window, typex.BundleFinalization, I1, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization, I1) error)
						return &caller3x1[[]typex.Window, typex.BundleFinalization, I1, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization, I1) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization, a2 I1) error {
							return fn.(finishBundle3x1[[]typex.Window, typex.BundleFinalization, I1, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[context.Context, []typex.Window, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization) error)
						return &caller3x1[context.Context, []typex.Window, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization) error {
							return fn.(finishBundle3x1[context.Context, []typex.Window, typex.BundleFinalization, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization) error)
						return &caller3x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization) error {
							return fn.(finishBundle3x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[typex.EventTime, typex.BundleFinalization, I1, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization, I1) error)
						return &caller3x1[typex.EventTime, typex.BundleFinalization, I1, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization, I1) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization, a2 I1) error {
							return fn.(finishBundle3x1[typex.EventTime, typex.BundleFinalization, I1, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[context.Context, typex.EventTime, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization) error)
						return &caller3x1[context.Context, typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization) error {
							return fn.(finishBundle3x1[context.Context, typex.EventTime, typex.BundleFinalization, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization) error)
						return &caller3x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization) error {
							return fn.(finishBundle3x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization) error)
						return &caller3x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization) error {
							return fn.(finishBundle3x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, error]).FinishBundle(a0, a1, a2)
						})
					}
				}
			default:
				panic("Invalid signature for FinishBundle")
			}

		case finishBundleIn == 4:
			switch {
			case finishBundleOut == 0:
				if _, ok := doFn.(finishBundle4x0[context.Context, typex.PaneInfo, I0, I1]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, I0, I1))
						return &caller4x0[context.Context, typex.PaneInfo, I0, I1]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, I0, I1))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 I0, a3 I1) {
							fn.(finishBundle4x0[context.Context, typex.PaneInfo, I0, I1]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[context.Context, []typex.Window, I0, I1]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, I0, I1))
						return &caller4x0[context.Context, []typex.Window, I0, I1]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, I0, I1))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 I0, a3 I1) {
							fn.(finishBundle4x0[context.Context, []typex.Window, I0, I1]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[typex.PaneInfo, []typex.Window, I0, I1]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, I0, I1))
						return &caller4x0[typex.PaneInfo, []typex.Window, I0, I1]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, I0, I1))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 I0, a3 I1) {
							fn.(finishBundle4x0[typex.PaneInfo, []typex.Window, I0, I1]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[context.Context, typex.PaneInfo, []typex.Window, I1]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, I1))
						return &caller4x0[context.Context, typex.PaneInfo, []typex.Window, I1]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, I1))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 I1) {
							fn.(finishBundle4x0[context.Context, typex.PaneInfo, []typex.Window, I1]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[context.Context, typex.EventTime, I0, I1]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, I0, I1))
						return &caller4x0[context.Context, typex.EventTime, I0, I1]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, I0, I1))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 I0, a3 I1) {
							fn.(finishBundle4x0[context.Context, typex.EventTime, I0, I1]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[typex.PaneInfo, typex.EventTime, I0, I1]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, I0, I1))
						return &caller4x0[typex.PaneInfo, typex.EventTime, I0, I1]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, I0, I1))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 I0, a3 I1) {
							fn.(finishBundle4x0[typex.PaneInfo, typex.EventTime, I0, I1]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[context.Context, typex.PaneInfo, typex.EventTime, I1]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, I1))
						return &caller4x0[context.Context, typex.PaneInfo, typex.EventTime, I1]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, I1))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 I1) {
							fn.(finishBundle4x0[context.Context, typex.PaneInfo, typex.EventTime, I1]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[[]typex.Window, typex.EventTime, I0, I1]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, I0, I1))
						return &caller4x0[[]typex.Window, typex.EventTime, I0, I1]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, I0, I1))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 I0, a3 I1) {
							fn.(finishBundle4x0[[]typex.Window, typex.EventTime, I0, I1]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[context.Context, []typex.Window, typex.EventTime, I1]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, I1))
						return &caller4x0[context.Context, []typex.Window, typex.EventTime, I1]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, I1))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 I1) {
							fn.(finishBundle4x0[context.Context, []typex.Window, typex.EventTime, I1]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[typex.PaneInfo, []typex.Window, typex.EventTime, I1]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, I1))
						return &caller4x0[typex.PaneInfo, []typex.Window, typex.EventTime, I1]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, I1))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 I1) {
							fn.(finishBundle4x0[typex.PaneInfo, []typex.Window, typex.EventTime, I1]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime))
						return &caller4x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime) {
							fn.(finishBundle4x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[context.Context, typex.BundleFinalization, I0, I1]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization, I0, I1))
						return &caller4x0[context.Context, typex.BundleFinalization, I0, I1]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization, I0, I1))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization, a2 I0, a3 I1) {
							fn.(finishBundle4x0[context.Context, typex.BundleFinalization, I0, I1]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[typex.PaneInfo, typex.BundleFinalization, I0, I1]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization, I0, I1))
						return &caller4x0[typex.PaneInfo, typex.BundleFinalization, I0, I1]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization, I0, I1))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization, a2 I0, a3 I1) {
							fn.(finishBundle4x0[typex.PaneInfo, typex.BundleFinalization, I0, I1]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I1]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization, I1))
						return &caller4x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I1]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization, I1))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization, a3 I1) {
							fn.(finishBundle4x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I1]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[[]typex.Window, typex.BundleFinalization, I0, I1]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization, I0, I1))
						return &caller4x0[[]typex.Window, typex.BundleFinalization, I0, I1]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization, I0, I1))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization, a2 I0, a3 I1) {
							fn.(finishBundle4x0[[]typex.Window, typex.BundleFinalization, I0, I1]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[context.Context, []typex.Window, typex.BundleFinalization, I1]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization, I1))
						return &caller4x0[context.Context, []typex.Window, typex.BundleFinalization, I1]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization, I1))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization, a3 I1) {
							fn.(finishBundle4x0[context.Context, []typex.Window, typex.BundleFinalization, I1]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1))
						return &caller4x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization, a3 I1) {
							fn.(finishBundle4x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization))
						return &caller4x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.BundleFinalization) {
							fn.(finishBundle4x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[typex.EventTime, typex.BundleFinalization, I0, I1]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization, I0, I1))
						return &caller4x0[typex.EventTime, typex.BundleFinalization, I0, I1]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization, I0, I1))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization, a2 I0, a3 I1) {
							fn.(finishBundle4x0[typex.EventTime, typex.BundleFinalization, I0, I1]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[context.Context, typex.EventTime, typex.BundleFinalization, I1]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization, I1))
						return &caller4x0[context.Context, typex.EventTime, typex.BundleFinalization, I1]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization, I1))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I1) {
							fn.(finishBundle4x0[context.Context, typex.EventTime, typex.BundleFinalization, I1]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1))
						return &caller4x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I1) {
							fn.(finishBundle4x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization))
						return &caller4x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 typex.BundleFinalization) {
							fn.(finishBundle4x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I1]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization, I1))
						return &caller4x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I1]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization, I1))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I1) {
							fn.(finishBundle4x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I1]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization))
						return &caller4x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization) {
							fn.(finishBundle4x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization))
						return &caller4x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization) {
							fn.(finishBundle4x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization]).FinishBundle(a0, a1, a2, a3)
						})
					}
				}
			case finishBundleOut == 1:
				if _, ok := doFn.(finishBundle4x1[context.Context, typex.PaneInfo, I0, I1, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, I0, I1) error)
						return &caller4x1[context.Context, typex.PaneInfo, I0, I1, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, I0, I1) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 I0, a3 I1) error {
							return fn.(finishBundle4x1[context.Context, typex.PaneInfo, I0, I1, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[context.Context, []typex.Window, I0, I1, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, I0, I1) error)
						return &caller4x1[context.Context, []typex.Window, I0, I1, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, I0, I1) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 I0, a3 I1) error {
							return fn.(finishBundle4x1[context.Context, []typex.Window, I0, I1, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[typex.PaneInfo, []typex.Window, I0, I1, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, I0, I1) error)
						return &caller4x1[typex.PaneInfo, []typex.Window, I0, I1, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, I0, I1) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 I0, a3 I1) error {
							return fn.(finishBundle4x1[typex.PaneInfo, []typex.Window, I0, I1, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[context.Context, typex.PaneInfo, []typex.Window, I1, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, I1) error)
						return &caller4x1[context.Context, typex.PaneInfo, []typex.Window, I1, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, I1) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 I1) error {
							return fn.(finishBundle4x1[context.Context, typex.PaneInfo, []typex.Window, I1, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[context.Context, typex.EventTime, I0, I1, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, I0, I1) error)
						return &caller4x1[context.Context, typex.EventTime, I0, I1, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, I0, I1) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 I0, a3 I1) error {
							return fn.(finishBundle4x1[context.Context, typex.EventTime, I0, I1, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[typex.PaneInfo, typex.EventTime, I0, I1, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, I0, I1) error)
						return &caller4x1[typex.PaneInfo, typex.EventTime, I0, I1, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, I0, I1) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 I0, a3 I1) error {
							return fn.(finishBundle4x1[typex.PaneInfo, typex.EventTime, I0, I1, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[context.Context, typex.PaneInfo, typex.EventTime, I1, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, I1) error)
						return &caller4x1[context.Context, typex.PaneInfo, typex.EventTime, I1, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, I1) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 I1) error {
							return fn.(finishBundle4x1[context.Context, typex.PaneInfo, typex.EventTime, I1, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[[]typex.Window, typex.EventTime, I0, I1, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, I0, I1) error)
						return &caller4x1[[]typex.Window, typex.EventTime, I0, I1, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, I0, I1) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 I0, a3 I1) error {
							return fn.(finishBundle4x1[[]typex.Window, typex.EventTime, I0, I1, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[context.Context, []typex.Window, typex.EventTime, I1, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, I1) error)
						return &caller4x1[context.Context, []typex.Window, typex.EventTime, I1, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, I1) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 I1) error {
							return fn.(finishBundle4x1[context.Context, []typex.Window, typex.EventTime, I1, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[typex.PaneInfo, []typex.Window, typex.EventTime, I1, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, I1) error)
						return &caller4x1[typex.PaneInfo, []typex.Window, typex.EventTime, I1, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, I1) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 I1) error {
							return fn.(finishBundle4x1[typex.PaneInfo, []typex.Window, typex.EventTime, I1, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime) error)
						return &caller4x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime) error {
							return fn.(finishBundle4x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[context.Context, typex.BundleFinalization, I0, I1, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization, I0, I1) error)
						return &caller4x1[context.Context, typex.BundleFinalization, I0, I1, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization, I0, I1) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization, a2 I0, a3 I1) error {
							return fn.(finishBundle4x1[context.Context, typex.BundleFinalization, I0, I1, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[typex.PaneInfo, typex.BundleFinalization, I0, I1, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization, I0, I1) error)
						return &caller4x1[typex.PaneInfo, typex.BundleFinalization, I0, I1, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization, I0, I1) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization, a2 I0, a3 I1) error {
							return fn.(finishBundle4x1[typex.PaneInfo, typex.BundleFinalization, I0, I1, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I1, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization, I1) error)
						return &caller4x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I1, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization, I1) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization, a3 I1) error {
							return fn.(finishBundle4x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I1, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[[]typex.Window, typex.BundleFinalization, I0, I1, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization, I0, I1) error)
						return &caller4x1[[]typex.Window, typex.BundleFinalization, I0, I1, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization, I0, I1) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization, a2 I0, a3 I1) error {
							return fn.(finishBundle4x1[[]typex.Window, typex.BundleFinalization, I0, I1, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[context.Context, []typex.Window, typex.BundleFinalization, I1, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization, I1) error)
						return &caller4x1[context.Context, []typex.Window, typex.BundleFinalization, I1, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization, I1) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization, a3 I1) error {
							return fn.(finishBundle4x1[context.Context, []typex.Window, typex.BundleFinalization, I1, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1) error)
						return &caller4x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization, a3 I1) error {
							return fn.(finishBundle4x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization) error)
						return &caller4x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.BundleFinalization) error {
							return fn.(finishBundle4x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[typex.EventTime, typex.BundleFinalization, I0, I1, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization, I0, I1) error)
						return &caller4x1[typex.EventTime, typex.BundleFinalization, I0, I1, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization, I0, I1) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization, a2 I0, a3 I1) error {
							return fn.(finishBundle4x1[typex.EventTime, typex.BundleFinalization, I0, I1, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[context.Context, typex.EventTime, typex.BundleFinalization, I1, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization, I1) error)
						return &caller4x1[context.Context, typex.EventTime, typex.BundleFinalization, I1, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization, I1) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I1) error {
							return fn.(finishBundle4x1[context.Context, typex.EventTime, typex.BundleFinalization, I1, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1) error)
						return &caller4x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I1) error {
							return fn.(finishBundle4x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization) error)
						return &caller4x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 typex.BundleFinalization) error {
							return fn.(finishBundle4x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I1, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization, I1) error)
						return &caller4x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I1, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization, I1) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I1) error {
							return fn.(finishBundle4x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I1, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization) error)
						return &caller4x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization) error {
							return fn.(finishBundle4x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization) error)
						return &caller4x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization) error {
							return fn.(finishBundle4x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				}
			default:
				panic("Invalid signature for FinishBundle")
			}

		case finishBundleIn == 5:
			switch {
			case finishBundleOut == 0:
				if _, ok := doFn.(finishBundle5x0[context.Context, typex.PaneInfo, []typex.Window, I0, I1]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, I0, I1))
						return &caller5x0[context.Context, typex.PaneInfo, []typex.Window, I0, I1]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, I0, I1))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 I0, a4 I1) {
							fn.(finishBundle5x0[context.Context, typex.PaneInfo, []typex.Window, I0, I1]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[context.Context, typex.PaneInfo, typex.EventTime, I0, I1]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, I0, I1))
						return &caller5x0[context.Context, typex.PaneInfo, typex.EventTime, I0, I1]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, I0, I1))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 I0, a4 I1) {
							fn.(finishBundle5x0[context.Context, typex.PaneInfo, typex.EventTime, I0, I1]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[context.Context, []typex.Window, typex.EventTime, I0, I1]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, I0, I1))
						return &caller5x0[context.Context, []typex.Window, typex.EventTime, I0, I1]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, I0, I1))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 I0, a4 I1) {
							fn.(finishBundle5x0[context.Context, []typex.Window, typex.EventTime, I0, I1]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[typex.PaneInfo, []typex.Window, typex.EventTime, I0, I1]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, I0, I1))
						return &caller5x0[typex.PaneInfo, []typex.Window, typex.EventTime, I0, I1]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, I0, I1))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 I0, a4 I1) {
							fn.(finishBundle5x0[typex.PaneInfo, []typex.Window, typex.EventTime, I0, I1]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I1]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I1))
						return &caller5x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I1]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I1))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 I1) {
							fn.(finishBundle5x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I1]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I0, I1]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization, I0, I1))
						return &caller5x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I0, I1]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization, I0, I1))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization, a3 I0, a4 I1) {
							fn.(finishBundle5x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I0, I1]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[context.Context, []typex.Window, typex.BundleFinalization, I0, I1]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization, I0, I1))
						return &caller5x0[context.Context, []typex.Window, typex.BundleFinalization, I0, I1]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization, I0, I1))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization, a3 I0, a4 I1) {
							fn.(finishBundle5x0[context.Context, []typex.Window, typex.BundleFinalization, I0, I1]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0, I1]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0, I1))
						return &caller5x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0, I1]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0, I1))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization, a3 I0, a4 I1) {
							fn.(finishBundle5x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0, I1]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1))
						return &caller5x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.BundleFinalization, a4 I1) {
							fn.(finishBundle5x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[context.Context, typex.EventTime, typex.BundleFinalization, I0, I1]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization, I0, I1))
						return &caller5x0[context.Context, typex.EventTime, typex.BundleFinalization, I0, I1]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization, I0, I1))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I0, a4 I1) {
							fn.(finishBundle5x0[context.Context, typex.EventTime, typex.BundleFinalization, I0, I1]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0, I1]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0, I1))
						return &caller5x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0, I1]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0, I1))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I0, a4 I1) {
							fn.(finishBundle5x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0, I1]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1))
						return &caller5x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I1) {
							fn.(finishBundle5x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1))
						return &caller5x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I0, a4 I1) {
							fn.(finishBundle5x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I1]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I1))
						return &caller5x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I1]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I1))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I1) {
							fn.(finishBundle5x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I1]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I1]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I1))
						return &caller5x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I1]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I1))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I1) {
							fn.(finishBundle5x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I1]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization))
						return &caller5x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 typex.BundleFinalization) {
							fn.(finishBundle5x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				}
			case finishBundleOut == 1:
				if _, ok := doFn.(finishBundle5x1[context.Context, typex.PaneInfo, []typex.Window, I0, I1, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, I0, I1) error)
						return &caller5x1[context.Context, typex.PaneInfo, []typex.Window, I0, I1, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, I0, I1) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 I0, a4 I1) error {
							return fn.(finishBundle5x1[context.Context, typex.PaneInfo, []typex.Window, I0, I1, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[context.Context, typex.PaneInfo, typex.EventTime, I0, I1, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, I0, I1) error)
						return &caller5x1[context.Context, typex.PaneInfo, typex.EventTime, I0, I1, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, I0, I1) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 I0, a4 I1) error {
							return fn.(finishBundle5x1[context.Context, typex.PaneInfo, typex.EventTime, I0, I1, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[context.Context, []typex.Window, typex.EventTime, I0, I1, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, I0, I1) error)
						return &caller5x1[context.Context, []typex.Window, typex.EventTime, I0, I1, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, I0, I1) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 I0, a4 I1) error {
							return fn.(finishBundle5x1[context.Context, []typex.Window, typex.EventTime, I0, I1, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[typex.PaneInfo, []typex.Window, typex.EventTime, I0, I1, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, I0, I1) error)
						return &caller5x1[typex.PaneInfo, []typex.Window, typex.EventTime, I0, I1, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, I0, I1) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 I0, a4 I1) error {
							return fn.(finishBundle5x1[typex.PaneInfo, []typex.Window, typex.EventTime, I0, I1, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I1, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I1) error)
						return &caller5x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I1, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I1) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 I1) error {
							return fn.(finishBundle5x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I1, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I0, I1, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization, I0, I1) error)
						return &caller5x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I0, I1, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization, I0, I1) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization, a3 I0, a4 I1) error {
							return fn.(finishBundle5x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I0, I1, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[context.Context, []typex.Window, typex.BundleFinalization, I0, I1, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization, I0, I1) error)
						return &caller5x1[context.Context, []typex.Window, typex.BundleFinalization, I0, I1, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization, I0, I1) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization, a3 I0, a4 I1) error {
							return fn.(finishBundle5x1[context.Context, []typex.Window, typex.BundleFinalization, I0, I1, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0, I1, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0, I1) error)
						return &caller5x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0, I1, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0, I1) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization, a3 I0, a4 I1) error {
							return fn.(finishBundle5x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0, I1, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1) error)
						return &caller5x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.BundleFinalization, a4 I1) error {
							return fn.(finishBundle5x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[context.Context, typex.EventTime, typex.BundleFinalization, I0, I1, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization, I0, I1) error)
						return &caller5x1[context.Context, typex.EventTime, typex.BundleFinalization, I0, I1, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization, I0, I1) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I0, a4 I1) error {
							return fn.(finishBundle5x1[context.Context, typex.EventTime, typex.BundleFinalization, I0, I1, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0, I1, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0, I1) error)
						return &caller5x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0, I1, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0, I1) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I0, a4 I1) error {
							return fn.(finishBundle5x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0, I1, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1) error)
						return &caller5x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I1) error {
							return fn.(finishBundle5x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1) error)
						return &caller5x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I0, a4 I1) error {
							return fn.(finishBundle5x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I1, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I1) error)
						return &caller5x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I1, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I1) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I1) error {
							return fn.(finishBundle5x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I1, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I1, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I1) error)
						return &caller5x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I1, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I1) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I1) error {
							return fn.(finishBundle5x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I1, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization) error)
						return &caller5x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 typex.BundleFinalization) error {
							return fn.(finishBundle5x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				}
			default:
				panic("Invalid signature for FinishBundle")
			}

		case finishBundleIn == 6:
			switch {
			case finishBundleOut == 0:
				if _, ok := doFn.(finishBundle6x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I0, I1]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I0, I1))
						return &caller6x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I0, I1]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I0, I1))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 I0, a5 I1) {
							fn.(finishBundle6x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I0, I1]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0, I1]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0, I1))
						return &caller6x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0, I1]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0, I1))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.BundleFinalization, a4 I0, a5 I1) {
							fn.(finishBundle6x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0, I1]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0, I1]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0, I1))
						return &caller6x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0, I1]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0, I1))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I0, a5 I1) {
							fn.(finishBundle6x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0, I1]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1))
						return &caller6x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I0, a5 I1) {
							fn.(finishBundle6x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1))
						return &caller6x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I0, a5 I1) {
							fn.(finishBundle6x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I1]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I1))
						return &caller6x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I1]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I1))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 typex.BundleFinalization, a5 I1) {
							fn.(finishBundle6x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I1]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				}
			case finishBundleOut == 1:
				if _, ok := doFn.(finishBundle6x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I0, I1, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I0, I1) error)
						return &caller6x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I0, I1, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I0, I1) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 I0, a5 I1) error {
							return fn.(finishBundle6x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I0, I1, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0, I1, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0, I1) error)
						return &caller6x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0, I1, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0, I1) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.BundleFinalization, a4 I0, a5 I1) error {
							return fn.(finishBundle6x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0, I1, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0, I1, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0, I1) error)
						return &caller6x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0, I1, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0, I1) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I0, a5 I1) error {
							return fn.(finishBundle6x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0, I1, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1) error)
						return &caller6x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I0, a5 I1) error {
							return fn.(finishBundle6x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1) error)
						return &caller6x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I0, a5 I1) error {
							return fn.(finishBundle6x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I1, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I1) error)
						return &caller6x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I1, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I1) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 typex.BundleFinalization, a5 I1) error {
							return fn.(finishBundle6x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I1, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				}
			default:
				panic("Invalid signature for FinishBundle")
			}

		case finishBundleIn == 7:
			switch {
			case finishBundleOut == 0:
				if _, ok := doFn.(finishBundle7x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1))
						return &caller7x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 typex.BundleFinalization, a5 I0, a6 I1) {
							fn.(finishBundle7x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				}
			case finishBundleOut == 1:
				if _, ok := doFn.(finishBundle7x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1) error)
						return &caller7x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 typex.BundleFinalization, a5 I0, a6 I1) error {
							return fn.(finishBundle7x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				}
			default:
				panic("Invalid signature for FinishBundle")
			}

		default:
			panic("Invalid signature for FinishBundle")
		}
	}
	return nil
}

func buildFinishBundleWrapper3[I0, I1, I2 any](doFn interface{}) func(interface{}) reflectx.Func {
	finishBundleIn := -1
	finishBundleOut := -1
	finishBundleMethod := reflect.ValueOf(doFn).MethodByName("FinishBundle")
	if finishBundleMethod.IsValid() {
		finishBundleIn = finishBundleMethod.Type().NumIn()
		finishBundleOut = finishBundleMethod.Type().NumOut()
		switch {

		case finishBundleIn == 0:
			switch {
			case finishBundleOut == 0:
				if _, ok := doFn.(finishBundle0x0); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func())
						return &caller0x0{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func())(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func() { fn.(finishBundle0x0).FinishBundle() })
					}
				}
			case finishBundleOut == 1:
				if _, ok := doFn.(finishBundle0x1[error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func() error)
						return &caller0x1[error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func() error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func() error { return fn.(finishBundle0x1[error]).FinishBundle() })
					}
				}
			default:
				panic("Invalid signature for FinishBundle")
			}

		case finishBundleIn == 1:
			switch {
			case finishBundleOut == 0:
				if _, ok := doFn.(finishBundle1x0[I2]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I2))
						return &caller1x0[I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I2))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I2) { fn.(finishBundle1x0[I2]).FinishBundle(a0) })
					}
				} else if _, ok := doFn.(finishBundle1x0[context.Context]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context))
						return &caller1x0[context.Context]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context) { fn.(finishBundle1x0[context.Context]).FinishBundle(a0) })
					}
				} else if _, ok := doFn.(finishBundle1x0[typex.PaneInfo]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo))
						return &caller1x0[typex.PaneInfo]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo) { fn.(finishBundle1x0[typex.PaneInfo]).FinishBundle(a0) })
					}
				} else if _, ok := doFn.(finishBundle1x0[[]typex.Window]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window))
						return &caller1x0[[]typex.Window]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window) { fn.(finishBundle1x0[[]typex.Window]).FinishBundle(a0) })
					}
				} else if _, ok := doFn.(finishBundle1x0[typex.EventTime]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime))
						return &caller1x0[typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime) { fn.(finishBundle1x0[typex.EventTime]).FinishBundle(a0) })
					}
				} else if _, ok := doFn.(finishBundle1x0[typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization))
						return &caller1x0[typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization) { fn.(finishBundle1x0[typex.BundleFinalization]).FinishBundle(a0) })
					}
				}
			case finishBundleOut == 1:
				if _, ok := doFn.(finishBundle1x1[I2, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I2) error)
						return &caller1x1[I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I2) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I2) error { return fn.(finishBundle1x1[I2, error]).FinishBundle(a0) })
					}
				} else if _, ok := doFn.(finishBundle1x1[context.Context, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context) error)
						return &caller1x1[context.Context, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context) error { return fn.(finishBundle1x1[context.Context, error]).FinishBundle(a0) })
					}
				} else if _, ok := doFn.(finishBundle1x1[typex.PaneInfo, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo) error)
						return &caller1x1[typex.PaneInfo, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo) error { return fn.(finishBundle1x1[typex.PaneInfo, error]).FinishBundle(a0) })
					}
				} else if _, ok := doFn.(finishBundle1x1[[]typex.Window, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window) error)
						return &caller1x1[[]typex.Window, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window) error { return fn.(finishBundle1x1[[]typex.Window, error]).FinishBundle(a0) })
					}
				} else if _, ok := doFn.(finishBundle1x1[typex.EventTime, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime) error)
						return &caller1x1[typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime) error { return fn.(finishBundle1x1[typex.EventTime, error]).FinishBundle(a0) })
					}
				} else if _, ok := doFn.(finishBundle1x1[typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization) error)
						return &caller1x1[typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization) error {
							return fn.(finishBundle1x1[typex.BundleFinalization, error]).FinishBundle(a0)
						})
					}
				}
			default:
				panic("Invalid signature for FinishBundle")
			}

		case finishBundleIn == 2:
			switch {
			case finishBundleOut == 0:
				if _, ok := doFn.(finishBundle2x0[I1, I2]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I1, I2))
						return &caller2x0[I1, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I1, I2))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I1, a1 I2) { fn.(finishBundle2x0[I1, I2]).FinishBundle(a0, a1) })
					}
				} else if _, ok := doFn.(finishBundle2x0[context.Context, I2]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, I2))
						return &caller2x0[context.Context, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, I2))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 I2) { fn.(finishBundle2x0[context.Context, I2]).FinishBundle(a0, a1) })
					}
				} else if _, ok := doFn.(finishBundle2x0[typex.PaneInfo, I2]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, I2))
						return &caller2x0[typex.PaneInfo, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, I2))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 I2) { fn.(finishBundle2x0[typex.PaneInfo, I2]).FinishBundle(a0, a1) })
					}
				} else if _, ok := doFn.(finishBundle2x0[context.Context, typex.PaneInfo]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo))
						return &caller2x0[context.Context, typex.PaneInfo]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo) {
							fn.(finishBundle2x0[context.Context, typex.PaneInfo]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x0[[]typex.Window, I2]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, I2))
						return &caller2x0[[]typex.Window, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, I2))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 I2) { fn.(finishBundle2x0[[]typex.Window, I2]).FinishBundle(a0, a1) })
					}
				} else if _, ok := doFn.(finishBundle2x0[context.Context, []typex.Window]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window))
						return &caller2x0[context.Context, []typex.Window]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window) {
							fn.(finishBundle2x0[context.Context, []typex.Window]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x0[typex.PaneInfo, []typex.Window]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window))
						return &caller2x0[typex.PaneInfo, []typex.Window]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window) {
							fn.(finishBundle2x0[typex.PaneInfo, []typex.Window]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x0[typex.EventTime, I2]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, I2))
						return &caller2x0[typex.EventTime, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, I2))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 I2) { fn.(finishBundle2x0[typex.EventTime, I2]).FinishBundle(a0, a1) })
					}
				} else if _, ok := doFn.(finishBundle2x0[context.Context, typex.EventTime]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime))
						return &caller2x0[context.Context, typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime) {
							fn.(finishBundle2x0[context.Context, typex.EventTime]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x0[typex.PaneInfo, typex.EventTime]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime))
						return &caller2x0[typex.PaneInfo, typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime) {
							fn.(finishBundle2x0[typex.PaneInfo, typex.EventTime]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x0[[]typex.Window, typex.EventTime]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime))
						return &caller2x0[[]typex.Window, typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime) {
							fn.(finishBundle2x0[[]typex.Window, typex.EventTime]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x0[typex.BundleFinalization, I2]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization, I2))
						return &caller2x0[typex.BundleFinalization, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization, I2))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization, a1 I2) {
							fn.(finishBundle2x0[typex.BundleFinalization, I2]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x0[context.Context, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization))
						return &caller2x0[context.Context, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization) {
							fn.(finishBundle2x0[context.Context, typex.BundleFinalization]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x0[typex.PaneInfo, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization))
						return &caller2x0[typex.PaneInfo, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization) {
							fn.(finishBundle2x0[typex.PaneInfo, typex.BundleFinalization]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x0[[]typex.Window, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization))
						return &caller2x0[[]typex.Window, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization) {
							fn.(finishBundle2x0[[]typex.Window, typex.BundleFinalization]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x0[typex.EventTime, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization))
						return &caller2x0[typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization) {
							fn.(finishBundle2x0[typex.EventTime, typex.BundleFinalization]).FinishBundle(a0, a1)
						})
					}
				}
			case finishBundleOut == 1:
				if _, ok := doFn.(finishBundle2x1[I1, I2, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I1, I2) error)
						return &caller2x1[I1, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I1, I2) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I1, a1 I2) error { return fn.(finishBundle2x1[I1, I2, error]).FinishBundle(a0, a1) })
					}
				} else if _, ok := doFn.(finishBundle2x1[context.Context, I2, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, I2) error)
						return &caller2x1[context.Context, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, I2) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 I2) error {
							return fn.(finishBundle2x1[context.Context, I2, error]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x1[typex.PaneInfo, I2, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, I2) error)
						return &caller2x1[typex.PaneInfo, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, I2) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 I2) error {
							return fn.(finishBundle2x1[typex.PaneInfo, I2, error]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x1[context.Context, typex.PaneInfo, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo) error)
						return &caller2x1[context.Context, typex.PaneInfo, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo) error {
							return fn.(finishBundle2x1[context.Context, typex.PaneInfo, error]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x1[[]typex.Window, I2, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, I2) error)
						return &caller2x1[[]typex.Window, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, I2) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 I2) error {
							return fn.(finishBundle2x1[[]typex.Window, I2, error]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x1[context.Context, []typex.Window, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window) error)
						return &caller2x1[context.Context, []typex.Window, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window) error {
							return fn.(finishBundle2x1[context.Context, []typex.Window, error]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x1[typex.PaneInfo, []typex.Window, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window) error)
						return &caller2x1[typex.PaneInfo, []typex.Window, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window) error {
							return fn.(finishBundle2x1[typex.PaneInfo, []typex.Window, error]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x1[typex.EventTime, I2, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, I2) error)
						return &caller2x1[typex.EventTime, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, I2) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 I2) error {
							return fn.(finishBundle2x1[typex.EventTime, I2, error]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x1[context.Context, typex.EventTime, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime) error)
						return &caller2x1[context.Context, typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime) error {
							return fn.(finishBundle2x1[context.Context, typex.EventTime, error]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x1[typex.PaneInfo, typex.EventTime, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime) error)
						return &caller2x1[typex.PaneInfo, typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime) error {
							return fn.(finishBundle2x1[typex.PaneInfo, typex.EventTime, error]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x1[[]typex.Window, typex.EventTime, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime) error)
						return &caller2x1[[]typex.Window, typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime) error {
							return fn.(finishBundle2x1[[]typex.Window, typex.EventTime, error]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x1[typex.BundleFinalization, I2, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization, I2) error)
						return &caller2x1[typex.BundleFinalization, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization, I2) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization, a1 I2) error {
							return fn.(finishBundle2x1[typex.BundleFinalization, I2, error]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x1[context.Context, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization) error)
						return &caller2x1[context.Context, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization) error {
							return fn.(finishBundle2x1[context.Context, typex.BundleFinalization, error]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x1[typex.PaneInfo, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization) error)
						return &caller2x1[typex.PaneInfo, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization) error {
							return fn.(finishBundle2x1[typex.PaneInfo, typex.BundleFinalization, error]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x1[[]typex.Window, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization) error)
						return &caller2x1[[]typex.Window, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization) error {
							return fn.(finishBundle2x1[[]typex.Window, typex.BundleFinalization, error]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x1[typex.EventTime, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization) error)
						return &caller2x1[typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization) error {
							return fn.(finishBundle2x1[typex.EventTime, typex.BundleFinalization, error]).FinishBundle(a0, a1)
						})
					}
				}
			default:
				panic("Invalid signature for FinishBundle")
			}

		case finishBundleIn == 3:
			switch {
			case finishBundleOut == 0:
				if _, ok := doFn.(finishBundle3x0[I0, I1, I2]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I0, I1, I2))
						return &caller3x0[I0, I1, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I0, I1, I2))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I0, a1 I1, a2 I2) { fn.(finishBundle3x0[I0, I1, I2]).FinishBundle(a0, a1, a2) })
					}
				} else if _, ok := doFn.(finishBundle3x0[context.Context, I1, I2]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, I1, I2))
						return &caller3x0[context.Context, I1, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, I1, I2))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 I1, a2 I2) {
							fn.(finishBundle3x0[context.Context, I1, I2]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[typex.PaneInfo, I1, I2]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, I1, I2))
						return &caller3x0[typex.PaneInfo, I1, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, I1, I2))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 I1, a2 I2) {
							fn.(finishBundle3x0[typex.PaneInfo, I1, I2]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[context.Context, typex.PaneInfo, I2]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, I2))
						return &caller3x0[context.Context, typex.PaneInfo, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, I2))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 I2) {
							fn.(finishBundle3x0[context.Context, typex.PaneInfo, I2]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[[]typex.Window, I1, I2]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, I1, I2))
						return &caller3x0[[]typex.Window, I1, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, I1, I2))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 I1, a2 I2) {
							fn.(finishBundle3x0[[]typex.Window, I1, I2]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[context.Context, []typex.Window, I2]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, I2))
						return &caller3x0[context.Context, []typex.Window, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, I2))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 I2) {
							fn.(finishBundle3x0[context.Context, []typex.Window, I2]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[typex.PaneInfo, []typex.Window, I2]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, I2))
						return &caller3x0[typex.PaneInfo, []typex.Window, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, I2))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 I2) {
							fn.(finishBundle3x0[typex.PaneInfo, []typex.Window, I2]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[context.Context, typex.PaneInfo, []typex.Window]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window))
						return &caller3x0[context.Context, typex.PaneInfo, []typex.Window]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window) {
							fn.(finishBundle3x0[context.Context, typex.PaneInfo, []typex.Window]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[typex.EventTime, I1, I2]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, I1, I2))
						return &caller3x0[typex.EventTime, I1, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, I1, I2))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 I1, a2 I2) {
							fn.(finishBundle3x0[typex.EventTime, I1, I2]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[context.Context, typex.EventTime, I2]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, I2))
						return &caller3x0[context.Context, typex.EventTime, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, I2))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 I2) {
							fn.(finishBundle3x0[context.Context, typex.EventTime, I2]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[typex.PaneInfo, typex.EventTime, I2]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, I2))
						return &caller3x0[typex.PaneInfo, typex.EventTime, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, I2))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 I2) {
							fn.(finishBundle3x0[typex.PaneInfo, typex.EventTime, I2]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[context.Context, typex.PaneInfo, typex.EventTime]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime))
						return &caller3x0[context.Context, typex.PaneInfo, typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime) {
							fn.(finishBundle3x0[context.Context, typex.PaneInfo, typex.EventTime]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[[]typex.Window, typex.EventTime, I2]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, I2))
						return &caller3x0[[]typex.Window, typex.EventTime, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, I2))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 I2) {
							fn.(finishBundle3x0[[]typex.Window, typex.EventTime, I2]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[context.Context, []typex.Window, typex.EventTime]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime))
						return &caller3x0[context.Context, []typex.Window, typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime) {
							fn.(finishBundle3x0[context.Context, []typex.Window, typex.EventTime]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[typex.PaneInfo, []typex.Window, typex.EventTime]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime))
						return &caller3x0[typex.PaneInfo, []typex.Window, typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime) {
							fn.(finishBundle3x0[typex.PaneInfo, []typex.Window, typex.EventTime]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[typex.BundleFinalization, I1, I2]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization, I1, I2))
						return &caller3x0[typex.BundleFinalization, I1, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization, I1, I2))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization, a1 I1, a2 I2) {
							fn.(finishBundle3x0[typex.BundleFinalization, I1, I2]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[context.Context, typex.BundleFinalization, I2]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization, I2))
						return &caller3x0[context.Context, typex.BundleFinalization, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization, I2))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization, a2 I2) {
							fn.(finishBundle3x0[context.Context, typex.BundleFinalization, I2]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[typex.PaneInfo, typex.BundleFinalization, I2]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization, I2))
						return &caller3x0[typex.PaneInfo, typex.BundleFinalization, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization, I2))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization, a2 I2) {
							fn.(finishBundle3x0[typex.PaneInfo, typex.BundleFinalization, I2]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[context.Context, typex.PaneInfo, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization))
						return &caller3x0[context.Context, typex.PaneInfo, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization) {
							fn.(finishBundle3x0[context.Context, typex.PaneInfo, typex.BundleFinalization]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[[]typex.Window, typex.BundleFinalization, I2]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization, I2))
						return &caller3x0[[]typex.Window, typex.BundleFinalization, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization, I2))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization, a2 I2) {
							fn.(finishBundle3x0[[]typex.Window, typex.BundleFinalization, I2]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[context.Context, []typex.Window, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization))
						return &caller3x0[context.Context, []typex.Window, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization) {
							fn.(finishBundle3x0[context.Context, []typex.Window, typex.BundleFinalization]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization))
						return &caller3x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization) {
							fn.(finishBundle3x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[typex.EventTime, typex.BundleFinalization, I2]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization, I2))
						return &caller3x0[typex.EventTime, typex.BundleFinalization, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization, I2))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization, a2 I2) {
							fn.(finishBundle3x0[typex.EventTime, typex.BundleFinalization, I2]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[context.Context, typex.EventTime, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization))
						return &caller3x0[context.Context, typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization) {
							fn.(finishBundle3x0[context.Context, typex.EventTime, typex.BundleFinalization]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization))
						return &caller3x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization) {
							fn.(finishBundle3x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[[]typex.Window, typex.EventTime, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization))
						return &caller3x0[[]typex.Window, typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization) {
							fn.(finishBundle3x0[[]typex.Window, typex.EventTime, typex.BundleFinalization]).FinishBundle(a0, a1, a2)
						})
					}
				}
			case finishBundleOut == 1:
				if _, ok := doFn.(finishBundle3x1[I0, I1, I2, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I0, I1, I2) error)
						return &caller3x1[I0, I1, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I0, I1, I2) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I0, a1 I1, a2 I2) error {
							return fn.(finishBundle3x1[I0, I1, I2, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[context.Context, I1, I2, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, I1, I2) error)
						return &caller3x1[context.Context, I1, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, I1, I2) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 I1, a2 I2) error {
							return fn.(finishBundle3x1[context.Context, I1, I2, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[typex.PaneInfo, I1, I2, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, I1, I2) error)
						return &caller3x1[typex.PaneInfo, I1, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, I1, I2) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 I1, a2 I2) error {
							return fn.(finishBundle3x1[typex.PaneInfo, I1, I2, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[context.Context, typex.PaneInfo, I2, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, I2) error)
						return &caller3x1[context.Context, typex.PaneInfo, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, I2) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 I2) error {
							return fn.(finishBundle3x1[context.Context, typex.PaneInfo, I2, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[[]typex.Window, I1, I2, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, I1, I2) error)
						return &caller3x1[[]typex.Window, I1, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, I1, I2) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 I1, a2 I2) error {
							return fn.(finishBundle3x1[[]typex.Window, I1, I2, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[context.Context, []typex.Window, I2, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, I2) error)
						return &caller3x1[context.Context, []typex.Window, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, I2) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 I2) error {
							return fn.(finishBundle3x1[context.Context, []typex.Window, I2, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[typex.PaneInfo, []typex.Window, I2, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, I2) error)
						return &caller3x1[typex.PaneInfo, []typex.Window, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, I2) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 I2) error {
							return fn.(finishBundle3x1[typex.PaneInfo, []typex.Window, I2, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[context.Context, typex.PaneInfo, []typex.Window, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window) error)
						return &caller3x1[context.Context, typex.PaneInfo, []typex.Window, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window) error {
							return fn.(finishBundle3x1[context.Context, typex.PaneInfo, []typex.Window, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[typex.EventTime, I1, I2, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, I1, I2) error)
						return &caller3x1[typex.EventTime, I1, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, I1, I2) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 I1, a2 I2) error {
							return fn.(finishBundle3x1[typex.EventTime, I1, I2, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[context.Context, typex.EventTime, I2, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, I2) error)
						return &caller3x1[context.Context, typex.EventTime, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, I2) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 I2) error {
							return fn.(finishBundle3x1[context.Context, typex.EventTime, I2, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[typex.PaneInfo, typex.EventTime, I2, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, I2) error)
						return &caller3x1[typex.PaneInfo, typex.EventTime, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, I2) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 I2) error {
							return fn.(finishBundle3x1[typex.PaneInfo, typex.EventTime, I2, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[context.Context, typex.PaneInfo, typex.EventTime, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime) error)
						return &caller3x1[context.Context, typex.PaneInfo, typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime) error {
							return fn.(finishBundle3x1[context.Context, typex.PaneInfo, typex.EventTime, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[[]typex.Window, typex.EventTime, I2, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, I2) error)
						return &caller3x1[[]typex.Window, typex.EventTime, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, I2) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 I2) error {
							return fn.(finishBundle3x1[[]typex.Window, typex.EventTime, I2, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[context.Context, []typex.Window, typex.EventTime, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime) error)
						return &caller3x1[context.Context, []typex.Window, typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime) error {
							return fn.(finishBundle3x1[context.Context, []typex.Window, typex.EventTime, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[typex.PaneInfo, []typex.Window, typex.EventTime, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime) error)
						return &caller3x1[typex.PaneInfo, []typex.Window, typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime) error {
							return fn.(finishBundle3x1[typex.PaneInfo, []typex.Window, typex.EventTime, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[typex.BundleFinalization, I1, I2, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization, I1, I2) error)
						return &caller3x1[typex.BundleFinalization, I1, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization, I1, I2) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization, a1 I1, a2 I2) error {
							return fn.(finishBundle3x1[typex.BundleFinalization, I1, I2, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[context.Context, typex.BundleFinalization, I2, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization, I2) error)
						return &caller3x1[context.Context, typex.BundleFinalization, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization, I2) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization, a2 I2) error {
							return fn.(finishBundle3x1[context.Context, typex.BundleFinalization, I2, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[typex.PaneInfo, typex.BundleFinalization, I2, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization, I2) error)
						return &caller3x1[typex.PaneInfo, typex.BundleFinalization, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization, I2) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization, a2 I2) error {
							return fn.(finishBundle3x1[typex.PaneInfo, typex.BundleFinalization, I2, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[context.Context, typex.PaneInfo, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization) error)
						return &caller3x1[context.Context, typex.PaneInfo, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization) error {
							return fn.(finishBundle3x1[context.Context, typex.PaneInfo, typex.BundleFinalization, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[[]typex.Window, typex.BundleFinalization, I2, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization, I2) error)
						return &caller3x1[[]typex.Window, typex.BundleFinalization, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization, I2) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization, a2 I2) error {
							return fn.(finishBundle3x1[[]typex.Window, typex.BundleFinalization, I2, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[context.Context, []typex.Window, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization) error)
						return &caller3x1[context.Context, []typex.Window, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization) error {
							return fn.(finishBundle3x1[context.Context, []typex.Window, typex.BundleFinalization, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization) error)
						return &caller3x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization) error {
							return fn.(finishBundle3x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[typex.EventTime, typex.BundleFinalization, I2, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization, I2) error)
						return &caller3x1[typex.EventTime, typex.BundleFinalization, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization, I2) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization, a2 I2) error {
							return fn.(finishBundle3x1[typex.EventTime, typex.BundleFinalization, I2, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[context.Context, typex.EventTime, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization) error)
						return &caller3x1[context.Context, typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization) error {
							return fn.(finishBundle3x1[context.Context, typex.EventTime, typex.BundleFinalization, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization) error)
						return &caller3x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization) error {
							return fn.(finishBundle3x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization) error)
						return &caller3x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization) error {
							return fn.(finishBundle3x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, error]).FinishBundle(a0, a1, a2)
						})
					}
				}
			default:
				panic("Invalid signature for FinishBundle")
			}

		case finishBundleIn == 4:
			switch {
			case finishBundleOut == 0:
				if _, ok := doFn.(finishBundle4x0[context.Context, I0, I1, I2]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, I0, I1, I2))
						return &caller4x0[context.Context, I0, I1, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, I0, I1, I2))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 I0, a2 I1, a3 I2) {
							fn.(finishBundle4x0[context.Context, I0, I1, I2]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[typex.PaneInfo, I0, I1, I2]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, I0, I1, I2))
						return &caller4x0[typex.PaneInfo, I0, I1, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, I0, I1, I2))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 I0, a2 I1, a3 I2) {
							fn.(finishBundle4x0[typex.PaneInfo, I0, I1, I2]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[context.Context, typex.PaneInfo, I1, I2]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, I1, I2))
						return &caller4x0[context.Context, typex.PaneInfo, I1, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, I1, I2))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 I1, a3 I2) {
							fn.(finishBundle4x0[context.Context, typex.PaneInfo, I1, I2]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[[]typex.Window, I0, I1, I2]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, I0, I1, I2))
						return &caller4x0[[]typex.Window, I0, I1, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, I0, I1, I2))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 I0, a2 I1, a3 I2) {
							fn.(finishBundle4x0[[]typex.Window, I0, I1, I2]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[context.Context, []typex.Window, I1, I2]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, I1, I2))
						return &caller4x0[context.Context, []typex.Window, I1, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, I1, I2))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 I1, a3 I2) {
							fn.(finishBundle4x0[context.Context, []typex.Window, I1, I2]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[typex.PaneInfo, []typex.Window, I1, I2]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, I1, I2))
						return &caller4x0[typex.PaneInfo, []typex.Window, I1, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, I1, I2))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 I1, a3 I2) {
							fn.(finishBundle4x0[typex.PaneInfo, []typex.Window, I1, I2]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[context.Context, typex.PaneInfo, []typex.Window, I2]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, I2))
						return &caller4x0[context.Context, typex.PaneInfo, []typex.Window, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, I2))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 I2) {
							fn.(finishBundle4x0[context.Context, typex.PaneInfo, []typex.Window, I2]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[typex.EventTime, I0, I1, I2]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, I0, I1, I2))
						return &caller4x0[typex.EventTime, I0, I1, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, I0, I1, I2))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 I0, a2 I1, a3 I2) {
							fn.(finishBundle4x0[typex.EventTime, I0, I1, I2]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[context.Context, typex.EventTime, I1, I2]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, I1, I2))
						return &caller4x0[context.Context, typex.EventTime, I1, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, I1, I2))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 I1, a3 I2) {
							fn.(finishBundle4x0[context.Context, typex.EventTime, I1, I2]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[typex.PaneInfo, typex.EventTime, I1, I2]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, I1, I2))
						return &caller4x0[typex.PaneInfo, typex.EventTime, I1, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, I1, I2))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 I1, a3 I2) {
							fn.(finishBundle4x0[typex.PaneInfo, typex.EventTime, I1, I2]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[context.Context, typex.PaneInfo, typex.EventTime, I2]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, I2))
						return &caller4x0[context.Context, typex.PaneInfo, typex.EventTime, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, I2))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 I2) {
							fn.(finishBundle4x0[context.Context, typex.PaneInfo, typex.EventTime, I2]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[[]typex.Window, typex.EventTime, I1, I2]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, I1, I2))
						return &caller4x0[[]typex.Window, typex.EventTime, I1, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, I1, I2))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 I1, a3 I2) {
							fn.(finishBundle4x0[[]typex.Window, typex.EventTime, I1, I2]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[context.Context, []typex.Window, typex.EventTime, I2]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, I2))
						return &caller4x0[context.Context, []typex.Window, typex.EventTime, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, I2))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 I2) {
							fn.(finishBundle4x0[context.Context, []typex.Window, typex.EventTime, I2]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[typex.PaneInfo, []typex.Window, typex.EventTime, I2]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, I2))
						return &caller4x0[typex.PaneInfo, []typex.Window, typex.EventTime, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, I2))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 I2) {
							fn.(finishBundle4x0[typex.PaneInfo, []typex.Window, typex.EventTime, I2]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime))
						return &caller4x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime) {
							fn.(finishBundle4x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[typex.BundleFinalization, I0, I1, I2]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization, I0, I1, I2))
						return &caller4x0[typex.BundleFinalization, I0, I1, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization, I0, I1, I2))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization, a1 I0, a2 I1, a3 I2) {
							fn.(finishBundle4x0[typex.BundleFinalization, I0, I1, I2]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[context.Context, typex.BundleFinalization, I1, I2]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization, I1, I2))
						return &caller4x0[context.Context, typex.BundleFinalization, I1, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization, I1, I2))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization, a2 I1, a3 I2) {
							fn.(finishBundle4x0[context.Context, typex.BundleFinalization, I1, I2]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[typex.PaneInfo, typex.BundleFinalization, I1, I2]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization, I1, I2))
						return &caller4x0[typex.PaneInfo, typex.BundleFinalization, I1, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization, I1, I2))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization, a2 I1, a3 I2) {
							fn.(finishBundle4x0[typex.PaneInfo, typex.BundleFinalization, I1, I2]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I2]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization, I2))
						return &caller4x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization, I2))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization, a3 I2) {
							fn.(finishBundle4x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I2]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[[]typex.Window, typex.BundleFinalization, I1, I2]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization, I1, I2))
						return &caller4x0[[]typex.Window, typex.BundleFinalization, I1, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization, I1, I2))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization, a2 I1, a3 I2) {
							fn.(finishBundle4x0[[]typex.Window, typex.BundleFinalization, I1, I2]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[context.Context, []typex.Window, typex.BundleFinalization, I2]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization, I2))
						return &caller4x0[context.Context, []typex.Window, typex.BundleFinalization, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization, I2))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization, a3 I2) {
							fn.(finishBundle4x0[context.Context, []typex.Window, typex.BundleFinalization, I2]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2))
						return &caller4x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization, a3 I2) {
							fn.(finishBundle4x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization))
						return &caller4x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.BundleFinalization) {
							fn.(finishBundle4x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[typex.EventTime, typex.BundleFinalization, I1, I2]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization, I1, I2))
						return &caller4x0[typex.EventTime, typex.BundleFinalization, I1, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization, I1, I2))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization, a2 I1, a3 I2) {
							fn.(finishBundle4x0[typex.EventTime, typex.BundleFinalization, I1, I2]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[context.Context, typex.EventTime, typex.BundleFinalization, I2]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization, I2))
						return &caller4x0[context.Context, typex.EventTime, typex.BundleFinalization, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization, I2))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I2) {
							fn.(finishBundle4x0[context.Context, typex.EventTime, typex.BundleFinalization, I2]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2))
						return &caller4x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I2) {
							fn.(finishBundle4x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization))
						return &caller4x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 typex.BundleFinalization) {
							fn.(finishBundle4x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I2]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization, I2))
						return &caller4x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization, I2))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I2) {
							fn.(finishBundle4x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I2]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization))
						return &caller4x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization) {
							fn.(finishBundle4x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization))
						return &caller4x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization) {
							fn.(finishBundle4x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization]).FinishBundle(a0, a1, a2, a3)
						})
					}
				}
			case finishBundleOut == 1:
				if _, ok := doFn.(finishBundle4x1[context.Context, I0, I1, I2, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, I0, I1, I2) error)
						return &caller4x1[context.Context, I0, I1, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, I0, I1, I2) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 I0, a2 I1, a3 I2) error {
							return fn.(finishBundle4x1[context.Context, I0, I1, I2, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[typex.PaneInfo, I0, I1, I2, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, I0, I1, I2) error)
						return &caller4x1[typex.PaneInfo, I0, I1, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, I0, I1, I2) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 I0, a2 I1, a3 I2) error {
							return fn.(finishBundle4x1[typex.PaneInfo, I0, I1, I2, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[context.Context, typex.PaneInfo, I1, I2, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, I1, I2) error)
						return &caller4x1[context.Context, typex.PaneInfo, I1, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, I1, I2) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 I1, a3 I2) error {
							return fn.(finishBundle4x1[context.Context, typex.PaneInfo, I1, I2, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[[]typex.Window, I0, I1, I2, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, I0, I1, I2) error)
						return &caller4x1[[]typex.Window, I0, I1, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, I0, I1, I2) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 I0, a2 I1, a3 I2) error {
							return fn.(finishBundle4x1[[]typex.Window, I0, I1, I2, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[context.Context, []typex.Window, I1, I2, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, I1, I2) error)
						return &caller4x1[context.Context, []typex.Window, I1, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, I1, I2) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 I1, a3 I2) error {
							return fn.(finishBundle4x1[context.Context, []typex.Window, I1, I2, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[typex.PaneInfo, []typex.Window, I1, I2, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, I1, I2) error)
						return &caller4x1[typex.PaneInfo, []typex.Window, I1, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, I1, I2) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 I1, a3 I2) error {
							return fn.(finishBundle4x1[typex.PaneInfo, []typex.Window, I1, I2, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[context.Context, typex.PaneInfo, []typex.Window, I2, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, I2) error)
						return &caller4x1[context.Context, typex.PaneInfo, []typex.Window, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, I2) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 I2) error {
							return fn.(finishBundle4x1[context.Context, typex.PaneInfo, []typex.Window, I2, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[typex.EventTime, I0, I1, I2, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, I0, I1, I2) error)
						return &caller4x1[typex.EventTime, I0, I1, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, I0, I1, I2) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 I0, a2 I1, a3 I2) error {
							return fn.(finishBundle4x1[typex.EventTime, I0, I1, I2, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[context.Context, typex.EventTime, I1, I2, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, I1, I2) error)
						return &caller4x1[context.Context, typex.EventTime, I1, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, I1, I2) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 I1, a3 I2) error {
							return fn.(finishBundle4x1[context.Context, typex.EventTime, I1, I2, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[typex.PaneInfo, typex.EventTime, I1, I2, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, I1, I2) error)
						return &caller4x1[typex.PaneInfo, typex.EventTime, I1, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, I1, I2) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 I1, a3 I2) error {
							return fn.(finishBundle4x1[typex.PaneInfo, typex.EventTime, I1, I2, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[context.Context, typex.PaneInfo, typex.EventTime, I2, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, I2) error)
						return &caller4x1[context.Context, typex.PaneInfo, typex.EventTime, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, I2) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 I2) error {
							return fn.(finishBundle4x1[context.Context, typex.PaneInfo, typex.EventTime, I2, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[[]typex.Window, typex.EventTime, I1, I2, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, I1, I2) error)
						return &caller4x1[[]typex.Window, typex.EventTime, I1, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, I1, I2) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 I1, a3 I2) error {
							return fn.(finishBundle4x1[[]typex.Window, typex.EventTime, I1, I2, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[context.Context, []typex.Window, typex.EventTime, I2, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, I2) error)
						return &caller4x1[context.Context, []typex.Window, typex.EventTime, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, I2) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 I2) error {
							return fn.(finishBundle4x1[context.Context, []typex.Window, typex.EventTime, I2, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[typex.PaneInfo, []typex.Window, typex.EventTime, I2, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, I2) error)
						return &caller4x1[typex.PaneInfo, []typex.Window, typex.EventTime, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, I2) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 I2) error {
							return fn.(finishBundle4x1[typex.PaneInfo, []typex.Window, typex.EventTime, I2, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime) error)
						return &caller4x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime) error {
							return fn.(finishBundle4x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[typex.BundleFinalization, I0, I1, I2, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization, I0, I1, I2) error)
						return &caller4x1[typex.BundleFinalization, I0, I1, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization, I0, I1, I2) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization, a1 I0, a2 I1, a3 I2) error {
							return fn.(finishBundle4x1[typex.BundleFinalization, I0, I1, I2, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[context.Context, typex.BundleFinalization, I1, I2, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization, I1, I2) error)
						return &caller4x1[context.Context, typex.BundleFinalization, I1, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization, I1, I2) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization, a2 I1, a3 I2) error {
							return fn.(finishBundle4x1[context.Context, typex.BundleFinalization, I1, I2, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[typex.PaneInfo, typex.BundleFinalization, I1, I2, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization, I1, I2) error)
						return &caller4x1[typex.PaneInfo, typex.BundleFinalization, I1, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization, I1, I2) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization, a2 I1, a3 I2) error {
							return fn.(finishBundle4x1[typex.PaneInfo, typex.BundleFinalization, I1, I2, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I2, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization, I2) error)
						return &caller4x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization, I2) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization, a3 I2) error {
							return fn.(finishBundle4x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I2, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[[]typex.Window, typex.BundleFinalization, I1, I2, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization, I1, I2) error)
						return &caller4x1[[]typex.Window, typex.BundleFinalization, I1, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization, I1, I2) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization, a2 I1, a3 I2) error {
							return fn.(finishBundle4x1[[]typex.Window, typex.BundleFinalization, I1, I2, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[context.Context, []typex.Window, typex.BundleFinalization, I2, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization, I2) error)
						return &caller4x1[context.Context, []typex.Window, typex.BundleFinalization, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization, I2) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization, a3 I2) error {
							return fn.(finishBundle4x1[context.Context, []typex.Window, typex.BundleFinalization, I2, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2) error)
						return &caller4x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization, a3 I2) error {
							return fn.(finishBundle4x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization) error)
						return &caller4x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.BundleFinalization) error {
							return fn.(finishBundle4x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[typex.EventTime, typex.BundleFinalization, I1, I2, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization, I1, I2) error)
						return &caller4x1[typex.EventTime, typex.BundleFinalization, I1, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization, I1, I2) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization, a2 I1, a3 I2) error {
							return fn.(finishBundle4x1[typex.EventTime, typex.BundleFinalization, I1, I2, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[context.Context, typex.EventTime, typex.BundleFinalization, I2, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization, I2) error)
						return &caller4x1[context.Context, typex.EventTime, typex.BundleFinalization, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization, I2) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I2) error {
							return fn.(finishBundle4x1[context.Context, typex.EventTime, typex.BundleFinalization, I2, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2) error)
						return &caller4x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I2) error {
							return fn.(finishBundle4x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization) error)
						return &caller4x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 typex.BundleFinalization) error {
							return fn.(finishBundle4x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I2, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization, I2) error)
						return &caller4x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization, I2) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I2) error {
							return fn.(finishBundle4x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I2, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization) error)
						return &caller4x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization) error {
							return fn.(finishBundle4x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization) error)
						return &caller4x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization) error {
							return fn.(finishBundle4x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				}
			default:
				panic("Invalid signature for FinishBundle")
			}

		case finishBundleIn == 5:
			switch {
			case finishBundleOut == 0:
				if _, ok := doFn.(finishBundle5x0[context.Context, typex.PaneInfo, I0, I1, I2]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, I0, I1, I2))
						return &caller5x0[context.Context, typex.PaneInfo, I0, I1, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, I0, I1, I2))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 I0, a3 I1, a4 I2) {
							fn.(finishBundle5x0[context.Context, typex.PaneInfo, I0, I1, I2]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[context.Context, []typex.Window, I0, I1, I2]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, I0, I1, I2))
						return &caller5x0[context.Context, []typex.Window, I0, I1, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, I0, I1, I2))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 I0, a3 I1, a4 I2) {
							fn.(finishBundle5x0[context.Context, []typex.Window, I0, I1, I2]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[typex.PaneInfo, []typex.Window, I0, I1, I2]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, I0, I1, I2))
						return &caller5x0[typex.PaneInfo, []typex.Window, I0, I1, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, I0, I1, I2))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 I0, a3 I1, a4 I2) {
							fn.(finishBundle5x0[typex.PaneInfo, []typex.Window, I0, I1, I2]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[context.Context, typex.PaneInfo, []typex.Window, I1, I2]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, I1, I2))
						return &caller5x0[context.Context, typex.PaneInfo, []typex.Window, I1, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, I1, I2))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 I1, a4 I2) {
							fn.(finishBundle5x0[context.Context, typex.PaneInfo, []typex.Window, I1, I2]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[context.Context, typex.EventTime, I0, I1, I2]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, I0, I1, I2))
						return &caller5x0[context.Context, typex.EventTime, I0, I1, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, I0, I1, I2))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 I0, a3 I1, a4 I2) {
							fn.(finishBundle5x0[context.Context, typex.EventTime, I0, I1, I2]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[typex.PaneInfo, typex.EventTime, I0, I1, I2]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, I0, I1, I2))
						return &caller5x0[typex.PaneInfo, typex.EventTime, I0, I1, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, I0, I1, I2))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 I0, a3 I1, a4 I2) {
							fn.(finishBundle5x0[typex.PaneInfo, typex.EventTime, I0, I1, I2]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[context.Context, typex.PaneInfo, typex.EventTime, I1, I2]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, I1, I2))
						return &caller5x0[context.Context, typex.PaneInfo, typex.EventTime, I1, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, I1, I2))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 I1, a4 I2) {
							fn.(finishBundle5x0[context.Context, typex.PaneInfo, typex.EventTime, I1, I2]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[[]typex.Window, typex.EventTime, I0, I1, I2]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, I0, I1, I2))
						return &caller5x0[[]typex.Window, typex.EventTime, I0, I1, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, I0, I1, I2))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 I0, a3 I1, a4 I2) {
							fn.(finishBundle5x0[[]typex.Window, typex.EventTime, I0, I1, I2]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[context.Context, []typex.Window, typex.EventTime, I1, I2]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, I1, I2))
						return &caller5x0[context.Context, []typex.Window, typex.EventTime, I1, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, I1, I2))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 I1, a4 I2) {
							fn.(finishBundle5x0[context.Context, []typex.Window, typex.EventTime, I1, I2]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[typex.PaneInfo, []typex.Window, typex.EventTime, I1, I2]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, I1, I2))
						return &caller5x0[typex.PaneInfo, []typex.Window, typex.EventTime, I1, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, I1, I2))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 I1, a4 I2) {
							fn.(finishBundle5x0[typex.PaneInfo, []typex.Window, typex.EventTime, I1, I2]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I2]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I2))
						return &caller5x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I2))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 I2) {
							fn.(finishBundle5x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I2]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[context.Context, typex.BundleFinalization, I0, I1, I2]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization, I0, I1, I2))
						return &caller5x0[context.Context, typex.BundleFinalization, I0, I1, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization, I0, I1, I2))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization, a2 I0, a3 I1, a4 I2) {
							fn.(finishBundle5x0[context.Context, typex.BundleFinalization, I0, I1, I2]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[typex.PaneInfo, typex.BundleFinalization, I0, I1, I2]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization, I0, I1, I2))
						return &caller5x0[typex.PaneInfo, typex.BundleFinalization, I0, I1, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization, I0, I1, I2))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization, a2 I0, a3 I1, a4 I2) {
							fn.(finishBundle5x0[typex.PaneInfo, typex.BundleFinalization, I0, I1, I2]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I1, I2]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization, I1, I2))
						return &caller5x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I1, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization, I1, I2))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization, a3 I1, a4 I2) {
							fn.(finishBundle5x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I1, I2]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[[]typex.Window, typex.BundleFinalization, I0, I1, I2]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization, I0, I1, I2))
						return &caller5x0[[]typex.Window, typex.BundleFinalization, I0, I1, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization, I0, I1, I2))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization, a2 I0, a3 I1, a4 I2) {
							fn.(finishBundle5x0[[]typex.Window, typex.BundleFinalization, I0, I1, I2]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[context.Context, []typex.Window, typex.BundleFinalization, I1, I2]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization, I1, I2))
						return &caller5x0[context.Context, []typex.Window, typex.BundleFinalization, I1, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization, I1, I2))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization, a3 I1, a4 I2) {
							fn.(finishBundle5x0[context.Context, []typex.Window, typex.BundleFinalization, I1, I2]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1, I2]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1, I2))
						return &caller5x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1, I2))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization, a3 I1, a4 I2) {
							fn.(finishBundle5x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1, I2]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2))
						return &caller5x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.BundleFinalization, a4 I2) {
							fn.(finishBundle5x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[typex.EventTime, typex.BundleFinalization, I0, I1, I2]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization, I0, I1, I2))
						return &caller5x0[typex.EventTime, typex.BundleFinalization, I0, I1, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization, I0, I1, I2))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization, a2 I0, a3 I1, a4 I2) {
							fn.(finishBundle5x0[typex.EventTime, typex.BundleFinalization, I0, I1, I2]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[context.Context, typex.EventTime, typex.BundleFinalization, I1, I2]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization, I1, I2))
						return &caller5x0[context.Context, typex.EventTime, typex.BundleFinalization, I1, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization, I1, I2))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I1, a4 I2) {
							fn.(finishBundle5x0[context.Context, typex.EventTime, typex.BundleFinalization, I1, I2]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1, I2]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1, I2))
						return &caller5x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1, I2))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I1, a4 I2) {
							fn.(finishBundle5x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1, I2]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2))
						return &caller5x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I2) {
							fn.(finishBundle5x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2))
						return &caller5x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I1, a4 I2) {
							fn.(finishBundle5x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I2]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I2))
						return &caller5x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I2))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I2) {
							fn.(finishBundle5x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I2]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I2]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I2))
						return &caller5x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I2))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I2) {
							fn.(finishBundle5x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I2]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization))
						return &caller5x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 typex.BundleFinalization) {
							fn.(finishBundle5x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				}
			case finishBundleOut == 1:
				if _, ok := doFn.(finishBundle5x1[context.Context, typex.PaneInfo, I0, I1, I2, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, I0, I1, I2) error)
						return &caller5x1[context.Context, typex.PaneInfo, I0, I1, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, I0, I1, I2) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 I0, a3 I1, a4 I2) error {
							return fn.(finishBundle5x1[context.Context, typex.PaneInfo, I0, I1, I2, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[context.Context, []typex.Window, I0, I1, I2, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, I0, I1, I2) error)
						return &caller5x1[context.Context, []typex.Window, I0, I1, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, I0, I1, I2) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 I0, a3 I1, a4 I2) error {
							return fn.(finishBundle5x1[context.Context, []typex.Window, I0, I1, I2, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[typex.PaneInfo, []typex.Window, I0, I1, I2, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, I0, I1, I2) error)
						return &caller5x1[typex.PaneInfo, []typex.Window, I0, I1, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, I0, I1, I2) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 I0, a3 I1, a4 I2) error {
							return fn.(finishBundle5x1[typex.PaneInfo, []typex.Window, I0, I1, I2, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[context.Context, typex.PaneInfo, []typex.Window, I1, I2, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, I1, I2) error)
						return &caller5x1[context.Context, typex.PaneInfo, []typex.Window, I1, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, I1, I2) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 I1, a4 I2) error {
							return fn.(finishBundle5x1[context.Context, typex.PaneInfo, []typex.Window, I1, I2, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[context.Context, typex.EventTime, I0, I1, I2, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, I0, I1, I2) error)
						return &caller5x1[context.Context, typex.EventTime, I0, I1, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, I0, I1, I2) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 I0, a3 I1, a4 I2) error {
							return fn.(finishBundle5x1[context.Context, typex.EventTime, I0, I1, I2, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[typex.PaneInfo, typex.EventTime, I0, I1, I2, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, I0, I1, I2) error)
						return &caller5x1[typex.PaneInfo, typex.EventTime, I0, I1, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, I0, I1, I2) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 I0, a3 I1, a4 I2) error {
							return fn.(finishBundle5x1[typex.PaneInfo, typex.EventTime, I0, I1, I2, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[context.Context, typex.PaneInfo, typex.EventTime, I1, I2, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, I1, I2) error)
						return &caller5x1[context.Context, typex.PaneInfo, typex.EventTime, I1, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, I1, I2) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 I1, a4 I2) error {
							return fn.(finishBundle5x1[context.Context, typex.PaneInfo, typex.EventTime, I1, I2, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[[]typex.Window, typex.EventTime, I0, I1, I2, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, I0, I1, I2) error)
						return &caller5x1[[]typex.Window, typex.EventTime, I0, I1, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, I0, I1, I2) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 I0, a3 I1, a4 I2) error {
							return fn.(finishBundle5x1[[]typex.Window, typex.EventTime, I0, I1, I2, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[context.Context, []typex.Window, typex.EventTime, I1, I2, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, I1, I2) error)
						return &caller5x1[context.Context, []typex.Window, typex.EventTime, I1, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, I1, I2) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 I1, a4 I2) error {
							return fn.(finishBundle5x1[context.Context, []typex.Window, typex.EventTime, I1, I2, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[typex.PaneInfo, []typex.Window, typex.EventTime, I1, I2, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, I1, I2) error)
						return &caller5x1[typex.PaneInfo, []typex.Window, typex.EventTime, I1, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, I1, I2) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 I1, a4 I2) error {
							return fn.(finishBundle5x1[typex.PaneInfo, []typex.Window, typex.EventTime, I1, I2, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I2, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I2) error)
						return &caller5x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I2) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 I2) error {
							return fn.(finishBundle5x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I2, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[context.Context, typex.BundleFinalization, I0, I1, I2, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization, I0, I1, I2) error)
						return &caller5x1[context.Context, typex.BundleFinalization, I0, I1, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization, I0, I1, I2) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization, a2 I0, a3 I1, a4 I2) error {
							return fn.(finishBundle5x1[context.Context, typex.BundleFinalization, I0, I1, I2, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[typex.PaneInfo, typex.BundleFinalization, I0, I1, I2, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization, I0, I1, I2) error)
						return &caller5x1[typex.PaneInfo, typex.BundleFinalization, I0, I1, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization, I0, I1, I2) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization, a2 I0, a3 I1, a4 I2) error {
							return fn.(finishBundle5x1[typex.PaneInfo, typex.BundleFinalization, I0, I1, I2, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I1, I2, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization, I1, I2) error)
						return &caller5x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I1, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization, I1, I2) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization, a3 I1, a4 I2) error {
							return fn.(finishBundle5x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I1, I2, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[[]typex.Window, typex.BundleFinalization, I0, I1, I2, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization, I0, I1, I2) error)
						return &caller5x1[[]typex.Window, typex.BundleFinalization, I0, I1, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization, I0, I1, I2) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization, a2 I0, a3 I1, a4 I2) error {
							return fn.(finishBundle5x1[[]typex.Window, typex.BundleFinalization, I0, I1, I2, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[context.Context, []typex.Window, typex.BundleFinalization, I1, I2, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization, I1, I2) error)
						return &caller5x1[context.Context, []typex.Window, typex.BundleFinalization, I1, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization, I1, I2) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization, a3 I1, a4 I2) error {
							return fn.(finishBundle5x1[context.Context, []typex.Window, typex.BundleFinalization, I1, I2, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1, I2, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1, I2) error)
						return &caller5x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1, I2) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization, a3 I1, a4 I2) error {
							return fn.(finishBundle5x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1, I2, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2) error)
						return &caller5x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.BundleFinalization, a4 I2) error {
							return fn.(finishBundle5x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[typex.EventTime, typex.BundleFinalization, I0, I1, I2, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization, I0, I1, I2) error)
						return &caller5x1[typex.EventTime, typex.BundleFinalization, I0, I1, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization, I0, I1, I2) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization, a2 I0, a3 I1, a4 I2) error {
							return fn.(finishBundle5x1[typex.EventTime, typex.BundleFinalization, I0, I1, I2, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[context.Context, typex.EventTime, typex.BundleFinalization, I1, I2, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization, I1, I2) error)
						return &caller5x1[context.Context, typex.EventTime, typex.BundleFinalization, I1, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization, I1, I2) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I1, a4 I2) error {
							return fn.(finishBundle5x1[context.Context, typex.EventTime, typex.BundleFinalization, I1, I2, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1, I2, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1, I2) error)
						return &caller5x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1, I2) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I1, a4 I2) error {
							return fn.(finishBundle5x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1, I2, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2) error)
						return &caller5x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I2) error {
							return fn.(finishBundle5x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2) error)
						return &caller5x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I1, a4 I2) error {
							return fn.(finishBundle5x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I2, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I2) error)
						return &caller5x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I2) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I2) error {
							return fn.(finishBundle5x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I2, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I2, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I2) error)
						return &caller5x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I2) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I2) error {
							return fn.(finishBundle5x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I2, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization) error)
						return &caller5x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 typex.BundleFinalization) error {
							return fn.(finishBundle5x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				}
			default:
				panic("Invalid signature for FinishBundle")
			}

		case finishBundleIn == 6:
			switch {
			case finishBundleOut == 0:
				if _, ok := doFn.(finishBundle6x0[context.Context, typex.PaneInfo, []typex.Window, I0, I1, I2]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, I0, I1, I2))
						return &caller6x0[context.Context, typex.PaneInfo, []typex.Window, I0, I1, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, I0, I1, I2))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 I0, a4 I1, a5 I2) {
							fn.(finishBundle6x0[context.Context, typex.PaneInfo, []typex.Window, I0, I1, I2]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[context.Context, typex.PaneInfo, typex.EventTime, I0, I1, I2]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, I0, I1, I2))
						return &caller6x0[context.Context, typex.PaneInfo, typex.EventTime, I0, I1, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, I0, I1, I2))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 I0, a4 I1, a5 I2) {
							fn.(finishBundle6x0[context.Context, typex.PaneInfo, typex.EventTime, I0, I1, I2]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[context.Context, []typex.Window, typex.EventTime, I0, I1, I2]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, I0, I1, I2))
						return &caller6x0[context.Context, []typex.Window, typex.EventTime, I0, I1, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, I0, I1, I2))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 I0, a4 I1, a5 I2) {
							fn.(finishBundle6x0[context.Context, []typex.Window, typex.EventTime, I0, I1, I2]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[typex.PaneInfo, []typex.Window, typex.EventTime, I0, I1, I2]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, I0, I1, I2))
						return &caller6x0[typex.PaneInfo, []typex.Window, typex.EventTime, I0, I1, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, I0, I1, I2))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 I0, a4 I1, a5 I2) {
							fn.(finishBundle6x0[typex.PaneInfo, []typex.Window, typex.EventTime, I0, I1, I2]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I1, I2]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I1, I2))
						return &caller6x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I1, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I1, I2))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 I1, a5 I2) {
							fn.(finishBundle6x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I1, I2]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I0, I1, I2]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization, I0, I1, I2))
						return &caller6x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I0, I1, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization, I0, I1, I2))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization, a3 I0, a4 I1, a5 I2) {
							fn.(finishBundle6x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I0, I1, I2]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[context.Context, []typex.Window, typex.BundleFinalization, I0, I1, I2]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization, I0, I1, I2))
						return &caller6x0[context.Context, []typex.Window, typex.BundleFinalization, I0, I1, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization, I0, I1, I2))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization, a3 I0, a4 I1, a5 I2) {
							fn.(finishBundle6x0[context.Context, []typex.Window, typex.BundleFinalization, I0, I1, I2]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0, I1, I2]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0, I1, I2))
						return &caller6x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0, I1, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0, I1, I2))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization, a3 I0, a4 I1, a5 I2) {
							fn.(finishBundle6x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0, I1, I2]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1, I2]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1, I2))
						return &caller6x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1, I2))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.BundleFinalization, a4 I1, a5 I2) {
							fn.(finishBundle6x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1, I2]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[context.Context, typex.EventTime, typex.BundleFinalization, I0, I1, I2]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization, I0, I1, I2))
						return &caller6x0[context.Context, typex.EventTime, typex.BundleFinalization, I0, I1, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization, I0, I1, I2))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I0, a4 I1, a5 I2) {
							fn.(finishBundle6x0[context.Context, typex.EventTime, typex.BundleFinalization, I0, I1, I2]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0, I1, I2]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0, I1, I2))
						return &caller6x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0, I1, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0, I1, I2))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I0, a4 I1, a5 I2) {
							fn.(finishBundle6x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0, I1, I2]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1, I2]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1, I2))
						return &caller6x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1, I2))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I1, a5 I2) {
							fn.(finishBundle6x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1, I2]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1, I2]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1, I2))
						return &caller6x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1, I2))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I0, a4 I1, a5 I2) {
							fn.(finishBundle6x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1, I2]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2))
						return &caller6x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I1, a5 I2) {
							fn.(finishBundle6x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2))
						return &caller6x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I1, a5 I2) {
							fn.(finishBundle6x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I2]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I2))
						return &caller6x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I2))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 typex.BundleFinalization, a5 I2) {
							fn.(finishBundle6x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I2]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				}
			case finishBundleOut == 1:
				if _, ok := doFn.(finishBundle6x1[context.Context, typex.PaneInfo, []typex.Window, I0, I1, I2, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, I0, I1, I2) error)
						return &caller6x1[context.Context, typex.PaneInfo, []typex.Window, I0, I1, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, I0, I1, I2) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 I0, a4 I1, a5 I2) error {
							return fn.(finishBundle6x1[context.Context, typex.PaneInfo, []typex.Window, I0, I1, I2, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[context.Context, typex.PaneInfo, typex.EventTime, I0, I1, I2, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, I0, I1, I2) error)
						return &caller6x1[context.Context, typex.PaneInfo, typex.EventTime, I0, I1, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, I0, I1, I2) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 I0, a4 I1, a5 I2) error {
							return fn.(finishBundle6x1[context.Context, typex.PaneInfo, typex.EventTime, I0, I1, I2, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[context.Context, []typex.Window, typex.EventTime, I0, I1, I2, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, I0, I1, I2) error)
						return &caller6x1[context.Context, []typex.Window, typex.EventTime, I0, I1, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, I0, I1, I2) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 I0, a4 I1, a5 I2) error {
							return fn.(finishBundle6x1[context.Context, []typex.Window, typex.EventTime, I0, I1, I2, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[typex.PaneInfo, []typex.Window, typex.EventTime, I0, I1, I2, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, I0, I1, I2) error)
						return &caller6x1[typex.PaneInfo, []typex.Window, typex.EventTime, I0, I1, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, I0, I1, I2) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 I0, a4 I1, a5 I2) error {
							return fn.(finishBundle6x1[typex.PaneInfo, []typex.Window, typex.EventTime, I0, I1, I2, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I1, I2, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I1, I2) error)
						return &caller6x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I1, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I1, I2) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 I1, a5 I2) error {
							return fn.(finishBundle6x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I1, I2, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I0, I1, I2, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization, I0, I1, I2) error)
						return &caller6x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I0, I1, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization, I0, I1, I2) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization, a3 I0, a4 I1, a5 I2) error {
							return fn.(finishBundle6x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I0, I1, I2, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[context.Context, []typex.Window, typex.BundleFinalization, I0, I1, I2, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization, I0, I1, I2) error)
						return &caller6x1[context.Context, []typex.Window, typex.BundleFinalization, I0, I1, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization, I0, I1, I2) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization, a3 I0, a4 I1, a5 I2) error {
							return fn.(finishBundle6x1[context.Context, []typex.Window, typex.BundleFinalization, I0, I1, I2, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0, I1, I2, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0, I1, I2) error)
						return &caller6x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0, I1, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0, I1, I2) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization, a3 I0, a4 I1, a5 I2) error {
							return fn.(finishBundle6x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0, I1, I2, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1, I2, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1, I2) error)
						return &caller6x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1, I2) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.BundleFinalization, a4 I1, a5 I2) error {
							return fn.(finishBundle6x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1, I2, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[context.Context, typex.EventTime, typex.BundleFinalization, I0, I1, I2, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization, I0, I1, I2) error)
						return &caller6x1[context.Context, typex.EventTime, typex.BundleFinalization, I0, I1, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization, I0, I1, I2) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I0, a4 I1, a5 I2) error {
							return fn.(finishBundle6x1[context.Context, typex.EventTime, typex.BundleFinalization, I0, I1, I2, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0, I1, I2, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0, I1, I2) error)
						return &caller6x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0, I1, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0, I1, I2) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I0, a4 I1, a5 I2) error {
							return fn.(finishBundle6x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0, I1, I2, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1, I2, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1, I2) error)
						return &caller6x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1, I2) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I1, a5 I2) error {
							return fn.(finishBundle6x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1, I2, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1, I2, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1, I2) error)
						return &caller6x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1, I2) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I0, a4 I1, a5 I2) error {
							return fn.(finishBundle6x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1, I2, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2) error)
						return &caller6x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I1, a5 I2) error {
							return fn.(finishBundle6x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2) error)
						return &caller6x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I1, a5 I2) error {
							return fn.(finishBundle6x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I2, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I2) error)
						return &caller6x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I2) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 typex.BundleFinalization, a5 I2) error {
							return fn.(finishBundle6x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I2, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				}
			default:
				panic("Invalid signature for FinishBundle")
			}

		case finishBundleIn == 7:
			switch {
			case finishBundleOut == 0:
				if _, ok := doFn.(finishBundle7x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I0, I1, I2]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I0, I1, I2))
						return &caller7x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I0, I1, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I0, I1, I2))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 I0, a5 I1, a6 I2) {
							fn.(finishBundle7x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I0, I1, I2]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0, I1, I2]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0, I1, I2))
						return &caller7x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0, I1, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0, I1, I2))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.BundleFinalization, a4 I0, a5 I1, a6 I2) {
							fn.(finishBundle7x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0, I1, I2]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0, I1, I2]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0, I1, I2))
						return &caller7x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0, I1, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0, I1, I2))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I0, a5 I1, a6 I2) {
							fn.(finishBundle7x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0, I1, I2]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1, I2]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1, I2))
						return &caller7x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1, I2))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I0, a5 I1, a6 I2) {
							fn.(finishBundle7x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1, I2]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1, I2]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1, I2))
						return &caller7x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1, I2))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I0, a5 I1, a6 I2) {
							fn.(finishBundle7x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1, I2]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2))
						return &caller7x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 typex.BundleFinalization, a5 I1, a6 I2) {
							fn.(finishBundle7x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				}
			case finishBundleOut == 1:
				if _, ok := doFn.(finishBundle7x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I0, I1, I2, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I0, I1, I2) error)
						return &caller7x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I0, I1, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I0, I1, I2) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 I0, a5 I1, a6 I2) error {
							return fn.(finishBundle7x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I0, I1, I2, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0, I1, I2, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0, I1, I2) error)
						return &caller7x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0, I1, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0, I1, I2) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.BundleFinalization, a4 I0, a5 I1, a6 I2) error {
							return fn.(finishBundle7x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0, I1, I2, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0, I1, I2, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0, I1, I2) error)
						return &caller7x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0, I1, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0, I1, I2) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I0, a5 I1, a6 I2) error {
							return fn.(finishBundle7x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0, I1, I2, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1, I2, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1, I2) error)
						return &caller7x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1, I2) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I0, a5 I1, a6 I2) error {
							return fn.(finishBundle7x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1, I2, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1, I2, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1, I2) error)
						return &caller7x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1, I2) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I0, a5 I1, a6 I2) error {
							return fn.(finishBundle7x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1, I2, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2) error)
						return &caller7x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 typex.BundleFinalization, a5 I1, a6 I2) error {
							return fn.(finishBundle7x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				}
			default:
				panic("Invalid signature for FinishBundle")
			}

		default:
			panic("Invalid signature for FinishBundle")
		}
	}
	return nil
}

func buildFinishBundleWrapper4[I0, I1, I2, I3 any](doFn interface{}) func(interface{}) reflectx.Func {
	finishBundleIn := -1
	finishBundleOut := -1
	finishBundleMethod := reflect.ValueOf(doFn).MethodByName("FinishBundle")
	if finishBundleMethod.IsValid() {
		finishBundleIn = finishBundleMethod.Type().NumIn()
		finishBundleOut = finishBundleMethod.Type().NumOut()
		switch {

		case finishBundleIn == 0:
			switch {
			case finishBundleOut == 0:
				if _, ok := doFn.(finishBundle0x0); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func())
						return &caller0x0{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func())(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func() { fn.(finishBundle0x0).FinishBundle() })
					}
				}
			case finishBundleOut == 1:
				if _, ok := doFn.(finishBundle0x1[error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func() error)
						return &caller0x1[error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func() error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func() error { return fn.(finishBundle0x1[error]).FinishBundle() })
					}
				}
			default:
				panic("Invalid signature for FinishBundle")
			}

		case finishBundleIn == 1:
			switch {
			case finishBundleOut == 0:
				if _, ok := doFn.(finishBundle1x0[I3]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I3))
						return &caller1x0[I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I3))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I3) { fn.(finishBundle1x0[I3]).FinishBundle(a0) })
					}
				} else if _, ok := doFn.(finishBundle1x0[context.Context]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context))
						return &caller1x0[context.Context]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context) { fn.(finishBundle1x0[context.Context]).FinishBundle(a0) })
					}
				} else if _, ok := doFn.(finishBundle1x0[typex.PaneInfo]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo))
						return &caller1x0[typex.PaneInfo]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo) { fn.(finishBundle1x0[typex.PaneInfo]).FinishBundle(a0) })
					}
				} else if _, ok := doFn.(finishBundle1x0[[]typex.Window]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window))
						return &caller1x0[[]typex.Window]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window) { fn.(finishBundle1x0[[]typex.Window]).FinishBundle(a0) })
					}
				} else if _, ok := doFn.(finishBundle1x0[typex.EventTime]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime))
						return &caller1x0[typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime) { fn.(finishBundle1x0[typex.EventTime]).FinishBundle(a0) })
					}
				} else if _, ok := doFn.(finishBundle1x0[typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization))
						return &caller1x0[typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization) { fn.(finishBundle1x0[typex.BundleFinalization]).FinishBundle(a0) })
					}
				}
			case finishBundleOut == 1:
				if _, ok := doFn.(finishBundle1x1[I3, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I3) error)
						return &caller1x1[I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I3) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I3) error { return fn.(finishBundle1x1[I3, error]).FinishBundle(a0) })
					}
				} else if _, ok := doFn.(finishBundle1x1[context.Context, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context) error)
						return &caller1x1[context.Context, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context) error { return fn.(finishBundle1x1[context.Context, error]).FinishBundle(a0) })
					}
				} else if _, ok := doFn.(finishBundle1x1[typex.PaneInfo, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo) error)
						return &caller1x1[typex.PaneInfo, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo) error { return fn.(finishBundle1x1[typex.PaneInfo, error]).FinishBundle(a0) })
					}
				} else if _, ok := doFn.(finishBundle1x1[[]typex.Window, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window) error)
						return &caller1x1[[]typex.Window, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window) error { return fn.(finishBundle1x1[[]typex.Window, error]).FinishBundle(a0) })
					}
				} else if _, ok := doFn.(finishBundle1x1[typex.EventTime, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime) error)
						return &caller1x1[typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime) error { return fn.(finishBundle1x1[typex.EventTime, error]).FinishBundle(a0) })
					}
				} else if _, ok := doFn.(finishBundle1x1[typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization) error)
						return &caller1x1[typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization) error {
							return fn.(finishBundle1x1[typex.BundleFinalization, error]).FinishBundle(a0)
						})
					}
				}
			default:
				panic("Invalid signature for FinishBundle")
			}

		case finishBundleIn == 2:
			switch {
			case finishBundleOut == 0:
				if _, ok := doFn.(finishBundle2x0[I2, I3]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I2, I3))
						return &caller2x0[I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I2, I3))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I2, a1 I3) { fn.(finishBundle2x0[I2, I3]).FinishBundle(a0, a1) })
					}
				} else if _, ok := doFn.(finishBundle2x0[context.Context, I3]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, I3))
						return &caller2x0[context.Context, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, I3))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 I3) { fn.(finishBundle2x0[context.Context, I3]).FinishBundle(a0, a1) })
					}
				} else if _, ok := doFn.(finishBundle2x0[typex.PaneInfo, I3]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, I3))
						return &caller2x0[typex.PaneInfo, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, I3))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 I3) { fn.(finishBundle2x0[typex.PaneInfo, I3]).FinishBundle(a0, a1) })
					}
				} else if _, ok := doFn.(finishBundle2x0[context.Context, typex.PaneInfo]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo))
						return &caller2x0[context.Context, typex.PaneInfo]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo) {
							fn.(finishBundle2x0[context.Context, typex.PaneInfo]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x0[[]typex.Window, I3]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, I3))
						return &caller2x0[[]typex.Window, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, I3))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 I3) { fn.(finishBundle2x0[[]typex.Window, I3]).FinishBundle(a0, a1) })
					}
				} else if _, ok := doFn.(finishBundle2x0[context.Context, []typex.Window]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window))
						return &caller2x0[context.Context, []typex.Window]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window) {
							fn.(finishBundle2x0[context.Context, []typex.Window]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x0[typex.PaneInfo, []typex.Window]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window))
						return &caller2x0[typex.PaneInfo, []typex.Window]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window) {
							fn.(finishBundle2x0[typex.PaneInfo, []typex.Window]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x0[typex.EventTime, I3]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, I3))
						return &caller2x0[typex.EventTime, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, I3))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 I3) { fn.(finishBundle2x0[typex.EventTime, I3]).FinishBundle(a0, a1) })
					}
				} else if _, ok := doFn.(finishBundle2x0[context.Context, typex.EventTime]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime))
						return &caller2x0[context.Context, typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime) {
							fn.(finishBundle2x0[context.Context, typex.EventTime]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x0[typex.PaneInfo, typex.EventTime]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime))
						return &caller2x0[typex.PaneInfo, typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime) {
							fn.(finishBundle2x0[typex.PaneInfo, typex.EventTime]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x0[[]typex.Window, typex.EventTime]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime))
						return &caller2x0[[]typex.Window, typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime) {
							fn.(finishBundle2x0[[]typex.Window, typex.EventTime]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x0[typex.BundleFinalization, I3]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization, I3))
						return &caller2x0[typex.BundleFinalization, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization, I3))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization, a1 I3) {
							fn.(finishBundle2x0[typex.BundleFinalization, I3]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x0[context.Context, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization))
						return &caller2x0[context.Context, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization) {
							fn.(finishBundle2x0[context.Context, typex.BundleFinalization]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x0[typex.PaneInfo, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization))
						return &caller2x0[typex.PaneInfo, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization) {
							fn.(finishBundle2x0[typex.PaneInfo, typex.BundleFinalization]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x0[[]typex.Window, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization))
						return &caller2x0[[]typex.Window, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization) {
							fn.(finishBundle2x0[[]typex.Window, typex.BundleFinalization]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x0[typex.EventTime, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization))
						return &caller2x0[typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization) {
							fn.(finishBundle2x0[typex.EventTime, typex.BundleFinalization]).FinishBundle(a0, a1)
						})
					}
				}
			case finishBundleOut == 1:
				if _, ok := doFn.(finishBundle2x1[I2, I3, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I2, I3) error)
						return &caller2x1[I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I2, I3) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I2, a1 I3) error { return fn.(finishBundle2x1[I2, I3, error]).FinishBundle(a0, a1) })
					}
				} else if _, ok := doFn.(finishBundle2x1[context.Context, I3, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, I3) error)
						return &caller2x1[context.Context, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, I3) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 I3) error {
							return fn.(finishBundle2x1[context.Context, I3, error]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x1[typex.PaneInfo, I3, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, I3) error)
						return &caller2x1[typex.PaneInfo, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, I3) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 I3) error {
							return fn.(finishBundle2x1[typex.PaneInfo, I3, error]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x1[context.Context, typex.PaneInfo, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo) error)
						return &caller2x1[context.Context, typex.PaneInfo, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo) error {
							return fn.(finishBundle2x1[context.Context, typex.PaneInfo, error]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x1[[]typex.Window, I3, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, I3) error)
						return &caller2x1[[]typex.Window, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, I3) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 I3) error {
							return fn.(finishBundle2x1[[]typex.Window, I3, error]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x1[context.Context, []typex.Window, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window) error)
						return &caller2x1[context.Context, []typex.Window, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window) error {
							return fn.(finishBundle2x1[context.Context, []typex.Window, error]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x1[typex.PaneInfo, []typex.Window, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window) error)
						return &caller2x1[typex.PaneInfo, []typex.Window, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window) error {
							return fn.(finishBundle2x1[typex.PaneInfo, []typex.Window, error]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x1[typex.EventTime, I3, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, I3) error)
						return &caller2x1[typex.EventTime, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, I3) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 I3) error {
							return fn.(finishBundle2x1[typex.EventTime, I3, error]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x1[context.Context, typex.EventTime, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime) error)
						return &caller2x1[context.Context, typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime) error {
							return fn.(finishBundle2x1[context.Context, typex.EventTime, error]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x1[typex.PaneInfo, typex.EventTime, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime) error)
						return &caller2x1[typex.PaneInfo, typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime) error {
							return fn.(finishBundle2x1[typex.PaneInfo, typex.EventTime, error]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x1[[]typex.Window, typex.EventTime, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime) error)
						return &caller2x1[[]typex.Window, typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime) error {
							return fn.(finishBundle2x1[[]typex.Window, typex.EventTime, error]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x1[typex.BundleFinalization, I3, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization, I3) error)
						return &caller2x1[typex.BundleFinalization, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization, I3) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization, a1 I3) error {
							return fn.(finishBundle2x1[typex.BundleFinalization, I3, error]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x1[context.Context, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization) error)
						return &caller2x1[context.Context, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization) error {
							return fn.(finishBundle2x1[context.Context, typex.BundleFinalization, error]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x1[typex.PaneInfo, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization) error)
						return &caller2x1[typex.PaneInfo, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization) error {
							return fn.(finishBundle2x1[typex.PaneInfo, typex.BundleFinalization, error]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x1[[]typex.Window, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization) error)
						return &caller2x1[[]typex.Window, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization) error {
							return fn.(finishBundle2x1[[]typex.Window, typex.BundleFinalization, error]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x1[typex.EventTime, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization) error)
						return &caller2x1[typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization) error {
							return fn.(finishBundle2x1[typex.EventTime, typex.BundleFinalization, error]).FinishBundle(a0, a1)
						})
					}
				}
			default:
				panic("Invalid signature for FinishBundle")
			}

		case finishBundleIn == 3:
			switch {
			case finishBundleOut == 0:
				if _, ok := doFn.(finishBundle3x0[I1, I2, I3]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I1, I2, I3))
						return &caller3x0[I1, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I1, I2, I3))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I1, a1 I2, a2 I3) { fn.(finishBundle3x0[I1, I2, I3]).FinishBundle(a0, a1, a2) })
					}
				} else if _, ok := doFn.(finishBundle3x0[context.Context, I2, I3]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, I2, I3))
						return &caller3x0[context.Context, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, I2, I3))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 I2, a2 I3) {
							fn.(finishBundle3x0[context.Context, I2, I3]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[typex.PaneInfo, I2, I3]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, I2, I3))
						return &caller3x0[typex.PaneInfo, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, I2, I3))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 I2, a2 I3) {
							fn.(finishBundle3x0[typex.PaneInfo, I2, I3]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[context.Context, typex.PaneInfo, I3]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, I3))
						return &caller3x0[context.Context, typex.PaneInfo, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, I3))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 I3) {
							fn.(finishBundle3x0[context.Context, typex.PaneInfo, I3]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[[]typex.Window, I2, I3]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, I2, I3))
						return &caller3x0[[]typex.Window, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, I2, I3))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 I2, a2 I3) {
							fn.(finishBundle3x0[[]typex.Window, I2, I3]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[context.Context, []typex.Window, I3]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, I3))
						return &caller3x0[context.Context, []typex.Window, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, I3))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 I3) {
							fn.(finishBundle3x0[context.Context, []typex.Window, I3]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[typex.PaneInfo, []typex.Window, I3]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, I3))
						return &caller3x0[typex.PaneInfo, []typex.Window, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, I3))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 I3) {
							fn.(finishBundle3x0[typex.PaneInfo, []typex.Window, I3]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[context.Context, typex.PaneInfo, []typex.Window]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window))
						return &caller3x0[context.Context, typex.PaneInfo, []typex.Window]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window) {
							fn.(finishBundle3x0[context.Context, typex.PaneInfo, []typex.Window]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[typex.EventTime, I2, I3]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, I2, I3))
						return &caller3x0[typex.EventTime, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, I2, I3))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 I2, a2 I3) {
							fn.(finishBundle3x0[typex.EventTime, I2, I3]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[context.Context, typex.EventTime, I3]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, I3))
						return &caller3x0[context.Context, typex.EventTime, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, I3))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 I3) {
							fn.(finishBundle3x0[context.Context, typex.EventTime, I3]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[typex.PaneInfo, typex.EventTime, I3]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, I3))
						return &caller3x0[typex.PaneInfo, typex.EventTime, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, I3))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 I3) {
							fn.(finishBundle3x0[typex.PaneInfo, typex.EventTime, I3]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[context.Context, typex.PaneInfo, typex.EventTime]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime))
						return &caller3x0[context.Context, typex.PaneInfo, typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime) {
							fn.(finishBundle3x0[context.Context, typex.PaneInfo, typex.EventTime]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[[]typex.Window, typex.EventTime, I3]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, I3))
						return &caller3x0[[]typex.Window, typex.EventTime, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, I3))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 I3) {
							fn.(finishBundle3x0[[]typex.Window, typex.EventTime, I3]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[context.Context, []typex.Window, typex.EventTime]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime))
						return &caller3x0[context.Context, []typex.Window, typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime) {
							fn.(finishBundle3x0[context.Context, []typex.Window, typex.EventTime]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[typex.PaneInfo, []typex.Window, typex.EventTime]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime))
						return &caller3x0[typex.PaneInfo, []typex.Window, typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime) {
							fn.(finishBundle3x0[typex.PaneInfo, []typex.Window, typex.EventTime]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[typex.BundleFinalization, I2, I3]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization, I2, I3))
						return &caller3x0[typex.BundleFinalization, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization, I2, I3))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization, a1 I2, a2 I3) {
							fn.(finishBundle3x0[typex.BundleFinalization, I2, I3]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[context.Context, typex.BundleFinalization, I3]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization, I3))
						return &caller3x0[context.Context, typex.BundleFinalization, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization, I3))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization, a2 I3) {
							fn.(finishBundle3x0[context.Context, typex.BundleFinalization, I3]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[typex.PaneInfo, typex.BundleFinalization, I3]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization, I3))
						return &caller3x0[typex.PaneInfo, typex.BundleFinalization, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization, I3))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization, a2 I3) {
							fn.(finishBundle3x0[typex.PaneInfo, typex.BundleFinalization, I3]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[context.Context, typex.PaneInfo, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization))
						return &caller3x0[context.Context, typex.PaneInfo, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization) {
							fn.(finishBundle3x0[context.Context, typex.PaneInfo, typex.BundleFinalization]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[[]typex.Window, typex.BundleFinalization, I3]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization, I3))
						return &caller3x0[[]typex.Window, typex.BundleFinalization, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization, I3))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization, a2 I3) {
							fn.(finishBundle3x0[[]typex.Window, typex.BundleFinalization, I3]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[context.Context, []typex.Window, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization))
						return &caller3x0[context.Context, []typex.Window, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization) {
							fn.(finishBundle3x0[context.Context, []typex.Window, typex.BundleFinalization]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization))
						return &caller3x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization) {
							fn.(finishBundle3x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[typex.EventTime, typex.BundleFinalization, I3]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization, I3))
						return &caller3x0[typex.EventTime, typex.BundleFinalization, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization, I3))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization, a2 I3) {
							fn.(finishBundle3x0[typex.EventTime, typex.BundleFinalization, I3]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[context.Context, typex.EventTime, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization))
						return &caller3x0[context.Context, typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization) {
							fn.(finishBundle3x0[context.Context, typex.EventTime, typex.BundleFinalization]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization))
						return &caller3x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization) {
							fn.(finishBundle3x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[[]typex.Window, typex.EventTime, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization))
						return &caller3x0[[]typex.Window, typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization) {
							fn.(finishBundle3x0[[]typex.Window, typex.EventTime, typex.BundleFinalization]).FinishBundle(a0, a1, a2)
						})
					}
				}
			case finishBundleOut == 1:
				if _, ok := doFn.(finishBundle3x1[I1, I2, I3, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I1, I2, I3) error)
						return &caller3x1[I1, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I1, I2, I3) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I1, a1 I2, a2 I3) error {
							return fn.(finishBundle3x1[I1, I2, I3, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[context.Context, I2, I3, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, I2, I3) error)
						return &caller3x1[context.Context, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, I2, I3) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 I2, a2 I3) error {
							return fn.(finishBundle3x1[context.Context, I2, I3, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[typex.PaneInfo, I2, I3, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, I2, I3) error)
						return &caller3x1[typex.PaneInfo, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, I2, I3) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 I2, a2 I3) error {
							return fn.(finishBundle3x1[typex.PaneInfo, I2, I3, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[context.Context, typex.PaneInfo, I3, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, I3) error)
						return &caller3x1[context.Context, typex.PaneInfo, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, I3) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 I3) error {
							return fn.(finishBundle3x1[context.Context, typex.PaneInfo, I3, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[[]typex.Window, I2, I3, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, I2, I3) error)
						return &caller3x1[[]typex.Window, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, I2, I3) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 I2, a2 I3) error {
							return fn.(finishBundle3x1[[]typex.Window, I2, I3, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[context.Context, []typex.Window, I3, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, I3) error)
						return &caller3x1[context.Context, []typex.Window, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, I3) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 I3) error {
							return fn.(finishBundle3x1[context.Context, []typex.Window, I3, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[typex.PaneInfo, []typex.Window, I3, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, I3) error)
						return &caller3x1[typex.PaneInfo, []typex.Window, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, I3) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 I3) error {
							return fn.(finishBundle3x1[typex.PaneInfo, []typex.Window, I3, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[context.Context, typex.PaneInfo, []typex.Window, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window) error)
						return &caller3x1[context.Context, typex.PaneInfo, []typex.Window, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window) error {
							return fn.(finishBundle3x1[context.Context, typex.PaneInfo, []typex.Window, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[typex.EventTime, I2, I3, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, I2, I3) error)
						return &caller3x1[typex.EventTime, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, I2, I3) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 I2, a2 I3) error {
							return fn.(finishBundle3x1[typex.EventTime, I2, I3, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[context.Context, typex.EventTime, I3, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, I3) error)
						return &caller3x1[context.Context, typex.EventTime, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, I3) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 I3) error {
							return fn.(finishBundle3x1[context.Context, typex.EventTime, I3, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[typex.PaneInfo, typex.EventTime, I3, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, I3) error)
						return &caller3x1[typex.PaneInfo, typex.EventTime, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, I3) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 I3) error {
							return fn.(finishBundle3x1[typex.PaneInfo, typex.EventTime, I3, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[context.Context, typex.PaneInfo, typex.EventTime, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime) error)
						return &caller3x1[context.Context, typex.PaneInfo, typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime) error {
							return fn.(finishBundle3x1[context.Context, typex.PaneInfo, typex.EventTime, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[[]typex.Window, typex.EventTime, I3, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, I3) error)
						return &caller3x1[[]typex.Window, typex.EventTime, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, I3) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 I3) error {
							return fn.(finishBundle3x1[[]typex.Window, typex.EventTime, I3, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[context.Context, []typex.Window, typex.EventTime, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime) error)
						return &caller3x1[context.Context, []typex.Window, typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime) error {
							return fn.(finishBundle3x1[context.Context, []typex.Window, typex.EventTime, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[typex.PaneInfo, []typex.Window, typex.EventTime, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime) error)
						return &caller3x1[typex.PaneInfo, []typex.Window, typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime) error {
							return fn.(finishBundle3x1[typex.PaneInfo, []typex.Window, typex.EventTime, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[typex.BundleFinalization, I2, I3, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization, I2, I3) error)
						return &caller3x1[typex.BundleFinalization, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization, I2, I3) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization, a1 I2, a2 I3) error {
							return fn.(finishBundle3x1[typex.BundleFinalization, I2, I3, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[context.Context, typex.BundleFinalization, I3, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization, I3) error)
						return &caller3x1[context.Context, typex.BundleFinalization, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization, I3) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization, a2 I3) error {
							return fn.(finishBundle3x1[context.Context, typex.BundleFinalization, I3, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[typex.PaneInfo, typex.BundleFinalization, I3, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization, I3) error)
						return &caller3x1[typex.PaneInfo, typex.BundleFinalization, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization, I3) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization, a2 I3) error {
							return fn.(finishBundle3x1[typex.PaneInfo, typex.BundleFinalization, I3, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[context.Context, typex.PaneInfo, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization) error)
						return &caller3x1[context.Context, typex.PaneInfo, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization) error {
							return fn.(finishBundle3x1[context.Context, typex.PaneInfo, typex.BundleFinalization, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[[]typex.Window, typex.BundleFinalization, I3, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization, I3) error)
						return &caller3x1[[]typex.Window, typex.BundleFinalization, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization, I3) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization, a2 I3) error {
							return fn.(finishBundle3x1[[]typex.Window, typex.BundleFinalization, I3, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[context.Context, []typex.Window, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization) error)
						return &caller3x1[context.Context, []typex.Window, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization) error {
							return fn.(finishBundle3x1[context.Context, []typex.Window, typex.BundleFinalization, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization) error)
						return &caller3x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization) error {
							return fn.(finishBundle3x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[typex.EventTime, typex.BundleFinalization, I3, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization, I3) error)
						return &caller3x1[typex.EventTime, typex.BundleFinalization, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization, I3) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization, a2 I3) error {
							return fn.(finishBundle3x1[typex.EventTime, typex.BundleFinalization, I3, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[context.Context, typex.EventTime, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization) error)
						return &caller3x1[context.Context, typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization) error {
							return fn.(finishBundle3x1[context.Context, typex.EventTime, typex.BundleFinalization, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization) error)
						return &caller3x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization) error {
							return fn.(finishBundle3x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization) error)
						return &caller3x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization) error {
							return fn.(finishBundle3x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, error]).FinishBundle(a0, a1, a2)
						})
					}
				}
			default:
				panic("Invalid signature for FinishBundle")
			}

		case finishBundleIn == 4:
			switch {
			case finishBundleOut == 0:
				if _, ok := doFn.(finishBundle4x0[I0, I1, I2, I3]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I0, I1, I2, I3))
						return &caller4x0[I0, I1, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I0, I1, I2, I3))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I0, a1 I1, a2 I2, a3 I3) { fn.(finishBundle4x0[I0, I1, I2, I3]).FinishBundle(a0, a1, a2, a3) })
					}
				} else if _, ok := doFn.(finishBundle4x0[context.Context, I1, I2, I3]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, I1, I2, I3))
						return &caller4x0[context.Context, I1, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, I1, I2, I3))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 I1, a2 I2, a3 I3) {
							fn.(finishBundle4x0[context.Context, I1, I2, I3]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[typex.PaneInfo, I1, I2, I3]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, I1, I2, I3))
						return &caller4x0[typex.PaneInfo, I1, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, I1, I2, I3))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 I1, a2 I2, a3 I3) {
							fn.(finishBundle4x0[typex.PaneInfo, I1, I2, I3]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[context.Context, typex.PaneInfo, I2, I3]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, I2, I3))
						return &caller4x0[context.Context, typex.PaneInfo, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, I2, I3))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 I2, a3 I3) {
							fn.(finishBundle4x0[context.Context, typex.PaneInfo, I2, I3]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[[]typex.Window, I1, I2, I3]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, I1, I2, I3))
						return &caller4x0[[]typex.Window, I1, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, I1, I2, I3))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 I1, a2 I2, a3 I3) {
							fn.(finishBundle4x0[[]typex.Window, I1, I2, I3]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[context.Context, []typex.Window, I2, I3]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, I2, I3))
						return &caller4x0[context.Context, []typex.Window, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, I2, I3))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 I2, a3 I3) {
							fn.(finishBundle4x0[context.Context, []typex.Window, I2, I3]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[typex.PaneInfo, []typex.Window, I2, I3]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, I2, I3))
						return &caller4x0[typex.PaneInfo, []typex.Window, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, I2, I3))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 I2, a3 I3) {
							fn.(finishBundle4x0[typex.PaneInfo, []typex.Window, I2, I3]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[context.Context, typex.PaneInfo, []typex.Window, I3]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, I3))
						return &caller4x0[context.Context, typex.PaneInfo, []typex.Window, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, I3))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 I3) {
							fn.(finishBundle4x0[context.Context, typex.PaneInfo, []typex.Window, I3]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[typex.EventTime, I1, I2, I3]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, I1, I2, I3))
						return &caller4x0[typex.EventTime, I1, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, I1, I2, I3))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 I1, a2 I2, a3 I3) {
							fn.(finishBundle4x0[typex.EventTime, I1, I2, I3]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[context.Context, typex.EventTime, I2, I3]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, I2, I3))
						return &caller4x0[context.Context, typex.EventTime, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, I2, I3))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 I2, a3 I3) {
							fn.(finishBundle4x0[context.Context, typex.EventTime, I2, I3]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[typex.PaneInfo, typex.EventTime, I2, I3]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, I2, I3))
						return &caller4x0[typex.PaneInfo, typex.EventTime, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, I2, I3))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 I2, a3 I3) {
							fn.(finishBundle4x0[typex.PaneInfo, typex.EventTime, I2, I3]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[context.Context, typex.PaneInfo, typex.EventTime, I3]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, I3))
						return &caller4x0[context.Context, typex.PaneInfo, typex.EventTime, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, I3))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 I3) {
							fn.(finishBundle4x0[context.Context, typex.PaneInfo, typex.EventTime, I3]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[[]typex.Window, typex.EventTime, I2, I3]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, I2, I3))
						return &caller4x0[[]typex.Window, typex.EventTime, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, I2, I3))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 I2, a3 I3) {
							fn.(finishBundle4x0[[]typex.Window, typex.EventTime, I2, I3]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[context.Context, []typex.Window, typex.EventTime, I3]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, I3))
						return &caller4x0[context.Context, []typex.Window, typex.EventTime, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, I3))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 I3) {
							fn.(finishBundle4x0[context.Context, []typex.Window, typex.EventTime, I3]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[typex.PaneInfo, []typex.Window, typex.EventTime, I3]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, I3))
						return &caller4x0[typex.PaneInfo, []typex.Window, typex.EventTime, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, I3))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 I3) {
							fn.(finishBundle4x0[typex.PaneInfo, []typex.Window, typex.EventTime, I3]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime))
						return &caller4x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime) {
							fn.(finishBundle4x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[typex.BundleFinalization, I1, I2, I3]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization, I1, I2, I3))
						return &caller4x0[typex.BundleFinalization, I1, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization, I1, I2, I3))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization, a1 I1, a2 I2, a3 I3) {
							fn.(finishBundle4x0[typex.BundleFinalization, I1, I2, I3]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[context.Context, typex.BundleFinalization, I2, I3]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization, I2, I3))
						return &caller4x0[context.Context, typex.BundleFinalization, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization, I2, I3))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization, a2 I2, a3 I3) {
							fn.(finishBundle4x0[context.Context, typex.BundleFinalization, I2, I3]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[typex.PaneInfo, typex.BundleFinalization, I2, I3]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization, I2, I3))
						return &caller4x0[typex.PaneInfo, typex.BundleFinalization, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization, I2, I3))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization, a2 I2, a3 I3) {
							fn.(finishBundle4x0[typex.PaneInfo, typex.BundleFinalization, I2, I3]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I3]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization, I3))
						return &caller4x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization, I3))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization, a3 I3) {
							fn.(finishBundle4x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I3]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[[]typex.Window, typex.BundleFinalization, I2, I3]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization, I2, I3))
						return &caller4x0[[]typex.Window, typex.BundleFinalization, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization, I2, I3))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization, a2 I2, a3 I3) {
							fn.(finishBundle4x0[[]typex.Window, typex.BundleFinalization, I2, I3]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[context.Context, []typex.Window, typex.BundleFinalization, I3]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization, I3))
						return &caller4x0[context.Context, []typex.Window, typex.BundleFinalization, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization, I3))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization, a3 I3) {
							fn.(finishBundle4x0[context.Context, []typex.Window, typex.BundleFinalization, I3]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3))
						return &caller4x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization, a3 I3) {
							fn.(finishBundle4x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization))
						return &caller4x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.BundleFinalization) {
							fn.(finishBundle4x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[typex.EventTime, typex.BundleFinalization, I2, I3]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization, I2, I3))
						return &caller4x0[typex.EventTime, typex.BundleFinalization, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization, I2, I3))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization, a2 I2, a3 I3) {
							fn.(finishBundle4x0[typex.EventTime, typex.BundleFinalization, I2, I3]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[context.Context, typex.EventTime, typex.BundleFinalization, I3]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization, I3))
						return &caller4x0[context.Context, typex.EventTime, typex.BundleFinalization, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization, I3))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I3) {
							fn.(finishBundle4x0[context.Context, typex.EventTime, typex.BundleFinalization, I3]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3))
						return &caller4x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I3) {
							fn.(finishBundle4x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization))
						return &caller4x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 typex.BundleFinalization) {
							fn.(finishBundle4x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I3]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization, I3))
						return &caller4x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization, I3))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I3) {
							fn.(finishBundle4x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I3]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization))
						return &caller4x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization) {
							fn.(finishBundle4x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization))
						return &caller4x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization) {
							fn.(finishBundle4x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization]).FinishBundle(a0, a1, a2, a3)
						})
					}
				}
			case finishBundleOut == 1:
				if _, ok := doFn.(finishBundle4x1[I0, I1, I2, I3, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I0, I1, I2, I3) error)
						return &caller4x1[I0, I1, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I0, I1, I2, I3) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I0, a1 I1, a2 I2, a3 I3) error {
							return fn.(finishBundle4x1[I0, I1, I2, I3, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[context.Context, I1, I2, I3, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, I1, I2, I3) error)
						return &caller4x1[context.Context, I1, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, I1, I2, I3) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 I1, a2 I2, a3 I3) error {
							return fn.(finishBundle4x1[context.Context, I1, I2, I3, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[typex.PaneInfo, I1, I2, I3, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, I1, I2, I3) error)
						return &caller4x1[typex.PaneInfo, I1, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, I1, I2, I3) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 I1, a2 I2, a3 I3) error {
							return fn.(finishBundle4x1[typex.PaneInfo, I1, I2, I3, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[context.Context, typex.PaneInfo, I2, I3, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, I2, I3) error)
						return &caller4x1[context.Context, typex.PaneInfo, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, I2, I3) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 I2, a3 I3) error {
							return fn.(finishBundle4x1[context.Context, typex.PaneInfo, I2, I3, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[[]typex.Window, I1, I2, I3, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, I1, I2, I3) error)
						return &caller4x1[[]typex.Window, I1, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, I1, I2, I3) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 I1, a2 I2, a3 I3) error {
							return fn.(finishBundle4x1[[]typex.Window, I1, I2, I3, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[context.Context, []typex.Window, I2, I3, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, I2, I3) error)
						return &caller4x1[context.Context, []typex.Window, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, I2, I3) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 I2, a3 I3) error {
							return fn.(finishBundle4x1[context.Context, []typex.Window, I2, I3, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[typex.PaneInfo, []typex.Window, I2, I3, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, I2, I3) error)
						return &caller4x1[typex.PaneInfo, []typex.Window, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, I2, I3) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 I2, a3 I3) error {
							return fn.(finishBundle4x1[typex.PaneInfo, []typex.Window, I2, I3, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[context.Context, typex.PaneInfo, []typex.Window, I3, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, I3) error)
						return &caller4x1[context.Context, typex.PaneInfo, []typex.Window, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, I3) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 I3) error {
							return fn.(finishBundle4x1[context.Context, typex.PaneInfo, []typex.Window, I3, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[typex.EventTime, I1, I2, I3, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, I1, I2, I3) error)
						return &caller4x1[typex.EventTime, I1, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, I1, I2, I3) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 I1, a2 I2, a3 I3) error {
							return fn.(finishBundle4x1[typex.EventTime, I1, I2, I3, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[context.Context, typex.EventTime, I2, I3, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, I2, I3) error)
						return &caller4x1[context.Context, typex.EventTime, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, I2, I3) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 I2, a3 I3) error {
							return fn.(finishBundle4x1[context.Context, typex.EventTime, I2, I3, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[typex.PaneInfo, typex.EventTime, I2, I3, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, I2, I3) error)
						return &caller4x1[typex.PaneInfo, typex.EventTime, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, I2, I3) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 I2, a3 I3) error {
							return fn.(finishBundle4x1[typex.PaneInfo, typex.EventTime, I2, I3, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[context.Context, typex.PaneInfo, typex.EventTime, I3, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, I3) error)
						return &caller4x1[context.Context, typex.PaneInfo, typex.EventTime, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, I3) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 I3) error {
							return fn.(finishBundle4x1[context.Context, typex.PaneInfo, typex.EventTime, I3, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[[]typex.Window, typex.EventTime, I2, I3, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, I2, I3) error)
						return &caller4x1[[]typex.Window, typex.EventTime, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, I2, I3) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 I2, a3 I3) error {
							return fn.(finishBundle4x1[[]typex.Window, typex.EventTime, I2, I3, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[context.Context, []typex.Window, typex.EventTime, I3, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, I3) error)
						return &caller4x1[context.Context, []typex.Window, typex.EventTime, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, I3) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 I3) error {
							return fn.(finishBundle4x1[context.Context, []typex.Window, typex.EventTime, I3, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[typex.PaneInfo, []typex.Window, typex.EventTime, I3, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, I3) error)
						return &caller4x1[typex.PaneInfo, []typex.Window, typex.EventTime, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, I3) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 I3) error {
							return fn.(finishBundle4x1[typex.PaneInfo, []typex.Window, typex.EventTime, I3, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime) error)
						return &caller4x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime) error {
							return fn.(finishBundle4x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[typex.BundleFinalization, I1, I2, I3, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization, I1, I2, I3) error)
						return &caller4x1[typex.BundleFinalization, I1, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization, I1, I2, I3) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization, a1 I1, a2 I2, a3 I3) error {
							return fn.(finishBundle4x1[typex.BundleFinalization, I1, I2, I3, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[context.Context, typex.BundleFinalization, I2, I3, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization, I2, I3) error)
						return &caller4x1[context.Context, typex.BundleFinalization, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization, I2, I3) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization, a2 I2, a3 I3) error {
							return fn.(finishBundle4x1[context.Context, typex.BundleFinalization, I2, I3, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[typex.PaneInfo, typex.BundleFinalization, I2, I3, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization, I2, I3) error)
						return &caller4x1[typex.PaneInfo, typex.BundleFinalization, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization, I2, I3) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization, a2 I2, a3 I3) error {
							return fn.(finishBundle4x1[typex.PaneInfo, typex.BundleFinalization, I2, I3, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I3, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization, I3) error)
						return &caller4x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization, I3) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization, a3 I3) error {
							return fn.(finishBundle4x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I3, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[[]typex.Window, typex.BundleFinalization, I2, I3, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization, I2, I3) error)
						return &caller4x1[[]typex.Window, typex.BundleFinalization, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization, I2, I3) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization, a2 I2, a3 I3) error {
							return fn.(finishBundle4x1[[]typex.Window, typex.BundleFinalization, I2, I3, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[context.Context, []typex.Window, typex.BundleFinalization, I3, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization, I3) error)
						return &caller4x1[context.Context, []typex.Window, typex.BundleFinalization, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization, I3) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization, a3 I3) error {
							return fn.(finishBundle4x1[context.Context, []typex.Window, typex.BundleFinalization, I3, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3) error)
						return &caller4x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization, a3 I3) error {
							return fn.(finishBundle4x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization) error)
						return &caller4x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.BundleFinalization) error {
							return fn.(finishBundle4x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[typex.EventTime, typex.BundleFinalization, I2, I3, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization, I2, I3) error)
						return &caller4x1[typex.EventTime, typex.BundleFinalization, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization, I2, I3) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization, a2 I2, a3 I3) error {
							return fn.(finishBundle4x1[typex.EventTime, typex.BundleFinalization, I2, I3, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[context.Context, typex.EventTime, typex.BundleFinalization, I3, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization, I3) error)
						return &caller4x1[context.Context, typex.EventTime, typex.BundleFinalization, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization, I3) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I3) error {
							return fn.(finishBundle4x1[context.Context, typex.EventTime, typex.BundleFinalization, I3, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3) error)
						return &caller4x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I3) error {
							return fn.(finishBundle4x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization) error)
						return &caller4x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 typex.BundleFinalization) error {
							return fn.(finishBundle4x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I3, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization, I3) error)
						return &caller4x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization, I3) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I3) error {
							return fn.(finishBundle4x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I3, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization) error)
						return &caller4x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization) error {
							return fn.(finishBundle4x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization) error)
						return &caller4x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization) error {
							return fn.(finishBundle4x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				}
			default:
				panic("Invalid signature for FinishBundle")
			}

		case finishBundleIn == 5:
			switch {
			case finishBundleOut == 0:
				if _, ok := doFn.(finishBundle5x0[context.Context, I0, I1, I2, I3]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, I0, I1, I2, I3))
						return &caller5x0[context.Context, I0, I1, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, I0, I1, I2, I3))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 I0, a2 I1, a3 I2, a4 I3) {
							fn.(finishBundle5x0[context.Context, I0, I1, I2, I3]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[typex.PaneInfo, I0, I1, I2, I3]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, I0, I1, I2, I3))
						return &caller5x0[typex.PaneInfo, I0, I1, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, I0, I1, I2, I3))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 I0, a2 I1, a3 I2, a4 I3) {
							fn.(finishBundle5x0[typex.PaneInfo, I0, I1, I2, I3]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[context.Context, typex.PaneInfo, I1, I2, I3]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, I1, I2, I3))
						return &caller5x0[context.Context, typex.PaneInfo, I1, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, I1, I2, I3))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 I1, a3 I2, a4 I3) {
							fn.(finishBundle5x0[context.Context, typex.PaneInfo, I1, I2, I3]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[[]typex.Window, I0, I1, I2, I3]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, I0, I1, I2, I3))
						return &caller5x0[[]typex.Window, I0, I1, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, I0, I1, I2, I3))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 I0, a2 I1, a3 I2, a4 I3) {
							fn.(finishBundle5x0[[]typex.Window, I0, I1, I2, I3]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[context.Context, []typex.Window, I1, I2, I3]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, I1, I2, I3))
						return &caller5x0[context.Context, []typex.Window, I1, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, I1, I2, I3))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 I1, a3 I2, a4 I3) {
							fn.(finishBundle5x0[context.Context, []typex.Window, I1, I2, I3]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[typex.PaneInfo, []typex.Window, I1, I2, I3]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, I1, I2, I3))
						return &caller5x0[typex.PaneInfo, []typex.Window, I1, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, I1, I2, I3))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 I1, a3 I2, a4 I3) {
							fn.(finishBundle5x0[typex.PaneInfo, []typex.Window, I1, I2, I3]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[context.Context, typex.PaneInfo, []typex.Window, I2, I3]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, I2, I3))
						return &caller5x0[context.Context, typex.PaneInfo, []typex.Window, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, I2, I3))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 I2, a4 I3) {
							fn.(finishBundle5x0[context.Context, typex.PaneInfo, []typex.Window, I2, I3]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[typex.EventTime, I0, I1, I2, I3]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, I0, I1, I2, I3))
						return &caller5x0[typex.EventTime, I0, I1, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, I0, I1, I2, I3))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 I0, a2 I1, a3 I2, a4 I3) {
							fn.(finishBundle5x0[typex.EventTime, I0, I1, I2, I3]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[context.Context, typex.EventTime, I1, I2, I3]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, I1, I2, I3))
						return &caller5x0[context.Context, typex.EventTime, I1, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, I1, I2, I3))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 I1, a3 I2, a4 I3) {
							fn.(finishBundle5x0[context.Context, typex.EventTime, I1, I2, I3]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[typex.PaneInfo, typex.EventTime, I1, I2, I3]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, I1, I2, I3))
						return &caller5x0[typex.PaneInfo, typex.EventTime, I1, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, I1, I2, I3))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 I1, a3 I2, a4 I3) {
							fn.(finishBundle5x0[typex.PaneInfo, typex.EventTime, I1, I2, I3]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[context.Context, typex.PaneInfo, typex.EventTime, I2, I3]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, I2, I3))
						return &caller5x0[context.Context, typex.PaneInfo, typex.EventTime, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, I2, I3))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 I2, a4 I3) {
							fn.(finishBundle5x0[context.Context, typex.PaneInfo, typex.EventTime, I2, I3]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[[]typex.Window, typex.EventTime, I1, I2, I3]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, I1, I2, I3))
						return &caller5x0[[]typex.Window, typex.EventTime, I1, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, I1, I2, I3))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 I1, a3 I2, a4 I3) {
							fn.(finishBundle5x0[[]typex.Window, typex.EventTime, I1, I2, I3]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[context.Context, []typex.Window, typex.EventTime, I2, I3]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, I2, I3))
						return &caller5x0[context.Context, []typex.Window, typex.EventTime, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, I2, I3))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 I2, a4 I3) {
							fn.(finishBundle5x0[context.Context, []typex.Window, typex.EventTime, I2, I3]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[typex.PaneInfo, []typex.Window, typex.EventTime, I2, I3]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, I2, I3))
						return &caller5x0[typex.PaneInfo, []typex.Window, typex.EventTime, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, I2, I3))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 I2, a4 I3) {
							fn.(finishBundle5x0[typex.PaneInfo, []typex.Window, typex.EventTime, I2, I3]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I3]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I3))
						return &caller5x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I3))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 I3) {
							fn.(finishBundle5x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I3]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[typex.BundleFinalization, I0, I1, I2, I3]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization, I0, I1, I2, I3))
						return &caller5x0[typex.BundleFinalization, I0, I1, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization, I0, I1, I2, I3))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization, a1 I0, a2 I1, a3 I2, a4 I3) {
							fn.(finishBundle5x0[typex.BundleFinalization, I0, I1, I2, I3]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[context.Context, typex.BundleFinalization, I1, I2, I3]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization, I1, I2, I3))
						return &caller5x0[context.Context, typex.BundleFinalization, I1, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization, I1, I2, I3))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization, a2 I1, a3 I2, a4 I3) {
							fn.(finishBundle5x0[context.Context, typex.BundleFinalization, I1, I2, I3]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[typex.PaneInfo, typex.BundleFinalization, I1, I2, I3]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization, I1, I2, I3))
						return &caller5x0[typex.PaneInfo, typex.BundleFinalization, I1, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization, I1, I2, I3))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization, a2 I1, a3 I2, a4 I3) {
							fn.(finishBundle5x0[typex.PaneInfo, typex.BundleFinalization, I1, I2, I3]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I2, I3]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization, I2, I3))
						return &caller5x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization, I2, I3))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization, a3 I2, a4 I3) {
							fn.(finishBundle5x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I2, I3]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[[]typex.Window, typex.BundleFinalization, I1, I2, I3]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization, I1, I2, I3))
						return &caller5x0[[]typex.Window, typex.BundleFinalization, I1, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization, I1, I2, I3))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization, a2 I1, a3 I2, a4 I3) {
							fn.(finishBundle5x0[[]typex.Window, typex.BundleFinalization, I1, I2, I3]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[context.Context, []typex.Window, typex.BundleFinalization, I2, I3]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization, I2, I3))
						return &caller5x0[context.Context, []typex.Window, typex.BundleFinalization, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization, I2, I3))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization, a3 I2, a4 I3) {
							fn.(finishBundle5x0[context.Context, []typex.Window, typex.BundleFinalization, I2, I3]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2, I3]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2, I3))
						return &caller5x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2, I3))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization, a3 I2, a4 I3) {
							fn.(finishBundle5x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2, I3]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3))
						return &caller5x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.BundleFinalization, a4 I3) {
							fn.(finishBundle5x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[typex.EventTime, typex.BundleFinalization, I1, I2, I3]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization, I1, I2, I3))
						return &caller5x0[typex.EventTime, typex.BundleFinalization, I1, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization, I1, I2, I3))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization, a2 I1, a3 I2, a4 I3) {
							fn.(finishBundle5x0[typex.EventTime, typex.BundleFinalization, I1, I2, I3]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[context.Context, typex.EventTime, typex.BundleFinalization, I2, I3]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization, I2, I3))
						return &caller5x0[context.Context, typex.EventTime, typex.BundleFinalization, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization, I2, I3))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I2, a4 I3) {
							fn.(finishBundle5x0[context.Context, typex.EventTime, typex.BundleFinalization, I2, I3]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2, I3]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2, I3))
						return &caller5x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2, I3))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I2, a4 I3) {
							fn.(finishBundle5x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2, I3]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3))
						return &caller5x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I3) {
							fn.(finishBundle5x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3))
						return &caller5x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I2, a4 I3) {
							fn.(finishBundle5x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I3]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I3))
						return &caller5x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I3))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I3) {
							fn.(finishBundle5x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I3]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I3]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I3))
						return &caller5x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I3))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I3) {
							fn.(finishBundle5x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I3]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization))
						return &caller5x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 typex.BundleFinalization) {
							fn.(finishBundle5x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				}
			case finishBundleOut == 1:
				if _, ok := doFn.(finishBundle5x1[context.Context, I0, I1, I2, I3, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, I0, I1, I2, I3) error)
						return &caller5x1[context.Context, I0, I1, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, I0, I1, I2, I3) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 I0, a2 I1, a3 I2, a4 I3) error {
							return fn.(finishBundle5x1[context.Context, I0, I1, I2, I3, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[typex.PaneInfo, I0, I1, I2, I3, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, I0, I1, I2, I3) error)
						return &caller5x1[typex.PaneInfo, I0, I1, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, I0, I1, I2, I3) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 I0, a2 I1, a3 I2, a4 I3) error {
							return fn.(finishBundle5x1[typex.PaneInfo, I0, I1, I2, I3, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[context.Context, typex.PaneInfo, I1, I2, I3, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, I1, I2, I3) error)
						return &caller5x1[context.Context, typex.PaneInfo, I1, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, I1, I2, I3) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 I1, a3 I2, a4 I3) error {
							return fn.(finishBundle5x1[context.Context, typex.PaneInfo, I1, I2, I3, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[[]typex.Window, I0, I1, I2, I3, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, I0, I1, I2, I3) error)
						return &caller5x1[[]typex.Window, I0, I1, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, I0, I1, I2, I3) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 I0, a2 I1, a3 I2, a4 I3) error {
							return fn.(finishBundle5x1[[]typex.Window, I0, I1, I2, I3, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[context.Context, []typex.Window, I1, I2, I3, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, I1, I2, I3) error)
						return &caller5x1[context.Context, []typex.Window, I1, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, I1, I2, I3) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 I1, a3 I2, a4 I3) error {
							return fn.(finishBundle5x1[context.Context, []typex.Window, I1, I2, I3, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[typex.PaneInfo, []typex.Window, I1, I2, I3, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, I1, I2, I3) error)
						return &caller5x1[typex.PaneInfo, []typex.Window, I1, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, I1, I2, I3) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 I1, a3 I2, a4 I3) error {
							return fn.(finishBundle5x1[typex.PaneInfo, []typex.Window, I1, I2, I3, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[context.Context, typex.PaneInfo, []typex.Window, I2, I3, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, I2, I3) error)
						return &caller5x1[context.Context, typex.PaneInfo, []typex.Window, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, I2, I3) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 I2, a4 I3) error {
							return fn.(finishBundle5x1[context.Context, typex.PaneInfo, []typex.Window, I2, I3, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[typex.EventTime, I0, I1, I2, I3, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, I0, I1, I2, I3) error)
						return &caller5x1[typex.EventTime, I0, I1, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, I0, I1, I2, I3) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 I0, a2 I1, a3 I2, a4 I3) error {
							return fn.(finishBundle5x1[typex.EventTime, I0, I1, I2, I3, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[context.Context, typex.EventTime, I1, I2, I3, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, I1, I2, I3) error)
						return &caller5x1[context.Context, typex.EventTime, I1, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, I1, I2, I3) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 I1, a3 I2, a4 I3) error {
							return fn.(finishBundle5x1[context.Context, typex.EventTime, I1, I2, I3, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[typex.PaneInfo, typex.EventTime, I1, I2, I3, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, I1, I2, I3) error)
						return &caller5x1[typex.PaneInfo, typex.EventTime, I1, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, I1, I2, I3) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 I1, a3 I2, a4 I3) error {
							return fn.(finishBundle5x1[typex.PaneInfo, typex.EventTime, I1, I2, I3, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[context.Context, typex.PaneInfo, typex.EventTime, I2, I3, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, I2, I3) error)
						return &caller5x1[context.Context, typex.PaneInfo, typex.EventTime, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, I2, I3) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 I2, a4 I3) error {
							return fn.(finishBundle5x1[context.Context, typex.PaneInfo, typex.EventTime, I2, I3, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[[]typex.Window, typex.EventTime, I1, I2, I3, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, I1, I2, I3) error)
						return &caller5x1[[]typex.Window, typex.EventTime, I1, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, I1, I2, I3) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 I1, a3 I2, a4 I3) error {
							return fn.(finishBundle5x1[[]typex.Window, typex.EventTime, I1, I2, I3, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[context.Context, []typex.Window, typex.EventTime, I2, I3, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, I2, I3) error)
						return &caller5x1[context.Context, []typex.Window, typex.EventTime, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, I2, I3) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 I2, a4 I3) error {
							return fn.(finishBundle5x1[context.Context, []typex.Window, typex.EventTime, I2, I3, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[typex.PaneInfo, []typex.Window, typex.EventTime, I2, I3, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, I2, I3) error)
						return &caller5x1[typex.PaneInfo, []typex.Window, typex.EventTime, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, I2, I3) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 I2, a4 I3) error {
							return fn.(finishBundle5x1[typex.PaneInfo, []typex.Window, typex.EventTime, I2, I3, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I3, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I3) error)
						return &caller5x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I3) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 I3) error {
							return fn.(finishBundle5x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I3, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[typex.BundleFinalization, I0, I1, I2, I3, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization, I0, I1, I2, I3) error)
						return &caller5x1[typex.BundleFinalization, I0, I1, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization, I0, I1, I2, I3) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization, a1 I0, a2 I1, a3 I2, a4 I3) error {
							return fn.(finishBundle5x1[typex.BundleFinalization, I0, I1, I2, I3, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[context.Context, typex.BundleFinalization, I1, I2, I3, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization, I1, I2, I3) error)
						return &caller5x1[context.Context, typex.BundleFinalization, I1, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization, I1, I2, I3) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization, a2 I1, a3 I2, a4 I3) error {
							return fn.(finishBundle5x1[context.Context, typex.BundleFinalization, I1, I2, I3, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[typex.PaneInfo, typex.BundleFinalization, I1, I2, I3, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization, I1, I2, I3) error)
						return &caller5x1[typex.PaneInfo, typex.BundleFinalization, I1, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization, I1, I2, I3) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization, a2 I1, a3 I2, a4 I3) error {
							return fn.(finishBundle5x1[typex.PaneInfo, typex.BundleFinalization, I1, I2, I3, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I2, I3, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization, I2, I3) error)
						return &caller5x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization, I2, I3) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization, a3 I2, a4 I3) error {
							return fn.(finishBundle5x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I2, I3, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[[]typex.Window, typex.BundleFinalization, I1, I2, I3, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization, I1, I2, I3) error)
						return &caller5x1[[]typex.Window, typex.BundleFinalization, I1, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization, I1, I2, I3) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization, a2 I1, a3 I2, a4 I3) error {
							return fn.(finishBundle5x1[[]typex.Window, typex.BundleFinalization, I1, I2, I3, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[context.Context, []typex.Window, typex.BundleFinalization, I2, I3, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization, I2, I3) error)
						return &caller5x1[context.Context, []typex.Window, typex.BundleFinalization, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization, I2, I3) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization, a3 I2, a4 I3) error {
							return fn.(finishBundle5x1[context.Context, []typex.Window, typex.BundleFinalization, I2, I3, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2, I3, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2, I3) error)
						return &caller5x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2, I3) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization, a3 I2, a4 I3) error {
							return fn.(finishBundle5x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2, I3, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3) error)
						return &caller5x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.BundleFinalization, a4 I3) error {
							return fn.(finishBundle5x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[typex.EventTime, typex.BundleFinalization, I1, I2, I3, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization, I1, I2, I3) error)
						return &caller5x1[typex.EventTime, typex.BundleFinalization, I1, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization, I1, I2, I3) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization, a2 I1, a3 I2, a4 I3) error {
							return fn.(finishBundle5x1[typex.EventTime, typex.BundleFinalization, I1, I2, I3, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[context.Context, typex.EventTime, typex.BundleFinalization, I2, I3, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization, I2, I3) error)
						return &caller5x1[context.Context, typex.EventTime, typex.BundleFinalization, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization, I2, I3) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I2, a4 I3) error {
							return fn.(finishBundle5x1[context.Context, typex.EventTime, typex.BundleFinalization, I2, I3, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2, I3, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2, I3) error)
						return &caller5x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2, I3) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I2, a4 I3) error {
							return fn.(finishBundle5x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2, I3, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3) error)
						return &caller5x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I3) error {
							return fn.(finishBundle5x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3) error)
						return &caller5x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I2, a4 I3) error {
							return fn.(finishBundle5x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I3, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I3) error)
						return &caller5x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I3) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I3) error {
							return fn.(finishBundle5x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I3, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I3, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I3) error)
						return &caller5x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I3) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I3) error {
							return fn.(finishBundle5x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I3, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization) error)
						return &caller5x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 typex.BundleFinalization) error {
							return fn.(finishBundle5x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				}
			default:
				panic("Invalid signature for FinishBundle")
			}

		case finishBundleIn == 6:
			switch {
			case finishBundleOut == 0:
				if _, ok := doFn.(finishBundle6x0[context.Context, typex.PaneInfo, I0, I1, I2, I3]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, I0, I1, I2, I3))
						return &caller6x0[context.Context, typex.PaneInfo, I0, I1, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, I0, I1, I2, I3))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 I0, a3 I1, a4 I2, a5 I3) {
							fn.(finishBundle6x0[context.Context, typex.PaneInfo, I0, I1, I2, I3]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[context.Context, []typex.Window, I0, I1, I2, I3]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, I0, I1, I2, I3))
						return &caller6x0[context.Context, []typex.Window, I0, I1, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, I0, I1, I2, I3))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 I0, a3 I1, a4 I2, a5 I3) {
							fn.(finishBundle6x0[context.Context, []typex.Window, I0, I1, I2, I3]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[typex.PaneInfo, []typex.Window, I0, I1, I2, I3]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, I0, I1, I2, I3))
						return &caller6x0[typex.PaneInfo, []typex.Window, I0, I1, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, I0, I1, I2, I3))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 I0, a3 I1, a4 I2, a5 I3) {
							fn.(finishBundle6x0[typex.PaneInfo, []typex.Window, I0, I1, I2, I3]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[context.Context, typex.PaneInfo, []typex.Window, I1, I2, I3]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, I1, I2, I3))
						return &caller6x0[context.Context, typex.PaneInfo, []typex.Window, I1, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, I1, I2, I3))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 I1, a4 I2, a5 I3) {
							fn.(finishBundle6x0[context.Context, typex.PaneInfo, []typex.Window, I1, I2, I3]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[context.Context, typex.EventTime, I0, I1, I2, I3]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, I0, I1, I2, I3))
						return &caller6x0[context.Context, typex.EventTime, I0, I1, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, I0, I1, I2, I3))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 I0, a3 I1, a4 I2, a5 I3) {
							fn.(finishBundle6x0[context.Context, typex.EventTime, I0, I1, I2, I3]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[typex.PaneInfo, typex.EventTime, I0, I1, I2, I3]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, I0, I1, I2, I3))
						return &caller6x0[typex.PaneInfo, typex.EventTime, I0, I1, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, I0, I1, I2, I3))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 I0, a3 I1, a4 I2, a5 I3) {
							fn.(finishBundle6x0[typex.PaneInfo, typex.EventTime, I0, I1, I2, I3]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[context.Context, typex.PaneInfo, typex.EventTime, I1, I2, I3]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, I1, I2, I3))
						return &caller6x0[context.Context, typex.PaneInfo, typex.EventTime, I1, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, I1, I2, I3))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 I1, a4 I2, a5 I3) {
							fn.(finishBundle6x0[context.Context, typex.PaneInfo, typex.EventTime, I1, I2, I3]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[[]typex.Window, typex.EventTime, I0, I1, I2, I3]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, I0, I1, I2, I3))
						return &caller6x0[[]typex.Window, typex.EventTime, I0, I1, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, I0, I1, I2, I3))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 I0, a3 I1, a4 I2, a5 I3) {
							fn.(finishBundle6x0[[]typex.Window, typex.EventTime, I0, I1, I2, I3]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[context.Context, []typex.Window, typex.EventTime, I1, I2, I3]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, I1, I2, I3))
						return &caller6x0[context.Context, []typex.Window, typex.EventTime, I1, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, I1, I2, I3))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 I1, a4 I2, a5 I3) {
							fn.(finishBundle6x0[context.Context, []typex.Window, typex.EventTime, I1, I2, I3]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[typex.PaneInfo, []typex.Window, typex.EventTime, I1, I2, I3]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, I1, I2, I3))
						return &caller6x0[typex.PaneInfo, []typex.Window, typex.EventTime, I1, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, I1, I2, I3))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 I1, a4 I2, a5 I3) {
							fn.(finishBundle6x0[typex.PaneInfo, []typex.Window, typex.EventTime, I1, I2, I3]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I2, I3]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I2, I3))
						return &caller6x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I2, I3))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 I2, a5 I3) {
							fn.(finishBundle6x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I2, I3]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[context.Context, typex.BundleFinalization, I0, I1, I2, I3]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization, I0, I1, I2, I3))
						return &caller6x0[context.Context, typex.BundleFinalization, I0, I1, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization, I0, I1, I2, I3))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization, a2 I0, a3 I1, a4 I2, a5 I3) {
							fn.(finishBundle6x0[context.Context, typex.BundleFinalization, I0, I1, I2, I3]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[typex.PaneInfo, typex.BundleFinalization, I0, I1, I2, I3]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization, I0, I1, I2, I3))
						return &caller6x0[typex.PaneInfo, typex.BundleFinalization, I0, I1, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization, I0, I1, I2, I3))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization, a2 I0, a3 I1, a4 I2, a5 I3) {
							fn.(finishBundle6x0[typex.PaneInfo, typex.BundleFinalization, I0, I1, I2, I3]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I1, I2, I3]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization, I1, I2, I3))
						return &caller6x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I1, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization, I1, I2, I3))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization, a3 I1, a4 I2, a5 I3) {
							fn.(finishBundle6x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I1, I2, I3]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[[]typex.Window, typex.BundleFinalization, I0, I1, I2, I3]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization, I0, I1, I2, I3))
						return &caller6x0[[]typex.Window, typex.BundleFinalization, I0, I1, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization, I0, I1, I2, I3))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization, a2 I0, a3 I1, a4 I2, a5 I3) {
							fn.(finishBundle6x0[[]typex.Window, typex.BundleFinalization, I0, I1, I2, I3]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[context.Context, []typex.Window, typex.BundleFinalization, I1, I2, I3]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization, I1, I2, I3))
						return &caller6x0[context.Context, []typex.Window, typex.BundleFinalization, I1, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization, I1, I2, I3))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization, a3 I1, a4 I2, a5 I3) {
							fn.(finishBundle6x0[context.Context, []typex.Window, typex.BundleFinalization, I1, I2, I3]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1, I2, I3]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1, I2, I3))
						return &caller6x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1, I2, I3))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization, a3 I1, a4 I2, a5 I3) {
							fn.(finishBundle6x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1, I2, I3]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2, I3]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2, I3))
						return &caller6x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2, I3))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.BundleFinalization, a4 I2, a5 I3) {
							fn.(finishBundle6x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2, I3]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[typex.EventTime, typex.BundleFinalization, I0, I1, I2, I3]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization, I0, I1, I2, I3))
						return &caller6x0[typex.EventTime, typex.BundleFinalization, I0, I1, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization, I0, I1, I2, I3))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization, a2 I0, a3 I1, a4 I2, a5 I3) {
							fn.(finishBundle6x0[typex.EventTime, typex.BundleFinalization, I0, I1, I2, I3]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[context.Context, typex.EventTime, typex.BundleFinalization, I1, I2, I3]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization, I1, I2, I3))
						return &caller6x0[context.Context, typex.EventTime, typex.BundleFinalization, I1, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization, I1, I2, I3))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I1, a4 I2, a5 I3) {
							fn.(finishBundle6x0[context.Context, typex.EventTime, typex.BundleFinalization, I1, I2, I3]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1, I2, I3]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1, I2, I3))
						return &caller6x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1, I2, I3))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I1, a4 I2, a5 I3) {
							fn.(finishBundle6x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1, I2, I3]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2, I3]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2, I3))
						return &caller6x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2, I3))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I2, a5 I3) {
							fn.(finishBundle6x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2, I3]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2, I3]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2, I3))
						return &caller6x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2, I3))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I1, a4 I2, a5 I3) {
							fn.(finishBundle6x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2, I3]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3))
						return &caller6x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I2, a5 I3) {
							fn.(finishBundle6x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3))
						return &caller6x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I2, a5 I3) {
							fn.(finishBundle6x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I3]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I3))
						return &caller6x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I3))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 typex.BundleFinalization, a5 I3) {
							fn.(finishBundle6x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I3]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				}
			case finishBundleOut == 1:
				if _, ok := doFn.(finishBundle6x1[context.Context, typex.PaneInfo, I0, I1, I2, I3, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, I0, I1, I2, I3) error)
						return &caller6x1[context.Context, typex.PaneInfo, I0, I1, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, I0, I1, I2, I3) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 I0, a3 I1, a4 I2, a5 I3) error {
							return fn.(finishBundle6x1[context.Context, typex.PaneInfo, I0, I1, I2, I3, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[context.Context, []typex.Window, I0, I1, I2, I3, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, I0, I1, I2, I3) error)
						return &caller6x1[context.Context, []typex.Window, I0, I1, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, I0, I1, I2, I3) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 I0, a3 I1, a4 I2, a5 I3) error {
							return fn.(finishBundle6x1[context.Context, []typex.Window, I0, I1, I2, I3, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[typex.PaneInfo, []typex.Window, I0, I1, I2, I3, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, I0, I1, I2, I3) error)
						return &caller6x1[typex.PaneInfo, []typex.Window, I0, I1, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, I0, I1, I2, I3) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 I0, a3 I1, a4 I2, a5 I3) error {
							return fn.(finishBundle6x1[typex.PaneInfo, []typex.Window, I0, I1, I2, I3, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[context.Context, typex.PaneInfo, []typex.Window, I1, I2, I3, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, I1, I2, I3) error)
						return &caller6x1[context.Context, typex.PaneInfo, []typex.Window, I1, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, I1, I2, I3) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 I1, a4 I2, a5 I3) error {
							return fn.(finishBundle6x1[context.Context, typex.PaneInfo, []typex.Window, I1, I2, I3, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[context.Context, typex.EventTime, I0, I1, I2, I3, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, I0, I1, I2, I3) error)
						return &caller6x1[context.Context, typex.EventTime, I0, I1, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, I0, I1, I2, I3) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 I0, a3 I1, a4 I2, a5 I3) error {
							return fn.(finishBundle6x1[context.Context, typex.EventTime, I0, I1, I2, I3, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[typex.PaneInfo, typex.EventTime, I0, I1, I2, I3, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, I0, I1, I2, I3) error)
						return &caller6x1[typex.PaneInfo, typex.EventTime, I0, I1, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, I0, I1, I2, I3) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 I0, a3 I1, a4 I2, a5 I3) error {
							return fn.(finishBundle6x1[typex.PaneInfo, typex.EventTime, I0, I1, I2, I3, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[context.Context, typex.PaneInfo, typex.EventTime, I1, I2, I3, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, I1, I2, I3) error)
						return &caller6x1[context.Context, typex.PaneInfo, typex.EventTime, I1, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, I1, I2, I3) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 I1, a4 I2, a5 I3) error {
							return fn.(finishBundle6x1[context.Context, typex.PaneInfo, typex.EventTime, I1, I2, I3, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[[]typex.Window, typex.EventTime, I0, I1, I2, I3, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, I0, I1, I2, I3) error)
						return &caller6x1[[]typex.Window, typex.EventTime, I0, I1, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, I0, I1, I2, I3) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 I0, a3 I1, a4 I2, a5 I3) error {
							return fn.(finishBundle6x1[[]typex.Window, typex.EventTime, I0, I1, I2, I3, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[context.Context, []typex.Window, typex.EventTime, I1, I2, I3, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, I1, I2, I3) error)
						return &caller6x1[context.Context, []typex.Window, typex.EventTime, I1, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, I1, I2, I3) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 I1, a4 I2, a5 I3) error {
							return fn.(finishBundle6x1[context.Context, []typex.Window, typex.EventTime, I1, I2, I3, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[typex.PaneInfo, []typex.Window, typex.EventTime, I1, I2, I3, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, I1, I2, I3) error)
						return &caller6x1[typex.PaneInfo, []typex.Window, typex.EventTime, I1, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, I1, I2, I3) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 I1, a4 I2, a5 I3) error {
							return fn.(finishBundle6x1[typex.PaneInfo, []typex.Window, typex.EventTime, I1, I2, I3, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I2, I3, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I2, I3) error)
						return &caller6x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I2, I3) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 I2, a5 I3) error {
							return fn.(finishBundle6x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I2, I3, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[context.Context, typex.BundleFinalization, I0, I1, I2, I3, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization, I0, I1, I2, I3) error)
						return &caller6x1[context.Context, typex.BundleFinalization, I0, I1, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization, I0, I1, I2, I3) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization, a2 I0, a3 I1, a4 I2, a5 I3) error {
							return fn.(finishBundle6x1[context.Context, typex.BundleFinalization, I0, I1, I2, I3, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[typex.PaneInfo, typex.BundleFinalization, I0, I1, I2, I3, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization, I0, I1, I2, I3) error)
						return &caller6x1[typex.PaneInfo, typex.BundleFinalization, I0, I1, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization, I0, I1, I2, I3) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization, a2 I0, a3 I1, a4 I2, a5 I3) error {
							return fn.(finishBundle6x1[typex.PaneInfo, typex.BundleFinalization, I0, I1, I2, I3, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I1, I2, I3, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization, I1, I2, I3) error)
						return &caller6x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I1, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization, I1, I2, I3) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization, a3 I1, a4 I2, a5 I3) error {
							return fn.(finishBundle6x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I1, I2, I3, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[[]typex.Window, typex.BundleFinalization, I0, I1, I2, I3, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization, I0, I1, I2, I3) error)
						return &caller6x1[[]typex.Window, typex.BundleFinalization, I0, I1, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization, I0, I1, I2, I3) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization, a2 I0, a3 I1, a4 I2, a5 I3) error {
							return fn.(finishBundle6x1[[]typex.Window, typex.BundleFinalization, I0, I1, I2, I3, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[context.Context, []typex.Window, typex.BundleFinalization, I1, I2, I3, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization, I1, I2, I3) error)
						return &caller6x1[context.Context, []typex.Window, typex.BundleFinalization, I1, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization, I1, I2, I3) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization, a3 I1, a4 I2, a5 I3) error {
							return fn.(finishBundle6x1[context.Context, []typex.Window, typex.BundleFinalization, I1, I2, I3, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1, I2, I3, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1, I2, I3) error)
						return &caller6x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1, I2, I3) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization, a3 I1, a4 I2, a5 I3) error {
							return fn.(finishBundle6x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1, I2, I3, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2, I3, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2, I3) error)
						return &caller6x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2, I3) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.BundleFinalization, a4 I2, a5 I3) error {
							return fn.(finishBundle6x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2, I3, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[typex.EventTime, typex.BundleFinalization, I0, I1, I2, I3, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization, I0, I1, I2, I3) error)
						return &caller6x1[typex.EventTime, typex.BundleFinalization, I0, I1, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization, I0, I1, I2, I3) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization, a2 I0, a3 I1, a4 I2, a5 I3) error {
							return fn.(finishBundle6x1[typex.EventTime, typex.BundleFinalization, I0, I1, I2, I3, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[context.Context, typex.EventTime, typex.BundleFinalization, I1, I2, I3, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization, I1, I2, I3) error)
						return &caller6x1[context.Context, typex.EventTime, typex.BundleFinalization, I1, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization, I1, I2, I3) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I1, a4 I2, a5 I3) error {
							return fn.(finishBundle6x1[context.Context, typex.EventTime, typex.BundleFinalization, I1, I2, I3, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1, I2, I3, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1, I2, I3) error)
						return &caller6x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1, I2, I3) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I1, a4 I2, a5 I3) error {
							return fn.(finishBundle6x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1, I2, I3, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2, I3, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2, I3) error)
						return &caller6x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2, I3) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I2, a5 I3) error {
							return fn.(finishBundle6x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2, I3, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2, I3, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2, I3) error)
						return &caller6x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2, I3) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I1, a4 I2, a5 I3) error {
							return fn.(finishBundle6x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2, I3, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3) error)
						return &caller6x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I2, a5 I3) error {
							return fn.(finishBundle6x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3) error)
						return &caller6x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I2, a5 I3) error {
							return fn.(finishBundle6x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I3, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I3) error)
						return &caller6x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I3) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 typex.BundleFinalization, a5 I3) error {
							return fn.(finishBundle6x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I3, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				}
			default:
				panic("Invalid signature for FinishBundle")
			}

		case finishBundleIn == 7:
			switch {
			case finishBundleOut == 0:
				if _, ok := doFn.(finishBundle7x0[context.Context, typex.PaneInfo, []typex.Window, I0, I1, I2, I3]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, I0, I1, I2, I3))
						return &caller7x0[context.Context, typex.PaneInfo, []typex.Window, I0, I1, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, I0, I1, I2, I3))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 I0, a4 I1, a5 I2, a6 I3) {
							fn.(finishBundle7x0[context.Context, typex.PaneInfo, []typex.Window, I0, I1, I2, I3]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[context.Context, typex.PaneInfo, typex.EventTime, I0, I1, I2, I3]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, I0, I1, I2, I3))
						return &caller7x0[context.Context, typex.PaneInfo, typex.EventTime, I0, I1, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, I0, I1, I2, I3))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 I0, a4 I1, a5 I2, a6 I3) {
							fn.(finishBundle7x0[context.Context, typex.PaneInfo, typex.EventTime, I0, I1, I2, I3]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[context.Context, []typex.Window, typex.EventTime, I0, I1, I2, I3]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, I0, I1, I2, I3))
						return &caller7x0[context.Context, []typex.Window, typex.EventTime, I0, I1, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, I0, I1, I2, I3))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 I0, a4 I1, a5 I2, a6 I3) {
							fn.(finishBundle7x0[context.Context, []typex.Window, typex.EventTime, I0, I1, I2, I3]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[typex.PaneInfo, []typex.Window, typex.EventTime, I0, I1, I2, I3]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, I0, I1, I2, I3))
						return &caller7x0[typex.PaneInfo, []typex.Window, typex.EventTime, I0, I1, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, I0, I1, I2, I3))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 I0, a4 I1, a5 I2, a6 I3) {
							fn.(finishBundle7x0[typex.PaneInfo, []typex.Window, typex.EventTime, I0, I1, I2, I3]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I1, I2, I3]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I1, I2, I3))
						return &caller7x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I1, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I1, I2, I3))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 I1, a5 I2, a6 I3) {
							fn.(finishBundle7x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I1, I2, I3]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I0, I1, I2, I3]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization, I0, I1, I2, I3))
						return &caller7x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I0, I1, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization, I0, I1, I2, I3))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization, a3 I0, a4 I1, a5 I2, a6 I3) {
							fn.(finishBundle7x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I0, I1, I2, I3]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[context.Context, []typex.Window, typex.BundleFinalization, I0, I1, I2, I3]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization, I0, I1, I2, I3))
						return &caller7x0[context.Context, []typex.Window, typex.BundleFinalization, I0, I1, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization, I0, I1, I2, I3))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization, a3 I0, a4 I1, a5 I2, a6 I3) {
							fn.(finishBundle7x0[context.Context, []typex.Window, typex.BundleFinalization, I0, I1, I2, I3]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0, I1, I2, I3]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0, I1, I2, I3))
						return &caller7x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0, I1, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0, I1, I2, I3))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization, a3 I0, a4 I1, a5 I2, a6 I3) {
							fn.(finishBundle7x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0, I1, I2, I3]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1, I2, I3]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1, I2, I3))
						return &caller7x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1, I2, I3))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.BundleFinalization, a4 I1, a5 I2, a6 I3) {
							fn.(finishBundle7x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1, I2, I3]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[context.Context, typex.EventTime, typex.BundleFinalization, I0, I1, I2, I3]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization, I0, I1, I2, I3))
						return &caller7x0[context.Context, typex.EventTime, typex.BundleFinalization, I0, I1, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization, I0, I1, I2, I3))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I0, a4 I1, a5 I2, a6 I3) {
							fn.(finishBundle7x0[context.Context, typex.EventTime, typex.BundleFinalization, I0, I1, I2, I3]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0, I1, I2, I3]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0, I1, I2, I3))
						return &caller7x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0, I1, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0, I1, I2, I3))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I0, a4 I1, a5 I2, a6 I3) {
							fn.(finishBundle7x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0, I1, I2, I3]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1, I2, I3]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1, I2, I3))
						return &caller7x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1, I2, I3))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I1, a5 I2, a6 I3) {
							fn.(finishBundle7x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1, I2, I3]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1, I2, I3]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1, I2, I3))
						return &caller7x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1, I2, I3))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I0, a4 I1, a5 I2, a6 I3) {
							fn.(finishBundle7x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1, I2, I3]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2, I3]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2, I3))
						return &caller7x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2, I3))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I1, a5 I2, a6 I3) {
							fn.(finishBundle7x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2, I3]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2, I3]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2, I3))
						return &caller7x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2, I3))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I1, a5 I2, a6 I3) {
							fn.(finishBundle7x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2, I3]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3))
						return &caller7x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 typex.BundleFinalization, a5 I2, a6 I3) {
							fn.(finishBundle7x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				}
			case finishBundleOut == 1:
				if _, ok := doFn.(finishBundle7x1[context.Context, typex.PaneInfo, []typex.Window, I0, I1, I2, I3, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, I0, I1, I2, I3) error)
						return &caller7x1[context.Context, typex.PaneInfo, []typex.Window, I0, I1, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, I0, I1, I2, I3) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 I0, a4 I1, a5 I2, a6 I3) error {
							return fn.(finishBundle7x1[context.Context, typex.PaneInfo, []typex.Window, I0, I1, I2, I3, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[context.Context, typex.PaneInfo, typex.EventTime, I0, I1, I2, I3, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, I0, I1, I2, I3) error)
						return &caller7x1[context.Context, typex.PaneInfo, typex.EventTime, I0, I1, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, I0, I1, I2, I3) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 I0, a4 I1, a5 I2, a6 I3) error {
							return fn.(finishBundle7x1[context.Context, typex.PaneInfo, typex.EventTime, I0, I1, I2, I3, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[context.Context, []typex.Window, typex.EventTime, I0, I1, I2, I3, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, I0, I1, I2, I3) error)
						return &caller7x1[context.Context, []typex.Window, typex.EventTime, I0, I1, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, I0, I1, I2, I3) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 I0, a4 I1, a5 I2, a6 I3) error {
							return fn.(finishBundle7x1[context.Context, []typex.Window, typex.EventTime, I0, I1, I2, I3, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[typex.PaneInfo, []typex.Window, typex.EventTime, I0, I1, I2, I3, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, I0, I1, I2, I3) error)
						return &caller7x1[typex.PaneInfo, []typex.Window, typex.EventTime, I0, I1, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, I0, I1, I2, I3) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 I0, a4 I1, a5 I2, a6 I3) error {
							return fn.(finishBundle7x1[typex.PaneInfo, []typex.Window, typex.EventTime, I0, I1, I2, I3, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I1, I2, I3, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I1, I2, I3) error)
						return &caller7x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I1, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I1, I2, I3) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 I1, a5 I2, a6 I3) error {
							return fn.(finishBundle7x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I1, I2, I3, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I0, I1, I2, I3, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization, I0, I1, I2, I3) error)
						return &caller7x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I0, I1, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization, I0, I1, I2, I3) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization, a3 I0, a4 I1, a5 I2, a6 I3) error {
							return fn.(finishBundle7x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I0, I1, I2, I3, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[context.Context, []typex.Window, typex.BundleFinalization, I0, I1, I2, I3, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization, I0, I1, I2, I3) error)
						return &caller7x1[context.Context, []typex.Window, typex.BundleFinalization, I0, I1, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization, I0, I1, I2, I3) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization, a3 I0, a4 I1, a5 I2, a6 I3) error {
							return fn.(finishBundle7x1[context.Context, []typex.Window, typex.BundleFinalization, I0, I1, I2, I3, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0, I1, I2, I3, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0, I1, I2, I3) error)
						return &caller7x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0, I1, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0, I1, I2, I3) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization, a3 I0, a4 I1, a5 I2, a6 I3) error {
							return fn.(finishBundle7x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I0, I1, I2, I3, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1, I2, I3, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1, I2, I3) error)
						return &caller7x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1, I2, I3) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.BundleFinalization, a4 I1, a5 I2, a6 I3) error {
							return fn.(finishBundle7x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1, I2, I3, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[context.Context, typex.EventTime, typex.BundleFinalization, I0, I1, I2, I3, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization, I0, I1, I2, I3) error)
						return &caller7x1[context.Context, typex.EventTime, typex.BundleFinalization, I0, I1, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization, I0, I1, I2, I3) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I0, a4 I1, a5 I2, a6 I3) error {
							return fn.(finishBundle7x1[context.Context, typex.EventTime, typex.BundleFinalization, I0, I1, I2, I3, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0, I1, I2, I3, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0, I1, I2, I3) error)
						return &caller7x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0, I1, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0, I1, I2, I3) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I0, a4 I1, a5 I2, a6 I3) error {
							return fn.(finishBundle7x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I0, I1, I2, I3, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1, I2, I3, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1, I2, I3) error)
						return &caller7x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1, I2, I3) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I1, a5 I2, a6 I3) error {
							return fn.(finishBundle7x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1, I2, I3, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1, I2, I3, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1, I2, I3) error)
						return &caller7x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1, I2, I3) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I0, a4 I1, a5 I2, a6 I3) error {
							return fn.(finishBundle7x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I0, I1, I2, I3, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2, I3, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2, I3) error)
						return &caller7x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2, I3) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I1, a5 I2, a6 I3) error {
							return fn.(finishBundle7x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2, I3, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2, I3, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2, I3) error)
						return &caller7x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2, I3) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I1, a5 I2, a6 I3) error {
							return fn.(finishBundle7x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2, I3, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3) error)
						return &caller7x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 typex.BundleFinalization, a5 I2, a6 I3) error {
							return fn.(finishBundle7x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				}
			default:
				panic("Invalid signature for FinishBundle")
			}

		default:
			panic("Invalid signature for FinishBundle")
		}
	}
	return nil
}

func buildFinishBundleWrapper5[I0, I1, I2, I3, I4 any](doFn interface{}) func(interface{}) reflectx.Func {
	finishBundleIn := -1
	finishBundleOut := -1
	finishBundleMethod := reflect.ValueOf(doFn).MethodByName("FinishBundle")
	if finishBundleMethod.IsValid() {
		finishBundleIn = finishBundleMethod.Type().NumIn()
		finishBundleOut = finishBundleMethod.Type().NumOut()
		switch {

		case finishBundleIn == 0:
			switch {
			case finishBundleOut == 0:
				if _, ok := doFn.(finishBundle0x0); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func())
						return &caller0x0{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func())(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func() { fn.(finishBundle0x0).FinishBundle() })
					}
				}
			case finishBundleOut == 1:
				if _, ok := doFn.(finishBundle0x1[error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func() error)
						return &caller0x1[error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func() error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func() error { return fn.(finishBundle0x1[error]).FinishBundle() })
					}
				}
			default:
				panic("Invalid signature for FinishBundle")
			}

		case finishBundleIn == 1:
			switch {
			case finishBundleOut == 0:
				if _, ok := doFn.(finishBundle1x0[I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I4))
						return &caller1x0[I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I4) { fn.(finishBundle1x0[I4]).FinishBundle(a0) })
					}
				} else if _, ok := doFn.(finishBundle1x0[context.Context]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context))
						return &caller1x0[context.Context]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context) { fn.(finishBundle1x0[context.Context]).FinishBundle(a0) })
					}
				} else if _, ok := doFn.(finishBundle1x0[typex.PaneInfo]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo))
						return &caller1x0[typex.PaneInfo]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo) { fn.(finishBundle1x0[typex.PaneInfo]).FinishBundle(a0) })
					}
				} else if _, ok := doFn.(finishBundle1x0[[]typex.Window]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window))
						return &caller1x0[[]typex.Window]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window) { fn.(finishBundle1x0[[]typex.Window]).FinishBundle(a0) })
					}
				} else if _, ok := doFn.(finishBundle1x0[typex.EventTime]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime))
						return &caller1x0[typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime) { fn.(finishBundle1x0[typex.EventTime]).FinishBundle(a0) })
					}
				} else if _, ok := doFn.(finishBundle1x0[typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization))
						return &caller1x0[typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization) { fn.(finishBundle1x0[typex.BundleFinalization]).FinishBundle(a0) })
					}
				}
			case finishBundleOut == 1:
				if _, ok := doFn.(finishBundle1x1[I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I4) error)
						return &caller1x1[I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I4) error { return fn.(finishBundle1x1[I4, error]).FinishBundle(a0) })
					}
				} else if _, ok := doFn.(finishBundle1x1[context.Context, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context) error)
						return &caller1x1[context.Context, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context) error { return fn.(finishBundle1x1[context.Context, error]).FinishBundle(a0) })
					}
				} else if _, ok := doFn.(finishBundle1x1[typex.PaneInfo, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo) error)
						return &caller1x1[typex.PaneInfo, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo) error { return fn.(finishBundle1x1[typex.PaneInfo, error]).FinishBundle(a0) })
					}
				} else if _, ok := doFn.(finishBundle1x1[[]typex.Window, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window) error)
						return &caller1x1[[]typex.Window, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window) error { return fn.(finishBundle1x1[[]typex.Window, error]).FinishBundle(a0) })
					}
				} else if _, ok := doFn.(finishBundle1x1[typex.EventTime, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime) error)
						return &caller1x1[typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime) error { return fn.(finishBundle1x1[typex.EventTime, error]).FinishBundle(a0) })
					}
				} else if _, ok := doFn.(finishBundle1x1[typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization) error)
						return &caller1x1[typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization) error {
							return fn.(finishBundle1x1[typex.BundleFinalization, error]).FinishBundle(a0)
						})
					}
				}
			default:
				panic("Invalid signature for FinishBundle")
			}

		case finishBundleIn == 2:
			switch {
			case finishBundleOut == 0:
				if _, ok := doFn.(finishBundle2x0[I3, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I3, I4))
						return &caller2x0[I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I3, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I3, a1 I4) { fn.(finishBundle2x0[I3, I4]).FinishBundle(a0, a1) })
					}
				} else if _, ok := doFn.(finishBundle2x0[context.Context, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, I4))
						return &caller2x0[context.Context, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 I4) { fn.(finishBundle2x0[context.Context, I4]).FinishBundle(a0, a1) })
					}
				} else if _, ok := doFn.(finishBundle2x0[typex.PaneInfo, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, I4))
						return &caller2x0[typex.PaneInfo, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 I4) { fn.(finishBundle2x0[typex.PaneInfo, I4]).FinishBundle(a0, a1) })
					}
				} else if _, ok := doFn.(finishBundle2x0[context.Context, typex.PaneInfo]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo))
						return &caller2x0[context.Context, typex.PaneInfo]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo) {
							fn.(finishBundle2x0[context.Context, typex.PaneInfo]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x0[[]typex.Window, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, I4))
						return &caller2x0[[]typex.Window, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 I4) { fn.(finishBundle2x0[[]typex.Window, I4]).FinishBundle(a0, a1) })
					}
				} else if _, ok := doFn.(finishBundle2x0[context.Context, []typex.Window]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window))
						return &caller2x0[context.Context, []typex.Window]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window) {
							fn.(finishBundle2x0[context.Context, []typex.Window]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x0[typex.PaneInfo, []typex.Window]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window))
						return &caller2x0[typex.PaneInfo, []typex.Window]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window) {
							fn.(finishBundle2x0[typex.PaneInfo, []typex.Window]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x0[typex.EventTime, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, I4))
						return &caller2x0[typex.EventTime, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 I4) { fn.(finishBundle2x0[typex.EventTime, I4]).FinishBundle(a0, a1) })
					}
				} else if _, ok := doFn.(finishBundle2x0[context.Context, typex.EventTime]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime))
						return &caller2x0[context.Context, typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime) {
							fn.(finishBundle2x0[context.Context, typex.EventTime]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x0[typex.PaneInfo, typex.EventTime]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime))
						return &caller2x0[typex.PaneInfo, typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime) {
							fn.(finishBundle2x0[typex.PaneInfo, typex.EventTime]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x0[[]typex.Window, typex.EventTime]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime))
						return &caller2x0[[]typex.Window, typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime) {
							fn.(finishBundle2x0[[]typex.Window, typex.EventTime]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x0[typex.BundleFinalization, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization, I4))
						return &caller2x0[typex.BundleFinalization, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization, a1 I4) {
							fn.(finishBundle2x0[typex.BundleFinalization, I4]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x0[context.Context, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization))
						return &caller2x0[context.Context, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization) {
							fn.(finishBundle2x0[context.Context, typex.BundleFinalization]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x0[typex.PaneInfo, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization))
						return &caller2x0[typex.PaneInfo, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization) {
							fn.(finishBundle2x0[typex.PaneInfo, typex.BundleFinalization]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x0[[]typex.Window, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization))
						return &caller2x0[[]typex.Window, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization) {
							fn.(finishBundle2x0[[]typex.Window, typex.BundleFinalization]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x0[typex.EventTime, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization))
						return &caller2x0[typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization) {
							fn.(finishBundle2x0[typex.EventTime, typex.BundleFinalization]).FinishBundle(a0, a1)
						})
					}
				}
			case finishBundleOut == 1:
				if _, ok := doFn.(finishBundle2x1[I3, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I3, I4) error)
						return &caller2x1[I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I3, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I3, a1 I4) error { return fn.(finishBundle2x1[I3, I4, error]).FinishBundle(a0, a1) })
					}
				} else if _, ok := doFn.(finishBundle2x1[context.Context, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, I4) error)
						return &caller2x1[context.Context, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 I4) error {
							return fn.(finishBundle2x1[context.Context, I4, error]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x1[typex.PaneInfo, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, I4) error)
						return &caller2x1[typex.PaneInfo, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 I4) error {
							return fn.(finishBundle2x1[typex.PaneInfo, I4, error]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x1[context.Context, typex.PaneInfo, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo) error)
						return &caller2x1[context.Context, typex.PaneInfo, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo) error {
							return fn.(finishBundle2x1[context.Context, typex.PaneInfo, error]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x1[[]typex.Window, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, I4) error)
						return &caller2x1[[]typex.Window, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 I4) error {
							return fn.(finishBundle2x1[[]typex.Window, I4, error]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x1[context.Context, []typex.Window, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window) error)
						return &caller2x1[context.Context, []typex.Window, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window) error {
							return fn.(finishBundle2x1[context.Context, []typex.Window, error]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x1[typex.PaneInfo, []typex.Window, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window) error)
						return &caller2x1[typex.PaneInfo, []typex.Window, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window) error {
							return fn.(finishBundle2x1[typex.PaneInfo, []typex.Window, error]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x1[typex.EventTime, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, I4) error)
						return &caller2x1[typex.EventTime, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 I4) error {
							return fn.(finishBundle2x1[typex.EventTime, I4, error]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x1[context.Context, typex.EventTime, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime) error)
						return &caller2x1[context.Context, typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime) error {
							return fn.(finishBundle2x1[context.Context, typex.EventTime, error]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x1[typex.PaneInfo, typex.EventTime, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime) error)
						return &caller2x1[typex.PaneInfo, typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime) error {
							return fn.(finishBundle2x1[typex.PaneInfo, typex.EventTime, error]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x1[[]typex.Window, typex.EventTime, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime) error)
						return &caller2x1[[]typex.Window, typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime) error {
							return fn.(finishBundle2x1[[]typex.Window, typex.EventTime, error]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x1[typex.BundleFinalization, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization, I4) error)
						return &caller2x1[typex.BundleFinalization, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization, a1 I4) error {
							return fn.(finishBundle2x1[typex.BundleFinalization, I4, error]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x1[context.Context, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization) error)
						return &caller2x1[context.Context, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization) error {
							return fn.(finishBundle2x1[context.Context, typex.BundleFinalization, error]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x1[typex.PaneInfo, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization) error)
						return &caller2x1[typex.PaneInfo, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization) error {
							return fn.(finishBundle2x1[typex.PaneInfo, typex.BundleFinalization, error]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x1[[]typex.Window, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization) error)
						return &caller2x1[[]typex.Window, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization) error {
							return fn.(finishBundle2x1[[]typex.Window, typex.BundleFinalization, error]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x1[typex.EventTime, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization) error)
						return &caller2x1[typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization) error {
							return fn.(finishBundle2x1[typex.EventTime, typex.BundleFinalization, error]).FinishBundle(a0, a1)
						})
					}
				}
			default:
				panic("Invalid signature for FinishBundle")
			}

		case finishBundleIn == 3:
			switch {
			case finishBundleOut == 0:
				if _, ok := doFn.(finishBundle3x0[I2, I3, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I2, I3, I4))
						return &caller3x0[I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I2, I3, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I2, a1 I3, a2 I4) { fn.(finishBundle3x0[I2, I3, I4]).FinishBundle(a0, a1, a2) })
					}
				} else if _, ok := doFn.(finishBundle3x0[context.Context, I3, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, I3, I4))
						return &caller3x0[context.Context, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, I3, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 I3, a2 I4) {
							fn.(finishBundle3x0[context.Context, I3, I4]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[typex.PaneInfo, I3, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, I3, I4))
						return &caller3x0[typex.PaneInfo, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, I3, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 I3, a2 I4) {
							fn.(finishBundle3x0[typex.PaneInfo, I3, I4]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[context.Context, typex.PaneInfo, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, I4))
						return &caller3x0[context.Context, typex.PaneInfo, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 I4) {
							fn.(finishBundle3x0[context.Context, typex.PaneInfo, I4]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[[]typex.Window, I3, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, I3, I4))
						return &caller3x0[[]typex.Window, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, I3, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 I3, a2 I4) {
							fn.(finishBundle3x0[[]typex.Window, I3, I4]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[context.Context, []typex.Window, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, I4))
						return &caller3x0[context.Context, []typex.Window, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 I4) {
							fn.(finishBundle3x0[context.Context, []typex.Window, I4]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[typex.PaneInfo, []typex.Window, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, I4))
						return &caller3x0[typex.PaneInfo, []typex.Window, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 I4) {
							fn.(finishBundle3x0[typex.PaneInfo, []typex.Window, I4]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[context.Context, typex.PaneInfo, []typex.Window]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window))
						return &caller3x0[context.Context, typex.PaneInfo, []typex.Window]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window) {
							fn.(finishBundle3x0[context.Context, typex.PaneInfo, []typex.Window]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[typex.EventTime, I3, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, I3, I4))
						return &caller3x0[typex.EventTime, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, I3, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 I3, a2 I4) {
							fn.(finishBundle3x0[typex.EventTime, I3, I4]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[context.Context, typex.EventTime, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, I4))
						return &caller3x0[context.Context, typex.EventTime, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 I4) {
							fn.(finishBundle3x0[context.Context, typex.EventTime, I4]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[typex.PaneInfo, typex.EventTime, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, I4))
						return &caller3x0[typex.PaneInfo, typex.EventTime, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 I4) {
							fn.(finishBundle3x0[typex.PaneInfo, typex.EventTime, I4]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[context.Context, typex.PaneInfo, typex.EventTime]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime))
						return &caller3x0[context.Context, typex.PaneInfo, typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime) {
							fn.(finishBundle3x0[context.Context, typex.PaneInfo, typex.EventTime]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[[]typex.Window, typex.EventTime, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, I4))
						return &caller3x0[[]typex.Window, typex.EventTime, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 I4) {
							fn.(finishBundle3x0[[]typex.Window, typex.EventTime, I4]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[context.Context, []typex.Window, typex.EventTime]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime))
						return &caller3x0[context.Context, []typex.Window, typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime) {
							fn.(finishBundle3x0[context.Context, []typex.Window, typex.EventTime]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[typex.PaneInfo, []typex.Window, typex.EventTime]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime))
						return &caller3x0[typex.PaneInfo, []typex.Window, typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime) {
							fn.(finishBundle3x0[typex.PaneInfo, []typex.Window, typex.EventTime]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[typex.BundleFinalization, I3, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization, I3, I4))
						return &caller3x0[typex.BundleFinalization, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization, I3, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization, a1 I3, a2 I4) {
							fn.(finishBundle3x0[typex.BundleFinalization, I3, I4]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[context.Context, typex.BundleFinalization, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization, I4))
						return &caller3x0[context.Context, typex.BundleFinalization, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization, a2 I4) {
							fn.(finishBundle3x0[context.Context, typex.BundleFinalization, I4]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[typex.PaneInfo, typex.BundleFinalization, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization, I4))
						return &caller3x0[typex.PaneInfo, typex.BundleFinalization, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization, a2 I4) {
							fn.(finishBundle3x0[typex.PaneInfo, typex.BundleFinalization, I4]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[context.Context, typex.PaneInfo, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization))
						return &caller3x0[context.Context, typex.PaneInfo, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization) {
							fn.(finishBundle3x0[context.Context, typex.PaneInfo, typex.BundleFinalization]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[[]typex.Window, typex.BundleFinalization, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization, I4))
						return &caller3x0[[]typex.Window, typex.BundleFinalization, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization, a2 I4) {
							fn.(finishBundle3x0[[]typex.Window, typex.BundleFinalization, I4]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[context.Context, []typex.Window, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization))
						return &caller3x0[context.Context, []typex.Window, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization) {
							fn.(finishBundle3x0[context.Context, []typex.Window, typex.BundleFinalization]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization))
						return &caller3x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization) {
							fn.(finishBundle3x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[typex.EventTime, typex.BundleFinalization, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization, I4))
						return &caller3x0[typex.EventTime, typex.BundleFinalization, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization, a2 I4) {
							fn.(finishBundle3x0[typex.EventTime, typex.BundleFinalization, I4]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[context.Context, typex.EventTime, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization))
						return &caller3x0[context.Context, typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization) {
							fn.(finishBundle3x0[context.Context, typex.EventTime, typex.BundleFinalization]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization))
						return &caller3x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization) {
							fn.(finishBundle3x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[[]typex.Window, typex.EventTime, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization))
						return &caller3x0[[]typex.Window, typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization) {
							fn.(finishBundle3x0[[]typex.Window, typex.EventTime, typex.BundleFinalization]).FinishBundle(a0, a1, a2)
						})
					}
				}
			case finishBundleOut == 1:
				if _, ok := doFn.(finishBundle3x1[I2, I3, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I2, I3, I4) error)
						return &caller3x1[I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I2, I3, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I2, a1 I3, a2 I4) error {
							return fn.(finishBundle3x1[I2, I3, I4, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[context.Context, I3, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, I3, I4) error)
						return &caller3x1[context.Context, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, I3, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 I3, a2 I4) error {
							return fn.(finishBundle3x1[context.Context, I3, I4, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[typex.PaneInfo, I3, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, I3, I4) error)
						return &caller3x1[typex.PaneInfo, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, I3, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 I3, a2 I4) error {
							return fn.(finishBundle3x1[typex.PaneInfo, I3, I4, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[context.Context, typex.PaneInfo, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, I4) error)
						return &caller3x1[context.Context, typex.PaneInfo, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 I4) error {
							return fn.(finishBundle3x1[context.Context, typex.PaneInfo, I4, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[[]typex.Window, I3, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, I3, I4) error)
						return &caller3x1[[]typex.Window, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, I3, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 I3, a2 I4) error {
							return fn.(finishBundle3x1[[]typex.Window, I3, I4, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[context.Context, []typex.Window, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, I4) error)
						return &caller3x1[context.Context, []typex.Window, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 I4) error {
							return fn.(finishBundle3x1[context.Context, []typex.Window, I4, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[typex.PaneInfo, []typex.Window, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, I4) error)
						return &caller3x1[typex.PaneInfo, []typex.Window, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 I4) error {
							return fn.(finishBundle3x1[typex.PaneInfo, []typex.Window, I4, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[context.Context, typex.PaneInfo, []typex.Window, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window) error)
						return &caller3x1[context.Context, typex.PaneInfo, []typex.Window, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window) error {
							return fn.(finishBundle3x1[context.Context, typex.PaneInfo, []typex.Window, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[typex.EventTime, I3, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, I3, I4) error)
						return &caller3x1[typex.EventTime, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, I3, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 I3, a2 I4) error {
							return fn.(finishBundle3x1[typex.EventTime, I3, I4, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[context.Context, typex.EventTime, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, I4) error)
						return &caller3x1[context.Context, typex.EventTime, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 I4) error {
							return fn.(finishBundle3x1[context.Context, typex.EventTime, I4, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[typex.PaneInfo, typex.EventTime, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, I4) error)
						return &caller3x1[typex.PaneInfo, typex.EventTime, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 I4) error {
							return fn.(finishBundle3x1[typex.PaneInfo, typex.EventTime, I4, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[context.Context, typex.PaneInfo, typex.EventTime, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime) error)
						return &caller3x1[context.Context, typex.PaneInfo, typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime) error {
							return fn.(finishBundle3x1[context.Context, typex.PaneInfo, typex.EventTime, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[[]typex.Window, typex.EventTime, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, I4) error)
						return &caller3x1[[]typex.Window, typex.EventTime, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 I4) error {
							return fn.(finishBundle3x1[[]typex.Window, typex.EventTime, I4, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[context.Context, []typex.Window, typex.EventTime, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime) error)
						return &caller3x1[context.Context, []typex.Window, typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime) error {
							return fn.(finishBundle3x1[context.Context, []typex.Window, typex.EventTime, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[typex.PaneInfo, []typex.Window, typex.EventTime, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime) error)
						return &caller3x1[typex.PaneInfo, []typex.Window, typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime) error {
							return fn.(finishBundle3x1[typex.PaneInfo, []typex.Window, typex.EventTime, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[typex.BundleFinalization, I3, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization, I3, I4) error)
						return &caller3x1[typex.BundleFinalization, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization, I3, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization, a1 I3, a2 I4) error {
							return fn.(finishBundle3x1[typex.BundleFinalization, I3, I4, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[context.Context, typex.BundleFinalization, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization, I4) error)
						return &caller3x1[context.Context, typex.BundleFinalization, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization, a2 I4) error {
							return fn.(finishBundle3x1[context.Context, typex.BundleFinalization, I4, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[typex.PaneInfo, typex.BundleFinalization, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization, I4) error)
						return &caller3x1[typex.PaneInfo, typex.BundleFinalization, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization, a2 I4) error {
							return fn.(finishBundle3x1[typex.PaneInfo, typex.BundleFinalization, I4, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[context.Context, typex.PaneInfo, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization) error)
						return &caller3x1[context.Context, typex.PaneInfo, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization) error {
							return fn.(finishBundle3x1[context.Context, typex.PaneInfo, typex.BundleFinalization, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[[]typex.Window, typex.BundleFinalization, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization, I4) error)
						return &caller3x1[[]typex.Window, typex.BundleFinalization, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization, a2 I4) error {
							return fn.(finishBundle3x1[[]typex.Window, typex.BundleFinalization, I4, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[context.Context, []typex.Window, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization) error)
						return &caller3x1[context.Context, []typex.Window, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization) error {
							return fn.(finishBundle3x1[context.Context, []typex.Window, typex.BundleFinalization, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization) error)
						return &caller3x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization) error {
							return fn.(finishBundle3x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[typex.EventTime, typex.BundleFinalization, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization, I4) error)
						return &caller3x1[typex.EventTime, typex.BundleFinalization, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization, a2 I4) error {
							return fn.(finishBundle3x1[typex.EventTime, typex.BundleFinalization, I4, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[context.Context, typex.EventTime, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization) error)
						return &caller3x1[context.Context, typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization) error {
							return fn.(finishBundle3x1[context.Context, typex.EventTime, typex.BundleFinalization, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization) error)
						return &caller3x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization) error {
							return fn.(finishBundle3x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization) error)
						return &caller3x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization) error {
							return fn.(finishBundle3x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, error]).FinishBundle(a0, a1, a2)
						})
					}
				}
			default:
				panic("Invalid signature for FinishBundle")
			}

		case finishBundleIn == 4:
			switch {
			case finishBundleOut == 0:
				if _, ok := doFn.(finishBundle4x0[I1, I2, I3, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I1, I2, I3, I4))
						return &caller4x0[I1, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I1, I2, I3, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I1, a1 I2, a2 I3, a3 I4) { fn.(finishBundle4x0[I1, I2, I3, I4]).FinishBundle(a0, a1, a2, a3) })
					}
				} else if _, ok := doFn.(finishBundle4x0[context.Context, I2, I3, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, I2, I3, I4))
						return &caller4x0[context.Context, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, I2, I3, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 I2, a2 I3, a3 I4) {
							fn.(finishBundle4x0[context.Context, I2, I3, I4]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[typex.PaneInfo, I2, I3, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, I2, I3, I4))
						return &caller4x0[typex.PaneInfo, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, I2, I3, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 I2, a2 I3, a3 I4) {
							fn.(finishBundle4x0[typex.PaneInfo, I2, I3, I4]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[context.Context, typex.PaneInfo, I3, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, I3, I4))
						return &caller4x0[context.Context, typex.PaneInfo, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, I3, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 I3, a3 I4) {
							fn.(finishBundle4x0[context.Context, typex.PaneInfo, I3, I4]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[[]typex.Window, I2, I3, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, I2, I3, I4))
						return &caller4x0[[]typex.Window, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, I2, I3, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 I2, a2 I3, a3 I4) {
							fn.(finishBundle4x0[[]typex.Window, I2, I3, I4]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[context.Context, []typex.Window, I3, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, I3, I4))
						return &caller4x0[context.Context, []typex.Window, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, I3, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 I3, a3 I4) {
							fn.(finishBundle4x0[context.Context, []typex.Window, I3, I4]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[typex.PaneInfo, []typex.Window, I3, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, I3, I4))
						return &caller4x0[typex.PaneInfo, []typex.Window, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, I3, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 I3, a3 I4) {
							fn.(finishBundle4x0[typex.PaneInfo, []typex.Window, I3, I4]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[context.Context, typex.PaneInfo, []typex.Window, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, I4))
						return &caller4x0[context.Context, typex.PaneInfo, []typex.Window, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 I4) {
							fn.(finishBundle4x0[context.Context, typex.PaneInfo, []typex.Window, I4]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[typex.EventTime, I2, I3, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, I2, I3, I4))
						return &caller4x0[typex.EventTime, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, I2, I3, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 I2, a2 I3, a3 I4) {
							fn.(finishBundle4x0[typex.EventTime, I2, I3, I4]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[context.Context, typex.EventTime, I3, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, I3, I4))
						return &caller4x0[context.Context, typex.EventTime, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, I3, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 I3, a3 I4) {
							fn.(finishBundle4x0[context.Context, typex.EventTime, I3, I4]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[typex.PaneInfo, typex.EventTime, I3, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, I3, I4))
						return &caller4x0[typex.PaneInfo, typex.EventTime, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, I3, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 I3, a3 I4) {
							fn.(finishBundle4x0[typex.PaneInfo, typex.EventTime, I3, I4]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[context.Context, typex.PaneInfo, typex.EventTime, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, I4))
						return &caller4x0[context.Context, typex.PaneInfo, typex.EventTime, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 I4) {
							fn.(finishBundle4x0[context.Context, typex.PaneInfo, typex.EventTime, I4]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[[]typex.Window, typex.EventTime, I3, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, I3, I4))
						return &caller4x0[[]typex.Window, typex.EventTime, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, I3, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 I3, a3 I4) {
							fn.(finishBundle4x0[[]typex.Window, typex.EventTime, I3, I4]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[context.Context, []typex.Window, typex.EventTime, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, I4))
						return &caller4x0[context.Context, []typex.Window, typex.EventTime, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 I4) {
							fn.(finishBundle4x0[context.Context, []typex.Window, typex.EventTime, I4]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[typex.PaneInfo, []typex.Window, typex.EventTime, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, I4))
						return &caller4x0[typex.PaneInfo, []typex.Window, typex.EventTime, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 I4) {
							fn.(finishBundle4x0[typex.PaneInfo, []typex.Window, typex.EventTime, I4]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime))
						return &caller4x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime) {
							fn.(finishBundle4x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[typex.BundleFinalization, I2, I3, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization, I2, I3, I4))
						return &caller4x0[typex.BundleFinalization, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization, I2, I3, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization, a1 I2, a2 I3, a3 I4) {
							fn.(finishBundle4x0[typex.BundleFinalization, I2, I3, I4]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[context.Context, typex.BundleFinalization, I3, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization, I3, I4))
						return &caller4x0[context.Context, typex.BundleFinalization, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization, I3, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization, a2 I3, a3 I4) {
							fn.(finishBundle4x0[context.Context, typex.BundleFinalization, I3, I4]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[typex.PaneInfo, typex.BundleFinalization, I3, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization, I3, I4))
						return &caller4x0[typex.PaneInfo, typex.BundleFinalization, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization, I3, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization, a2 I3, a3 I4) {
							fn.(finishBundle4x0[typex.PaneInfo, typex.BundleFinalization, I3, I4]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization, I4))
						return &caller4x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization, a3 I4) {
							fn.(finishBundle4x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I4]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[[]typex.Window, typex.BundleFinalization, I3, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization, I3, I4))
						return &caller4x0[[]typex.Window, typex.BundleFinalization, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization, I3, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization, a2 I3, a3 I4) {
							fn.(finishBundle4x0[[]typex.Window, typex.BundleFinalization, I3, I4]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[context.Context, []typex.Window, typex.BundleFinalization, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization, I4))
						return &caller4x0[context.Context, []typex.Window, typex.BundleFinalization, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization, a3 I4) {
							fn.(finishBundle4x0[context.Context, []typex.Window, typex.BundleFinalization, I4]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4))
						return &caller4x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization, a3 I4) {
							fn.(finishBundle4x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization))
						return &caller4x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.BundleFinalization) {
							fn.(finishBundle4x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[typex.EventTime, typex.BundleFinalization, I3, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization, I3, I4))
						return &caller4x0[typex.EventTime, typex.BundleFinalization, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization, I3, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization, a2 I3, a3 I4) {
							fn.(finishBundle4x0[typex.EventTime, typex.BundleFinalization, I3, I4]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[context.Context, typex.EventTime, typex.BundleFinalization, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization, I4))
						return &caller4x0[context.Context, typex.EventTime, typex.BundleFinalization, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I4) {
							fn.(finishBundle4x0[context.Context, typex.EventTime, typex.BundleFinalization, I4]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4))
						return &caller4x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I4) {
							fn.(finishBundle4x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization))
						return &caller4x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 typex.BundleFinalization) {
							fn.(finishBundle4x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization, I4))
						return &caller4x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I4) {
							fn.(finishBundle4x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I4]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization))
						return &caller4x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization) {
							fn.(finishBundle4x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization))
						return &caller4x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization) {
							fn.(finishBundle4x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization]).FinishBundle(a0, a1, a2, a3)
						})
					}
				}
			case finishBundleOut == 1:
				if _, ok := doFn.(finishBundle4x1[I1, I2, I3, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I1, I2, I3, I4) error)
						return &caller4x1[I1, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I1, I2, I3, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I1, a1 I2, a2 I3, a3 I4) error {
							return fn.(finishBundle4x1[I1, I2, I3, I4, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[context.Context, I2, I3, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, I2, I3, I4) error)
						return &caller4x1[context.Context, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, I2, I3, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 I2, a2 I3, a3 I4) error {
							return fn.(finishBundle4x1[context.Context, I2, I3, I4, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[typex.PaneInfo, I2, I3, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, I2, I3, I4) error)
						return &caller4x1[typex.PaneInfo, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, I2, I3, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 I2, a2 I3, a3 I4) error {
							return fn.(finishBundle4x1[typex.PaneInfo, I2, I3, I4, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[context.Context, typex.PaneInfo, I3, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, I3, I4) error)
						return &caller4x1[context.Context, typex.PaneInfo, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, I3, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 I3, a3 I4) error {
							return fn.(finishBundle4x1[context.Context, typex.PaneInfo, I3, I4, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[[]typex.Window, I2, I3, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, I2, I3, I4) error)
						return &caller4x1[[]typex.Window, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, I2, I3, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 I2, a2 I3, a3 I4) error {
							return fn.(finishBundle4x1[[]typex.Window, I2, I3, I4, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[context.Context, []typex.Window, I3, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, I3, I4) error)
						return &caller4x1[context.Context, []typex.Window, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, I3, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 I3, a3 I4) error {
							return fn.(finishBundle4x1[context.Context, []typex.Window, I3, I4, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[typex.PaneInfo, []typex.Window, I3, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, I3, I4) error)
						return &caller4x1[typex.PaneInfo, []typex.Window, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, I3, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 I3, a3 I4) error {
							return fn.(finishBundle4x1[typex.PaneInfo, []typex.Window, I3, I4, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[context.Context, typex.PaneInfo, []typex.Window, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, I4) error)
						return &caller4x1[context.Context, typex.PaneInfo, []typex.Window, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 I4) error {
							return fn.(finishBundle4x1[context.Context, typex.PaneInfo, []typex.Window, I4, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[typex.EventTime, I2, I3, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, I2, I3, I4) error)
						return &caller4x1[typex.EventTime, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, I2, I3, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 I2, a2 I3, a3 I4) error {
							return fn.(finishBundle4x1[typex.EventTime, I2, I3, I4, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[context.Context, typex.EventTime, I3, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, I3, I4) error)
						return &caller4x1[context.Context, typex.EventTime, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, I3, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 I3, a3 I4) error {
							return fn.(finishBundle4x1[context.Context, typex.EventTime, I3, I4, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[typex.PaneInfo, typex.EventTime, I3, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, I3, I4) error)
						return &caller4x1[typex.PaneInfo, typex.EventTime, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, I3, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 I3, a3 I4) error {
							return fn.(finishBundle4x1[typex.PaneInfo, typex.EventTime, I3, I4, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[context.Context, typex.PaneInfo, typex.EventTime, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, I4) error)
						return &caller4x1[context.Context, typex.PaneInfo, typex.EventTime, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 I4) error {
							return fn.(finishBundle4x1[context.Context, typex.PaneInfo, typex.EventTime, I4, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[[]typex.Window, typex.EventTime, I3, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, I3, I4) error)
						return &caller4x1[[]typex.Window, typex.EventTime, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, I3, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 I3, a3 I4) error {
							return fn.(finishBundle4x1[[]typex.Window, typex.EventTime, I3, I4, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[context.Context, []typex.Window, typex.EventTime, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, I4) error)
						return &caller4x1[context.Context, []typex.Window, typex.EventTime, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 I4) error {
							return fn.(finishBundle4x1[context.Context, []typex.Window, typex.EventTime, I4, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[typex.PaneInfo, []typex.Window, typex.EventTime, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, I4) error)
						return &caller4x1[typex.PaneInfo, []typex.Window, typex.EventTime, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 I4) error {
							return fn.(finishBundle4x1[typex.PaneInfo, []typex.Window, typex.EventTime, I4, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime) error)
						return &caller4x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime) error {
							return fn.(finishBundle4x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[typex.BundleFinalization, I2, I3, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization, I2, I3, I4) error)
						return &caller4x1[typex.BundleFinalization, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization, I2, I3, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization, a1 I2, a2 I3, a3 I4) error {
							return fn.(finishBundle4x1[typex.BundleFinalization, I2, I3, I4, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[context.Context, typex.BundleFinalization, I3, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization, I3, I4) error)
						return &caller4x1[context.Context, typex.BundleFinalization, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization, I3, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization, a2 I3, a3 I4) error {
							return fn.(finishBundle4x1[context.Context, typex.BundleFinalization, I3, I4, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[typex.PaneInfo, typex.BundleFinalization, I3, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization, I3, I4) error)
						return &caller4x1[typex.PaneInfo, typex.BundleFinalization, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization, I3, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization, a2 I3, a3 I4) error {
							return fn.(finishBundle4x1[typex.PaneInfo, typex.BundleFinalization, I3, I4, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization, I4) error)
						return &caller4x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization, a3 I4) error {
							return fn.(finishBundle4x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I4, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[[]typex.Window, typex.BundleFinalization, I3, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization, I3, I4) error)
						return &caller4x1[[]typex.Window, typex.BundleFinalization, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization, I3, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization, a2 I3, a3 I4) error {
							return fn.(finishBundle4x1[[]typex.Window, typex.BundleFinalization, I3, I4, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[context.Context, []typex.Window, typex.BundleFinalization, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization, I4) error)
						return &caller4x1[context.Context, []typex.Window, typex.BundleFinalization, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization, a3 I4) error {
							return fn.(finishBundle4x1[context.Context, []typex.Window, typex.BundleFinalization, I4, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4) error)
						return &caller4x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization, a3 I4) error {
							return fn.(finishBundle4x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization) error)
						return &caller4x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.BundleFinalization) error {
							return fn.(finishBundle4x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[typex.EventTime, typex.BundleFinalization, I3, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization, I3, I4) error)
						return &caller4x1[typex.EventTime, typex.BundleFinalization, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization, I3, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization, a2 I3, a3 I4) error {
							return fn.(finishBundle4x1[typex.EventTime, typex.BundleFinalization, I3, I4, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[context.Context, typex.EventTime, typex.BundleFinalization, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization, I4) error)
						return &caller4x1[context.Context, typex.EventTime, typex.BundleFinalization, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I4) error {
							return fn.(finishBundle4x1[context.Context, typex.EventTime, typex.BundleFinalization, I4, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4) error)
						return &caller4x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I4) error {
							return fn.(finishBundle4x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization) error)
						return &caller4x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 typex.BundleFinalization) error {
							return fn.(finishBundle4x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization, I4) error)
						return &caller4x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I4) error {
							return fn.(finishBundle4x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I4, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization) error)
						return &caller4x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization) error {
							return fn.(finishBundle4x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization) error)
						return &caller4x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization) error {
							return fn.(finishBundle4x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				}
			default:
				panic("Invalid signature for FinishBundle")
			}

		case finishBundleIn == 5:
			switch {
			case finishBundleOut == 0:
				if _, ok := doFn.(finishBundle5x0[I0, I1, I2, I3, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I0, I1, I2, I3, I4))
						return &caller5x0[I0, I1, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I0, I1, I2, I3, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I0, a1 I1, a2 I2, a3 I3, a4 I4) {
							fn.(finishBundle5x0[I0, I1, I2, I3, I4]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[context.Context, I1, I2, I3, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, I1, I2, I3, I4))
						return &caller5x0[context.Context, I1, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, I1, I2, I3, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 I1, a2 I2, a3 I3, a4 I4) {
							fn.(finishBundle5x0[context.Context, I1, I2, I3, I4]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[typex.PaneInfo, I1, I2, I3, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, I1, I2, I3, I4))
						return &caller5x0[typex.PaneInfo, I1, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, I1, I2, I3, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 I1, a2 I2, a3 I3, a4 I4) {
							fn.(finishBundle5x0[typex.PaneInfo, I1, I2, I3, I4]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[context.Context, typex.PaneInfo, I2, I3, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, I2, I3, I4))
						return &caller5x0[context.Context, typex.PaneInfo, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, I2, I3, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 I2, a3 I3, a4 I4) {
							fn.(finishBundle5x0[context.Context, typex.PaneInfo, I2, I3, I4]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[[]typex.Window, I1, I2, I3, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, I1, I2, I3, I4))
						return &caller5x0[[]typex.Window, I1, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, I1, I2, I3, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 I1, a2 I2, a3 I3, a4 I4) {
							fn.(finishBundle5x0[[]typex.Window, I1, I2, I3, I4]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[context.Context, []typex.Window, I2, I3, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, I2, I3, I4))
						return &caller5x0[context.Context, []typex.Window, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, I2, I3, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 I2, a3 I3, a4 I4) {
							fn.(finishBundle5x0[context.Context, []typex.Window, I2, I3, I4]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[typex.PaneInfo, []typex.Window, I2, I3, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, I2, I3, I4))
						return &caller5x0[typex.PaneInfo, []typex.Window, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, I2, I3, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 I2, a3 I3, a4 I4) {
							fn.(finishBundle5x0[typex.PaneInfo, []typex.Window, I2, I3, I4]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[context.Context, typex.PaneInfo, []typex.Window, I3, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, I3, I4))
						return &caller5x0[context.Context, typex.PaneInfo, []typex.Window, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, I3, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 I3, a4 I4) {
							fn.(finishBundle5x0[context.Context, typex.PaneInfo, []typex.Window, I3, I4]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[typex.EventTime, I1, I2, I3, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, I1, I2, I3, I4))
						return &caller5x0[typex.EventTime, I1, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, I1, I2, I3, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 I1, a2 I2, a3 I3, a4 I4) {
							fn.(finishBundle5x0[typex.EventTime, I1, I2, I3, I4]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[context.Context, typex.EventTime, I2, I3, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, I2, I3, I4))
						return &caller5x0[context.Context, typex.EventTime, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, I2, I3, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 I2, a3 I3, a4 I4) {
							fn.(finishBundle5x0[context.Context, typex.EventTime, I2, I3, I4]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[typex.PaneInfo, typex.EventTime, I2, I3, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, I2, I3, I4))
						return &caller5x0[typex.PaneInfo, typex.EventTime, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, I2, I3, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 I2, a3 I3, a4 I4) {
							fn.(finishBundle5x0[typex.PaneInfo, typex.EventTime, I2, I3, I4]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[context.Context, typex.PaneInfo, typex.EventTime, I3, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, I3, I4))
						return &caller5x0[context.Context, typex.PaneInfo, typex.EventTime, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, I3, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 I3, a4 I4) {
							fn.(finishBundle5x0[context.Context, typex.PaneInfo, typex.EventTime, I3, I4]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[[]typex.Window, typex.EventTime, I2, I3, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, I2, I3, I4))
						return &caller5x0[[]typex.Window, typex.EventTime, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, I2, I3, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 I2, a3 I3, a4 I4) {
							fn.(finishBundle5x0[[]typex.Window, typex.EventTime, I2, I3, I4]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[context.Context, []typex.Window, typex.EventTime, I3, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, I3, I4))
						return &caller5x0[context.Context, []typex.Window, typex.EventTime, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, I3, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 I3, a4 I4) {
							fn.(finishBundle5x0[context.Context, []typex.Window, typex.EventTime, I3, I4]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[typex.PaneInfo, []typex.Window, typex.EventTime, I3, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, I3, I4))
						return &caller5x0[typex.PaneInfo, []typex.Window, typex.EventTime, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, I3, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 I3, a4 I4) {
							fn.(finishBundle5x0[typex.PaneInfo, []typex.Window, typex.EventTime, I3, I4]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I4))
						return &caller5x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 I4) {
							fn.(finishBundle5x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I4]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[typex.BundleFinalization, I1, I2, I3, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization, I1, I2, I3, I4))
						return &caller5x0[typex.BundleFinalization, I1, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization, I1, I2, I3, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization, a1 I1, a2 I2, a3 I3, a4 I4) {
							fn.(finishBundle5x0[typex.BundleFinalization, I1, I2, I3, I4]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[context.Context, typex.BundleFinalization, I2, I3, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization, I2, I3, I4))
						return &caller5x0[context.Context, typex.BundleFinalization, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization, I2, I3, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization, a2 I2, a3 I3, a4 I4) {
							fn.(finishBundle5x0[context.Context, typex.BundleFinalization, I2, I3, I4]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[typex.PaneInfo, typex.BundleFinalization, I2, I3, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization, I2, I3, I4))
						return &caller5x0[typex.PaneInfo, typex.BundleFinalization, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization, I2, I3, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization, a2 I2, a3 I3, a4 I4) {
							fn.(finishBundle5x0[typex.PaneInfo, typex.BundleFinalization, I2, I3, I4]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I3, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization, I3, I4))
						return &caller5x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization, I3, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization, a3 I3, a4 I4) {
							fn.(finishBundle5x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I3, I4]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[[]typex.Window, typex.BundleFinalization, I2, I3, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization, I2, I3, I4))
						return &caller5x0[[]typex.Window, typex.BundleFinalization, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization, I2, I3, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization, a2 I2, a3 I3, a4 I4) {
							fn.(finishBundle5x0[[]typex.Window, typex.BundleFinalization, I2, I3, I4]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[context.Context, []typex.Window, typex.BundleFinalization, I3, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization, I3, I4))
						return &caller5x0[context.Context, []typex.Window, typex.BundleFinalization, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization, I3, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization, a3 I3, a4 I4) {
							fn.(finishBundle5x0[context.Context, []typex.Window, typex.BundleFinalization, I3, I4]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3, I4))
						return &caller5x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization, a3 I3, a4 I4) {
							fn.(finishBundle5x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3, I4]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4))
						return &caller5x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.BundleFinalization, a4 I4) {
							fn.(finishBundle5x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[typex.EventTime, typex.BundleFinalization, I2, I3, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization, I2, I3, I4))
						return &caller5x0[typex.EventTime, typex.BundleFinalization, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization, I2, I3, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization, a2 I2, a3 I3, a4 I4) {
							fn.(finishBundle5x0[typex.EventTime, typex.BundleFinalization, I2, I3, I4]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[context.Context, typex.EventTime, typex.BundleFinalization, I3, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization, I3, I4))
						return &caller5x0[context.Context, typex.EventTime, typex.BundleFinalization, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization, I3, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I3, a4 I4) {
							fn.(finishBundle5x0[context.Context, typex.EventTime, typex.BundleFinalization, I3, I4]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3, I4))
						return &caller5x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I3, a4 I4) {
							fn.(finishBundle5x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3, I4]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4))
						return &caller5x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I4) {
							fn.(finishBundle5x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4))
						return &caller5x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I3, a4 I4) {
							fn.(finishBundle5x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I4))
						return &caller5x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I4) {
							fn.(finishBundle5x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I4]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I4))
						return &caller5x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I4) {
							fn.(finishBundle5x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I4]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization))
						return &caller5x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 typex.BundleFinalization) {
							fn.(finishBundle5x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				}
			case finishBundleOut == 1:
				if _, ok := doFn.(finishBundle5x1[I0, I1, I2, I3, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I0, I1, I2, I3, I4) error)
						return &caller5x1[I0, I1, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I0, I1, I2, I3, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I0, a1 I1, a2 I2, a3 I3, a4 I4) error {
							return fn.(finishBundle5x1[I0, I1, I2, I3, I4, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[context.Context, I1, I2, I3, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, I1, I2, I3, I4) error)
						return &caller5x1[context.Context, I1, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, I1, I2, I3, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 I1, a2 I2, a3 I3, a4 I4) error {
							return fn.(finishBundle5x1[context.Context, I1, I2, I3, I4, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[typex.PaneInfo, I1, I2, I3, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, I1, I2, I3, I4) error)
						return &caller5x1[typex.PaneInfo, I1, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, I1, I2, I3, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 I1, a2 I2, a3 I3, a4 I4) error {
							return fn.(finishBundle5x1[typex.PaneInfo, I1, I2, I3, I4, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[context.Context, typex.PaneInfo, I2, I3, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, I2, I3, I4) error)
						return &caller5x1[context.Context, typex.PaneInfo, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, I2, I3, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 I2, a3 I3, a4 I4) error {
							return fn.(finishBundle5x1[context.Context, typex.PaneInfo, I2, I3, I4, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[[]typex.Window, I1, I2, I3, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, I1, I2, I3, I4) error)
						return &caller5x1[[]typex.Window, I1, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, I1, I2, I3, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 I1, a2 I2, a3 I3, a4 I4) error {
							return fn.(finishBundle5x1[[]typex.Window, I1, I2, I3, I4, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[context.Context, []typex.Window, I2, I3, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, I2, I3, I4) error)
						return &caller5x1[context.Context, []typex.Window, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, I2, I3, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 I2, a3 I3, a4 I4) error {
							return fn.(finishBundle5x1[context.Context, []typex.Window, I2, I3, I4, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[typex.PaneInfo, []typex.Window, I2, I3, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, I2, I3, I4) error)
						return &caller5x1[typex.PaneInfo, []typex.Window, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, I2, I3, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 I2, a3 I3, a4 I4) error {
							return fn.(finishBundle5x1[typex.PaneInfo, []typex.Window, I2, I3, I4, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[context.Context, typex.PaneInfo, []typex.Window, I3, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, I3, I4) error)
						return &caller5x1[context.Context, typex.PaneInfo, []typex.Window, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, I3, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 I3, a4 I4) error {
							return fn.(finishBundle5x1[context.Context, typex.PaneInfo, []typex.Window, I3, I4, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[typex.EventTime, I1, I2, I3, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, I1, I2, I3, I4) error)
						return &caller5x1[typex.EventTime, I1, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, I1, I2, I3, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 I1, a2 I2, a3 I3, a4 I4) error {
							return fn.(finishBundle5x1[typex.EventTime, I1, I2, I3, I4, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[context.Context, typex.EventTime, I2, I3, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, I2, I3, I4) error)
						return &caller5x1[context.Context, typex.EventTime, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, I2, I3, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 I2, a3 I3, a4 I4) error {
							return fn.(finishBundle5x1[context.Context, typex.EventTime, I2, I3, I4, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[typex.PaneInfo, typex.EventTime, I2, I3, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, I2, I3, I4) error)
						return &caller5x1[typex.PaneInfo, typex.EventTime, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, I2, I3, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 I2, a3 I3, a4 I4) error {
							return fn.(finishBundle5x1[typex.PaneInfo, typex.EventTime, I2, I3, I4, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[context.Context, typex.PaneInfo, typex.EventTime, I3, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, I3, I4) error)
						return &caller5x1[context.Context, typex.PaneInfo, typex.EventTime, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, I3, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 I3, a4 I4) error {
							return fn.(finishBundle5x1[context.Context, typex.PaneInfo, typex.EventTime, I3, I4, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[[]typex.Window, typex.EventTime, I2, I3, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, I2, I3, I4) error)
						return &caller5x1[[]typex.Window, typex.EventTime, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, I2, I3, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 I2, a3 I3, a4 I4) error {
							return fn.(finishBundle5x1[[]typex.Window, typex.EventTime, I2, I3, I4, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[context.Context, []typex.Window, typex.EventTime, I3, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, I3, I4) error)
						return &caller5x1[context.Context, []typex.Window, typex.EventTime, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, I3, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 I3, a4 I4) error {
							return fn.(finishBundle5x1[context.Context, []typex.Window, typex.EventTime, I3, I4, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[typex.PaneInfo, []typex.Window, typex.EventTime, I3, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, I3, I4) error)
						return &caller5x1[typex.PaneInfo, []typex.Window, typex.EventTime, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, I3, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 I3, a4 I4) error {
							return fn.(finishBundle5x1[typex.PaneInfo, []typex.Window, typex.EventTime, I3, I4, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I4) error)
						return &caller5x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 I4) error {
							return fn.(finishBundle5x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I4, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[typex.BundleFinalization, I1, I2, I3, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization, I1, I2, I3, I4) error)
						return &caller5x1[typex.BundleFinalization, I1, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization, I1, I2, I3, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization, a1 I1, a2 I2, a3 I3, a4 I4) error {
							return fn.(finishBundle5x1[typex.BundleFinalization, I1, I2, I3, I4, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[context.Context, typex.BundleFinalization, I2, I3, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization, I2, I3, I4) error)
						return &caller5x1[context.Context, typex.BundleFinalization, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization, I2, I3, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization, a2 I2, a3 I3, a4 I4) error {
							return fn.(finishBundle5x1[context.Context, typex.BundleFinalization, I2, I3, I4, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[typex.PaneInfo, typex.BundleFinalization, I2, I3, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization, I2, I3, I4) error)
						return &caller5x1[typex.PaneInfo, typex.BundleFinalization, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization, I2, I3, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization, a2 I2, a3 I3, a4 I4) error {
							return fn.(finishBundle5x1[typex.PaneInfo, typex.BundleFinalization, I2, I3, I4, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I3, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization, I3, I4) error)
						return &caller5x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization, I3, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization, a3 I3, a4 I4) error {
							return fn.(finishBundle5x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I3, I4, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[[]typex.Window, typex.BundleFinalization, I2, I3, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization, I2, I3, I4) error)
						return &caller5x1[[]typex.Window, typex.BundleFinalization, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization, I2, I3, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization, a2 I2, a3 I3, a4 I4) error {
							return fn.(finishBundle5x1[[]typex.Window, typex.BundleFinalization, I2, I3, I4, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[context.Context, []typex.Window, typex.BundleFinalization, I3, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization, I3, I4) error)
						return &caller5x1[context.Context, []typex.Window, typex.BundleFinalization, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization, I3, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization, a3 I3, a4 I4) error {
							return fn.(finishBundle5x1[context.Context, []typex.Window, typex.BundleFinalization, I3, I4, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3, I4) error)
						return &caller5x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization, a3 I3, a4 I4) error {
							return fn.(finishBundle5x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3, I4, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4) error)
						return &caller5x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.BundleFinalization, a4 I4) error {
							return fn.(finishBundle5x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[typex.EventTime, typex.BundleFinalization, I2, I3, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization, I2, I3, I4) error)
						return &caller5x1[typex.EventTime, typex.BundleFinalization, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization, I2, I3, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization, a2 I2, a3 I3, a4 I4) error {
							return fn.(finishBundle5x1[typex.EventTime, typex.BundleFinalization, I2, I3, I4, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[context.Context, typex.EventTime, typex.BundleFinalization, I3, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization, I3, I4) error)
						return &caller5x1[context.Context, typex.EventTime, typex.BundleFinalization, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization, I3, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I3, a4 I4) error {
							return fn.(finishBundle5x1[context.Context, typex.EventTime, typex.BundleFinalization, I3, I4, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3, I4) error)
						return &caller5x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I3, a4 I4) error {
							return fn.(finishBundle5x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3, I4, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4) error)
						return &caller5x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I4) error {
							return fn.(finishBundle5x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4) error)
						return &caller5x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I3, a4 I4) error {
							return fn.(finishBundle5x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I4) error)
						return &caller5x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I4) error {
							return fn.(finishBundle5x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I4, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I4) error)
						return &caller5x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I4) error {
							return fn.(finishBundle5x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I4, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization) error)
						return &caller5x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 typex.BundleFinalization) error {
							return fn.(finishBundle5x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				}
			default:
				panic("Invalid signature for FinishBundle")
			}

		case finishBundleIn == 6:
			switch {
			case finishBundleOut == 0:
				if _, ok := doFn.(finishBundle6x0[context.Context, I0, I1, I2, I3, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, I0, I1, I2, I3, I4))
						return &caller6x0[context.Context, I0, I1, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, I0, I1, I2, I3, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 I0, a2 I1, a3 I2, a4 I3, a5 I4) {
							fn.(finishBundle6x0[context.Context, I0, I1, I2, I3, I4]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[typex.PaneInfo, I0, I1, I2, I3, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, I0, I1, I2, I3, I4))
						return &caller6x0[typex.PaneInfo, I0, I1, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, I0, I1, I2, I3, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 I0, a2 I1, a3 I2, a4 I3, a5 I4) {
							fn.(finishBundle6x0[typex.PaneInfo, I0, I1, I2, I3, I4]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[context.Context, typex.PaneInfo, I1, I2, I3, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, I1, I2, I3, I4))
						return &caller6x0[context.Context, typex.PaneInfo, I1, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, I1, I2, I3, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 I1, a3 I2, a4 I3, a5 I4) {
							fn.(finishBundle6x0[context.Context, typex.PaneInfo, I1, I2, I3, I4]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[[]typex.Window, I0, I1, I2, I3, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, I0, I1, I2, I3, I4))
						return &caller6x0[[]typex.Window, I0, I1, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, I0, I1, I2, I3, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 I0, a2 I1, a3 I2, a4 I3, a5 I4) {
							fn.(finishBundle6x0[[]typex.Window, I0, I1, I2, I3, I4]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[context.Context, []typex.Window, I1, I2, I3, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, I1, I2, I3, I4))
						return &caller6x0[context.Context, []typex.Window, I1, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, I1, I2, I3, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 I1, a3 I2, a4 I3, a5 I4) {
							fn.(finishBundle6x0[context.Context, []typex.Window, I1, I2, I3, I4]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[typex.PaneInfo, []typex.Window, I1, I2, I3, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, I1, I2, I3, I4))
						return &caller6x0[typex.PaneInfo, []typex.Window, I1, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, I1, I2, I3, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 I1, a3 I2, a4 I3, a5 I4) {
							fn.(finishBundle6x0[typex.PaneInfo, []typex.Window, I1, I2, I3, I4]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[context.Context, typex.PaneInfo, []typex.Window, I2, I3, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, I2, I3, I4))
						return &caller6x0[context.Context, typex.PaneInfo, []typex.Window, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, I2, I3, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 I2, a4 I3, a5 I4) {
							fn.(finishBundle6x0[context.Context, typex.PaneInfo, []typex.Window, I2, I3, I4]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[typex.EventTime, I0, I1, I2, I3, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, I0, I1, I2, I3, I4))
						return &caller6x0[typex.EventTime, I0, I1, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, I0, I1, I2, I3, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 I0, a2 I1, a3 I2, a4 I3, a5 I4) {
							fn.(finishBundle6x0[typex.EventTime, I0, I1, I2, I3, I4]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[context.Context, typex.EventTime, I1, I2, I3, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, I1, I2, I3, I4))
						return &caller6x0[context.Context, typex.EventTime, I1, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, I1, I2, I3, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 I1, a3 I2, a4 I3, a5 I4) {
							fn.(finishBundle6x0[context.Context, typex.EventTime, I1, I2, I3, I4]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[typex.PaneInfo, typex.EventTime, I1, I2, I3, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, I1, I2, I3, I4))
						return &caller6x0[typex.PaneInfo, typex.EventTime, I1, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, I1, I2, I3, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 I1, a3 I2, a4 I3, a5 I4) {
							fn.(finishBundle6x0[typex.PaneInfo, typex.EventTime, I1, I2, I3, I4]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[context.Context, typex.PaneInfo, typex.EventTime, I2, I3, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, I2, I3, I4))
						return &caller6x0[context.Context, typex.PaneInfo, typex.EventTime, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, I2, I3, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 I2, a4 I3, a5 I4) {
							fn.(finishBundle6x0[context.Context, typex.PaneInfo, typex.EventTime, I2, I3, I4]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[[]typex.Window, typex.EventTime, I1, I2, I3, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, I1, I2, I3, I4))
						return &caller6x0[[]typex.Window, typex.EventTime, I1, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, I1, I2, I3, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 I1, a3 I2, a4 I3, a5 I4) {
							fn.(finishBundle6x0[[]typex.Window, typex.EventTime, I1, I2, I3, I4]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[context.Context, []typex.Window, typex.EventTime, I2, I3, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, I2, I3, I4))
						return &caller6x0[context.Context, []typex.Window, typex.EventTime, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, I2, I3, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 I2, a4 I3, a5 I4) {
							fn.(finishBundle6x0[context.Context, []typex.Window, typex.EventTime, I2, I3, I4]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[typex.PaneInfo, []typex.Window, typex.EventTime, I2, I3, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, I2, I3, I4))
						return &caller6x0[typex.PaneInfo, []typex.Window, typex.EventTime, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, I2, I3, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 I2, a4 I3, a5 I4) {
							fn.(finishBundle6x0[typex.PaneInfo, []typex.Window, typex.EventTime, I2, I3, I4]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I3, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I3, I4))
						return &caller6x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I3, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 I3, a5 I4) {
							fn.(finishBundle6x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I3, I4]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[typex.BundleFinalization, I0, I1, I2, I3, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization, I0, I1, I2, I3, I4))
						return &caller6x0[typex.BundleFinalization, I0, I1, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization, I0, I1, I2, I3, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization, a1 I0, a2 I1, a3 I2, a4 I3, a5 I4) {
							fn.(finishBundle6x0[typex.BundleFinalization, I0, I1, I2, I3, I4]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[context.Context, typex.BundleFinalization, I1, I2, I3, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization, I1, I2, I3, I4))
						return &caller6x0[context.Context, typex.BundleFinalization, I1, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization, I1, I2, I3, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization, a2 I1, a3 I2, a4 I3, a5 I4) {
							fn.(finishBundle6x0[context.Context, typex.BundleFinalization, I1, I2, I3, I4]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[typex.PaneInfo, typex.BundleFinalization, I1, I2, I3, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization, I1, I2, I3, I4))
						return &caller6x0[typex.PaneInfo, typex.BundleFinalization, I1, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization, I1, I2, I3, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization, a2 I1, a3 I2, a4 I3, a5 I4) {
							fn.(finishBundle6x0[typex.PaneInfo, typex.BundleFinalization, I1, I2, I3, I4]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I2, I3, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization, I2, I3, I4))
						return &caller6x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization, I2, I3, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization, a3 I2, a4 I3, a5 I4) {
							fn.(finishBundle6x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I2, I3, I4]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[[]typex.Window, typex.BundleFinalization, I1, I2, I3, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization, I1, I2, I3, I4))
						return &caller6x0[[]typex.Window, typex.BundleFinalization, I1, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization, I1, I2, I3, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization, a2 I1, a3 I2, a4 I3, a5 I4) {
							fn.(finishBundle6x0[[]typex.Window, typex.BundleFinalization, I1, I2, I3, I4]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[context.Context, []typex.Window, typex.BundleFinalization, I2, I3, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization, I2, I3, I4))
						return &caller6x0[context.Context, []typex.Window, typex.BundleFinalization, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization, I2, I3, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization, a3 I2, a4 I3, a5 I4) {
							fn.(finishBundle6x0[context.Context, []typex.Window, typex.BundleFinalization, I2, I3, I4]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2, I3, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2, I3, I4))
						return &caller6x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2, I3, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization, a3 I2, a4 I3, a5 I4) {
							fn.(finishBundle6x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2, I3, I4]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3, I4))
						return &caller6x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.BundleFinalization, a4 I3, a5 I4) {
							fn.(finishBundle6x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3, I4]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[typex.EventTime, typex.BundleFinalization, I1, I2, I3, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization, I1, I2, I3, I4))
						return &caller6x0[typex.EventTime, typex.BundleFinalization, I1, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization, I1, I2, I3, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization, a2 I1, a3 I2, a4 I3, a5 I4) {
							fn.(finishBundle6x0[typex.EventTime, typex.BundleFinalization, I1, I2, I3, I4]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[context.Context, typex.EventTime, typex.BundleFinalization, I2, I3, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization, I2, I3, I4))
						return &caller6x0[context.Context, typex.EventTime, typex.BundleFinalization, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization, I2, I3, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I2, a4 I3, a5 I4) {
							fn.(finishBundle6x0[context.Context, typex.EventTime, typex.BundleFinalization, I2, I3, I4]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2, I3, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2, I3, I4))
						return &caller6x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2, I3, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I2, a4 I3, a5 I4) {
							fn.(finishBundle6x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2, I3, I4]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3, I4))
						return &caller6x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I3, a5 I4) {
							fn.(finishBundle6x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3, I4]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3, I4))
						return &caller6x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I2, a4 I3, a5 I4) {
							fn.(finishBundle6x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3, I4]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4))
						return &caller6x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I3, a5 I4) {
							fn.(finishBundle6x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4))
						return &caller6x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I3, a5 I4) {
							fn.(finishBundle6x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I4))
						return &caller6x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 typex.BundleFinalization, a5 I4) {
							fn.(finishBundle6x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I4]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				}
			case finishBundleOut == 1:
				if _, ok := doFn.(finishBundle6x1[context.Context, I0, I1, I2, I3, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, I0, I1, I2, I3, I4) error)
						return &caller6x1[context.Context, I0, I1, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, I0, I1, I2, I3, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 I0, a2 I1, a3 I2, a4 I3, a5 I4) error {
							return fn.(finishBundle6x1[context.Context, I0, I1, I2, I3, I4, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[typex.PaneInfo, I0, I1, I2, I3, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, I0, I1, I2, I3, I4) error)
						return &caller6x1[typex.PaneInfo, I0, I1, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, I0, I1, I2, I3, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 I0, a2 I1, a3 I2, a4 I3, a5 I4) error {
							return fn.(finishBundle6x1[typex.PaneInfo, I0, I1, I2, I3, I4, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[context.Context, typex.PaneInfo, I1, I2, I3, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, I1, I2, I3, I4) error)
						return &caller6x1[context.Context, typex.PaneInfo, I1, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, I1, I2, I3, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 I1, a3 I2, a4 I3, a5 I4) error {
							return fn.(finishBundle6x1[context.Context, typex.PaneInfo, I1, I2, I3, I4, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[[]typex.Window, I0, I1, I2, I3, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, I0, I1, I2, I3, I4) error)
						return &caller6x1[[]typex.Window, I0, I1, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, I0, I1, I2, I3, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 I0, a2 I1, a3 I2, a4 I3, a5 I4) error {
							return fn.(finishBundle6x1[[]typex.Window, I0, I1, I2, I3, I4, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[context.Context, []typex.Window, I1, I2, I3, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, I1, I2, I3, I4) error)
						return &caller6x1[context.Context, []typex.Window, I1, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, I1, I2, I3, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 I1, a3 I2, a4 I3, a5 I4) error {
							return fn.(finishBundle6x1[context.Context, []typex.Window, I1, I2, I3, I4, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[typex.PaneInfo, []typex.Window, I1, I2, I3, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, I1, I2, I3, I4) error)
						return &caller6x1[typex.PaneInfo, []typex.Window, I1, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, I1, I2, I3, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 I1, a3 I2, a4 I3, a5 I4) error {
							return fn.(finishBundle6x1[typex.PaneInfo, []typex.Window, I1, I2, I3, I4, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[context.Context, typex.PaneInfo, []typex.Window, I2, I3, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, I2, I3, I4) error)
						return &caller6x1[context.Context, typex.PaneInfo, []typex.Window, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, I2, I3, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 I2, a4 I3, a5 I4) error {
							return fn.(finishBundle6x1[context.Context, typex.PaneInfo, []typex.Window, I2, I3, I4, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[typex.EventTime, I0, I1, I2, I3, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, I0, I1, I2, I3, I4) error)
						return &caller6x1[typex.EventTime, I0, I1, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, I0, I1, I2, I3, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 I0, a2 I1, a3 I2, a4 I3, a5 I4) error {
							return fn.(finishBundle6x1[typex.EventTime, I0, I1, I2, I3, I4, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[context.Context, typex.EventTime, I1, I2, I3, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, I1, I2, I3, I4) error)
						return &caller6x1[context.Context, typex.EventTime, I1, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, I1, I2, I3, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 I1, a3 I2, a4 I3, a5 I4) error {
							return fn.(finishBundle6x1[context.Context, typex.EventTime, I1, I2, I3, I4, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[typex.PaneInfo, typex.EventTime, I1, I2, I3, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, I1, I2, I3, I4) error)
						return &caller6x1[typex.PaneInfo, typex.EventTime, I1, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, I1, I2, I3, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 I1, a3 I2, a4 I3, a5 I4) error {
							return fn.(finishBundle6x1[typex.PaneInfo, typex.EventTime, I1, I2, I3, I4, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[context.Context, typex.PaneInfo, typex.EventTime, I2, I3, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, I2, I3, I4) error)
						return &caller6x1[context.Context, typex.PaneInfo, typex.EventTime, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, I2, I3, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 I2, a4 I3, a5 I4) error {
							return fn.(finishBundle6x1[context.Context, typex.PaneInfo, typex.EventTime, I2, I3, I4, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[[]typex.Window, typex.EventTime, I1, I2, I3, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, I1, I2, I3, I4) error)
						return &caller6x1[[]typex.Window, typex.EventTime, I1, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, I1, I2, I3, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 I1, a3 I2, a4 I3, a5 I4) error {
							return fn.(finishBundle6x1[[]typex.Window, typex.EventTime, I1, I2, I3, I4, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[context.Context, []typex.Window, typex.EventTime, I2, I3, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, I2, I3, I4) error)
						return &caller6x1[context.Context, []typex.Window, typex.EventTime, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, I2, I3, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 I2, a4 I3, a5 I4) error {
							return fn.(finishBundle6x1[context.Context, []typex.Window, typex.EventTime, I2, I3, I4, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[typex.PaneInfo, []typex.Window, typex.EventTime, I2, I3, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, I2, I3, I4) error)
						return &caller6x1[typex.PaneInfo, []typex.Window, typex.EventTime, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, I2, I3, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 I2, a4 I3, a5 I4) error {
							return fn.(finishBundle6x1[typex.PaneInfo, []typex.Window, typex.EventTime, I2, I3, I4, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I3, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I3, I4) error)
						return &caller6x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I3, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 I3, a5 I4) error {
							return fn.(finishBundle6x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I3, I4, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[typex.BundleFinalization, I0, I1, I2, I3, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization, I0, I1, I2, I3, I4) error)
						return &caller6x1[typex.BundleFinalization, I0, I1, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization, I0, I1, I2, I3, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization, a1 I0, a2 I1, a3 I2, a4 I3, a5 I4) error {
							return fn.(finishBundle6x1[typex.BundleFinalization, I0, I1, I2, I3, I4, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[context.Context, typex.BundleFinalization, I1, I2, I3, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization, I1, I2, I3, I4) error)
						return &caller6x1[context.Context, typex.BundleFinalization, I1, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization, I1, I2, I3, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization, a2 I1, a3 I2, a4 I3, a5 I4) error {
							return fn.(finishBundle6x1[context.Context, typex.BundleFinalization, I1, I2, I3, I4, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[typex.PaneInfo, typex.BundleFinalization, I1, I2, I3, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization, I1, I2, I3, I4) error)
						return &caller6x1[typex.PaneInfo, typex.BundleFinalization, I1, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization, I1, I2, I3, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization, a2 I1, a3 I2, a4 I3, a5 I4) error {
							return fn.(finishBundle6x1[typex.PaneInfo, typex.BundleFinalization, I1, I2, I3, I4, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I2, I3, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization, I2, I3, I4) error)
						return &caller6x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization, I2, I3, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization, a3 I2, a4 I3, a5 I4) error {
							return fn.(finishBundle6x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I2, I3, I4, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[[]typex.Window, typex.BundleFinalization, I1, I2, I3, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization, I1, I2, I3, I4) error)
						return &caller6x1[[]typex.Window, typex.BundleFinalization, I1, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization, I1, I2, I3, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization, a2 I1, a3 I2, a4 I3, a5 I4) error {
							return fn.(finishBundle6x1[[]typex.Window, typex.BundleFinalization, I1, I2, I3, I4, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[context.Context, []typex.Window, typex.BundleFinalization, I2, I3, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization, I2, I3, I4) error)
						return &caller6x1[context.Context, []typex.Window, typex.BundleFinalization, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization, I2, I3, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization, a3 I2, a4 I3, a5 I4) error {
							return fn.(finishBundle6x1[context.Context, []typex.Window, typex.BundleFinalization, I2, I3, I4, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2, I3, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2, I3, I4) error)
						return &caller6x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2, I3, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization, a3 I2, a4 I3, a5 I4) error {
							return fn.(finishBundle6x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2, I3, I4, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3, I4) error)
						return &caller6x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.BundleFinalization, a4 I3, a5 I4) error {
							return fn.(finishBundle6x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3, I4, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[typex.EventTime, typex.BundleFinalization, I1, I2, I3, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization, I1, I2, I3, I4) error)
						return &caller6x1[typex.EventTime, typex.BundleFinalization, I1, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization, I1, I2, I3, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization, a2 I1, a3 I2, a4 I3, a5 I4) error {
							return fn.(finishBundle6x1[typex.EventTime, typex.BundleFinalization, I1, I2, I3, I4, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[context.Context, typex.EventTime, typex.BundleFinalization, I2, I3, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization, I2, I3, I4) error)
						return &caller6x1[context.Context, typex.EventTime, typex.BundleFinalization, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization, I2, I3, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I2, a4 I3, a5 I4) error {
							return fn.(finishBundle6x1[context.Context, typex.EventTime, typex.BundleFinalization, I2, I3, I4, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2, I3, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2, I3, I4) error)
						return &caller6x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2, I3, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I2, a4 I3, a5 I4) error {
							return fn.(finishBundle6x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2, I3, I4, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3, I4) error)
						return &caller6x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I3, a5 I4) error {
							return fn.(finishBundle6x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3, I4, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3, I4) error)
						return &caller6x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I2, a4 I3, a5 I4) error {
							return fn.(finishBundle6x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3, I4, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4) error)
						return &caller6x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I3, a5 I4) error {
							return fn.(finishBundle6x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4) error)
						return &caller6x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I3, a5 I4) error {
							return fn.(finishBundle6x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I4) error)
						return &caller6x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 typex.BundleFinalization, a5 I4) error {
							return fn.(finishBundle6x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I4, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				}
			default:
				panic("Invalid signature for FinishBundle")
			}

		case finishBundleIn == 7:
			switch {
			case finishBundleOut == 0:
				if _, ok := doFn.(finishBundle7x0[context.Context, typex.PaneInfo, I0, I1, I2, I3, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, I0, I1, I2, I3, I4))
						return &caller7x0[context.Context, typex.PaneInfo, I0, I1, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, I0, I1, I2, I3, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 I0, a3 I1, a4 I2, a5 I3, a6 I4) {
							fn.(finishBundle7x0[context.Context, typex.PaneInfo, I0, I1, I2, I3, I4]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[context.Context, []typex.Window, I0, I1, I2, I3, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, I0, I1, I2, I3, I4))
						return &caller7x0[context.Context, []typex.Window, I0, I1, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, I0, I1, I2, I3, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 I0, a3 I1, a4 I2, a5 I3, a6 I4) {
							fn.(finishBundle7x0[context.Context, []typex.Window, I0, I1, I2, I3, I4]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[typex.PaneInfo, []typex.Window, I0, I1, I2, I3, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, I0, I1, I2, I3, I4))
						return &caller7x0[typex.PaneInfo, []typex.Window, I0, I1, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, I0, I1, I2, I3, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 I0, a3 I1, a4 I2, a5 I3, a6 I4) {
							fn.(finishBundle7x0[typex.PaneInfo, []typex.Window, I0, I1, I2, I3, I4]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[context.Context, typex.PaneInfo, []typex.Window, I1, I2, I3, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, I1, I2, I3, I4))
						return &caller7x0[context.Context, typex.PaneInfo, []typex.Window, I1, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, I1, I2, I3, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 I1, a4 I2, a5 I3, a6 I4) {
							fn.(finishBundle7x0[context.Context, typex.PaneInfo, []typex.Window, I1, I2, I3, I4]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[context.Context, typex.EventTime, I0, I1, I2, I3, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, I0, I1, I2, I3, I4))
						return &caller7x0[context.Context, typex.EventTime, I0, I1, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, I0, I1, I2, I3, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 I0, a3 I1, a4 I2, a5 I3, a6 I4) {
							fn.(finishBundle7x0[context.Context, typex.EventTime, I0, I1, I2, I3, I4]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[typex.PaneInfo, typex.EventTime, I0, I1, I2, I3, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, I0, I1, I2, I3, I4))
						return &caller7x0[typex.PaneInfo, typex.EventTime, I0, I1, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, I0, I1, I2, I3, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 I0, a3 I1, a4 I2, a5 I3, a6 I4) {
							fn.(finishBundle7x0[typex.PaneInfo, typex.EventTime, I0, I1, I2, I3, I4]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[context.Context, typex.PaneInfo, typex.EventTime, I1, I2, I3, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, I1, I2, I3, I4))
						return &caller7x0[context.Context, typex.PaneInfo, typex.EventTime, I1, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, I1, I2, I3, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 I1, a4 I2, a5 I3, a6 I4) {
							fn.(finishBundle7x0[context.Context, typex.PaneInfo, typex.EventTime, I1, I2, I3, I4]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[[]typex.Window, typex.EventTime, I0, I1, I2, I3, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, I0, I1, I2, I3, I4))
						return &caller7x0[[]typex.Window, typex.EventTime, I0, I1, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, I0, I1, I2, I3, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 I0, a3 I1, a4 I2, a5 I3, a6 I4) {
							fn.(finishBundle7x0[[]typex.Window, typex.EventTime, I0, I1, I2, I3, I4]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[context.Context, []typex.Window, typex.EventTime, I1, I2, I3, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, I1, I2, I3, I4))
						return &caller7x0[context.Context, []typex.Window, typex.EventTime, I1, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, I1, I2, I3, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 I1, a4 I2, a5 I3, a6 I4) {
							fn.(finishBundle7x0[context.Context, []typex.Window, typex.EventTime, I1, I2, I3, I4]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[typex.PaneInfo, []typex.Window, typex.EventTime, I1, I2, I3, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, I1, I2, I3, I4))
						return &caller7x0[typex.PaneInfo, []typex.Window, typex.EventTime, I1, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, I1, I2, I3, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 I1, a4 I2, a5 I3, a6 I4) {
							fn.(finishBundle7x0[typex.PaneInfo, []typex.Window, typex.EventTime, I1, I2, I3, I4]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I2, I3, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I2, I3, I4))
						return &caller7x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I2, I3, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 I2, a5 I3, a6 I4) {
							fn.(finishBundle7x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I2, I3, I4]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[context.Context, typex.BundleFinalization, I0, I1, I2, I3, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization, I0, I1, I2, I3, I4))
						return &caller7x0[context.Context, typex.BundleFinalization, I0, I1, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization, I0, I1, I2, I3, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization, a2 I0, a3 I1, a4 I2, a5 I3, a6 I4) {
							fn.(finishBundle7x0[context.Context, typex.BundleFinalization, I0, I1, I2, I3, I4]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[typex.PaneInfo, typex.BundleFinalization, I0, I1, I2, I3, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization, I0, I1, I2, I3, I4))
						return &caller7x0[typex.PaneInfo, typex.BundleFinalization, I0, I1, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization, I0, I1, I2, I3, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization, a2 I0, a3 I1, a4 I2, a5 I3, a6 I4) {
							fn.(finishBundle7x0[typex.PaneInfo, typex.BundleFinalization, I0, I1, I2, I3, I4]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I1, I2, I3, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization, I1, I2, I3, I4))
						return &caller7x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I1, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization, I1, I2, I3, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization, a3 I1, a4 I2, a5 I3, a6 I4) {
							fn.(finishBundle7x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I1, I2, I3, I4]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[[]typex.Window, typex.BundleFinalization, I0, I1, I2, I3, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization, I0, I1, I2, I3, I4))
						return &caller7x0[[]typex.Window, typex.BundleFinalization, I0, I1, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization, I0, I1, I2, I3, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization, a2 I0, a3 I1, a4 I2, a5 I3, a6 I4) {
							fn.(finishBundle7x0[[]typex.Window, typex.BundleFinalization, I0, I1, I2, I3, I4]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[context.Context, []typex.Window, typex.BundleFinalization, I1, I2, I3, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization, I1, I2, I3, I4))
						return &caller7x0[context.Context, []typex.Window, typex.BundleFinalization, I1, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization, I1, I2, I3, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization, a3 I1, a4 I2, a5 I3, a6 I4) {
							fn.(finishBundle7x0[context.Context, []typex.Window, typex.BundleFinalization, I1, I2, I3, I4]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1, I2, I3, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1, I2, I3, I4))
						return &caller7x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1, I2, I3, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization, a3 I1, a4 I2, a5 I3, a6 I4) {
							fn.(finishBundle7x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1, I2, I3, I4]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2, I3, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2, I3, I4))
						return &caller7x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2, I3, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.BundleFinalization, a4 I2, a5 I3, a6 I4) {
							fn.(finishBundle7x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2, I3, I4]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[typex.EventTime, typex.BundleFinalization, I0, I1, I2, I3, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization, I0, I1, I2, I3, I4))
						return &caller7x0[typex.EventTime, typex.BundleFinalization, I0, I1, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization, I0, I1, I2, I3, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization, a2 I0, a3 I1, a4 I2, a5 I3, a6 I4) {
							fn.(finishBundle7x0[typex.EventTime, typex.BundleFinalization, I0, I1, I2, I3, I4]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[context.Context, typex.EventTime, typex.BundleFinalization, I1, I2, I3, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization, I1, I2, I3, I4))
						return &caller7x0[context.Context, typex.EventTime, typex.BundleFinalization, I1, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization, I1, I2, I3, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I1, a4 I2, a5 I3, a6 I4) {
							fn.(finishBundle7x0[context.Context, typex.EventTime, typex.BundleFinalization, I1, I2, I3, I4]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1, I2, I3, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1, I2, I3, I4))
						return &caller7x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1, I2, I3, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I1, a4 I2, a5 I3, a6 I4) {
							fn.(finishBundle7x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1, I2, I3, I4]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2, I3, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2, I3, I4))
						return &caller7x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2, I3, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I2, a5 I3, a6 I4) {
							fn.(finishBundle7x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2, I3, I4]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2, I3, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2, I3, I4))
						return &caller7x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2, I3, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I1, a4 I2, a5 I3, a6 I4) {
							fn.(finishBundle7x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2, I3, I4]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3, I4))
						return &caller7x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I2, a5 I3, a6 I4) {
							fn.(finishBundle7x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3, I4]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3, I4))
						return &caller7x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I2, a5 I3, a6 I4) {
							fn.(finishBundle7x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3, I4]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4))
						return &caller7x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 typex.BundleFinalization, a5 I3, a6 I4) {
							fn.(finishBundle7x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				}
			case finishBundleOut == 1:
				if _, ok := doFn.(finishBundle7x1[context.Context, typex.PaneInfo, I0, I1, I2, I3, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, I0, I1, I2, I3, I4) error)
						return &caller7x1[context.Context, typex.PaneInfo, I0, I1, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, I0, I1, I2, I3, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 I0, a3 I1, a4 I2, a5 I3, a6 I4) error {
							return fn.(finishBundle7x1[context.Context, typex.PaneInfo, I0, I1, I2, I3, I4, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[context.Context, []typex.Window, I0, I1, I2, I3, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, I0, I1, I2, I3, I4) error)
						return &caller7x1[context.Context, []typex.Window, I0, I1, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, I0, I1, I2, I3, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 I0, a3 I1, a4 I2, a5 I3, a6 I4) error {
							return fn.(finishBundle7x1[context.Context, []typex.Window, I0, I1, I2, I3, I4, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[typex.PaneInfo, []typex.Window, I0, I1, I2, I3, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, I0, I1, I2, I3, I4) error)
						return &caller7x1[typex.PaneInfo, []typex.Window, I0, I1, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, I0, I1, I2, I3, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 I0, a3 I1, a4 I2, a5 I3, a6 I4) error {
							return fn.(finishBundle7x1[typex.PaneInfo, []typex.Window, I0, I1, I2, I3, I4, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[context.Context, typex.PaneInfo, []typex.Window, I1, I2, I3, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, I1, I2, I3, I4) error)
						return &caller7x1[context.Context, typex.PaneInfo, []typex.Window, I1, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, I1, I2, I3, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 I1, a4 I2, a5 I3, a6 I4) error {
							return fn.(finishBundle7x1[context.Context, typex.PaneInfo, []typex.Window, I1, I2, I3, I4, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[context.Context, typex.EventTime, I0, I1, I2, I3, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, I0, I1, I2, I3, I4) error)
						return &caller7x1[context.Context, typex.EventTime, I0, I1, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, I0, I1, I2, I3, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 I0, a3 I1, a4 I2, a5 I3, a6 I4) error {
							return fn.(finishBundle7x1[context.Context, typex.EventTime, I0, I1, I2, I3, I4, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[typex.PaneInfo, typex.EventTime, I0, I1, I2, I3, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, I0, I1, I2, I3, I4) error)
						return &caller7x1[typex.PaneInfo, typex.EventTime, I0, I1, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, I0, I1, I2, I3, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 I0, a3 I1, a4 I2, a5 I3, a6 I4) error {
							return fn.(finishBundle7x1[typex.PaneInfo, typex.EventTime, I0, I1, I2, I3, I4, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[context.Context, typex.PaneInfo, typex.EventTime, I1, I2, I3, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, I1, I2, I3, I4) error)
						return &caller7x1[context.Context, typex.PaneInfo, typex.EventTime, I1, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, I1, I2, I3, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 I1, a4 I2, a5 I3, a6 I4) error {
							return fn.(finishBundle7x1[context.Context, typex.PaneInfo, typex.EventTime, I1, I2, I3, I4, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[[]typex.Window, typex.EventTime, I0, I1, I2, I3, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, I0, I1, I2, I3, I4) error)
						return &caller7x1[[]typex.Window, typex.EventTime, I0, I1, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, I0, I1, I2, I3, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 I0, a3 I1, a4 I2, a5 I3, a6 I4) error {
							return fn.(finishBundle7x1[[]typex.Window, typex.EventTime, I0, I1, I2, I3, I4, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[context.Context, []typex.Window, typex.EventTime, I1, I2, I3, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, I1, I2, I3, I4) error)
						return &caller7x1[context.Context, []typex.Window, typex.EventTime, I1, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, I1, I2, I3, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 I1, a4 I2, a5 I3, a6 I4) error {
							return fn.(finishBundle7x1[context.Context, []typex.Window, typex.EventTime, I1, I2, I3, I4, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[typex.PaneInfo, []typex.Window, typex.EventTime, I1, I2, I3, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, I1, I2, I3, I4) error)
						return &caller7x1[typex.PaneInfo, []typex.Window, typex.EventTime, I1, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, I1, I2, I3, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 I1, a4 I2, a5 I3, a6 I4) error {
							return fn.(finishBundle7x1[typex.PaneInfo, []typex.Window, typex.EventTime, I1, I2, I3, I4, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I2, I3, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I2, I3, I4) error)
						return &caller7x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I2, I3, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 I2, a5 I3, a6 I4) error {
							return fn.(finishBundle7x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I2, I3, I4, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[context.Context, typex.BundleFinalization, I0, I1, I2, I3, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization, I0, I1, I2, I3, I4) error)
						return &caller7x1[context.Context, typex.BundleFinalization, I0, I1, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization, I0, I1, I2, I3, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization, a2 I0, a3 I1, a4 I2, a5 I3, a6 I4) error {
							return fn.(finishBundle7x1[context.Context, typex.BundleFinalization, I0, I1, I2, I3, I4, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[typex.PaneInfo, typex.BundleFinalization, I0, I1, I2, I3, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization, I0, I1, I2, I3, I4) error)
						return &caller7x1[typex.PaneInfo, typex.BundleFinalization, I0, I1, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization, I0, I1, I2, I3, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization, a2 I0, a3 I1, a4 I2, a5 I3, a6 I4) error {
							return fn.(finishBundle7x1[typex.PaneInfo, typex.BundleFinalization, I0, I1, I2, I3, I4, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I1, I2, I3, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization, I1, I2, I3, I4) error)
						return &caller7x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I1, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization, I1, I2, I3, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization, a3 I1, a4 I2, a5 I3, a6 I4) error {
							return fn.(finishBundle7x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I1, I2, I3, I4, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[[]typex.Window, typex.BundleFinalization, I0, I1, I2, I3, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization, I0, I1, I2, I3, I4) error)
						return &caller7x1[[]typex.Window, typex.BundleFinalization, I0, I1, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization, I0, I1, I2, I3, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization, a2 I0, a3 I1, a4 I2, a5 I3, a6 I4) error {
							return fn.(finishBundle7x1[[]typex.Window, typex.BundleFinalization, I0, I1, I2, I3, I4, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[context.Context, []typex.Window, typex.BundleFinalization, I1, I2, I3, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization, I1, I2, I3, I4) error)
						return &caller7x1[context.Context, []typex.Window, typex.BundleFinalization, I1, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization, I1, I2, I3, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization, a3 I1, a4 I2, a5 I3, a6 I4) error {
							return fn.(finishBundle7x1[context.Context, []typex.Window, typex.BundleFinalization, I1, I2, I3, I4, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1, I2, I3, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1, I2, I3, I4) error)
						return &caller7x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1, I2, I3, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization, a3 I1, a4 I2, a5 I3, a6 I4) error {
							return fn.(finishBundle7x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I1, I2, I3, I4, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2, I3, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2, I3, I4) error)
						return &caller7x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2, I3, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.BundleFinalization, a4 I2, a5 I3, a6 I4) error {
							return fn.(finishBundle7x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2, I3, I4, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[typex.EventTime, typex.BundleFinalization, I0, I1, I2, I3, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization, I0, I1, I2, I3, I4) error)
						return &caller7x1[typex.EventTime, typex.BundleFinalization, I0, I1, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization, I0, I1, I2, I3, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization, a2 I0, a3 I1, a4 I2, a5 I3, a6 I4) error {
							return fn.(finishBundle7x1[typex.EventTime, typex.BundleFinalization, I0, I1, I2, I3, I4, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[context.Context, typex.EventTime, typex.BundleFinalization, I1, I2, I3, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization, I1, I2, I3, I4) error)
						return &caller7x1[context.Context, typex.EventTime, typex.BundleFinalization, I1, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization, I1, I2, I3, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I1, a4 I2, a5 I3, a6 I4) error {
							return fn.(finishBundle7x1[context.Context, typex.EventTime, typex.BundleFinalization, I1, I2, I3, I4, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1, I2, I3, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1, I2, I3, I4) error)
						return &caller7x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1, I2, I3, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I1, a4 I2, a5 I3, a6 I4) error {
							return fn.(finishBundle7x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I1, I2, I3, I4, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2, I3, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2, I3, I4) error)
						return &caller7x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2, I3, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I2, a5 I3, a6 I4) error {
							return fn.(finishBundle7x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2, I3, I4, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2, I3, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2, I3, I4) error)
						return &caller7x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2, I3, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I1, a4 I2, a5 I3, a6 I4) error {
							return fn.(finishBundle7x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I1, I2, I3, I4, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3, I4) error)
						return &caller7x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I2, a5 I3, a6 I4) error {
							return fn.(finishBundle7x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3, I4, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3, I4) error)
						return &caller7x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I2, a5 I3, a6 I4) error {
							return fn.(finishBundle7x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3, I4, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4) error)
						return &caller7x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 typex.BundleFinalization, a5 I3, a6 I4) error {
							return fn.(finishBundle7x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				}
			default:
				panic("Invalid signature for FinishBundle")
			}

		default:
			panic("Invalid signature for FinishBundle")
		}
	}
	return nil
}

func buildFinishBundleWrapper6[I0, I1, I2, I3, I4, I5 any](doFn interface{}) func(interface{}) reflectx.Func {
	finishBundleIn := -1
	finishBundleOut := -1
	finishBundleMethod := reflect.ValueOf(doFn).MethodByName("FinishBundle")
	if finishBundleMethod.IsValid() {
		finishBundleIn = finishBundleMethod.Type().NumIn()
		finishBundleOut = finishBundleMethod.Type().NumOut()
		switch {

		case finishBundleIn == 0:
			switch {
			case finishBundleOut == 0:
				if _, ok := doFn.(finishBundle0x0); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func())
						return &caller0x0{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func())(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func() { fn.(finishBundle0x0).FinishBundle() })
					}
				}
			case finishBundleOut == 1:
				if _, ok := doFn.(finishBundle0x1[error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func() error)
						return &caller0x1[error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func() error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func() error { return fn.(finishBundle0x1[error]).FinishBundle() })
					}
				}
			default:
				panic("Invalid signature for FinishBundle")
			}

		case finishBundleIn == 1:
			switch {
			case finishBundleOut == 0:
				if _, ok := doFn.(finishBundle1x0[I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I5))
						return &caller1x0[I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I5) { fn.(finishBundle1x0[I5]).FinishBundle(a0) })
					}
				} else if _, ok := doFn.(finishBundle1x0[context.Context]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context))
						return &caller1x0[context.Context]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context) { fn.(finishBundle1x0[context.Context]).FinishBundle(a0) })
					}
				} else if _, ok := doFn.(finishBundle1x0[typex.PaneInfo]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo))
						return &caller1x0[typex.PaneInfo]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo) { fn.(finishBundle1x0[typex.PaneInfo]).FinishBundle(a0) })
					}
				} else if _, ok := doFn.(finishBundle1x0[[]typex.Window]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window))
						return &caller1x0[[]typex.Window]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window) { fn.(finishBundle1x0[[]typex.Window]).FinishBundle(a0) })
					}
				} else if _, ok := doFn.(finishBundle1x0[typex.EventTime]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime))
						return &caller1x0[typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime) { fn.(finishBundle1x0[typex.EventTime]).FinishBundle(a0) })
					}
				} else if _, ok := doFn.(finishBundle1x0[typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization))
						return &caller1x0[typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization) { fn.(finishBundle1x0[typex.BundleFinalization]).FinishBundle(a0) })
					}
				}
			case finishBundleOut == 1:
				if _, ok := doFn.(finishBundle1x1[I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I5) error)
						return &caller1x1[I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I5) error { return fn.(finishBundle1x1[I5, error]).FinishBundle(a0) })
					}
				} else if _, ok := doFn.(finishBundle1x1[context.Context, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context) error)
						return &caller1x1[context.Context, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context) error { return fn.(finishBundle1x1[context.Context, error]).FinishBundle(a0) })
					}
				} else if _, ok := doFn.(finishBundle1x1[typex.PaneInfo, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo) error)
						return &caller1x1[typex.PaneInfo, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo) error { return fn.(finishBundle1x1[typex.PaneInfo, error]).FinishBundle(a0) })
					}
				} else if _, ok := doFn.(finishBundle1x1[[]typex.Window, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window) error)
						return &caller1x1[[]typex.Window, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window) error { return fn.(finishBundle1x1[[]typex.Window, error]).FinishBundle(a0) })
					}
				} else if _, ok := doFn.(finishBundle1x1[typex.EventTime, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime) error)
						return &caller1x1[typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime) error { return fn.(finishBundle1x1[typex.EventTime, error]).FinishBundle(a0) })
					}
				} else if _, ok := doFn.(finishBundle1x1[typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization) error)
						return &caller1x1[typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization) error {
							return fn.(finishBundle1x1[typex.BundleFinalization, error]).FinishBundle(a0)
						})
					}
				}
			default:
				panic("Invalid signature for FinishBundle")
			}

		case finishBundleIn == 2:
			switch {
			case finishBundleOut == 0:
				if _, ok := doFn.(finishBundle2x0[I4, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I4, I5))
						return &caller2x0[I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I4, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I4, a1 I5) { fn.(finishBundle2x0[I4, I5]).FinishBundle(a0, a1) })
					}
				} else if _, ok := doFn.(finishBundle2x0[context.Context, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, I5))
						return &caller2x0[context.Context, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 I5) { fn.(finishBundle2x0[context.Context, I5]).FinishBundle(a0, a1) })
					}
				} else if _, ok := doFn.(finishBundle2x0[typex.PaneInfo, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, I5))
						return &caller2x0[typex.PaneInfo, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 I5) { fn.(finishBundle2x0[typex.PaneInfo, I5]).FinishBundle(a0, a1) })
					}
				} else if _, ok := doFn.(finishBundle2x0[context.Context, typex.PaneInfo]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo))
						return &caller2x0[context.Context, typex.PaneInfo]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo) {
							fn.(finishBundle2x0[context.Context, typex.PaneInfo]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x0[[]typex.Window, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, I5))
						return &caller2x0[[]typex.Window, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 I5) { fn.(finishBundle2x0[[]typex.Window, I5]).FinishBundle(a0, a1) })
					}
				} else if _, ok := doFn.(finishBundle2x0[context.Context, []typex.Window]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window))
						return &caller2x0[context.Context, []typex.Window]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window) {
							fn.(finishBundle2x0[context.Context, []typex.Window]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x0[typex.PaneInfo, []typex.Window]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window))
						return &caller2x0[typex.PaneInfo, []typex.Window]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window) {
							fn.(finishBundle2x0[typex.PaneInfo, []typex.Window]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x0[typex.EventTime, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, I5))
						return &caller2x0[typex.EventTime, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 I5) { fn.(finishBundle2x0[typex.EventTime, I5]).FinishBundle(a0, a1) })
					}
				} else if _, ok := doFn.(finishBundle2x0[context.Context, typex.EventTime]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime))
						return &caller2x0[context.Context, typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime) {
							fn.(finishBundle2x0[context.Context, typex.EventTime]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x0[typex.PaneInfo, typex.EventTime]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime))
						return &caller2x0[typex.PaneInfo, typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime) {
							fn.(finishBundle2x0[typex.PaneInfo, typex.EventTime]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x0[[]typex.Window, typex.EventTime]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime))
						return &caller2x0[[]typex.Window, typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime) {
							fn.(finishBundle2x0[[]typex.Window, typex.EventTime]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x0[typex.BundleFinalization, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization, I5))
						return &caller2x0[typex.BundleFinalization, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization, a1 I5) {
							fn.(finishBundle2x0[typex.BundleFinalization, I5]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x0[context.Context, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization))
						return &caller2x0[context.Context, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization) {
							fn.(finishBundle2x0[context.Context, typex.BundleFinalization]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x0[typex.PaneInfo, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization))
						return &caller2x0[typex.PaneInfo, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization) {
							fn.(finishBundle2x0[typex.PaneInfo, typex.BundleFinalization]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x0[[]typex.Window, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization))
						return &caller2x0[[]typex.Window, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization) {
							fn.(finishBundle2x0[[]typex.Window, typex.BundleFinalization]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x0[typex.EventTime, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization))
						return &caller2x0[typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization) {
							fn.(finishBundle2x0[typex.EventTime, typex.BundleFinalization]).FinishBundle(a0, a1)
						})
					}
				}
			case finishBundleOut == 1:
				if _, ok := doFn.(finishBundle2x1[I4, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I4, I5) error)
						return &caller2x1[I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I4, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I4, a1 I5) error { return fn.(finishBundle2x1[I4, I5, error]).FinishBundle(a0, a1) })
					}
				} else if _, ok := doFn.(finishBundle2x1[context.Context, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, I5) error)
						return &caller2x1[context.Context, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 I5) error {
							return fn.(finishBundle2x1[context.Context, I5, error]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x1[typex.PaneInfo, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, I5) error)
						return &caller2x1[typex.PaneInfo, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 I5) error {
							return fn.(finishBundle2x1[typex.PaneInfo, I5, error]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x1[context.Context, typex.PaneInfo, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo) error)
						return &caller2x1[context.Context, typex.PaneInfo, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo) error {
							return fn.(finishBundle2x1[context.Context, typex.PaneInfo, error]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x1[[]typex.Window, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, I5) error)
						return &caller2x1[[]typex.Window, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 I5) error {
							return fn.(finishBundle2x1[[]typex.Window, I5, error]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x1[context.Context, []typex.Window, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window) error)
						return &caller2x1[context.Context, []typex.Window, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window) error {
							return fn.(finishBundle2x1[context.Context, []typex.Window, error]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x1[typex.PaneInfo, []typex.Window, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window) error)
						return &caller2x1[typex.PaneInfo, []typex.Window, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window) error {
							return fn.(finishBundle2x1[typex.PaneInfo, []typex.Window, error]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x1[typex.EventTime, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, I5) error)
						return &caller2x1[typex.EventTime, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 I5) error {
							return fn.(finishBundle2x1[typex.EventTime, I5, error]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x1[context.Context, typex.EventTime, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime) error)
						return &caller2x1[context.Context, typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime) error {
							return fn.(finishBundle2x1[context.Context, typex.EventTime, error]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x1[typex.PaneInfo, typex.EventTime, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime) error)
						return &caller2x1[typex.PaneInfo, typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime) error {
							return fn.(finishBundle2x1[typex.PaneInfo, typex.EventTime, error]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x1[[]typex.Window, typex.EventTime, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime) error)
						return &caller2x1[[]typex.Window, typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime) error {
							return fn.(finishBundle2x1[[]typex.Window, typex.EventTime, error]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x1[typex.BundleFinalization, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization, I5) error)
						return &caller2x1[typex.BundleFinalization, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization, a1 I5) error {
							return fn.(finishBundle2x1[typex.BundleFinalization, I5, error]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x1[context.Context, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization) error)
						return &caller2x1[context.Context, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization) error {
							return fn.(finishBundle2x1[context.Context, typex.BundleFinalization, error]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x1[typex.PaneInfo, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization) error)
						return &caller2x1[typex.PaneInfo, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization) error {
							return fn.(finishBundle2x1[typex.PaneInfo, typex.BundleFinalization, error]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x1[[]typex.Window, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization) error)
						return &caller2x1[[]typex.Window, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization) error {
							return fn.(finishBundle2x1[[]typex.Window, typex.BundleFinalization, error]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x1[typex.EventTime, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization) error)
						return &caller2x1[typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization) error {
							return fn.(finishBundle2x1[typex.EventTime, typex.BundleFinalization, error]).FinishBundle(a0, a1)
						})
					}
				}
			default:
				panic("Invalid signature for FinishBundle")
			}

		case finishBundleIn == 3:
			switch {
			case finishBundleOut == 0:
				if _, ok := doFn.(finishBundle3x0[I3, I4, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I3, I4, I5))
						return &caller3x0[I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I3, I4, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I3, a1 I4, a2 I5) { fn.(finishBundle3x0[I3, I4, I5]).FinishBundle(a0, a1, a2) })
					}
				} else if _, ok := doFn.(finishBundle3x0[context.Context, I4, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, I4, I5))
						return &caller3x0[context.Context, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, I4, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 I4, a2 I5) {
							fn.(finishBundle3x0[context.Context, I4, I5]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[typex.PaneInfo, I4, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, I4, I5))
						return &caller3x0[typex.PaneInfo, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, I4, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 I4, a2 I5) {
							fn.(finishBundle3x0[typex.PaneInfo, I4, I5]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[context.Context, typex.PaneInfo, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, I5))
						return &caller3x0[context.Context, typex.PaneInfo, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 I5) {
							fn.(finishBundle3x0[context.Context, typex.PaneInfo, I5]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[[]typex.Window, I4, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, I4, I5))
						return &caller3x0[[]typex.Window, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, I4, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 I4, a2 I5) {
							fn.(finishBundle3x0[[]typex.Window, I4, I5]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[context.Context, []typex.Window, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, I5))
						return &caller3x0[context.Context, []typex.Window, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 I5) {
							fn.(finishBundle3x0[context.Context, []typex.Window, I5]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[typex.PaneInfo, []typex.Window, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, I5))
						return &caller3x0[typex.PaneInfo, []typex.Window, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 I5) {
							fn.(finishBundle3x0[typex.PaneInfo, []typex.Window, I5]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[context.Context, typex.PaneInfo, []typex.Window]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window))
						return &caller3x0[context.Context, typex.PaneInfo, []typex.Window]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window) {
							fn.(finishBundle3x0[context.Context, typex.PaneInfo, []typex.Window]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[typex.EventTime, I4, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, I4, I5))
						return &caller3x0[typex.EventTime, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, I4, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 I4, a2 I5) {
							fn.(finishBundle3x0[typex.EventTime, I4, I5]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[context.Context, typex.EventTime, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, I5))
						return &caller3x0[context.Context, typex.EventTime, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 I5) {
							fn.(finishBundle3x0[context.Context, typex.EventTime, I5]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[typex.PaneInfo, typex.EventTime, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, I5))
						return &caller3x0[typex.PaneInfo, typex.EventTime, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 I5) {
							fn.(finishBundle3x0[typex.PaneInfo, typex.EventTime, I5]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[context.Context, typex.PaneInfo, typex.EventTime]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime))
						return &caller3x0[context.Context, typex.PaneInfo, typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime) {
							fn.(finishBundle3x0[context.Context, typex.PaneInfo, typex.EventTime]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[[]typex.Window, typex.EventTime, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, I5))
						return &caller3x0[[]typex.Window, typex.EventTime, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 I5) {
							fn.(finishBundle3x0[[]typex.Window, typex.EventTime, I5]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[context.Context, []typex.Window, typex.EventTime]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime))
						return &caller3x0[context.Context, []typex.Window, typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime) {
							fn.(finishBundle3x0[context.Context, []typex.Window, typex.EventTime]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[typex.PaneInfo, []typex.Window, typex.EventTime]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime))
						return &caller3x0[typex.PaneInfo, []typex.Window, typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime) {
							fn.(finishBundle3x0[typex.PaneInfo, []typex.Window, typex.EventTime]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[typex.BundleFinalization, I4, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization, I4, I5))
						return &caller3x0[typex.BundleFinalization, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization, I4, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization, a1 I4, a2 I5) {
							fn.(finishBundle3x0[typex.BundleFinalization, I4, I5]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[context.Context, typex.BundleFinalization, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization, I5))
						return &caller3x0[context.Context, typex.BundleFinalization, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization, a2 I5) {
							fn.(finishBundle3x0[context.Context, typex.BundleFinalization, I5]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[typex.PaneInfo, typex.BundleFinalization, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization, I5))
						return &caller3x0[typex.PaneInfo, typex.BundleFinalization, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization, a2 I5) {
							fn.(finishBundle3x0[typex.PaneInfo, typex.BundleFinalization, I5]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[context.Context, typex.PaneInfo, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization))
						return &caller3x0[context.Context, typex.PaneInfo, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization) {
							fn.(finishBundle3x0[context.Context, typex.PaneInfo, typex.BundleFinalization]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[[]typex.Window, typex.BundleFinalization, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization, I5))
						return &caller3x0[[]typex.Window, typex.BundleFinalization, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization, a2 I5) {
							fn.(finishBundle3x0[[]typex.Window, typex.BundleFinalization, I5]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[context.Context, []typex.Window, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization))
						return &caller3x0[context.Context, []typex.Window, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization) {
							fn.(finishBundle3x0[context.Context, []typex.Window, typex.BundleFinalization]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization))
						return &caller3x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization) {
							fn.(finishBundle3x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[typex.EventTime, typex.BundleFinalization, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization, I5))
						return &caller3x0[typex.EventTime, typex.BundleFinalization, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization, a2 I5) {
							fn.(finishBundle3x0[typex.EventTime, typex.BundleFinalization, I5]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[context.Context, typex.EventTime, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization))
						return &caller3x0[context.Context, typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization) {
							fn.(finishBundle3x0[context.Context, typex.EventTime, typex.BundleFinalization]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization))
						return &caller3x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization) {
							fn.(finishBundle3x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[[]typex.Window, typex.EventTime, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization))
						return &caller3x0[[]typex.Window, typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization) {
							fn.(finishBundle3x0[[]typex.Window, typex.EventTime, typex.BundleFinalization]).FinishBundle(a0, a1, a2)
						})
					}
				}
			case finishBundleOut == 1:
				if _, ok := doFn.(finishBundle3x1[I3, I4, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I3, I4, I5) error)
						return &caller3x1[I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I3, I4, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I3, a1 I4, a2 I5) error {
							return fn.(finishBundle3x1[I3, I4, I5, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[context.Context, I4, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, I4, I5) error)
						return &caller3x1[context.Context, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, I4, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 I4, a2 I5) error {
							return fn.(finishBundle3x1[context.Context, I4, I5, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[typex.PaneInfo, I4, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, I4, I5) error)
						return &caller3x1[typex.PaneInfo, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, I4, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 I4, a2 I5) error {
							return fn.(finishBundle3x1[typex.PaneInfo, I4, I5, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[context.Context, typex.PaneInfo, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, I5) error)
						return &caller3x1[context.Context, typex.PaneInfo, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 I5) error {
							return fn.(finishBundle3x1[context.Context, typex.PaneInfo, I5, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[[]typex.Window, I4, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, I4, I5) error)
						return &caller3x1[[]typex.Window, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, I4, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 I4, a2 I5) error {
							return fn.(finishBundle3x1[[]typex.Window, I4, I5, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[context.Context, []typex.Window, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, I5) error)
						return &caller3x1[context.Context, []typex.Window, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 I5) error {
							return fn.(finishBundle3x1[context.Context, []typex.Window, I5, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[typex.PaneInfo, []typex.Window, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, I5) error)
						return &caller3x1[typex.PaneInfo, []typex.Window, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 I5) error {
							return fn.(finishBundle3x1[typex.PaneInfo, []typex.Window, I5, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[context.Context, typex.PaneInfo, []typex.Window, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window) error)
						return &caller3x1[context.Context, typex.PaneInfo, []typex.Window, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window) error {
							return fn.(finishBundle3x1[context.Context, typex.PaneInfo, []typex.Window, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[typex.EventTime, I4, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, I4, I5) error)
						return &caller3x1[typex.EventTime, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, I4, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 I4, a2 I5) error {
							return fn.(finishBundle3x1[typex.EventTime, I4, I5, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[context.Context, typex.EventTime, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, I5) error)
						return &caller3x1[context.Context, typex.EventTime, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 I5) error {
							return fn.(finishBundle3x1[context.Context, typex.EventTime, I5, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[typex.PaneInfo, typex.EventTime, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, I5) error)
						return &caller3x1[typex.PaneInfo, typex.EventTime, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 I5) error {
							return fn.(finishBundle3x1[typex.PaneInfo, typex.EventTime, I5, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[context.Context, typex.PaneInfo, typex.EventTime, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime) error)
						return &caller3x1[context.Context, typex.PaneInfo, typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime) error {
							return fn.(finishBundle3x1[context.Context, typex.PaneInfo, typex.EventTime, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[[]typex.Window, typex.EventTime, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, I5) error)
						return &caller3x1[[]typex.Window, typex.EventTime, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 I5) error {
							return fn.(finishBundle3x1[[]typex.Window, typex.EventTime, I5, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[context.Context, []typex.Window, typex.EventTime, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime) error)
						return &caller3x1[context.Context, []typex.Window, typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime) error {
							return fn.(finishBundle3x1[context.Context, []typex.Window, typex.EventTime, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[typex.PaneInfo, []typex.Window, typex.EventTime, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime) error)
						return &caller3x1[typex.PaneInfo, []typex.Window, typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime) error {
							return fn.(finishBundle3x1[typex.PaneInfo, []typex.Window, typex.EventTime, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[typex.BundleFinalization, I4, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization, I4, I5) error)
						return &caller3x1[typex.BundleFinalization, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization, I4, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization, a1 I4, a2 I5) error {
							return fn.(finishBundle3x1[typex.BundleFinalization, I4, I5, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[context.Context, typex.BundleFinalization, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization, I5) error)
						return &caller3x1[context.Context, typex.BundleFinalization, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization, a2 I5) error {
							return fn.(finishBundle3x1[context.Context, typex.BundleFinalization, I5, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[typex.PaneInfo, typex.BundleFinalization, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization, I5) error)
						return &caller3x1[typex.PaneInfo, typex.BundleFinalization, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization, a2 I5) error {
							return fn.(finishBundle3x1[typex.PaneInfo, typex.BundleFinalization, I5, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[context.Context, typex.PaneInfo, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization) error)
						return &caller3x1[context.Context, typex.PaneInfo, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization) error {
							return fn.(finishBundle3x1[context.Context, typex.PaneInfo, typex.BundleFinalization, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[[]typex.Window, typex.BundleFinalization, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization, I5) error)
						return &caller3x1[[]typex.Window, typex.BundleFinalization, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization, a2 I5) error {
							return fn.(finishBundle3x1[[]typex.Window, typex.BundleFinalization, I5, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[context.Context, []typex.Window, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization) error)
						return &caller3x1[context.Context, []typex.Window, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization) error {
							return fn.(finishBundle3x1[context.Context, []typex.Window, typex.BundleFinalization, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization) error)
						return &caller3x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization) error {
							return fn.(finishBundle3x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[typex.EventTime, typex.BundleFinalization, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization, I5) error)
						return &caller3x1[typex.EventTime, typex.BundleFinalization, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization, a2 I5) error {
							return fn.(finishBundle3x1[typex.EventTime, typex.BundleFinalization, I5, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[context.Context, typex.EventTime, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization) error)
						return &caller3x1[context.Context, typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization) error {
							return fn.(finishBundle3x1[context.Context, typex.EventTime, typex.BundleFinalization, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization) error)
						return &caller3x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization) error {
							return fn.(finishBundle3x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization) error)
						return &caller3x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization) error {
							return fn.(finishBundle3x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, error]).FinishBundle(a0, a1, a2)
						})
					}
				}
			default:
				panic("Invalid signature for FinishBundle")
			}

		case finishBundleIn == 4:
			switch {
			case finishBundleOut == 0:
				if _, ok := doFn.(finishBundle4x0[I2, I3, I4, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I2, I3, I4, I5))
						return &caller4x0[I2, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I2, I3, I4, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I2, a1 I3, a2 I4, a3 I5) { fn.(finishBundle4x0[I2, I3, I4, I5]).FinishBundle(a0, a1, a2, a3) })
					}
				} else if _, ok := doFn.(finishBundle4x0[context.Context, I3, I4, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, I3, I4, I5))
						return &caller4x0[context.Context, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, I3, I4, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 I3, a2 I4, a3 I5) {
							fn.(finishBundle4x0[context.Context, I3, I4, I5]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[typex.PaneInfo, I3, I4, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, I3, I4, I5))
						return &caller4x0[typex.PaneInfo, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, I3, I4, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 I3, a2 I4, a3 I5) {
							fn.(finishBundle4x0[typex.PaneInfo, I3, I4, I5]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[context.Context, typex.PaneInfo, I4, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, I4, I5))
						return &caller4x0[context.Context, typex.PaneInfo, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, I4, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 I4, a3 I5) {
							fn.(finishBundle4x0[context.Context, typex.PaneInfo, I4, I5]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[[]typex.Window, I3, I4, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, I3, I4, I5))
						return &caller4x0[[]typex.Window, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, I3, I4, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 I3, a2 I4, a3 I5) {
							fn.(finishBundle4x0[[]typex.Window, I3, I4, I5]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[context.Context, []typex.Window, I4, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, I4, I5))
						return &caller4x0[context.Context, []typex.Window, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, I4, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 I4, a3 I5) {
							fn.(finishBundle4x0[context.Context, []typex.Window, I4, I5]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[typex.PaneInfo, []typex.Window, I4, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, I4, I5))
						return &caller4x0[typex.PaneInfo, []typex.Window, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, I4, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 I4, a3 I5) {
							fn.(finishBundle4x0[typex.PaneInfo, []typex.Window, I4, I5]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[context.Context, typex.PaneInfo, []typex.Window, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, I5))
						return &caller4x0[context.Context, typex.PaneInfo, []typex.Window, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 I5) {
							fn.(finishBundle4x0[context.Context, typex.PaneInfo, []typex.Window, I5]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[typex.EventTime, I3, I4, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, I3, I4, I5))
						return &caller4x0[typex.EventTime, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, I3, I4, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 I3, a2 I4, a3 I5) {
							fn.(finishBundle4x0[typex.EventTime, I3, I4, I5]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[context.Context, typex.EventTime, I4, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, I4, I5))
						return &caller4x0[context.Context, typex.EventTime, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, I4, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 I4, a3 I5) {
							fn.(finishBundle4x0[context.Context, typex.EventTime, I4, I5]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[typex.PaneInfo, typex.EventTime, I4, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, I4, I5))
						return &caller4x0[typex.PaneInfo, typex.EventTime, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, I4, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 I4, a3 I5) {
							fn.(finishBundle4x0[typex.PaneInfo, typex.EventTime, I4, I5]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[context.Context, typex.PaneInfo, typex.EventTime, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, I5))
						return &caller4x0[context.Context, typex.PaneInfo, typex.EventTime, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 I5) {
							fn.(finishBundle4x0[context.Context, typex.PaneInfo, typex.EventTime, I5]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[[]typex.Window, typex.EventTime, I4, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, I4, I5))
						return &caller4x0[[]typex.Window, typex.EventTime, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, I4, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 I4, a3 I5) {
							fn.(finishBundle4x0[[]typex.Window, typex.EventTime, I4, I5]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[context.Context, []typex.Window, typex.EventTime, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, I5))
						return &caller4x0[context.Context, []typex.Window, typex.EventTime, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 I5) {
							fn.(finishBundle4x0[context.Context, []typex.Window, typex.EventTime, I5]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[typex.PaneInfo, []typex.Window, typex.EventTime, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, I5))
						return &caller4x0[typex.PaneInfo, []typex.Window, typex.EventTime, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 I5) {
							fn.(finishBundle4x0[typex.PaneInfo, []typex.Window, typex.EventTime, I5]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime))
						return &caller4x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime) {
							fn.(finishBundle4x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[typex.BundleFinalization, I3, I4, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization, I3, I4, I5))
						return &caller4x0[typex.BundleFinalization, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization, I3, I4, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization, a1 I3, a2 I4, a3 I5) {
							fn.(finishBundle4x0[typex.BundleFinalization, I3, I4, I5]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[context.Context, typex.BundleFinalization, I4, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization, I4, I5))
						return &caller4x0[context.Context, typex.BundleFinalization, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization, I4, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization, a2 I4, a3 I5) {
							fn.(finishBundle4x0[context.Context, typex.BundleFinalization, I4, I5]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[typex.PaneInfo, typex.BundleFinalization, I4, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization, I4, I5))
						return &caller4x0[typex.PaneInfo, typex.BundleFinalization, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization, I4, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization, a2 I4, a3 I5) {
							fn.(finishBundle4x0[typex.PaneInfo, typex.BundleFinalization, I4, I5]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization, I5))
						return &caller4x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization, a3 I5) {
							fn.(finishBundle4x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I5]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[[]typex.Window, typex.BundleFinalization, I4, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization, I4, I5))
						return &caller4x0[[]typex.Window, typex.BundleFinalization, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization, I4, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization, a2 I4, a3 I5) {
							fn.(finishBundle4x0[[]typex.Window, typex.BundleFinalization, I4, I5]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[context.Context, []typex.Window, typex.BundleFinalization, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization, I5))
						return &caller4x0[context.Context, []typex.Window, typex.BundleFinalization, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization, a3 I5) {
							fn.(finishBundle4x0[context.Context, []typex.Window, typex.BundleFinalization, I5]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I5))
						return &caller4x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization, a3 I5) {
							fn.(finishBundle4x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I5]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization))
						return &caller4x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.BundleFinalization) {
							fn.(finishBundle4x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[typex.EventTime, typex.BundleFinalization, I4, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization, I4, I5))
						return &caller4x0[typex.EventTime, typex.BundleFinalization, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization, I4, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization, a2 I4, a3 I5) {
							fn.(finishBundle4x0[typex.EventTime, typex.BundleFinalization, I4, I5]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[context.Context, typex.EventTime, typex.BundleFinalization, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization, I5))
						return &caller4x0[context.Context, typex.EventTime, typex.BundleFinalization, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I5) {
							fn.(finishBundle4x0[context.Context, typex.EventTime, typex.BundleFinalization, I5]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I5))
						return &caller4x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I5) {
							fn.(finishBundle4x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I5]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization))
						return &caller4x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 typex.BundleFinalization) {
							fn.(finishBundle4x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization, I5))
						return &caller4x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I5) {
							fn.(finishBundle4x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I5]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization))
						return &caller4x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization) {
							fn.(finishBundle4x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization))
						return &caller4x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization) {
							fn.(finishBundle4x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization]).FinishBundle(a0, a1, a2, a3)
						})
					}
				}
			case finishBundleOut == 1:
				if _, ok := doFn.(finishBundle4x1[I2, I3, I4, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I2, I3, I4, I5) error)
						return &caller4x1[I2, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I2, I3, I4, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I2, a1 I3, a2 I4, a3 I5) error {
							return fn.(finishBundle4x1[I2, I3, I4, I5, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[context.Context, I3, I4, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, I3, I4, I5) error)
						return &caller4x1[context.Context, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, I3, I4, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 I3, a2 I4, a3 I5) error {
							return fn.(finishBundle4x1[context.Context, I3, I4, I5, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[typex.PaneInfo, I3, I4, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, I3, I4, I5) error)
						return &caller4x1[typex.PaneInfo, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, I3, I4, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 I3, a2 I4, a3 I5) error {
							return fn.(finishBundle4x1[typex.PaneInfo, I3, I4, I5, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[context.Context, typex.PaneInfo, I4, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, I4, I5) error)
						return &caller4x1[context.Context, typex.PaneInfo, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, I4, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 I4, a3 I5) error {
							return fn.(finishBundle4x1[context.Context, typex.PaneInfo, I4, I5, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[[]typex.Window, I3, I4, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, I3, I4, I5) error)
						return &caller4x1[[]typex.Window, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, I3, I4, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 I3, a2 I4, a3 I5) error {
							return fn.(finishBundle4x1[[]typex.Window, I3, I4, I5, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[context.Context, []typex.Window, I4, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, I4, I5) error)
						return &caller4x1[context.Context, []typex.Window, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, I4, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 I4, a3 I5) error {
							return fn.(finishBundle4x1[context.Context, []typex.Window, I4, I5, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[typex.PaneInfo, []typex.Window, I4, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, I4, I5) error)
						return &caller4x1[typex.PaneInfo, []typex.Window, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, I4, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 I4, a3 I5) error {
							return fn.(finishBundle4x1[typex.PaneInfo, []typex.Window, I4, I5, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[context.Context, typex.PaneInfo, []typex.Window, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, I5) error)
						return &caller4x1[context.Context, typex.PaneInfo, []typex.Window, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 I5) error {
							return fn.(finishBundle4x1[context.Context, typex.PaneInfo, []typex.Window, I5, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[typex.EventTime, I3, I4, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, I3, I4, I5) error)
						return &caller4x1[typex.EventTime, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, I3, I4, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 I3, a2 I4, a3 I5) error {
							return fn.(finishBundle4x1[typex.EventTime, I3, I4, I5, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[context.Context, typex.EventTime, I4, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, I4, I5) error)
						return &caller4x1[context.Context, typex.EventTime, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, I4, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 I4, a3 I5) error {
							return fn.(finishBundle4x1[context.Context, typex.EventTime, I4, I5, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[typex.PaneInfo, typex.EventTime, I4, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, I4, I5) error)
						return &caller4x1[typex.PaneInfo, typex.EventTime, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, I4, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 I4, a3 I5) error {
							return fn.(finishBundle4x1[typex.PaneInfo, typex.EventTime, I4, I5, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[context.Context, typex.PaneInfo, typex.EventTime, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, I5) error)
						return &caller4x1[context.Context, typex.PaneInfo, typex.EventTime, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 I5) error {
							return fn.(finishBundle4x1[context.Context, typex.PaneInfo, typex.EventTime, I5, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[[]typex.Window, typex.EventTime, I4, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, I4, I5) error)
						return &caller4x1[[]typex.Window, typex.EventTime, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, I4, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 I4, a3 I5) error {
							return fn.(finishBundle4x1[[]typex.Window, typex.EventTime, I4, I5, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[context.Context, []typex.Window, typex.EventTime, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, I5) error)
						return &caller4x1[context.Context, []typex.Window, typex.EventTime, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 I5) error {
							return fn.(finishBundle4x1[context.Context, []typex.Window, typex.EventTime, I5, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[typex.PaneInfo, []typex.Window, typex.EventTime, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, I5) error)
						return &caller4x1[typex.PaneInfo, []typex.Window, typex.EventTime, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 I5) error {
							return fn.(finishBundle4x1[typex.PaneInfo, []typex.Window, typex.EventTime, I5, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime) error)
						return &caller4x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime) error {
							return fn.(finishBundle4x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[typex.BundleFinalization, I3, I4, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization, I3, I4, I5) error)
						return &caller4x1[typex.BundleFinalization, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization, I3, I4, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization, a1 I3, a2 I4, a3 I5) error {
							return fn.(finishBundle4x1[typex.BundleFinalization, I3, I4, I5, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[context.Context, typex.BundleFinalization, I4, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization, I4, I5) error)
						return &caller4x1[context.Context, typex.BundleFinalization, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization, I4, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization, a2 I4, a3 I5) error {
							return fn.(finishBundle4x1[context.Context, typex.BundleFinalization, I4, I5, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[typex.PaneInfo, typex.BundleFinalization, I4, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization, I4, I5) error)
						return &caller4x1[typex.PaneInfo, typex.BundleFinalization, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization, I4, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization, a2 I4, a3 I5) error {
							return fn.(finishBundle4x1[typex.PaneInfo, typex.BundleFinalization, I4, I5, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization, I5) error)
						return &caller4x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization, a3 I5) error {
							return fn.(finishBundle4x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I5, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[[]typex.Window, typex.BundleFinalization, I4, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization, I4, I5) error)
						return &caller4x1[[]typex.Window, typex.BundleFinalization, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization, I4, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization, a2 I4, a3 I5) error {
							return fn.(finishBundle4x1[[]typex.Window, typex.BundleFinalization, I4, I5, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[context.Context, []typex.Window, typex.BundleFinalization, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization, I5) error)
						return &caller4x1[context.Context, []typex.Window, typex.BundleFinalization, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization, a3 I5) error {
							return fn.(finishBundle4x1[context.Context, []typex.Window, typex.BundleFinalization, I5, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I5) error)
						return &caller4x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization, a3 I5) error {
							return fn.(finishBundle4x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I5, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization) error)
						return &caller4x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.BundleFinalization) error {
							return fn.(finishBundle4x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[typex.EventTime, typex.BundleFinalization, I4, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization, I4, I5) error)
						return &caller4x1[typex.EventTime, typex.BundleFinalization, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization, I4, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization, a2 I4, a3 I5) error {
							return fn.(finishBundle4x1[typex.EventTime, typex.BundleFinalization, I4, I5, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[context.Context, typex.EventTime, typex.BundleFinalization, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization, I5) error)
						return &caller4x1[context.Context, typex.EventTime, typex.BundleFinalization, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I5) error {
							return fn.(finishBundle4x1[context.Context, typex.EventTime, typex.BundleFinalization, I5, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I5) error)
						return &caller4x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I5) error {
							return fn.(finishBundle4x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I5, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization) error)
						return &caller4x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 typex.BundleFinalization) error {
							return fn.(finishBundle4x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization, I5) error)
						return &caller4x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I5) error {
							return fn.(finishBundle4x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I5, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization) error)
						return &caller4x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization) error {
							return fn.(finishBundle4x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization) error)
						return &caller4x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization) error {
							return fn.(finishBundle4x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				}
			default:
				panic("Invalid signature for FinishBundle")
			}

		case finishBundleIn == 5:
			switch {
			case finishBundleOut == 0:
				if _, ok := doFn.(finishBundle5x0[I1, I2, I3, I4, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I1, I2, I3, I4, I5))
						return &caller5x0[I1, I2, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I1, I2, I3, I4, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I1, a1 I2, a2 I3, a3 I4, a4 I5) {
							fn.(finishBundle5x0[I1, I2, I3, I4, I5]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[context.Context, I2, I3, I4, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, I2, I3, I4, I5))
						return &caller5x0[context.Context, I2, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, I2, I3, I4, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 I2, a2 I3, a3 I4, a4 I5) {
							fn.(finishBundle5x0[context.Context, I2, I3, I4, I5]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[typex.PaneInfo, I2, I3, I4, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, I2, I3, I4, I5))
						return &caller5x0[typex.PaneInfo, I2, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, I2, I3, I4, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 I2, a2 I3, a3 I4, a4 I5) {
							fn.(finishBundle5x0[typex.PaneInfo, I2, I3, I4, I5]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[context.Context, typex.PaneInfo, I3, I4, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, I3, I4, I5))
						return &caller5x0[context.Context, typex.PaneInfo, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, I3, I4, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 I3, a3 I4, a4 I5) {
							fn.(finishBundle5x0[context.Context, typex.PaneInfo, I3, I4, I5]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[[]typex.Window, I2, I3, I4, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, I2, I3, I4, I5))
						return &caller5x0[[]typex.Window, I2, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, I2, I3, I4, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 I2, a2 I3, a3 I4, a4 I5) {
							fn.(finishBundle5x0[[]typex.Window, I2, I3, I4, I5]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[context.Context, []typex.Window, I3, I4, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, I3, I4, I5))
						return &caller5x0[context.Context, []typex.Window, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, I3, I4, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 I3, a3 I4, a4 I5) {
							fn.(finishBundle5x0[context.Context, []typex.Window, I3, I4, I5]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[typex.PaneInfo, []typex.Window, I3, I4, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, I3, I4, I5))
						return &caller5x0[typex.PaneInfo, []typex.Window, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, I3, I4, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 I3, a3 I4, a4 I5) {
							fn.(finishBundle5x0[typex.PaneInfo, []typex.Window, I3, I4, I5]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[context.Context, typex.PaneInfo, []typex.Window, I4, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, I4, I5))
						return &caller5x0[context.Context, typex.PaneInfo, []typex.Window, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, I4, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 I4, a4 I5) {
							fn.(finishBundle5x0[context.Context, typex.PaneInfo, []typex.Window, I4, I5]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[typex.EventTime, I2, I3, I4, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, I2, I3, I4, I5))
						return &caller5x0[typex.EventTime, I2, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, I2, I3, I4, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 I2, a2 I3, a3 I4, a4 I5) {
							fn.(finishBundle5x0[typex.EventTime, I2, I3, I4, I5]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[context.Context, typex.EventTime, I3, I4, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, I3, I4, I5))
						return &caller5x0[context.Context, typex.EventTime, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, I3, I4, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 I3, a3 I4, a4 I5) {
							fn.(finishBundle5x0[context.Context, typex.EventTime, I3, I4, I5]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[typex.PaneInfo, typex.EventTime, I3, I4, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, I3, I4, I5))
						return &caller5x0[typex.PaneInfo, typex.EventTime, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, I3, I4, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 I3, a3 I4, a4 I5) {
							fn.(finishBundle5x0[typex.PaneInfo, typex.EventTime, I3, I4, I5]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[context.Context, typex.PaneInfo, typex.EventTime, I4, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, I4, I5))
						return &caller5x0[context.Context, typex.PaneInfo, typex.EventTime, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, I4, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 I4, a4 I5) {
							fn.(finishBundle5x0[context.Context, typex.PaneInfo, typex.EventTime, I4, I5]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[[]typex.Window, typex.EventTime, I3, I4, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, I3, I4, I5))
						return &caller5x0[[]typex.Window, typex.EventTime, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, I3, I4, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 I3, a3 I4, a4 I5) {
							fn.(finishBundle5x0[[]typex.Window, typex.EventTime, I3, I4, I5]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[context.Context, []typex.Window, typex.EventTime, I4, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, I4, I5))
						return &caller5x0[context.Context, []typex.Window, typex.EventTime, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, I4, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 I4, a4 I5) {
							fn.(finishBundle5x0[context.Context, []typex.Window, typex.EventTime, I4, I5]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[typex.PaneInfo, []typex.Window, typex.EventTime, I4, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, I4, I5))
						return &caller5x0[typex.PaneInfo, []typex.Window, typex.EventTime, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, I4, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 I4, a4 I5) {
							fn.(finishBundle5x0[typex.PaneInfo, []typex.Window, typex.EventTime, I4, I5]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I5))
						return &caller5x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 I5) {
							fn.(finishBundle5x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I5]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[typex.BundleFinalization, I2, I3, I4, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization, I2, I3, I4, I5))
						return &caller5x0[typex.BundleFinalization, I2, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization, I2, I3, I4, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization, a1 I2, a2 I3, a3 I4, a4 I5) {
							fn.(finishBundle5x0[typex.BundleFinalization, I2, I3, I4, I5]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[context.Context, typex.BundleFinalization, I3, I4, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization, I3, I4, I5))
						return &caller5x0[context.Context, typex.BundleFinalization, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization, I3, I4, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization, a2 I3, a3 I4, a4 I5) {
							fn.(finishBundle5x0[context.Context, typex.BundleFinalization, I3, I4, I5]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[typex.PaneInfo, typex.BundleFinalization, I3, I4, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization, I3, I4, I5))
						return &caller5x0[typex.PaneInfo, typex.BundleFinalization, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization, I3, I4, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization, a2 I3, a3 I4, a4 I5) {
							fn.(finishBundle5x0[typex.PaneInfo, typex.BundleFinalization, I3, I4, I5]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I4, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization, I4, I5))
						return &caller5x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization, I4, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization, a3 I4, a4 I5) {
							fn.(finishBundle5x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I4, I5]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[[]typex.Window, typex.BundleFinalization, I3, I4, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization, I3, I4, I5))
						return &caller5x0[[]typex.Window, typex.BundleFinalization, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization, I3, I4, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization, a2 I3, a3 I4, a4 I5) {
							fn.(finishBundle5x0[[]typex.Window, typex.BundleFinalization, I3, I4, I5]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[context.Context, []typex.Window, typex.BundleFinalization, I4, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization, I4, I5))
						return &caller5x0[context.Context, []typex.Window, typex.BundleFinalization, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization, I4, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization, a3 I4, a4 I5) {
							fn.(finishBundle5x0[context.Context, []typex.Window, typex.BundleFinalization, I4, I5]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4, I5))
						return &caller5x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization, a3 I4, a4 I5) {
							fn.(finishBundle5x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4, I5]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I5))
						return &caller5x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.BundleFinalization, a4 I5) {
							fn.(finishBundle5x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I5]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[typex.EventTime, typex.BundleFinalization, I3, I4, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization, I3, I4, I5))
						return &caller5x0[typex.EventTime, typex.BundleFinalization, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization, I3, I4, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization, a2 I3, a3 I4, a4 I5) {
							fn.(finishBundle5x0[typex.EventTime, typex.BundleFinalization, I3, I4, I5]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[context.Context, typex.EventTime, typex.BundleFinalization, I4, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization, I4, I5))
						return &caller5x0[context.Context, typex.EventTime, typex.BundleFinalization, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization, I4, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I4, a4 I5) {
							fn.(finishBundle5x0[context.Context, typex.EventTime, typex.BundleFinalization, I4, I5]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4, I5))
						return &caller5x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I4, a4 I5) {
							fn.(finishBundle5x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4, I5]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I5))
						return &caller5x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I5) {
							fn.(finishBundle5x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I5]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5))
						return &caller5x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I4, a4 I5) {
							fn.(finishBundle5x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I5))
						return &caller5x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I5) {
							fn.(finishBundle5x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I5]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I5))
						return &caller5x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I5) {
							fn.(finishBundle5x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I5]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization))
						return &caller5x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 typex.BundleFinalization) {
							fn.(finishBundle5x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				}
			case finishBundleOut == 1:
				if _, ok := doFn.(finishBundle5x1[I1, I2, I3, I4, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I1, I2, I3, I4, I5) error)
						return &caller5x1[I1, I2, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I1, I2, I3, I4, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I1, a1 I2, a2 I3, a3 I4, a4 I5) error {
							return fn.(finishBundle5x1[I1, I2, I3, I4, I5, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[context.Context, I2, I3, I4, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, I2, I3, I4, I5) error)
						return &caller5x1[context.Context, I2, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, I2, I3, I4, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 I2, a2 I3, a3 I4, a4 I5) error {
							return fn.(finishBundle5x1[context.Context, I2, I3, I4, I5, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[typex.PaneInfo, I2, I3, I4, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, I2, I3, I4, I5) error)
						return &caller5x1[typex.PaneInfo, I2, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, I2, I3, I4, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 I2, a2 I3, a3 I4, a4 I5) error {
							return fn.(finishBundle5x1[typex.PaneInfo, I2, I3, I4, I5, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[context.Context, typex.PaneInfo, I3, I4, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, I3, I4, I5) error)
						return &caller5x1[context.Context, typex.PaneInfo, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, I3, I4, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 I3, a3 I4, a4 I5) error {
							return fn.(finishBundle5x1[context.Context, typex.PaneInfo, I3, I4, I5, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[[]typex.Window, I2, I3, I4, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, I2, I3, I4, I5) error)
						return &caller5x1[[]typex.Window, I2, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, I2, I3, I4, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 I2, a2 I3, a3 I4, a4 I5) error {
							return fn.(finishBundle5x1[[]typex.Window, I2, I3, I4, I5, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[context.Context, []typex.Window, I3, I4, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, I3, I4, I5) error)
						return &caller5x1[context.Context, []typex.Window, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, I3, I4, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 I3, a3 I4, a4 I5) error {
							return fn.(finishBundle5x1[context.Context, []typex.Window, I3, I4, I5, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[typex.PaneInfo, []typex.Window, I3, I4, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, I3, I4, I5) error)
						return &caller5x1[typex.PaneInfo, []typex.Window, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, I3, I4, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 I3, a3 I4, a4 I5) error {
							return fn.(finishBundle5x1[typex.PaneInfo, []typex.Window, I3, I4, I5, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[context.Context, typex.PaneInfo, []typex.Window, I4, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, I4, I5) error)
						return &caller5x1[context.Context, typex.PaneInfo, []typex.Window, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, I4, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 I4, a4 I5) error {
							return fn.(finishBundle5x1[context.Context, typex.PaneInfo, []typex.Window, I4, I5, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[typex.EventTime, I2, I3, I4, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, I2, I3, I4, I5) error)
						return &caller5x1[typex.EventTime, I2, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, I2, I3, I4, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 I2, a2 I3, a3 I4, a4 I5) error {
							return fn.(finishBundle5x1[typex.EventTime, I2, I3, I4, I5, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[context.Context, typex.EventTime, I3, I4, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, I3, I4, I5) error)
						return &caller5x1[context.Context, typex.EventTime, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, I3, I4, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 I3, a3 I4, a4 I5) error {
							return fn.(finishBundle5x1[context.Context, typex.EventTime, I3, I4, I5, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[typex.PaneInfo, typex.EventTime, I3, I4, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, I3, I4, I5) error)
						return &caller5x1[typex.PaneInfo, typex.EventTime, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, I3, I4, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 I3, a3 I4, a4 I5) error {
							return fn.(finishBundle5x1[typex.PaneInfo, typex.EventTime, I3, I4, I5, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[context.Context, typex.PaneInfo, typex.EventTime, I4, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, I4, I5) error)
						return &caller5x1[context.Context, typex.PaneInfo, typex.EventTime, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, I4, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 I4, a4 I5) error {
							return fn.(finishBundle5x1[context.Context, typex.PaneInfo, typex.EventTime, I4, I5, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[[]typex.Window, typex.EventTime, I3, I4, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, I3, I4, I5) error)
						return &caller5x1[[]typex.Window, typex.EventTime, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, I3, I4, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 I3, a3 I4, a4 I5) error {
							return fn.(finishBundle5x1[[]typex.Window, typex.EventTime, I3, I4, I5, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[context.Context, []typex.Window, typex.EventTime, I4, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, I4, I5) error)
						return &caller5x1[context.Context, []typex.Window, typex.EventTime, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, I4, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 I4, a4 I5) error {
							return fn.(finishBundle5x1[context.Context, []typex.Window, typex.EventTime, I4, I5, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[typex.PaneInfo, []typex.Window, typex.EventTime, I4, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, I4, I5) error)
						return &caller5x1[typex.PaneInfo, []typex.Window, typex.EventTime, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, I4, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 I4, a4 I5) error {
							return fn.(finishBundle5x1[typex.PaneInfo, []typex.Window, typex.EventTime, I4, I5, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I5) error)
						return &caller5x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 I5) error {
							return fn.(finishBundle5x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I5, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[typex.BundleFinalization, I2, I3, I4, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization, I2, I3, I4, I5) error)
						return &caller5x1[typex.BundleFinalization, I2, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization, I2, I3, I4, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization, a1 I2, a2 I3, a3 I4, a4 I5) error {
							return fn.(finishBundle5x1[typex.BundleFinalization, I2, I3, I4, I5, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[context.Context, typex.BundleFinalization, I3, I4, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization, I3, I4, I5) error)
						return &caller5x1[context.Context, typex.BundleFinalization, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization, I3, I4, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization, a2 I3, a3 I4, a4 I5) error {
							return fn.(finishBundle5x1[context.Context, typex.BundleFinalization, I3, I4, I5, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[typex.PaneInfo, typex.BundleFinalization, I3, I4, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization, I3, I4, I5) error)
						return &caller5x1[typex.PaneInfo, typex.BundleFinalization, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization, I3, I4, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization, a2 I3, a3 I4, a4 I5) error {
							return fn.(finishBundle5x1[typex.PaneInfo, typex.BundleFinalization, I3, I4, I5, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I4, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization, I4, I5) error)
						return &caller5x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization, I4, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization, a3 I4, a4 I5) error {
							return fn.(finishBundle5x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I4, I5, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[[]typex.Window, typex.BundleFinalization, I3, I4, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization, I3, I4, I5) error)
						return &caller5x1[[]typex.Window, typex.BundleFinalization, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization, I3, I4, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization, a2 I3, a3 I4, a4 I5) error {
							return fn.(finishBundle5x1[[]typex.Window, typex.BundleFinalization, I3, I4, I5, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[context.Context, []typex.Window, typex.BundleFinalization, I4, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization, I4, I5) error)
						return &caller5x1[context.Context, []typex.Window, typex.BundleFinalization, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization, I4, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization, a3 I4, a4 I5) error {
							return fn.(finishBundle5x1[context.Context, []typex.Window, typex.BundleFinalization, I4, I5, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4, I5) error)
						return &caller5x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization, a3 I4, a4 I5) error {
							return fn.(finishBundle5x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4, I5, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I5) error)
						return &caller5x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.BundleFinalization, a4 I5) error {
							return fn.(finishBundle5x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I5, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[typex.EventTime, typex.BundleFinalization, I3, I4, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization, I3, I4, I5) error)
						return &caller5x1[typex.EventTime, typex.BundleFinalization, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization, I3, I4, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization, a2 I3, a3 I4, a4 I5) error {
							return fn.(finishBundle5x1[typex.EventTime, typex.BundleFinalization, I3, I4, I5, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[context.Context, typex.EventTime, typex.BundleFinalization, I4, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization, I4, I5) error)
						return &caller5x1[context.Context, typex.EventTime, typex.BundleFinalization, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization, I4, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I4, a4 I5) error {
							return fn.(finishBundle5x1[context.Context, typex.EventTime, typex.BundleFinalization, I4, I5, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4, I5) error)
						return &caller5x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I4, a4 I5) error {
							return fn.(finishBundle5x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4, I5, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I5) error)
						return &caller5x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I5) error {
							return fn.(finishBundle5x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I5, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5) error)
						return &caller5x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I4, a4 I5) error {
							return fn.(finishBundle5x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I5) error)
						return &caller5x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I5) error {
							return fn.(finishBundle5x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I5, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I5) error)
						return &caller5x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I5) error {
							return fn.(finishBundle5x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I5, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization) error)
						return &caller5x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 typex.BundleFinalization) error {
							return fn.(finishBundle5x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				}
			default:
				panic("Invalid signature for FinishBundle")
			}

		case finishBundleIn == 6:
			switch {
			case finishBundleOut == 0:
				if _, ok := doFn.(finishBundle6x0[I0, I1, I2, I3, I4, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I0, I1, I2, I3, I4, I5))
						return &caller6x0[I0, I1, I2, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I0, I1, I2, I3, I4, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I0, a1 I1, a2 I2, a3 I3, a4 I4, a5 I5) {
							fn.(finishBundle6x0[I0, I1, I2, I3, I4, I5]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[context.Context, I1, I2, I3, I4, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, I1, I2, I3, I4, I5))
						return &caller6x0[context.Context, I1, I2, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, I1, I2, I3, I4, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 I1, a2 I2, a3 I3, a4 I4, a5 I5) {
							fn.(finishBundle6x0[context.Context, I1, I2, I3, I4, I5]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[typex.PaneInfo, I1, I2, I3, I4, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, I1, I2, I3, I4, I5))
						return &caller6x0[typex.PaneInfo, I1, I2, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, I1, I2, I3, I4, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 I1, a2 I2, a3 I3, a4 I4, a5 I5) {
							fn.(finishBundle6x0[typex.PaneInfo, I1, I2, I3, I4, I5]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[context.Context, typex.PaneInfo, I2, I3, I4, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, I2, I3, I4, I5))
						return &caller6x0[context.Context, typex.PaneInfo, I2, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, I2, I3, I4, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 I2, a3 I3, a4 I4, a5 I5) {
							fn.(finishBundle6x0[context.Context, typex.PaneInfo, I2, I3, I4, I5]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[[]typex.Window, I1, I2, I3, I4, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, I1, I2, I3, I4, I5))
						return &caller6x0[[]typex.Window, I1, I2, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, I1, I2, I3, I4, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 I1, a2 I2, a3 I3, a4 I4, a5 I5) {
							fn.(finishBundle6x0[[]typex.Window, I1, I2, I3, I4, I5]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[context.Context, []typex.Window, I2, I3, I4, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, I2, I3, I4, I5))
						return &caller6x0[context.Context, []typex.Window, I2, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, I2, I3, I4, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 I2, a3 I3, a4 I4, a5 I5) {
							fn.(finishBundle6x0[context.Context, []typex.Window, I2, I3, I4, I5]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[typex.PaneInfo, []typex.Window, I2, I3, I4, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, I2, I3, I4, I5))
						return &caller6x0[typex.PaneInfo, []typex.Window, I2, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, I2, I3, I4, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 I2, a3 I3, a4 I4, a5 I5) {
							fn.(finishBundle6x0[typex.PaneInfo, []typex.Window, I2, I3, I4, I5]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[context.Context, typex.PaneInfo, []typex.Window, I3, I4, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, I3, I4, I5))
						return &caller6x0[context.Context, typex.PaneInfo, []typex.Window, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, I3, I4, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 I3, a4 I4, a5 I5) {
							fn.(finishBundle6x0[context.Context, typex.PaneInfo, []typex.Window, I3, I4, I5]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[typex.EventTime, I1, I2, I3, I4, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, I1, I2, I3, I4, I5))
						return &caller6x0[typex.EventTime, I1, I2, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, I1, I2, I3, I4, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 I1, a2 I2, a3 I3, a4 I4, a5 I5) {
							fn.(finishBundle6x0[typex.EventTime, I1, I2, I3, I4, I5]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[context.Context, typex.EventTime, I2, I3, I4, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, I2, I3, I4, I5))
						return &caller6x0[context.Context, typex.EventTime, I2, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, I2, I3, I4, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 I2, a3 I3, a4 I4, a5 I5) {
							fn.(finishBundle6x0[context.Context, typex.EventTime, I2, I3, I4, I5]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[typex.PaneInfo, typex.EventTime, I2, I3, I4, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, I2, I3, I4, I5))
						return &caller6x0[typex.PaneInfo, typex.EventTime, I2, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, I2, I3, I4, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 I2, a3 I3, a4 I4, a5 I5) {
							fn.(finishBundle6x0[typex.PaneInfo, typex.EventTime, I2, I3, I4, I5]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[context.Context, typex.PaneInfo, typex.EventTime, I3, I4, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, I3, I4, I5))
						return &caller6x0[context.Context, typex.PaneInfo, typex.EventTime, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, I3, I4, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 I3, a4 I4, a5 I5) {
							fn.(finishBundle6x0[context.Context, typex.PaneInfo, typex.EventTime, I3, I4, I5]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[[]typex.Window, typex.EventTime, I2, I3, I4, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, I2, I3, I4, I5))
						return &caller6x0[[]typex.Window, typex.EventTime, I2, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, I2, I3, I4, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 I2, a3 I3, a4 I4, a5 I5) {
							fn.(finishBundle6x0[[]typex.Window, typex.EventTime, I2, I3, I4, I5]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[context.Context, []typex.Window, typex.EventTime, I3, I4, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, I3, I4, I5))
						return &caller6x0[context.Context, []typex.Window, typex.EventTime, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, I3, I4, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 I3, a4 I4, a5 I5) {
							fn.(finishBundle6x0[context.Context, []typex.Window, typex.EventTime, I3, I4, I5]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[typex.PaneInfo, []typex.Window, typex.EventTime, I3, I4, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, I3, I4, I5))
						return &caller6x0[typex.PaneInfo, []typex.Window, typex.EventTime, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, I3, I4, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 I3, a4 I4, a5 I5) {
							fn.(finishBundle6x0[typex.PaneInfo, []typex.Window, typex.EventTime, I3, I4, I5]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I4, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I4, I5))
						return &caller6x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I4, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 I4, a5 I5) {
							fn.(finishBundle6x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I4, I5]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[typex.BundleFinalization, I1, I2, I3, I4, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization, I1, I2, I3, I4, I5))
						return &caller6x0[typex.BundleFinalization, I1, I2, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization, I1, I2, I3, I4, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization, a1 I1, a2 I2, a3 I3, a4 I4, a5 I5) {
							fn.(finishBundle6x0[typex.BundleFinalization, I1, I2, I3, I4, I5]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[context.Context, typex.BundleFinalization, I2, I3, I4, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization, I2, I3, I4, I5))
						return &caller6x0[context.Context, typex.BundleFinalization, I2, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization, I2, I3, I4, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization, a2 I2, a3 I3, a4 I4, a5 I5) {
							fn.(finishBundle6x0[context.Context, typex.BundleFinalization, I2, I3, I4, I5]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[typex.PaneInfo, typex.BundleFinalization, I2, I3, I4, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization, I2, I3, I4, I5))
						return &caller6x0[typex.PaneInfo, typex.BundleFinalization, I2, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization, I2, I3, I4, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization, a2 I2, a3 I3, a4 I4, a5 I5) {
							fn.(finishBundle6x0[typex.PaneInfo, typex.BundleFinalization, I2, I3, I4, I5]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I3, I4, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization, I3, I4, I5))
						return &caller6x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization, I3, I4, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization, a3 I3, a4 I4, a5 I5) {
							fn.(finishBundle6x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I3, I4, I5]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[[]typex.Window, typex.BundleFinalization, I2, I3, I4, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization, I2, I3, I4, I5))
						return &caller6x0[[]typex.Window, typex.BundleFinalization, I2, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization, I2, I3, I4, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization, a2 I2, a3 I3, a4 I4, a5 I5) {
							fn.(finishBundle6x0[[]typex.Window, typex.BundleFinalization, I2, I3, I4, I5]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[context.Context, []typex.Window, typex.BundleFinalization, I3, I4, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization, I3, I4, I5))
						return &caller6x0[context.Context, []typex.Window, typex.BundleFinalization, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization, I3, I4, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization, a3 I3, a4 I4, a5 I5) {
							fn.(finishBundle6x0[context.Context, []typex.Window, typex.BundleFinalization, I3, I4, I5]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3, I4, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3, I4, I5))
						return &caller6x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3, I4, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization, a3 I3, a4 I4, a5 I5) {
							fn.(finishBundle6x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3, I4, I5]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4, I5))
						return &caller6x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.BundleFinalization, a4 I4, a5 I5) {
							fn.(finishBundle6x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4, I5]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[typex.EventTime, typex.BundleFinalization, I2, I3, I4, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization, I2, I3, I4, I5))
						return &caller6x0[typex.EventTime, typex.BundleFinalization, I2, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization, I2, I3, I4, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization, a2 I2, a3 I3, a4 I4, a5 I5) {
							fn.(finishBundle6x0[typex.EventTime, typex.BundleFinalization, I2, I3, I4, I5]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[context.Context, typex.EventTime, typex.BundleFinalization, I3, I4, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization, I3, I4, I5))
						return &caller6x0[context.Context, typex.EventTime, typex.BundleFinalization, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization, I3, I4, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I3, a4 I4, a5 I5) {
							fn.(finishBundle6x0[context.Context, typex.EventTime, typex.BundleFinalization, I3, I4, I5]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3, I4, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3, I4, I5))
						return &caller6x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3, I4, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I3, a4 I4, a5 I5) {
							fn.(finishBundle6x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3, I4, I5]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4, I5))
						return &caller6x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I4, a5 I5) {
							fn.(finishBundle6x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4, I5]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4, I5))
						return &caller6x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I3, a4 I4, a5 I5) {
							fn.(finishBundle6x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4, I5]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5))
						return &caller6x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I4, a5 I5) {
							fn.(finishBundle6x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5))
						return &caller6x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I4, a5 I5) {
							fn.(finishBundle6x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I5))
						return &caller6x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 typex.BundleFinalization, a5 I5) {
							fn.(finishBundle6x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I5]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				}
			case finishBundleOut == 1:
				if _, ok := doFn.(finishBundle6x1[I0, I1, I2, I3, I4, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I0, I1, I2, I3, I4, I5) error)
						return &caller6x1[I0, I1, I2, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I0, I1, I2, I3, I4, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I0, a1 I1, a2 I2, a3 I3, a4 I4, a5 I5) error {
							return fn.(finishBundle6x1[I0, I1, I2, I3, I4, I5, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[context.Context, I1, I2, I3, I4, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, I1, I2, I3, I4, I5) error)
						return &caller6x1[context.Context, I1, I2, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, I1, I2, I3, I4, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 I1, a2 I2, a3 I3, a4 I4, a5 I5) error {
							return fn.(finishBundle6x1[context.Context, I1, I2, I3, I4, I5, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[typex.PaneInfo, I1, I2, I3, I4, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, I1, I2, I3, I4, I5) error)
						return &caller6x1[typex.PaneInfo, I1, I2, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, I1, I2, I3, I4, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 I1, a2 I2, a3 I3, a4 I4, a5 I5) error {
							return fn.(finishBundle6x1[typex.PaneInfo, I1, I2, I3, I4, I5, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[context.Context, typex.PaneInfo, I2, I3, I4, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, I2, I3, I4, I5) error)
						return &caller6x1[context.Context, typex.PaneInfo, I2, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, I2, I3, I4, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 I2, a3 I3, a4 I4, a5 I5) error {
							return fn.(finishBundle6x1[context.Context, typex.PaneInfo, I2, I3, I4, I5, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[[]typex.Window, I1, I2, I3, I4, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, I1, I2, I3, I4, I5) error)
						return &caller6x1[[]typex.Window, I1, I2, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, I1, I2, I3, I4, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 I1, a2 I2, a3 I3, a4 I4, a5 I5) error {
							return fn.(finishBundle6x1[[]typex.Window, I1, I2, I3, I4, I5, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[context.Context, []typex.Window, I2, I3, I4, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, I2, I3, I4, I5) error)
						return &caller6x1[context.Context, []typex.Window, I2, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, I2, I3, I4, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 I2, a3 I3, a4 I4, a5 I5) error {
							return fn.(finishBundle6x1[context.Context, []typex.Window, I2, I3, I4, I5, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[typex.PaneInfo, []typex.Window, I2, I3, I4, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, I2, I3, I4, I5) error)
						return &caller6x1[typex.PaneInfo, []typex.Window, I2, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, I2, I3, I4, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 I2, a3 I3, a4 I4, a5 I5) error {
							return fn.(finishBundle6x1[typex.PaneInfo, []typex.Window, I2, I3, I4, I5, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[context.Context, typex.PaneInfo, []typex.Window, I3, I4, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, I3, I4, I5) error)
						return &caller6x1[context.Context, typex.PaneInfo, []typex.Window, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, I3, I4, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 I3, a4 I4, a5 I5) error {
							return fn.(finishBundle6x1[context.Context, typex.PaneInfo, []typex.Window, I3, I4, I5, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[typex.EventTime, I1, I2, I3, I4, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, I1, I2, I3, I4, I5) error)
						return &caller6x1[typex.EventTime, I1, I2, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, I1, I2, I3, I4, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 I1, a2 I2, a3 I3, a4 I4, a5 I5) error {
							return fn.(finishBundle6x1[typex.EventTime, I1, I2, I3, I4, I5, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[context.Context, typex.EventTime, I2, I3, I4, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, I2, I3, I4, I5) error)
						return &caller6x1[context.Context, typex.EventTime, I2, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, I2, I3, I4, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 I2, a3 I3, a4 I4, a5 I5) error {
							return fn.(finishBundle6x1[context.Context, typex.EventTime, I2, I3, I4, I5, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[typex.PaneInfo, typex.EventTime, I2, I3, I4, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, I2, I3, I4, I5) error)
						return &caller6x1[typex.PaneInfo, typex.EventTime, I2, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, I2, I3, I4, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 I2, a3 I3, a4 I4, a5 I5) error {
							return fn.(finishBundle6x1[typex.PaneInfo, typex.EventTime, I2, I3, I4, I5, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[context.Context, typex.PaneInfo, typex.EventTime, I3, I4, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, I3, I4, I5) error)
						return &caller6x1[context.Context, typex.PaneInfo, typex.EventTime, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, I3, I4, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 I3, a4 I4, a5 I5) error {
							return fn.(finishBundle6x1[context.Context, typex.PaneInfo, typex.EventTime, I3, I4, I5, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[[]typex.Window, typex.EventTime, I2, I3, I4, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, I2, I3, I4, I5) error)
						return &caller6x1[[]typex.Window, typex.EventTime, I2, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, I2, I3, I4, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 I2, a3 I3, a4 I4, a5 I5) error {
							return fn.(finishBundle6x1[[]typex.Window, typex.EventTime, I2, I3, I4, I5, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[context.Context, []typex.Window, typex.EventTime, I3, I4, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, I3, I4, I5) error)
						return &caller6x1[context.Context, []typex.Window, typex.EventTime, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, I3, I4, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 I3, a4 I4, a5 I5) error {
							return fn.(finishBundle6x1[context.Context, []typex.Window, typex.EventTime, I3, I4, I5, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[typex.PaneInfo, []typex.Window, typex.EventTime, I3, I4, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, I3, I4, I5) error)
						return &caller6x1[typex.PaneInfo, []typex.Window, typex.EventTime, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, I3, I4, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 I3, a4 I4, a5 I5) error {
							return fn.(finishBundle6x1[typex.PaneInfo, []typex.Window, typex.EventTime, I3, I4, I5, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I4, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I4, I5) error)
						return &caller6x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I4, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 I4, a5 I5) error {
							return fn.(finishBundle6x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I4, I5, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[typex.BundleFinalization, I1, I2, I3, I4, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization, I1, I2, I3, I4, I5) error)
						return &caller6x1[typex.BundleFinalization, I1, I2, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization, I1, I2, I3, I4, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization, a1 I1, a2 I2, a3 I3, a4 I4, a5 I5) error {
							return fn.(finishBundle6x1[typex.BundleFinalization, I1, I2, I3, I4, I5, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[context.Context, typex.BundleFinalization, I2, I3, I4, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization, I2, I3, I4, I5) error)
						return &caller6x1[context.Context, typex.BundleFinalization, I2, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization, I2, I3, I4, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization, a2 I2, a3 I3, a4 I4, a5 I5) error {
							return fn.(finishBundle6x1[context.Context, typex.BundleFinalization, I2, I3, I4, I5, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[typex.PaneInfo, typex.BundleFinalization, I2, I3, I4, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization, I2, I3, I4, I5) error)
						return &caller6x1[typex.PaneInfo, typex.BundleFinalization, I2, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization, I2, I3, I4, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization, a2 I2, a3 I3, a4 I4, a5 I5) error {
							return fn.(finishBundle6x1[typex.PaneInfo, typex.BundleFinalization, I2, I3, I4, I5, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I3, I4, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization, I3, I4, I5) error)
						return &caller6x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization, I3, I4, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization, a3 I3, a4 I4, a5 I5) error {
							return fn.(finishBundle6x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I3, I4, I5, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[[]typex.Window, typex.BundleFinalization, I2, I3, I4, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization, I2, I3, I4, I5) error)
						return &caller6x1[[]typex.Window, typex.BundleFinalization, I2, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization, I2, I3, I4, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization, a2 I2, a3 I3, a4 I4, a5 I5) error {
							return fn.(finishBundle6x1[[]typex.Window, typex.BundleFinalization, I2, I3, I4, I5, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[context.Context, []typex.Window, typex.BundleFinalization, I3, I4, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization, I3, I4, I5) error)
						return &caller6x1[context.Context, []typex.Window, typex.BundleFinalization, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization, I3, I4, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization, a3 I3, a4 I4, a5 I5) error {
							return fn.(finishBundle6x1[context.Context, []typex.Window, typex.BundleFinalization, I3, I4, I5, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3, I4, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3, I4, I5) error)
						return &caller6x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3, I4, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization, a3 I3, a4 I4, a5 I5) error {
							return fn.(finishBundle6x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3, I4, I5, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4, I5) error)
						return &caller6x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.BundleFinalization, a4 I4, a5 I5) error {
							return fn.(finishBundle6x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4, I5, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[typex.EventTime, typex.BundleFinalization, I2, I3, I4, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization, I2, I3, I4, I5) error)
						return &caller6x1[typex.EventTime, typex.BundleFinalization, I2, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization, I2, I3, I4, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization, a2 I2, a3 I3, a4 I4, a5 I5) error {
							return fn.(finishBundle6x1[typex.EventTime, typex.BundleFinalization, I2, I3, I4, I5, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[context.Context, typex.EventTime, typex.BundleFinalization, I3, I4, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization, I3, I4, I5) error)
						return &caller6x1[context.Context, typex.EventTime, typex.BundleFinalization, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization, I3, I4, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I3, a4 I4, a5 I5) error {
							return fn.(finishBundle6x1[context.Context, typex.EventTime, typex.BundleFinalization, I3, I4, I5, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3, I4, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3, I4, I5) error)
						return &caller6x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3, I4, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I3, a4 I4, a5 I5) error {
							return fn.(finishBundle6x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3, I4, I5, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4, I5) error)
						return &caller6x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I4, a5 I5) error {
							return fn.(finishBundle6x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4, I5, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4, I5) error)
						return &caller6x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I3, a4 I4, a5 I5) error {
							return fn.(finishBundle6x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4, I5, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5) error)
						return &caller6x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I4, a5 I5) error {
							return fn.(finishBundle6x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5) error)
						return &caller6x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I4, a5 I5) error {
							return fn.(finishBundle6x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I5) error)
						return &caller6x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 typex.BundleFinalization, a5 I5) error {
							return fn.(finishBundle6x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I5, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				}
			default:
				panic("Invalid signature for FinishBundle")
			}

		case finishBundleIn == 7:
			switch {
			case finishBundleOut == 0:
				if _, ok := doFn.(finishBundle7x0[context.Context, I0, I1, I2, I3, I4, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, I0, I1, I2, I3, I4, I5))
						return &caller7x0[context.Context, I0, I1, I2, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, I0, I1, I2, I3, I4, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 I0, a2 I1, a3 I2, a4 I3, a5 I4, a6 I5) {
							fn.(finishBundle7x0[context.Context, I0, I1, I2, I3, I4, I5]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[typex.PaneInfo, I0, I1, I2, I3, I4, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, I0, I1, I2, I3, I4, I5))
						return &caller7x0[typex.PaneInfo, I0, I1, I2, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, I0, I1, I2, I3, I4, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 I0, a2 I1, a3 I2, a4 I3, a5 I4, a6 I5) {
							fn.(finishBundle7x0[typex.PaneInfo, I0, I1, I2, I3, I4, I5]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[context.Context, typex.PaneInfo, I1, I2, I3, I4, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, I1, I2, I3, I4, I5))
						return &caller7x0[context.Context, typex.PaneInfo, I1, I2, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, I1, I2, I3, I4, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 I1, a3 I2, a4 I3, a5 I4, a6 I5) {
							fn.(finishBundle7x0[context.Context, typex.PaneInfo, I1, I2, I3, I4, I5]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[[]typex.Window, I0, I1, I2, I3, I4, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, I0, I1, I2, I3, I4, I5))
						return &caller7x0[[]typex.Window, I0, I1, I2, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, I0, I1, I2, I3, I4, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 I0, a2 I1, a3 I2, a4 I3, a5 I4, a6 I5) {
							fn.(finishBundle7x0[[]typex.Window, I0, I1, I2, I3, I4, I5]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[context.Context, []typex.Window, I1, I2, I3, I4, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, I1, I2, I3, I4, I5))
						return &caller7x0[context.Context, []typex.Window, I1, I2, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, I1, I2, I3, I4, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 I1, a3 I2, a4 I3, a5 I4, a6 I5) {
							fn.(finishBundle7x0[context.Context, []typex.Window, I1, I2, I3, I4, I5]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[typex.PaneInfo, []typex.Window, I1, I2, I3, I4, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, I1, I2, I3, I4, I5))
						return &caller7x0[typex.PaneInfo, []typex.Window, I1, I2, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, I1, I2, I3, I4, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 I1, a3 I2, a4 I3, a5 I4, a6 I5) {
							fn.(finishBundle7x0[typex.PaneInfo, []typex.Window, I1, I2, I3, I4, I5]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[context.Context, typex.PaneInfo, []typex.Window, I2, I3, I4, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, I2, I3, I4, I5))
						return &caller7x0[context.Context, typex.PaneInfo, []typex.Window, I2, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, I2, I3, I4, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 I2, a4 I3, a5 I4, a6 I5) {
							fn.(finishBundle7x0[context.Context, typex.PaneInfo, []typex.Window, I2, I3, I4, I5]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[typex.EventTime, I0, I1, I2, I3, I4, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, I0, I1, I2, I3, I4, I5))
						return &caller7x0[typex.EventTime, I0, I1, I2, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, I0, I1, I2, I3, I4, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 I0, a2 I1, a3 I2, a4 I3, a5 I4, a6 I5) {
							fn.(finishBundle7x0[typex.EventTime, I0, I1, I2, I3, I4, I5]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[context.Context, typex.EventTime, I1, I2, I3, I4, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, I1, I2, I3, I4, I5))
						return &caller7x0[context.Context, typex.EventTime, I1, I2, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, I1, I2, I3, I4, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 I1, a3 I2, a4 I3, a5 I4, a6 I5) {
							fn.(finishBundle7x0[context.Context, typex.EventTime, I1, I2, I3, I4, I5]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[typex.PaneInfo, typex.EventTime, I1, I2, I3, I4, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, I1, I2, I3, I4, I5))
						return &caller7x0[typex.PaneInfo, typex.EventTime, I1, I2, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, I1, I2, I3, I4, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 I1, a3 I2, a4 I3, a5 I4, a6 I5) {
							fn.(finishBundle7x0[typex.PaneInfo, typex.EventTime, I1, I2, I3, I4, I5]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[context.Context, typex.PaneInfo, typex.EventTime, I2, I3, I4, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, I2, I3, I4, I5))
						return &caller7x0[context.Context, typex.PaneInfo, typex.EventTime, I2, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, I2, I3, I4, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 I2, a4 I3, a5 I4, a6 I5) {
							fn.(finishBundle7x0[context.Context, typex.PaneInfo, typex.EventTime, I2, I3, I4, I5]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[[]typex.Window, typex.EventTime, I1, I2, I3, I4, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, I1, I2, I3, I4, I5))
						return &caller7x0[[]typex.Window, typex.EventTime, I1, I2, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, I1, I2, I3, I4, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 I1, a3 I2, a4 I3, a5 I4, a6 I5) {
							fn.(finishBundle7x0[[]typex.Window, typex.EventTime, I1, I2, I3, I4, I5]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[context.Context, []typex.Window, typex.EventTime, I2, I3, I4, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, I2, I3, I4, I5))
						return &caller7x0[context.Context, []typex.Window, typex.EventTime, I2, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, I2, I3, I4, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 I2, a4 I3, a5 I4, a6 I5) {
							fn.(finishBundle7x0[context.Context, []typex.Window, typex.EventTime, I2, I3, I4, I5]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[typex.PaneInfo, []typex.Window, typex.EventTime, I2, I3, I4, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, I2, I3, I4, I5))
						return &caller7x0[typex.PaneInfo, []typex.Window, typex.EventTime, I2, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, I2, I3, I4, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 I2, a4 I3, a5 I4, a6 I5) {
							fn.(finishBundle7x0[typex.PaneInfo, []typex.Window, typex.EventTime, I2, I3, I4, I5]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I3, I4, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I3, I4, I5))
						return &caller7x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I3, I4, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 I3, a5 I4, a6 I5) {
							fn.(finishBundle7x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I3, I4, I5]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[typex.BundleFinalization, I0, I1, I2, I3, I4, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization, I0, I1, I2, I3, I4, I5))
						return &caller7x0[typex.BundleFinalization, I0, I1, I2, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization, I0, I1, I2, I3, I4, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization, a1 I0, a2 I1, a3 I2, a4 I3, a5 I4, a6 I5) {
							fn.(finishBundle7x0[typex.BundleFinalization, I0, I1, I2, I3, I4, I5]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[context.Context, typex.BundleFinalization, I1, I2, I3, I4, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization, I1, I2, I3, I4, I5))
						return &caller7x0[context.Context, typex.BundleFinalization, I1, I2, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization, I1, I2, I3, I4, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization, a2 I1, a3 I2, a4 I3, a5 I4, a6 I5) {
							fn.(finishBundle7x0[context.Context, typex.BundleFinalization, I1, I2, I3, I4, I5]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[typex.PaneInfo, typex.BundleFinalization, I1, I2, I3, I4, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization, I1, I2, I3, I4, I5))
						return &caller7x0[typex.PaneInfo, typex.BundleFinalization, I1, I2, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization, I1, I2, I3, I4, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization, a2 I1, a3 I2, a4 I3, a5 I4, a6 I5) {
							fn.(finishBundle7x0[typex.PaneInfo, typex.BundleFinalization, I1, I2, I3, I4, I5]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I2, I3, I4, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization, I2, I3, I4, I5))
						return &caller7x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I2, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization, I2, I3, I4, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization, a3 I2, a4 I3, a5 I4, a6 I5) {
							fn.(finishBundle7x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I2, I3, I4, I5]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[[]typex.Window, typex.BundleFinalization, I1, I2, I3, I4, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization, I1, I2, I3, I4, I5))
						return &caller7x0[[]typex.Window, typex.BundleFinalization, I1, I2, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization, I1, I2, I3, I4, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization, a2 I1, a3 I2, a4 I3, a5 I4, a6 I5) {
							fn.(finishBundle7x0[[]typex.Window, typex.BundleFinalization, I1, I2, I3, I4, I5]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[context.Context, []typex.Window, typex.BundleFinalization, I2, I3, I4, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization, I2, I3, I4, I5))
						return &caller7x0[context.Context, []typex.Window, typex.BundleFinalization, I2, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization, I2, I3, I4, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization, a3 I2, a4 I3, a5 I4, a6 I5) {
							fn.(finishBundle7x0[context.Context, []typex.Window, typex.BundleFinalization, I2, I3, I4, I5]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2, I3, I4, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2, I3, I4, I5))
						return &caller7x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2, I3, I4, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization, a3 I2, a4 I3, a5 I4, a6 I5) {
							fn.(finishBundle7x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2, I3, I4, I5]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3, I4, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3, I4, I5))
						return &caller7x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3, I4, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.BundleFinalization, a4 I3, a5 I4, a6 I5) {
							fn.(finishBundle7x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3, I4, I5]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[typex.EventTime, typex.BundleFinalization, I1, I2, I3, I4, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization, I1, I2, I3, I4, I5))
						return &caller7x0[typex.EventTime, typex.BundleFinalization, I1, I2, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization, I1, I2, I3, I4, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization, a2 I1, a3 I2, a4 I3, a5 I4, a6 I5) {
							fn.(finishBundle7x0[typex.EventTime, typex.BundleFinalization, I1, I2, I3, I4, I5]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[context.Context, typex.EventTime, typex.BundleFinalization, I2, I3, I4, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization, I2, I3, I4, I5))
						return &caller7x0[context.Context, typex.EventTime, typex.BundleFinalization, I2, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization, I2, I3, I4, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I2, a4 I3, a5 I4, a6 I5) {
							fn.(finishBundle7x0[context.Context, typex.EventTime, typex.BundleFinalization, I2, I3, I4, I5]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2, I3, I4, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2, I3, I4, I5))
						return &caller7x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2, I3, I4, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I2, a4 I3, a5 I4, a6 I5) {
							fn.(finishBundle7x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2, I3, I4, I5]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3, I4, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3, I4, I5))
						return &caller7x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3, I4, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I3, a5 I4, a6 I5) {
							fn.(finishBundle7x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3, I4, I5]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3, I4, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3, I4, I5))
						return &caller7x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3, I4, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I2, a4 I3, a5 I4, a6 I5) {
							fn.(finishBundle7x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3, I4, I5]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4, I5))
						return &caller7x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I3, a5 I4, a6 I5) {
							fn.(finishBundle7x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4, I5]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4, I5))
						return &caller7x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I3, a5 I4, a6 I5) {
							fn.(finishBundle7x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4, I5]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5))
						return &caller7x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 typex.BundleFinalization, a5 I4, a6 I5) {
							fn.(finishBundle7x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				}
			case finishBundleOut == 1:
				if _, ok := doFn.(finishBundle7x1[context.Context, I0, I1, I2, I3, I4, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, I0, I1, I2, I3, I4, I5) error)
						return &caller7x1[context.Context, I0, I1, I2, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, I0, I1, I2, I3, I4, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 I0, a2 I1, a3 I2, a4 I3, a5 I4, a6 I5) error {
							return fn.(finishBundle7x1[context.Context, I0, I1, I2, I3, I4, I5, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[typex.PaneInfo, I0, I1, I2, I3, I4, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, I0, I1, I2, I3, I4, I5) error)
						return &caller7x1[typex.PaneInfo, I0, I1, I2, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, I0, I1, I2, I3, I4, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 I0, a2 I1, a3 I2, a4 I3, a5 I4, a6 I5) error {
							return fn.(finishBundle7x1[typex.PaneInfo, I0, I1, I2, I3, I4, I5, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[context.Context, typex.PaneInfo, I1, I2, I3, I4, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, I1, I2, I3, I4, I5) error)
						return &caller7x1[context.Context, typex.PaneInfo, I1, I2, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, I1, I2, I3, I4, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 I1, a3 I2, a4 I3, a5 I4, a6 I5) error {
							return fn.(finishBundle7x1[context.Context, typex.PaneInfo, I1, I2, I3, I4, I5, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[[]typex.Window, I0, I1, I2, I3, I4, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, I0, I1, I2, I3, I4, I5) error)
						return &caller7x1[[]typex.Window, I0, I1, I2, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, I0, I1, I2, I3, I4, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 I0, a2 I1, a3 I2, a4 I3, a5 I4, a6 I5) error {
							return fn.(finishBundle7x1[[]typex.Window, I0, I1, I2, I3, I4, I5, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[context.Context, []typex.Window, I1, I2, I3, I4, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, I1, I2, I3, I4, I5) error)
						return &caller7x1[context.Context, []typex.Window, I1, I2, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, I1, I2, I3, I4, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 I1, a3 I2, a4 I3, a5 I4, a6 I5) error {
							return fn.(finishBundle7x1[context.Context, []typex.Window, I1, I2, I3, I4, I5, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[typex.PaneInfo, []typex.Window, I1, I2, I3, I4, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, I1, I2, I3, I4, I5) error)
						return &caller7x1[typex.PaneInfo, []typex.Window, I1, I2, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, I1, I2, I3, I4, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 I1, a3 I2, a4 I3, a5 I4, a6 I5) error {
							return fn.(finishBundle7x1[typex.PaneInfo, []typex.Window, I1, I2, I3, I4, I5, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[context.Context, typex.PaneInfo, []typex.Window, I2, I3, I4, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, I2, I3, I4, I5) error)
						return &caller7x1[context.Context, typex.PaneInfo, []typex.Window, I2, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, I2, I3, I4, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 I2, a4 I3, a5 I4, a6 I5) error {
							return fn.(finishBundle7x1[context.Context, typex.PaneInfo, []typex.Window, I2, I3, I4, I5, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[typex.EventTime, I0, I1, I2, I3, I4, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, I0, I1, I2, I3, I4, I5) error)
						return &caller7x1[typex.EventTime, I0, I1, I2, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, I0, I1, I2, I3, I4, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 I0, a2 I1, a3 I2, a4 I3, a5 I4, a6 I5) error {
							return fn.(finishBundle7x1[typex.EventTime, I0, I1, I2, I3, I4, I5, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[context.Context, typex.EventTime, I1, I2, I3, I4, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, I1, I2, I3, I4, I5) error)
						return &caller7x1[context.Context, typex.EventTime, I1, I2, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, I1, I2, I3, I4, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 I1, a3 I2, a4 I3, a5 I4, a6 I5) error {
							return fn.(finishBundle7x1[context.Context, typex.EventTime, I1, I2, I3, I4, I5, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[typex.PaneInfo, typex.EventTime, I1, I2, I3, I4, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, I1, I2, I3, I4, I5) error)
						return &caller7x1[typex.PaneInfo, typex.EventTime, I1, I2, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, I1, I2, I3, I4, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 I1, a3 I2, a4 I3, a5 I4, a6 I5) error {
							return fn.(finishBundle7x1[typex.PaneInfo, typex.EventTime, I1, I2, I3, I4, I5, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[context.Context, typex.PaneInfo, typex.EventTime, I2, I3, I4, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, I2, I3, I4, I5) error)
						return &caller7x1[context.Context, typex.PaneInfo, typex.EventTime, I2, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, I2, I3, I4, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 I2, a4 I3, a5 I4, a6 I5) error {
							return fn.(finishBundle7x1[context.Context, typex.PaneInfo, typex.EventTime, I2, I3, I4, I5, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[[]typex.Window, typex.EventTime, I1, I2, I3, I4, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, I1, I2, I3, I4, I5) error)
						return &caller7x1[[]typex.Window, typex.EventTime, I1, I2, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, I1, I2, I3, I4, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 I1, a3 I2, a4 I3, a5 I4, a6 I5) error {
							return fn.(finishBundle7x1[[]typex.Window, typex.EventTime, I1, I2, I3, I4, I5, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[context.Context, []typex.Window, typex.EventTime, I2, I3, I4, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, I2, I3, I4, I5) error)
						return &caller7x1[context.Context, []typex.Window, typex.EventTime, I2, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, I2, I3, I4, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 I2, a4 I3, a5 I4, a6 I5) error {
							return fn.(finishBundle7x1[context.Context, []typex.Window, typex.EventTime, I2, I3, I4, I5, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[typex.PaneInfo, []typex.Window, typex.EventTime, I2, I3, I4, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, I2, I3, I4, I5) error)
						return &caller7x1[typex.PaneInfo, []typex.Window, typex.EventTime, I2, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, I2, I3, I4, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 I2, a4 I3, a5 I4, a6 I5) error {
							return fn.(finishBundle7x1[typex.PaneInfo, []typex.Window, typex.EventTime, I2, I3, I4, I5, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I3, I4, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I3, I4, I5) error)
						return &caller7x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I3, I4, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 I3, a5 I4, a6 I5) error {
							return fn.(finishBundle7x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I3, I4, I5, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[typex.BundleFinalization, I0, I1, I2, I3, I4, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization, I0, I1, I2, I3, I4, I5) error)
						return &caller7x1[typex.BundleFinalization, I0, I1, I2, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization, I0, I1, I2, I3, I4, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization, a1 I0, a2 I1, a3 I2, a4 I3, a5 I4, a6 I5) error {
							return fn.(finishBundle7x1[typex.BundleFinalization, I0, I1, I2, I3, I4, I5, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[context.Context, typex.BundleFinalization, I1, I2, I3, I4, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization, I1, I2, I3, I4, I5) error)
						return &caller7x1[context.Context, typex.BundleFinalization, I1, I2, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization, I1, I2, I3, I4, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization, a2 I1, a3 I2, a4 I3, a5 I4, a6 I5) error {
							return fn.(finishBundle7x1[context.Context, typex.BundleFinalization, I1, I2, I3, I4, I5, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[typex.PaneInfo, typex.BundleFinalization, I1, I2, I3, I4, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization, I1, I2, I3, I4, I5) error)
						return &caller7x1[typex.PaneInfo, typex.BundleFinalization, I1, I2, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization, I1, I2, I3, I4, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization, a2 I1, a3 I2, a4 I3, a5 I4, a6 I5) error {
							return fn.(finishBundle7x1[typex.PaneInfo, typex.BundleFinalization, I1, I2, I3, I4, I5, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I2, I3, I4, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization, I2, I3, I4, I5) error)
						return &caller7x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I2, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization, I2, I3, I4, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization, a3 I2, a4 I3, a5 I4, a6 I5) error {
							return fn.(finishBundle7x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I2, I3, I4, I5, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[[]typex.Window, typex.BundleFinalization, I1, I2, I3, I4, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization, I1, I2, I3, I4, I5) error)
						return &caller7x1[[]typex.Window, typex.BundleFinalization, I1, I2, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization, I1, I2, I3, I4, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization, a2 I1, a3 I2, a4 I3, a5 I4, a6 I5) error {
							return fn.(finishBundle7x1[[]typex.Window, typex.BundleFinalization, I1, I2, I3, I4, I5, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[context.Context, []typex.Window, typex.BundleFinalization, I2, I3, I4, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization, I2, I3, I4, I5) error)
						return &caller7x1[context.Context, []typex.Window, typex.BundleFinalization, I2, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization, I2, I3, I4, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization, a3 I2, a4 I3, a5 I4, a6 I5) error {
							return fn.(finishBundle7x1[context.Context, []typex.Window, typex.BundleFinalization, I2, I3, I4, I5, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2, I3, I4, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2, I3, I4, I5) error)
						return &caller7x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2, I3, I4, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization, a3 I2, a4 I3, a5 I4, a6 I5) error {
							return fn.(finishBundle7x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I2, I3, I4, I5, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3, I4, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3, I4, I5) error)
						return &caller7x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3, I4, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.BundleFinalization, a4 I3, a5 I4, a6 I5) error {
							return fn.(finishBundle7x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3, I4, I5, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[typex.EventTime, typex.BundleFinalization, I1, I2, I3, I4, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization, I1, I2, I3, I4, I5) error)
						return &caller7x1[typex.EventTime, typex.BundleFinalization, I1, I2, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization, I1, I2, I3, I4, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization, a2 I1, a3 I2, a4 I3, a5 I4, a6 I5) error {
							return fn.(finishBundle7x1[typex.EventTime, typex.BundleFinalization, I1, I2, I3, I4, I5, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[context.Context, typex.EventTime, typex.BundleFinalization, I2, I3, I4, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization, I2, I3, I4, I5) error)
						return &caller7x1[context.Context, typex.EventTime, typex.BundleFinalization, I2, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization, I2, I3, I4, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I2, a4 I3, a5 I4, a6 I5) error {
							return fn.(finishBundle7x1[context.Context, typex.EventTime, typex.BundleFinalization, I2, I3, I4, I5, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2, I3, I4, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2, I3, I4, I5) error)
						return &caller7x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2, I3, I4, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I2, a4 I3, a5 I4, a6 I5) error {
							return fn.(finishBundle7x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I2, I3, I4, I5, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3, I4, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3, I4, I5) error)
						return &caller7x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3, I4, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I3, a5 I4, a6 I5) error {
							return fn.(finishBundle7x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3, I4, I5, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3, I4, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3, I4, I5) error)
						return &caller7x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3, I4, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I2, a4 I3, a5 I4, a6 I5) error {
							return fn.(finishBundle7x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I2, I3, I4, I5, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4, I5) error)
						return &caller7x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I3, a5 I4, a6 I5) error {
							return fn.(finishBundle7x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4, I5, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4, I5) error)
						return &caller7x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I3, a5 I4, a6 I5) error {
							return fn.(finishBundle7x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4, I5, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5) error)
						return &caller7x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 typex.BundleFinalization, a5 I4, a6 I5) error {
							return fn.(finishBundle7x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				}
			default:
				panic("Invalid signature for FinishBundle")
			}

		default:
			panic("Invalid signature for FinishBundle")
		}
	}
	return nil
}

func buildFinishBundleWrapper7[I0, I1, I2, I3, I4, I5, I6 any](doFn interface{}) func(interface{}) reflectx.Func {
	finishBundleIn := -1
	finishBundleOut := -1
	finishBundleMethod := reflect.ValueOf(doFn).MethodByName("FinishBundle")
	if finishBundleMethod.IsValid() {
		finishBundleIn = finishBundleMethod.Type().NumIn()
		finishBundleOut = finishBundleMethod.Type().NumOut()
		switch {

		case finishBundleIn == 0:
			switch {
			case finishBundleOut == 0:
				if _, ok := doFn.(finishBundle0x0); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func())
						return &caller0x0{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func())(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func() { fn.(finishBundle0x0).FinishBundle() })
					}
				}
			case finishBundleOut == 1:
				if _, ok := doFn.(finishBundle0x1[error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func() error)
						return &caller0x1[error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func() error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func() error { return fn.(finishBundle0x1[error]).FinishBundle() })
					}
				}
			default:
				panic("Invalid signature for FinishBundle")
			}

		case finishBundleIn == 1:
			switch {
			case finishBundleOut == 0:
				if _, ok := doFn.(finishBundle1x0[I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I6))
						return &caller1x0[I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I6) { fn.(finishBundle1x0[I6]).FinishBundle(a0) })
					}
				} else if _, ok := doFn.(finishBundle1x0[context.Context]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context))
						return &caller1x0[context.Context]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context) { fn.(finishBundle1x0[context.Context]).FinishBundle(a0) })
					}
				} else if _, ok := doFn.(finishBundle1x0[typex.PaneInfo]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo))
						return &caller1x0[typex.PaneInfo]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo) { fn.(finishBundle1x0[typex.PaneInfo]).FinishBundle(a0) })
					}
				} else if _, ok := doFn.(finishBundle1x0[[]typex.Window]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window))
						return &caller1x0[[]typex.Window]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window) { fn.(finishBundle1x0[[]typex.Window]).FinishBundle(a0) })
					}
				} else if _, ok := doFn.(finishBundle1x0[typex.EventTime]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime))
						return &caller1x0[typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime) { fn.(finishBundle1x0[typex.EventTime]).FinishBundle(a0) })
					}
				} else if _, ok := doFn.(finishBundle1x0[typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization))
						return &caller1x0[typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization) { fn.(finishBundle1x0[typex.BundleFinalization]).FinishBundle(a0) })
					}
				}
			case finishBundleOut == 1:
				if _, ok := doFn.(finishBundle1x1[I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I6) error)
						return &caller1x1[I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I6) error { return fn.(finishBundle1x1[I6, error]).FinishBundle(a0) })
					}
				} else if _, ok := doFn.(finishBundle1x1[context.Context, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context) error)
						return &caller1x1[context.Context, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context) error { return fn.(finishBundle1x1[context.Context, error]).FinishBundle(a0) })
					}
				} else if _, ok := doFn.(finishBundle1x1[typex.PaneInfo, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo) error)
						return &caller1x1[typex.PaneInfo, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo) error { return fn.(finishBundle1x1[typex.PaneInfo, error]).FinishBundle(a0) })
					}
				} else if _, ok := doFn.(finishBundle1x1[[]typex.Window, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window) error)
						return &caller1x1[[]typex.Window, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window) error { return fn.(finishBundle1x1[[]typex.Window, error]).FinishBundle(a0) })
					}
				} else if _, ok := doFn.(finishBundle1x1[typex.EventTime, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime) error)
						return &caller1x1[typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime) error { return fn.(finishBundle1x1[typex.EventTime, error]).FinishBundle(a0) })
					}
				} else if _, ok := doFn.(finishBundle1x1[typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization) error)
						return &caller1x1[typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization) error {
							return fn.(finishBundle1x1[typex.BundleFinalization, error]).FinishBundle(a0)
						})
					}
				}
			default:
				panic("Invalid signature for FinishBundle")
			}

		case finishBundleIn == 2:
			switch {
			case finishBundleOut == 0:
				if _, ok := doFn.(finishBundle2x0[I5, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I5, I6))
						return &caller2x0[I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I5, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I5, a1 I6) { fn.(finishBundle2x0[I5, I6]).FinishBundle(a0, a1) })
					}
				} else if _, ok := doFn.(finishBundle2x0[context.Context, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, I6))
						return &caller2x0[context.Context, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 I6) { fn.(finishBundle2x0[context.Context, I6]).FinishBundle(a0, a1) })
					}
				} else if _, ok := doFn.(finishBundle2x0[typex.PaneInfo, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, I6))
						return &caller2x0[typex.PaneInfo, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 I6) { fn.(finishBundle2x0[typex.PaneInfo, I6]).FinishBundle(a0, a1) })
					}
				} else if _, ok := doFn.(finishBundle2x0[context.Context, typex.PaneInfo]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo))
						return &caller2x0[context.Context, typex.PaneInfo]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo) {
							fn.(finishBundle2x0[context.Context, typex.PaneInfo]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x0[[]typex.Window, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, I6))
						return &caller2x0[[]typex.Window, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 I6) { fn.(finishBundle2x0[[]typex.Window, I6]).FinishBundle(a0, a1) })
					}
				} else if _, ok := doFn.(finishBundle2x0[context.Context, []typex.Window]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window))
						return &caller2x0[context.Context, []typex.Window]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window) {
							fn.(finishBundle2x0[context.Context, []typex.Window]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x0[typex.PaneInfo, []typex.Window]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window))
						return &caller2x0[typex.PaneInfo, []typex.Window]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window) {
							fn.(finishBundle2x0[typex.PaneInfo, []typex.Window]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x0[typex.EventTime, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, I6))
						return &caller2x0[typex.EventTime, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 I6) { fn.(finishBundle2x0[typex.EventTime, I6]).FinishBundle(a0, a1) })
					}
				} else if _, ok := doFn.(finishBundle2x0[context.Context, typex.EventTime]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime))
						return &caller2x0[context.Context, typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime) {
							fn.(finishBundle2x0[context.Context, typex.EventTime]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x0[typex.PaneInfo, typex.EventTime]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime))
						return &caller2x0[typex.PaneInfo, typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime) {
							fn.(finishBundle2x0[typex.PaneInfo, typex.EventTime]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x0[[]typex.Window, typex.EventTime]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime))
						return &caller2x0[[]typex.Window, typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime) {
							fn.(finishBundle2x0[[]typex.Window, typex.EventTime]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x0[typex.BundleFinalization, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization, I6))
						return &caller2x0[typex.BundleFinalization, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization, a1 I6) {
							fn.(finishBundle2x0[typex.BundleFinalization, I6]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x0[context.Context, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization))
						return &caller2x0[context.Context, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization) {
							fn.(finishBundle2x0[context.Context, typex.BundleFinalization]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x0[typex.PaneInfo, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization))
						return &caller2x0[typex.PaneInfo, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization) {
							fn.(finishBundle2x0[typex.PaneInfo, typex.BundleFinalization]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x0[[]typex.Window, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization))
						return &caller2x0[[]typex.Window, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization) {
							fn.(finishBundle2x0[[]typex.Window, typex.BundleFinalization]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x0[typex.EventTime, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization))
						return &caller2x0[typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization) {
							fn.(finishBundle2x0[typex.EventTime, typex.BundleFinalization]).FinishBundle(a0, a1)
						})
					}
				}
			case finishBundleOut == 1:
				if _, ok := doFn.(finishBundle2x1[I5, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I5, I6) error)
						return &caller2x1[I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I5, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I5, a1 I6) error { return fn.(finishBundle2x1[I5, I6, error]).FinishBundle(a0, a1) })
					}
				} else if _, ok := doFn.(finishBundle2x1[context.Context, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, I6) error)
						return &caller2x1[context.Context, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 I6) error {
							return fn.(finishBundle2x1[context.Context, I6, error]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x1[typex.PaneInfo, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, I6) error)
						return &caller2x1[typex.PaneInfo, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 I6) error {
							return fn.(finishBundle2x1[typex.PaneInfo, I6, error]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x1[context.Context, typex.PaneInfo, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo) error)
						return &caller2x1[context.Context, typex.PaneInfo, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo) error {
							return fn.(finishBundle2x1[context.Context, typex.PaneInfo, error]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x1[[]typex.Window, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, I6) error)
						return &caller2x1[[]typex.Window, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 I6) error {
							return fn.(finishBundle2x1[[]typex.Window, I6, error]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x1[context.Context, []typex.Window, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window) error)
						return &caller2x1[context.Context, []typex.Window, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window) error {
							return fn.(finishBundle2x1[context.Context, []typex.Window, error]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x1[typex.PaneInfo, []typex.Window, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window) error)
						return &caller2x1[typex.PaneInfo, []typex.Window, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window) error {
							return fn.(finishBundle2x1[typex.PaneInfo, []typex.Window, error]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x1[typex.EventTime, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, I6) error)
						return &caller2x1[typex.EventTime, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 I6) error {
							return fn.(finishBundle2x1[typex.EventTime, I6, error]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x1[context.Context, typex.EventTime, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime) error)
						return &caller2x1[context.Context, typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime) error {
							return fn.(finishBundle2x1[context.Context, typex.EventTime, error]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x1[typex.PaneInfo, typex.EventTime, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime) error)
						return &caller2x1[typex.PaneInfo, typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime) error {
							return fn.(finishBundle2x1[typex.PaneInfo, typex.EventTime, error]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x1[[]typex.Window, typex.EventTime, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime) error)
						return &caller2x1[[]typex.Window, typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime) error {
							return fn.(finishBundle2x1[[]typex.Window, typex.EventTime, error]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x1[typex.BundleFinalization, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization, I6) error)
						return &caller2x1[typex.BundleFinalization, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization, a1 I6) error {
							return fn.(finishBundle2x1[typex.BundleFinalization, I6, error]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x1[context.Context, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization) error)
						return &caller2x1[context.Context, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization) error {
							return fn.(finishBundle2x1[context.Context, typex.BundleFinalization, error]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x1[typex.PaneInfo, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization) error)
						return &caller2x1[typex.PaneInfo, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization) error {
							return fn.(finishBundle2x1[typex.PaneInfo, typex.BundleFinalization, error]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x1[[]typex.Window, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization) error)
						return &caller2x1[[]typex.Window, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization) error {
							return fn.(finishBundle2x1[[]typex.Window, typex.BundleFinalization, error]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x1[typex.EventTime, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization) error)
						return &caller2x1[typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization) error {
							return fn.(finishBundle2x1[typex.EventTime, typex.BundleFinalization, error]).FinishBundle(a0, a1)
						})
					}
				}
			default:
				panic("Invalid signature for FinishBundle")
			}

		case finishBundleIn == 3:
			switch {
			case finishBundleOut == 0:
				if _, ok := doFn.(finishBundle3x0[I4, I5, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I4, I5, I6))
						return &caller3x0[I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I4, I5, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I4, a1 I5, a2 I6) { fn.(finishBundle3x0[I4, I5, I6]).FinishBundle(a0, a1, a2) })
					}
				} else if _, ok := doFn.(finishBundle3x0[context.Context, I5, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, I5, I6))
						return &caller3x0[context.Context, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, I5, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 I5, a2 I6) {
							fn.(finishBundle3x0[context.Context, I5, I6]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[typex.PaneInfo, I5, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, I5, I6))
						return &caller3x0[typex.PaneInfo, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, I5, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 I5, a2 I6) {
							fn.(finishBundle3x0[typex.PaneInfo, I5, I6]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[context.Context, typex.PaneInfo, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, I6))
						return &caller3x0[context.Context, typex.PaneInfo, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 I6) {
							fn.(finishBundle3x0[context.Context, typex.PaneInfo, I6]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[[]typex.Window, I5, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, I5, I6))
						return &caller3x0[[]typex.Window, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, I5, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 I5, a2 I6) {
							fn.(finishBundle3x0[[]typex.Window, I5, I6]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[context.Context, []typex.Window, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, I6))
						return &caller3x0[context.Context, []typex.Window, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 I6) {
							fn.(finishBundle3x0[context.Context, []typex.Window, I6]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[typex.PaneInfo, []typex.Window, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, I6))
						return &caller3x0[typex.PaneInfo, []typex.Window, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 I6) {
							fn.(finishBundle3x0[typex.PaneInfo, []typex.Window, I6]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[context.Context, typex.PaneInfo, []typex.Window]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window))
						return &caller3x0[context.Context, typex.PaneInfo, []typex.Window]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window) {
							fn.(finishBundle3x0[context.Context, typex.PaneInfo, []typex.Window]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[typex.EventTime, I5, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, I5, I6))
						return &caller3x0[typex.EventTime, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, I5, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 I5, a2 I6) {
							fn.(finishBundle3x0[typex.EventTime, I5, I6]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[context.Context, typex.EventTime, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, I6))
						return &caller3x0[context.Context, typex.EventTime, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 I6) {
							fn.(finishBundle3x0[context.Context, typex.EventTime, I6]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[typex.PaneInfo, typex.EventTime, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, I6))
						return &caller3x0[typex.PaneInfo, typex.EventTime, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 I6) {
							fn.(finishBundle3x0[typex.PaneInfo, typex.EventTime, I6]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[context.Context, typex.PaneInfo, typex.EventTime]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime))
						return &caller3x0[context.Context, typex.PaneInfo, typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime) {
							fn.(finishBundle3x0[context.Context, typex.PaneInfo, typex.EventTime]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[[]typex.Window, typex.EventTime, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, I6))
						return &caller3x0[[]typex.Window, typex.EventTime, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 I6) {
							fn.(finishBundle3x0[[]typex.Window, typex.EventTime, I6]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[context.Context, []typex.Window, typex.EventTime]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime))
						return &caller3x0[context.Context, []typex.Window, typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime) {
							fn.(finishBundle3x0[context.Context, []typex.Window, typex.EventTime]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[typex.PaneInfo, []typex.Window, typex.EventTime]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime))
						return &caller3x0[typex.PaneInfo, []typex.Window, typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime) {
							fn.(finishBundle3x0[typex.PaneInfo, []typex.Window, typex.EventTime]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[typex.BundleFinalization, I5, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization, I5, I6))
						return &caller3x0[typex.BundleFinalization, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization, I5, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization, a1 I5, a2 I6) {
							fn.(finishBundle3x0[typex.BundleFinalization, I5, I6]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[context.Context, typex.BundleFinalization, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization, I6))
						return &caller3x0[context.Context, typex.BundleFinalization, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization, a2 I6) {
							fn.(finishBundle3x0[context.Context, typex.BundleFinalization, I6]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[typex.PaneInfo, typex.BundleFinalization, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization, I6))
						return &caller3x0[typex.PaneInfo, typex.BundleFinalization, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization, a2 I6) {
							fn.(finishBundle3x0[typex.PaneInfo, typex.BundleFinalization, I6]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[context.Context, typex.PaneInfo, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization))
						return &caller3x0[context.Context, typex.PaneInfo, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization) {
							fn.(finishBundle3x0[context.Context, typex.PaneInfo, typex.BundleFinalization]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[[]typex.Window, typex.BundleFinalization, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization, I6))
						return &caller3x0[[]typex.Window, typex.BundleFinalization, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization, a2 I6) {
							fn.(finishBundle3x0[[]typex.Window, typex.BundleFinalization, I6]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[context.Context, []typex.Window, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization))
						return &caller3x0[context.Context, []typex.Window, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization) {
							fn.(finishBundle3x0[context.Context, []typex.Window, typex.BundleFinalization]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization))
						return &caller3x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization) {
							fn.(finishBundle3x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[typex.EventTime, typex.BundleFinalization, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization, I6))
						return &caller3x0[typex.EventTime, typex.BundleFinalization, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization, a2 I6) {
							fn.(finishBundle3x0[typex.EventTime, typex.BundleFinalization, I6]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[context.Context, typex.EventTime, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization))
						return &caller3x0[context.Context, typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization) {
							fn.(finishBundle3x0[context.Context, typex.EventTime, typex.BundleFinalization]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization))
						return &caller3x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization) {
							fn.(finishBundle3x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[[]typex.Window, typex.EventTime, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization))
						return &caller3x0[[]typex.Window, typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization) {
							fn.(finishBundle3x0[[]typex.Window, typex.EventTime, typex.BundleFinalization]).FinishBundle(a0, a1, a2)
						})
					}
				}
			case finishBundleOut == 1:
				if _, ok := doFn.(finishBundle3x1[I4, I5, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I4, I5, I6) error)
						return &caller3x1[I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I4, I5, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I4, a1 I5, a2 I6) error {
							return fn.(finishBundle3x1[I4, I5, I6, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[context.Context, I5, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, I5, I6) error)
						return &caller3x1[context.Context, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, I5, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 I5, a2 I6) error {
							return fn.(finishBundle3x1[context.Context, I5, I6, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[typex.PaneInfo, I5, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, I5, I6) error)
						return &caller3x1[typex.PaneInfo, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, I5, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 I5, a2 I6) error {
							return fn.(finishBundle3x1[typex.PaneInfo, I5, I6, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[context.Context, typex.PaneInfo, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, I6) error)
						return &caller3x1[context.Context, typex.PaneInfo, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 I6) error {
							return fn.(finishBundle3x1[context.Context, typex.PaneInfo, I6, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[[]typex.Window, I5, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, I5, I6) error)
						return &caller3x1[[]typex.Window, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, I5, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 I5, a2 I6) error {
							return fn.(finishBundle3x1[[]typex.Window, I5, I6, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[context.Context, []typex.Window, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, I6) error)
						return &caller3x1[context.Context, []typex.Window, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 I6) error {
							return fn.(finishBundle3x1[context.Context, []typex.Window, I6, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[typex.PaneInfo, []typex.Window, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, I6) error)
						return &caller3x1[typex.PaneInfo, []typex.Window, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 I6) error {
							return fn.(finishBundle3x1[typex.PaneInfo, []typex.Window, I6, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[context.Context, typex.PaneInfo, []typex.Window, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window) error)
						return &caller3x1[context.Context, typex.PaneInfo, []typex.Window, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window) error {
							return fn.(finishBundle3x1[context.Context, typex.PaneInfo, []typex.Window, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[typex.EventTime, I5, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, I5, I6) error)
						return &caller3x1[typex.EventTime, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, I5, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 I5, a2 I6) error {
							return fn.(finishBundle3x1[typex.EventTime, I5, I6, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[context.Context, typex.EventTime, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, I6) error)
						return &caller3x1[context.Context, typex.EventTime, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 I6) error {
							return fn.(finishBundle3x1[context.Context, typex.EventTime, I6, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[typex.PaneInfo, typex.EventTime, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, I6) error)
						return &caller3x1[typex.PaneInfo, typex.EventTime, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 I6) error {
							return fn.(finishBundle3x1[typex.PaneInfo, typex.EventTime, I6, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[context.Context, typex.PaneInfo, typex.EventTime, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime) error)
						return &caller3x1[context.Context, typex.PaneInfo, typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime) error {
							return fn.(finishBundle3x1[context.Context, typex.PaneInfo, typex.EventTime, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[[]typex.Window, typex.EventTime, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, I6) error)
						return &caller3x1[[]typex.Window, typex.EventTime, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 I6) error {
							return fn.(finishBundle3x1[[]typex.Window, typex.EventTime, I6, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[context.Context, []typex.Window, typex.EventTime, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime) error)
						return &caller3x1[context.Context, []typex.Window, typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime) error {
							return fn.(finishBundle3x1[context.Context, []typex.Window, typex.EventTime, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[typex.PaneInfo, []typex.Window, typex.EventTime, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime) error)
						return &caller3x1[typex.PaneInfo, []typex.Window, typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime) error {
							return fn.(finishBundle3x1[typex.PaneInfo, []typex.Window, typex.EventTime, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[typex.BundleFinalization, I5, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization, I5, I6) error)
						return &caller3x1[typex.BundleFinalization, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization, I5, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization, a1 I5, a2 I6) error {
							return fn.(finishBundle3x1[typex.BundleFinalization, I5, I6, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[context.Context, typex.BundleFinalization, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization, I6) error)
						return &caller3x1[context.Context, typex.BundleFinalization, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization, a2 I6) error {
							return fn.(finishBundle3x1[context.Context, typex.BundleFinalization, I6, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[typex.PaneInfo, typex.BundleFinalization, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization, I6) error)
						return &caller3x1[typex.PaneInfo, typex.BundleFinalization, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization, a2 I6) error {
							return fn.(finishBundle3x1[typex.PaneInfo, typex.BundleFinalization, I6, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[context.Context, typex.PaneInfo, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization) error)
						return &caller3x1[context.Context, typex.PaneInfo, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization) error {
							return fn.(finishBundle3x1[context.Context, typex.PaneInfo, typex.BundleFinalization, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[[]typex.Window, typex.BundleFinalization, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization, I6) error)
						return &caller3x1[[]typex.Window, typex.BundleFinalization, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization, a2 I6) error {
							return fn.(finishBundle3x1[[]typex.Window, typex.BundleFinalization, I6, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[context.Context, []typex.Window, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization) error)
						return &caller3x1[context.Context, []typex.Window, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization) error {
							return fn.(finishBundle3x1[context.Context, []typex.Window, typex.BundleFinalization, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization) error)
						return &caller3x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization) error {
							return fn.(finishBundle3x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[typex.EventTime, typex.BundleFinalization, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization, I6) error)
						return &caller3x1[typex.EventTime, typex.BundleFinalization, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization, a2 I6) error {
							return fn.(finishBundle3x1[typex.EventTime, typex.BundleFinalization, I6, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[context.Context, typex.EventTime, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization) error)
						return &caller3x1[context.Context, typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization) error {
							return fn.(finishBundle3x1[context.Context, typex.EventTime, typex.BundleFinalization, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization) error)
						return &caller3x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization) error {
							return fn.(finishBundle3x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization) error)
						return &caller3x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization) error {
							return fn.(finishBundle3x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, error]).FinishBundle(a0, a1, a2)
						})
					}
				}
			default:
				panic("Invalid signature for FinishBundle")
			}

		case finishBundleIn == 4:
			switch {
			case finishBundleOut == 0:
				if _, ok := doFn.(finishBundle4x0[I3, I4, I5, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I3, I4, I5, I6))
						return &caller4x0[I3, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I3, I4, I5, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I3, a1 I4, a2 I5, a3 I6) { fn.(finishBundle4x0[I3, I4, I5, I6]).FinishBundle(a0, a1, a2, a3) })
					}
				} else if _, ok := doFn.(finishBundle4x0[context.Context, I4, I5, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, I4, I5, I6))
						return &caller4x0[context.Context, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, I4, I5, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 I4, a2 I5, a3 I6) {
							fn.(finishBundle4x0[context.Context, I4, I5, I6]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[typex.PaneInfo, I4, I5, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, I4, I5, I6))
						return &caller4x0[typex.PaneInfo, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, I4, I5, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 I4, a2 I5, a3 I6) {
							fn.(finishBundle4x0[typex.PaneInfo, I4, I5, I6]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[context.Context, typex.PaneInfo, I5, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, I5, I6))
						return &caller4x0[context.Context, typex.PaneInfo, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, I5, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 I5, a3 I6) {
							fn.(finishBundle4x0[context.Context, typex.PaneInfo, I5, I6]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[[]typex.Window, I4, I5, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, I4, I5, I6))
						return &caller4x0[[]typex.Window, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, I4, I5, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 I4, a2 I5, a3 I6) {
							fn.(finishBundle4x0[[]typex.Window, I4, I5, I6]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[context.Context, []typex.Window, I5, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, I5, I6))
						return &caller4x0[context.Context, []typex.Window, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, I5, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 I5, a3 I6) {
							fn.(finishBundle4x0[context.Context, []typex.Window, I5, I6]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[typex.PaneInfo, []typex.Window, I5, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, I5, I6))
						return &caller4x0[typex.PaneInfo, []typex.Window, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, I5, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 I5, a3 I6) {
							fn.(finishBundle4x0[typex.PaneInfo, []typex.Window, I5, I6]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[context.Context, typex.PaneInfo, []typex.Window, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, I6))
						return &caller4x0[context.Context, typex.PaneInfo, []typex.Window, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 I6) {
							fn.(finishBundle4x0[context.Context, typex.PaneInfo, []typex.Window, I6]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[typex.EventTime, I4, I5, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, I4, I5, I6))
						return &caller4x0[typex.EventTime, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, I4, I5, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 I4, a2 I5, a3 I6) {
							fn.(finishBundle4x0[typex.EventTime, I4, I5, I6]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[context.Context, typex.EventTime, I5, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, I5, I6))
						return &caller4x0[context.Context, typex.EventTime, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, I5, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 I5, a3 I6) {
							fn.(finishBundle4x0[context.Context, typex.EventTime, I5, I6]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[typex.PaneInfo, typex.EventTime, I5, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, I5, I6))
						return &caller4x0[typex.PaneInfo, typex.EventTime, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, I5, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 I5, a3 I6) {
							fn.(finishBundle4x0[typex.PaneInfo, typex.EventTime, I5, I6]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[context.Context, typex.PaneInfo, typex.EventTime, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, I6))
						return &caller4x0[context.Context, typex.PaneInfo, typex.EventTime, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 I6) {
							fn.(finishBundle4x0[context.Context, typex.PaneInfo, typex.EventTime, I6]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[[]typex.Window, typex.EventTime, I5, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, I5, I6))
						return &caller4x0[[]typex.Window, typex.EventTime, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, I5, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 I5, a3 I6) {
							fn.(finishBundle4x0[[]typex.Window, typex.EventTime, I5, I6]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[context.Context, []typex.Window, typex.EventTime, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, I6))
						return &caller4x0[context.Context, []typex.Window, typex.EventTime, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 I6) {
							fn.(finishBundle4x0[context.Context, []typex.Window, typex.EventTime, I6]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[typex.PaneInfo, []typex.Window, typex.EventTime, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, I6))
						return &caller4x0[typex.PaneInfo, []typex.Window, typex.EventTime, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 I6) {
							fn.(finishBundle4x0[typex.PaneInfo, []typex.Window, typex.EventTime, I6]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime))
						return &caller4x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime) {
							fn.(finishBundle4x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[typex.BundleFinalization, I4, I5, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization, I4, I5, I6))
						return &caller4x0[typex.BundleFinalization, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization, I4, I5, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization, a1 I4, a2 I5, a3 I6) {
							fn.(finishBundle4x0[typex.BundleFinalization, I4, I5, I6]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[context.Context, typex.BundleFinalization, I5, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization, I5, I6))
						return &caller4x0[context.Context, typex.BundleFinalization, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization, I5, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization, a2 I5, a3 I6) {
							fn.(finishBundle4x0[context.Context, typex.BundleFinalization, I5, I6]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[typex.PaneInfo, typex.BundleFinalization, I5, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization, I5, I6))
						return &caller4x0[typex.PaneInfo, typex.BundleFinalization, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization, I5, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization, a2 I5, a3 I6) {
							fn.(finishBundle4x0[typex.PaneInfo, typex.BundleFinalization, I5, I6]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization, I6))
						return &caller4x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization, a3 I6) {
							fn.(finishBundle4x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I6]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[[]typex.Window, typex.BundleFinalization, I5, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization, I5, I6))
						return &caller4x0[[]typex.Window, typex.BundleFinalization, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization, I5, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization, a2 I5, a3 I6) {
							fn.(finishBundle4x0[[]typex.Window, typex.BundleFinalization, I5, I6]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[context.Context, []typex.Window, typex.BundleFinalization, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization, I6))
						return &caller4x0[context.Context, []typex.Window, typex.BundleFinalization, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization, a3 I6) {
							fn.(finishBundle4x0[context.Context, []typex.Window, typex.BundleFinalization, I6]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I6))
						return &caller4x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization, a3 I6) {
							fn.(finishBundle4x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I6]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization))
						return &caller4x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.BundleFinalization) {
							fn.(finishBundle4x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[typex.EventTime, typex.BundleFinalization, I5, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization, I5, I6))
						return &caller4x0[typex.EventTime, typex.BundleFinalization, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization, I5, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization, a2 I5, a3 I6) {
							fn.(finishBundle4x0[typex.EventTime, typex.BundleFinalization, I5, I6]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[context.Context, typex.EventTime, typex.BundleFinalization, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization, I6))
						return &caller4x0[context.Context, typex.EventTime, typex.BundleFinalization, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I6) {
							fn.(finishBundle4x0[context.Context, typex.EventTime, typex.BundleFinalization, I6]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I6))
						return &caller4x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I6) {
							fn.(finishBundle4x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I6]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization))
						return &caller4x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 typex.BundleFinalization) {
							fn.(finishBundle4x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization, I6))
						return &caller4x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I6) {
							fn.(finishBundle4x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I6]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization))
						return &caller4x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization) {
							fn.(finishBundle4x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization))
						return &caller4x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization) {
							fn.(finishBundle4x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization]).FinishBundle(a0, a1, a2, a3)
						})
					}
				}
			case finishBundleOut == 1:
				if _, ok := doFn.(finishBundle4x1[I3, I4, I5, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I3, I4, I5, I6) error)
						return &caller4x1[I3, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I3, I4, I5, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I3, a1 I4, a2 I5, a3 I6) error {
							return fn.(finishBundle4x1[I3, I4, I5, I6, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[context.Context, I4, I5, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, I4, I5, I6) error)
						return &caller4x1[context.Context, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, I4, I5, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 I4, a2 I5, a3 I6) error {
							return fn.(finishBundle4x1[context.Context, I4, I5, I6, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[typex.PaneInfo, I4, I5, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, I4, I5, I6) error)
						return &caller4x1[typex.PaneInfo, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, I4, I5, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 I4, a2 I5, a3 I6) error {
							return fn.(finishBundle4x1[typex.PaneInfo, I4, I5, I6, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[context.Context, typex.PaneInfo, I5, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, I5, I6) error)
						return &caller4x1[context.Context, typex.PaneInfo, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, I5, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 I5, a3 I6) error {
							return fn.(finishBundle4x1[context.Context, typex.PaneInfo, I5, I6, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[[]typex.Window, I4, I5, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, I4, I5, I6) error)
						return &caller4x1[[]typex.Window, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, I4, I5, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 I4, a2 I5, a3 I6) error {
							return fn.(finishBundle4x1[[]typex.Window, I4, I5, I6, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[context.Context, []typex.Window, I5, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, I5, I6) error)
						return &caller4x1[context.Context, []typex.Window, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, I5, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 I5, a3 I6) error {
							return fn.(finishBundle4x1[context.Context, []typex.Window, I5, I6, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[typex.PaneInfo, []typex.Window, I5, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, I5, I6) error)
						return &caller4x1[typex.PaneInfo, []typex.Window, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, I5, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 I5, a3 I6) error {
							return fn.(finishBundle4x1[typex.PaneInfo, []typex.Window, I5, I6, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[context.Context, typex.PaneInfo, []typex.Window, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, I6) error)
						return &caller4x1[context.Context, typex.PaneInfo, []typex.Window, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 I6) error {
							return fn.(finishBundle4x1[context.Context, typex.PaneInfo, []typex.Window, I6, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[typex.EventTime, I4, I5, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, I4, I5, I6) error)
						return &caller4x1[typex.EventTime, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, I4, I5, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 I4, a2 I5, a3 I6) error {
							return fn.(finishBundle4x1[typex.EventTime, I4, I5, I6, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[context.Context, typex.EventTime, I5, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, I5, I6) error)
						return &caller4x1[context.Context, typex.EventTime, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, I5, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 I5, a3 I6) error {
							return fn.(finishBundle4x1[context.Context, typex.EventTime, I5, I6, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[typex.PaneInfo, typex.EventTime, I5, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, I5, I6) error)
						return &caller4x1[typex.PaneInfo, typex.EventTime, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, I5, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 I5, a3 I6) error {
							return fn.(finishBundle4x1[typex.PaneInfo, typex.EventTime, I5, I6, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[context.Context, typex.PaneInfo, typex.EventTime, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, I6) error)
						return &caller4x1[context.Context, typex.PaneInfo, typex.EventTime, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 I6) error {
							return fn.(finishBundle4x1[context.Context, typex.PaneInfo, typex.EventTime, I6, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[[]typex.Window, typex.EventTime, I5, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, I5, I6) error)
						return &caller4x1[[]typex.Window, typex.EventTime, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, I5, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 I5, a3 I6) error {
							return fn.(finishBundle4x1[[]typex.Window, typex.EventTime, I5, I6, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[context.Context, []typex.Window, typex.EventTime, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, I6) error)
						return &caller4x1[context.Context, []typex.Window, typex.EventTime, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 I6) error {
							return fn.(finishBundle4x1[context.Context, []typex.Window, typex.EventTime, I6, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[typex.PaneInfo, []typex.Window, typex.EventTime, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, I6) error)
						return &caller4x1[typex.PaneInfo, []typex.Window, typex.EventTime, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 I6) error {
							return fn.(finishBundle4x1[typex.PaneInfo, []typex.Window, typex.EventTime, I6, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime) error)
						return &caller4x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime) error {
							return fn.(finishBundle4x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[typex.BundleFinalization, I4, I5, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization, I4, I5, I6) error)
						return &caller4x1[typex.BundleFinalization, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization, I4, I5, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization, a1 I4, a2 I5, a3 I6) error {
							return fn.(finishBundle4x1[typex.BundleFinalization, I4, I5, I6, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[context.Context, typex.BundleFinalization, I5, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization, I5, I6) error)
						return &caller4x1[context.Context, typex.BundleFinalization, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization, I5, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization, a2 I5, a3 I6) error {
							return fn.(finishBundle4x1[context.Context, typex.BundleFinalization, I5, I6, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[typex.PaneInfo, typex.BundleFinalization, I5, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization, I5, I6) error)
						return &caller4x1[typex.PaneInfo, typex.BundleFinalization, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization, I5, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization, a2 I5, a3 I6) error {
							return fn.(finishBundle4x1[typex.PaneInfo, typex.BundleFinalization, I5, I6, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization, I6) error)
						return &caller4x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization, a3 I6) error {
							return fn.(finishBundle4x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I6, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[[]typex.Window, typex.BundleFinalization, I5, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization, I5, I6) error)
						return &caller4x1[[]typex.Window, typex.BundleFinalization, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization, I5, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization, a2 I5, a3 I6) error {
							return fn.(finishBundle4x1[[]typex.Window, typex.BundleFinalization, I5, I6, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[context.Context, []typex.Window, typex.BundleFinalization, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization, I6) error)
						return &caller4x1[context.Context, []typex.Window, typex.BundleFinalization, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization, a3 I6) error {
							return fn.(finishBundle4x1[context.Context, []typex.Window, typex.BundleFinalization, I6, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I6) error)
						return &caller4x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization, a3 I6) error {
							return fn.(finishBundle4x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I6, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization) error)
						return &caller4x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.BundleFinalization) error {
							return fn.(finishBundle4x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[typex.EventTime, typex.BundleFinalization, I5, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization, I5, I6) error)
						return &caller4x1[typex.EventTime, typex.BundleFinalization, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization, I5, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization, a2 I5, a3 I6) error {
							return fn.(finishBundle4x1[typex.EventTime, typex.BundleFinalization, I5, I6, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[context.Context, typex.EventTime, typex.BundleFinalization, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization, I6) error)
						return &caller4x1[context.Context, typex.EventTime, typex.BundleFinalization, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I6) error {
							return fn.(finishBundle4x1[context.Context, typex.EventTime, typex.BundleFinalization, I6, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I6) error)
						return &caller4x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I6) error {
							return fn.(finishBundle4x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I6, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization) error)
						return &caller4x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 typex.BundleFinalization) error {
							return fn.(finishBundle4x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization, I6) error)
						return &caller4x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I6) error {
							return fn.(finishBundle4x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I6, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization) error)
						return &caller4x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization) error {
							return fn.(finishBundle4x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization) error)
						return &caller4x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization) error {
							return fn.(finishBundle4x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				}
			default:
				panic("Invalid signature for FinishBundle")
			}

		case finishBundleIn == 5:
			switch {
			case finishBundleOut == 0:
				if _, ok := doFn.(finishBundle5x0[I2, I3, I4, I5, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I2, I3, I4, I5, I6))
						return &caller5x0[I2, I3, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I2, I3, I4, I5, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I2, a1 I3, a2 I4, a3 I5, a4 I6) {
							fn.(finishBundle5x0[I2, I3, I4, I5, I6]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[context.Context, I3, I4, I5, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, I3, I4, I5, I6))
						return &caller5x0[context.Context, I3, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, I3, I4, I5, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 I3, a2 I4, a3 I5, a4 I6) {
							fn.(finishBundle5x0[context.Context, I3, I4, I5, I6]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[typex.PaneInfo, I3, I4, I5, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, I3, I4, I5, I6))
						return &caller5x0[typex.PaneInfo, I3, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, I3, I4, I5, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 I3, a2 I4, a3 I5, a4 I6) {
							fn.(finishBundle5x0[typex.PaneInfo, I3, I4, I5, I6]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[context.Context, typex.PaneInfo, I4, I5, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, I4, I5, I6))
						return &caller5x0[context.Context, typex.PaneInfo, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, I4, I5, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 I4, a3 I5, a4 I6) {
							fn.(finishBundle5x0[context.Context, typex.PaneInfo, I4, I5, I6]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[[]typex.Window, I3, I4, I5, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, I3, I4, I5, I6))
						return &caller5x0[[]typex.Window, I3, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, I3, I4, I5, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 I3, a2 I4, a3 I5, a4 I6) {
							fn.(finishBundle5x0[[]typex.Window, I3, I4, I5, I6]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[context.Context, []typex.Window, I4, I5, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, I4, I5, I6))
						return &caller5x0[context.Context, []typex.Window, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, I4, I5, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 I4, a3 I5, a4 I6) {
							fn.(finishBundle5x0[context.Context, []typex.Window, I4, I5, I6]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[typex.PaneInfo, []typex.Window, I4, I5, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, I4, I5, I6))
						return &caller5x0[typex.PaneInfo, []typex.Window, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, I4, I5, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 I4, a3 I5, a4 I6) {
							fn.(finishBundle5x0[typex.PaneInfo, []typex.Window, I4, I5, I6]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[context.Context, typex.PaneInfo, []typex.Window, I5, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, I5, I6))
						return &caller5x0[context.Context, typex.PaneInfo, []typex.Window, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, I5, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 I5, a4 I6) {
							fn.(finishBundle5x0[context.Context, typex.PaneInfo, []typex.Window, I5, I6]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[typex.EventTime, I3, I4, I5, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, I3, I4, I5, I6))
						return &caller5x0[typex.EventTime, I3, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, I3, I4, I5, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 I3, a2 I4, a3 I5, a4 I6) {
							fn.(finishBundle5x0[typex.EventTime, I3, I4, I5, I6]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[context.Context, typex.EventTime, I4, I5, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, I4, I5, I6))
						return &caller5x0[context.Context, typex.EventTime, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, I4, I5, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 I4, a3 I5, a4 I6) {
							fn.(finishBundle5x0[context.Context, typex.EventTime, I4, I5, I6]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[typex.PaneInfo, typex.EventTime, I4, I5, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, I4, I5, I6))
						return &caller5x0[typex.PaneInfo, typex.EventTime, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, I4, I5, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 I4, a3 I5, a4 I6) {
							fn.(finishBundle5x0[typex.PaneInfo, typex.EventTime, I4, I5, I6]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[context.Context, typex.PaneInfo, typex.EventTime, I5, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, I5, I6))
						return &caller5x0[context.Context, typex.PaneInfo, typex.EventTime, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, I5, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 I5, a4 I6) {
							fn.(finishBundle5x0[context.Context, typex.PaneInfo, typex.EventTime, I5, I6]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[[]typex.Window, typex.EventTime, I4, I5, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, I4, I5, I6))
						return &caller5x0[[]typex.Window, typex.EventTime, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, I4, I5, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 I4, a3 I5, a4 I6) {
							fn.(finishBundle5x0[[]typex.Window, typex.EventTime, I4, I5, I6]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[context.Context, []typex.Window, typex.EventTime, I5, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, I5, I6))
						return &caller5x0[context.Context, []typex.Window, typex.EventTime, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, I5, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 I5, a4 I6) {
							fn.(finishBundle5x0[context.Context, []typex.Window, typex.EventTime, I5, I6]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[typex.PaneInfo, []typex.Window, typex.EventTime, I5, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, I5, I6))
						return &caller5x0[typex.PaneInfo, []typex.Window, typex.EventTime, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, I5, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 I5, a4 I6) {
							fn.(finishBundle5x0[typex.PaneInfo, []typex.Window, typex.EventTime, I5, I6]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I6))
						return &caller5x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 I6) {
							fn.(finishBundle5x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I6]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[typex.BundleFinalization, I3, I4, I5, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization, I3, I4, I5, I6))
						return &caller5x0[typex.BundleFinalization, I3, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization, I3, I4, I5, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization, a1 I3, a2 I4, a3 I5, a4 I6) {
							fn.(finishBundle5x0[typex.BundleFinalization, I3, I4, I5, I6]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[context.Context, typex.BundleFinalization, I4, I5, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization, I4, I5, I6))
						return &caller5x0[context.Context, typex.BundleFinalization, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization, I4, I5, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization, a2 I4, a3 I5, a4 I6) {
							fn.(finishBundle5x0[context.Context, typex.BundleFinalization, I4, I5, I6]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[typex.PaneInfo, typex.BundleFinalization, I4, I5, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization, I4, I5, I6))
						return &caller5x0[typex.PaneInfo, typex.BundleFinalization, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization, I4, I5, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization, a2 I4, a3 I5, a4 I6) {
							fn.(finishBundle5x0[typex.PaneInfo, typex.BundleFinalization, I4, I5, I6]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I5, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization, I5, I6))
						return &caller5x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization, I5, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization, a3 I5, a4 I6) {
							fn.(finishBundle5x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I5, I6]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[[]typex.Window, typex.BundleFinalization, I4, I5, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization, I4, I5, I6))
						return &caller5x0[[]typex.Window, typex.BundleFinalization, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization, I4, I5, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization, a2 I4, a3 I5, a4 I6) {
							fn.(finishBundle5x0[[]typex.Window, typex.BundleFinalization, I4, I5, I6]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[context.Context, []typex.Window, typex.BundleFinalization, I5, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization, I5, I6))
						return &caller5x0[context.Context, []typex.Window, typex.BundleFinalization, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization, I5, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization, a3 I5, a4 I6) {
							fn.(finishBundle5x0[context.Context, []typex.Window, typex.BundleFinalization, I5, I6]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I5, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I5, I6))
						return &caller5x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I5, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization, a3 I5, a4 I6) {
							fn.(finishBundle5x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I5, I6]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I6))
						return &caller5x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.BundleFinalization, a4 I6) {
							fn.(finishBundle5x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I6]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[typex.EventTime, typex.BundleFinalization, I4, I5, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization, I4, I5, I6))
						return &caller5x0[typex.EventTime, typex.BundleFinalization, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization, I4, I5, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization, a2 I4, a3 I5, a4 I6) {
							fn.(finishBundle5x0[typex.EventTime, typex.BundleFinalization, I4, I5, I6]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[context.Context, typex.EventTime, typex.BundleFinalization, I5, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization, I5, I6))
						return &caller5x0[context.Context, typex.EventTime, typex.BundleFinalization, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization, I5, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I5, a4 I6) {
							fn.(finishBundle5x0[context.Context, typex.EventTime, typex.BundleFinalization, I5, I6]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I5, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I5, I6))
						return &caller5x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I5, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I5, a4 I6) {
							fn.(finishBundle5x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I5, I6]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I6))
						return &caller5x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I6) {
							fn.(finishBundle5x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I6]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6))
						return &caller5x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I5, a4 I6) {
							fn.(finishBundle5x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I6))
						return &caller5x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I6) {
							fn.(finishBundle5x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I6]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I6))
						return &caller5x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I6) {
							fn.(finishBundle5x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I6]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization))
						return &caller5x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 typex.BundleFinalization) {
							fn.(finishBundle5x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				}
			case finishBundleOut == 1:
				if _, ok := doFn.(finishBundle5x1[I2, I3, I4, I5, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I2, I3, I4, I5, I6) error)
						return &caller5x1[I2, I3, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I2, I3, I4, I5, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I2, a1 I3, a2 I4, a3 I5, a4 I6) error {
							return fn.(finishBundle5x1[I2, I3, I4, I5, I6, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[context.Context, I3, I4, I5, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, I3, I4, I5, I6) error)
						return &caller5x1[context.Context, I3, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, I3, I4, I5, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 I3, a2 I4, a3 I5, a4 I6) error {
							return fn.(finishBundle5x1[context.Context, I3, I4, I5, I6, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[typex.PaneInfo, I3, I4, I5, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, I3, I4, I5, I6) error)
						return &caller5x1[typex.PaneInfo, I3, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, I3, I4, I5, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 I3, a2 I4, a3 I5, a4 I6) error {
							return fn.(finishBundle5x1[typex.PaneInfo, I3, I4, I5, I6, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[context.Context, typex.PaneInfo, I4, I5, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, I4, I5, I6) error)
						return &caller5x1[context.Context, typex.PaneInfo, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, I4, I5, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 I4, a3 I5, a4 I6) error {
							return fn.(finishBundle5x1[context.Context, typex.PaneInfo, I4, I5, I6, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[[]typex.Window, I3, I4, I5, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, I3, I4, I5, I6) error)
						return &caller5x1[[]typex.Window, I3, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, I3, I4, I5, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 I3, a2 I4, a3 I5, a4 I6) error {
							return fn.(finishBundle5x1[[]typex.Window, I3, I4, I5, I6, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[context.Context, []typex.Window, I4, I5, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, I4, I5, I6) error)
						return &caller5x1[context.Context, []typex.Window, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, I4, I5, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 I4, a3 I5, a4 I6) error {
							return fn.(finishBundle5x1[context.Context, []typex.Window, I4, I5, I6, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[typex.PaneInfo, []typex.Window, I4, I5, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, I4, I5, I6) error)
						return &caller5x1[typex.PaneInfo, []typex.Window, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, I4, I5, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 I4, a3 I5, a4 I6) error {
							return fn.(finishBundle5x1[typex.PaneInfo, []typex.Window, I4, I5, I6, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[context.Context, typex.PaneInfo, []typex.Window, I5, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, I5, I6) error)
						return &caller5x1[context.Context, typex.PaneInfo, []typex.Window, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, I5, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 I5, a4 I6) error {
							return fn.(finishBundle5x1[context.Context, typex.PaneInfo, []typex.Window, I5, I6, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[typex.EventTime, I3, I4, I5, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, I3, I4, I5, I6) error)
						return &caller5x1[typex.EventTime, I3, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, I3, I4, I5, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 I3, a2 I4, a3 I5, a4 I6) error {
							return fn.(finishBundle5x1[typex.EventTime, I3, I4, I5, I6, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[context.Context, typex.EventTime, I4, I5, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, I4, I5, I6) error)
						return &caller5x1[context.Context, typex.EventTime, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, I4, I5, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 I4, a3 I5, a4 I6) error {
							return fn.(finishBundle5x1[context.Context, typex.EventTime, I4, I5, I6, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[typex.PaneInfo, typex.EventTime, I4, I5, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, I4, I5, I6) error)
						return &caller5x1[typex.PaneInfo, typex.EventTime, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, I4, I5, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 I4, a3 I5, a4 I6) error {
							return fn.(finishBundle5x1[typex.PaneInfo, typex.EventTime, I4, I5, I6, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[context.Context, typex.PaneInfo, typex.EventTime, I5, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, I5, I6) error)
						return &caller5x1[context.Context, typex.PaneInfo, typex.EventTime, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, I5, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 I5, a4 I6) error {
							return fn.(finishBundle5x1[context.Context, typex.PaneInfo, typex.EventTime, I5, I6, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[[]typex.Window, typex.EventTime, I4, I5, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, I4, I5, I6) error)
						return &caller5x1[[]typex.Window, typex.EventTime, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, I4, I5, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 I4, a3 I5, a4 I6) error {
							return fn.(finishBundle5x1[[]typex.Window, typex.EventTime, I4, I5, I6, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[context.Context, []typex.Window, typex.EventTime, I5, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, I5, I6) error)
						return &caller5x1[context.Context, []typex.Window, typex.EventTime, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, I5, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 I5, a4 I6) error {
							return fn.(finishBundle5x1[context.Context, []typex.Window, typex.EventTime, I5, I6, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[typex.PaneInfo, []typex.Window, typex.EventTime, I5, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, I5, I6) error)
						return &caller5x1[typex.PaneInfo, []typex.Window, typex.EventTime, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, I5, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 I5, a4 I6) error {
							return fn.(finishBundle5x1[typex.PaneInfo, []typex.Window, typex.EventTime, I5, I6, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I6) error)
						return &caller5x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 I6) error {
							return fn.(finishBundle5x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I6, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[typex.BundleFinalization, I3, I4, I5, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization, I3, I4, I5, I6) error)
						return &caller5x1[typex.BundleFinalization, I3, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization, I3, I4, I5, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization, a1 I3, a2 I4, a3 I5, a4 I6) error {
							return fn.(finishBundle5x1[typex.BundleFinalization, I3, I4, I5, I6, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[context.Context, typex.BundleFinalization, I4, I5, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization, I4, I5, I6) error)
						return &caller5x1[context.Context, typex.BundleFinalization, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization, I4, I5, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization, a2 I4, a3 I5, a4 I6) error {
							return fn.(finishBundle5x1[context.Context, typex.BundleFinalization, I4, I5, I6, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[typex.PaneInfo, typex.BundleFinalization, I4, I5, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization, I4, I5, I6) error)
						return &caller5x1[typex.PaneInfo, typex.BundleFinalization, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization, I4, I5, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization, a2 I4, a3 I5, a4 I6) error {
							return fn.(finishBundle5x1[typex.PaneInfo, typex.BundleFinalization, I4, I5, I6, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I5, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization, I5, I6) error)
						return &caller5x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization, I5, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization, a3 I5, a4 I6) error {
							return fn.(finishBundle5x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I5, I6, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[[]typex.Window, typex.BundleFinalization, I4, I5, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization, I4, I5, I6) error)
						return &caller5x1[[]typex.Window, typex.BundleFinalization, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization, I4, I5, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization, a2 I4, a3 I5, a4 I6) error {
							return fn.(finishBundle5x1[[]typex.Window, typex.BundleFinalization, I4, I5, I6, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[context.Context, []typex.Window, typex.BundleFinalization, I5, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization, I5, I6) error)
						return &caller5x1[context.Context, []typex.Window, typex.BundleFinalization, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization, I5, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization, a3 I5, a4 I6) error {
							return fn.(finishBundle5x1[context.Context, []typex.Window, typex.BundleFinalization, I5, I6, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I5, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I5, I6) error)
						return &caller5x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I5, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization, a3 I5, a4 I6) error {
							return fn.(finishBundle5x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I5, I6, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I6) error)
						return &caller5x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.BundleFinalization, a4 I6) error {
							return fn.(finishBundle5x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I6, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[typex.EventTime, typex.BundleFinalization, I4, I5, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization, I4, I5, I6) error)
						return &caller5x1[typex.EventTime, typex.BundleFinalization, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization, I4, I5, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization, a2 I4, a3 I5, a4 I6) error {
							return fn.(finishBundle5x1[typex.EventTime, typex.BundleFinalization, I4, I5, I6, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[context.Context, typex.EventTime, typex.BundleFinalization, I5, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization, I5, I6) error)
						return &caller5x1[context.Context, typex.EventTime, typex.BundleFinalization, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization, I5, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I5, a4 I6) error {
							return fn.(finishBundle5x1[context.Context, typex.EventTime, typex.BundleFinalization, I5, I6, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I5, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I5, I6) error)
						return &caller5x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I5, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I5, a4 I6) error {
							return fn.(finishBundle5x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I5, I6, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I6) error)
						return &caller5x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I6) error {
							return fn.(finishBundle5x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I6, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6) error)
						return &caller5x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I5, a4 I6) error {
							return fn.(finishBundle5x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I6) error)
						return &caller5x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I6) error {
							return fn.(finishBundle5x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I6, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I6) error)
						return &caller5x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I6) error {
							return fn.(finishBundle5x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I6, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization) error)
						return &caller5x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 typex.BundleFinalization) error {
							return fn.(finishBundle5x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				}
			default:
				panic("Invalid signature for FinishBundle")
			}

		case finishBundleIn == 6:
			switch {
			case finishBundleOut == 0:
				if _, ok := doFn.(finishBundle6x0[I1, I2, I3, I4, I5, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I1, I2, I3, I4, I5, I6))
						return &caller6x0[I1, I2, I3, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I1, I2, I3, I4, I5, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I1, a1 I2, a2 I3, a3 I4, a4 I5, a5 I6) {
							fn.(finishBundle6x0[I1, I2, I3, I4, I5, I6]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[context.Context, I2, I3, I4, I5, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, I2, I3, I4, I5, I6))
						return &caller6x0[context.Context, I2, I3, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, I2, I3, I4, I5, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 I2, a2 I3, a3 I4, a4 I5, a5 I6) {
							fn.(finishBundle6x0[context.Context, I2, I3, I4, I5, I6]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[typex.PaneInfo, I2, I3, I4, I5, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, I2, I3, I4, I5, I6))
						return &caller6x0[typex.PaneInfo, I2, I3, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, I2, I3, I4, I5, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 I2, a2 I3, a3 I4, a4 I5, a5 I6) {
							fn.(finishBundle6x0[typex.PaneInfo, I2, I3, I4, I5, I6]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[context.Context, typex.PaneInfo, I3, I4, I5, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, I3, I4, I5, I6))
						return &caller6x0[context.Context, typex.PaneInfo, I3, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, I3, I4, I5, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 I3, a3 I4, a4 I5, a5 I6) {
							fn.(finishBundle6x0[context.Context, typex.PaneInfo, I3, I4, I5, I6]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[[]typex.Window, I2, I3, I4, I5, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, I2, I3, I4, I5, I6))
						return &caller6x0[[]typex.Window, I2, I3, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, I2, I3, I4, I5, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 I2, a2 I3, a3 I4, a4 I5, a5 I6) {
							fn.(finishBundle6x0[[]typex.Window, I2, I3, I4, I5, I6]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[context.Context, []typex.Window, I3, I4, I5, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, I3, I4, I5, I6))
						return &caller6x0[context.Context, []typex.Window, I3, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, I3, I4, I5, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 I3, a3 I4, a4 I5, a5 I6) {
							fn.(finishBundle6x0[context.Context, []typex.Window, I3, I4, I5, I6]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[typex.PaneInfo, []typex.Window, I3, I4, I5, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, I3, I4, I5, I6))
						return &caller6x0[typex.PaneInfo, []typex.Window, I3, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, I3, I4, I5, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 I3, a3 I4, a4 I5, a5 I6) {
							fn.(finishBundle6x0[typex.PaneInfo, []typex.Window, I3, I4, I5, I6]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[context.Context, typex.PaneInfo, []typex.Window, I4, I5, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, I4, I5, I6))
						return &caller6x0[context.Context, typex.PaneInfo, []typex.Window, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, I4, I5, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 I4, a4 I5, a5 I6) {
							fn.(finishBundle6x0[context.Context, typex.PaneInfo, []typex.Window, I4, I5, I6]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[typex.EventTime, I2, I3, I4, I5, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, I2, I3, I4, I5, I6))
						return &caller6x0[typex.EventTime, I2, I3, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, I2, I3, I4, I5, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 I2, a2 I3, a3 I4, a4 I5, a5 I6) {
							fn.(finishBundle6x0[typex.EventTime, I2, I3, I4, I5, I6]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[context.Context, typex.EventTime, I3, I4, I5, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, I3, I4, I5, I6))
						return &caller6x0[context.Context, typex.EventTime, I3, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, I3, I4, I5, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 I3, a3 I4, a4 I5, a5 I6) {
							fn.(finishBundle6x0[context.Context, typex.EventTime, I3, I4, I5, I6]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[typex.PaneInfo, typex.EventTime, I3, I4, I5, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, I3, I4, I5, I6))
						return &caller6x0[typex.PaneInfo, typex.EventTime, I3, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, I3, I4, I5, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 I3, a3 I4, a4 I5, a5 I6) {
							fn.(finishBundle6x0[typex.PaneInfo, typex.EventTime, I3, I4, I5, I6]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[context.Context, typex.PaneInfo, typex.EventTime, I4, I5, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, I4, I5, I6))
						return &caller6x0[context.Context, typex.PaneInfo, typex.EventTime, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, I4, I5, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 I4, a4 I5, a5 I6) {
							fn.(finishBundle6x0[context.Context, typex.PaneInfo, typex.EventTime, I4, I5, I6]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[[]typex.Window, typex.EventTime, I3, I4, I5, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, I3, I4, I5, I6))
						return &caller6x0[[]typex.Window, typex.EventTime, I3, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, I3, I4, I5, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 I3, a3 I4, a4 I5, a5 I6) {
							fn.(finishBundle6x0[[]typex.Window, typex.EventTime, I3, I4, I5, I6]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[context.Context, []typex.Window, typex.EventTime, I4, I5, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, I4, I5, I6))
						return &caller6x0[context.Context, []typex.Window, typex.EventTime, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, I4, I5, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 I4, a4 I5, a5 I6) {
							fn.(finishBundle6x0[context.Context, []typex.Window, typex.EventTime, I4, I5, I6]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[typex.PaneInfo, []typex.Window, typex.EventTime, I4, I5, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, I4, I5, I6))
						return &caller6x0[typex.PaneInfo, []typex.Window, typex.EventTime, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, I4, I5, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 I4, a4 I5, a5 I6) {
							fn.(finishBundle6x0[typex.PaneInfo, []typex.Window, typex.EventTime, I4, I5, I6]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I5, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I5, I6))
						return &caller6x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I5, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 I5, a5 I6) {
							fn.(finishBundle6x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I5, I6]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[typex.BundleFinalization, I2, I3, I4, I5, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization, I2, I3, I4, I5, I6))
						return &caller6x0[typex.BundleFinalization, I2, I3, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization, I2, I3, I4, I5, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization, a1 I2, a2 I3, a3 I4, a4 I5, a5 I6) {
							fn.(finishBundle6x0[typex.BundleFinalization, I2, I3, I4, I5, I6]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[context.Context, typex.BundleFinalization, I3, I4, I5, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization, I3, I4, I5, I6))
						return &caller6x0[context.Context, typex.BundleFinalization, I3, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization, I3, I4, I5, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization, a2 I3, a3 I4, a4 I5, a5 I6) {
							fn.(finishBundle6x0[context.Context, typex.BundleFinalization, I3, I4, I5, I6]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[typex.PaneInfo, typex.BundleFinalization, I3, I4, I5, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization, I3, I4, I5, I6))
						return &caller6x0[typex.PaneInfo, typex.BundleFinalization, I3, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization, I3, I4, I5, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization, a2 I3, a3 I4, a4 I5, a5 I6) {
							fn.(finishBundle6x0[typex.PaneInfo, typex.BundleFinalization, I3, I4, I5, I6]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I4, I5, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization, I4, I5, I6))
						return &caller6x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization, I4, I5, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization, a3 I4, a4 I5, a5 I6) {
							fn.(finishBundle6x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I4, I5, I6]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[[]typex.Window, typex.BundleFinalization, I3, I4, I5, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization, I3, I4, I5, I6))
						return &caller6x0[[]typex.Window, typex.BundleFinalization, I3, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization, I3, I4, I5, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization, a2 I3, a3 I4, a4 I5, a5 I6) {
							fn.(finishBundle6x0[[]typex.Window, typex.BundleFinalization, I3, I4, I5, I6]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[context.Context, []typex.Window, typex.BundleFinalization, I4, I5, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization, I4, I5, I6))
						return &caller6x0[context.Context, []typex.Window, typex.BundleFinalization, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization, I4, I5, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization, a3 I4, a4 I5, a5 I6) {
							fn.(finishBundle6x0[context.Context, []typex.Window, typex.BundleFinalization, I4, I5, I6]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4, I5, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4, I5, I6))
						return &caller6x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4, I5, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization, a3 I4, a4 I5, a5 I6) {
							fn.(finishBundle6x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4, I5, I6]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I5, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I5, I6))
						return &caller6x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I5, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.BundleFinalization, a4 I5, a5 I6) {
							fn.(finishBundle6x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I5, I6]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[typex.EventTime, typex.BundleFinalization, I3, I4, I5, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization, I3, I4, I5, I6))
						return &caller6x0[typex.EventTime, typex.BundleFinalization, I3, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization, I3, I4, I5, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization, a2 I3, a3 I4, a4 I5, a5 I6) {
							fn.(finishBundle6x0[typex.EventTime, typex.BundleFinalization, I3, I4, I5, I6]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[context.Context, typex.EventTime, typex.BundleFinalization, I4, I5, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization, I4, I5, I6))
						return &caller6x0[context.Context, typex.EventTime, typex.BundleFinalization, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization, I4, I5, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I4, a4 I5, a5 I6) {
							fn.(finishBundle6x0[context.Context, typex.EventTime, typex.BundleFinalization, I4, I5, I6]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4, I5, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4, I5, I6))
						return &caller6x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4, I5, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I4, a4 I5, a5 I6) {
							fn.(finishBundle6x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4, I5, I6]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I5, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I5, I6))
						return &caller6x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I5, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I5, a5 I6) {
							fn.(finishBundle6x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I5, I6]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5, I6))
						return &caller6x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I4, a4 I5, a5 I6) {
							fn.(finishBundle6x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5, I6]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6))
						return &caller6x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I5, a5 I6) {
							fn.(finishBundle6x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6))
						return &caller6x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I5, a5 I6) {
							fn.(finishBundle6x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I6))
						return &caller6x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 typex.BundleFinalization, a5 I6) {
							fn.(finishBundle6x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I6]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				}
			case finishBundleOut == 1:
				if _, ok := doFn.(finishBundle6x1[I1, I2, I3, I4, I5, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I1, I2, I3, I4, I5, I6) error)
						return &caller6x1[I1, I2, I3, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I1, I2, I3, I4, I5, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I1, a1 I2, a2 I3, a3 I4, a4 I5, a5 I6) error {
							return fn.(finishBundle6x1[I1, I2, I3, I4, I5, I6, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[context.Context, I2, I3, I4, I5, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, I2, I3, I4, I5, I6) error)
						return &caller6x1[context.Context, I2, I3, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, I2, I3, I4, I5, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 I2, a2 I3, a3 I4, a4 I5, a5 I6) error {
							return fn.(finishBundle6x1[context.Context, I2, I3, I4, I5, I6, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[typex.PaneInfo, I2, I3, I4, I5, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, I2, I3, I4, I5, I6) error)
						return &caller6x1[typex.PaneInfo, I2, I3, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, I2, I3, I4, I5, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 I2, a2 I3, a3 I4, a4 I5, a5 I6) error {
							return fn.(finishBundle6x1[typex.PaneInfo, I2, I3, I4, I5, I6, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[context.Context, typex.PaneInfo, I3, I4, I5, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, I3, I4, I5, I6) error)
						return &caller6x1[context.Context, typex.PaneInfo, I3, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, I3, I4, I5, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 I3, a3 I4, a4 I5, a5 I6) error {
							return fn.(finishBundle6x1[context.Context, typex.PaneInfo, I3, I4, I5, I6, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[[]typex.Window, I2, I3, I4, I5, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, I2, I3, I4, I5, I6) error)
						return &caller6x1[[]typex.Window, I2, I3, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, I2, I3, I4, I5, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 I2, a2 I3, a3 I4, a4 I5, a5 I6) error {
							return fn.(finishBundle6x1[[]typex.Window, I2, I3, I4, I5, I6, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[context.Context, []typex.Window, I3, I4, I5, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, I3, I4, I5, I6) error)
						return &caller6x1[context.Context, []typex.Window, I3, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, I3, I4, I5, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 I3, a3 I4, a4 I5, a5 I6) error {
							return fn.(finishBundle6x1[context.Context, []typex.Window, I3, I4, I5, I6, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[typex.PaneInfo, []typex.Window, I3, I4, I5, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, I3, I4, I5, I6) error)
						return &caller6x1[typex.PaneInfo, []typex.Window, I3, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, I3, I4, I5, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 I3, a3 I4, a4 I5, a5 I6) error {
							return fn.(finishBundle6x1[typex.PaneInfo, []typex.Window, I3, I4, I5, I6, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[context.Context, typex.PaneInfo, []typex.Window, I4, I5, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, I4, I5, I6) error)
						return &caller6x1[context.Context, typex.PaneInfo, []typex.Window, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, I4, I5, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 I4, a4 I5, a5 I6) error {
							return fn.(finishBundle6x1[context.Context, typex.PaneInfo, []typex.Window, I4, I5, I6, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[typex.EventTime, I2, I3, I4, I5, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, I2, I3, I4, I5, I6) error)
						return &caller6x1[typex.EventTime, I2, I3, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, I2, I3, I4, I5, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 I2, a2 I3, a3 I4, a4 I5, a5 I6) error {
							return fn.(finishBundle6x1[typex.EventTime, I2, I3, I4, I5, I6, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[context.Context, typex.EventTime, I3, I4, I5, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, I3, I4, I5, I6) error)
						return &caller6x1[context.Context, typex.EventTime, I3, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, I3, I4, I5, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 I3, a3 I4, a4 I5, a5 I6) error {
							return fn.(finishBundle6x1[context.Context, typex.EventTime, I3, I4, I5, I6, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[typex.PaneInfo, typex.EventTime, I3, I4, I5, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, I3, I4, I5, I6) error)
						return &caller6x1[typex.PaneInfo, typex.EventTime, I3, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, I3, I4, I5, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 I3, a3 I4, a4 I5, a5 I6) error {
							return fn.(finishBundle6x1[typex.PaneInfo, typex.EventTime, I3, I4, I5, I6, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[context.Context, typex.PaneInfo, typex.EventTime, I4, I5, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, I4, I5, I6) error)
						return &caller6x1[context.Context, typex.PaneInfo, typex.EventTime, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, I4, I5, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 I4, a4 I5, a5 I6) error {
							return fn.(finishBundle6x1[context.Context, typex.PaneInfo, typex.EventTime, I4, I5, I6, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[[]typex.Window, typex.EventTime, I3, I4, I5, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, I3, I4, I5, I6) error)
						return &caller6x1[[]typex.Window, typex.EventTime, I3, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, I3, I4, I5, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 I3, a3 I4, a4 I5, a5 I6) error {
							return fn.(finishBundle6x1[[]typex.Window, typex.EventTime, I3, I4, I5, I6, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[context.Context, []typex.Window, typex.EventTime, I4, I5, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, I4, I5, I6) error)
						return &caller6x1[context.Context, []typex.Window, typex.EventTime, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, I4, I5, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 I4, a4 I5, a5 I6) error {
							return fn.(finishBundle6x1[context.Context, []typex.Window, typex.EventTime, I4, I5, I6, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[typex.PaneInfo, []typex.Window, typex.EventTime, I4, I5, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, I4, I5, I6) error)
						return &caller6x1[typex.PaneInfo, []typex.Window, typex.EventTime, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, I4, I5, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 I4, a4 I5, a5 I6) error {
							return fn.(finishBundle6x1[typex.PaneInfo, []typex.Window, typex.EventTime, I4, I5, I6, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I5, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I5, I6) error)
						return &caller6x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I5, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 I5, a5 I6) error {
							return fn.(finishBundle6x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I5, I6, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[typex.BundleFinalization, I2, I3, I4, I5, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization, I2, I3, I4, I5, I6) error)
						return &caller6x1[typex.BundleFinalization, I2, I3, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization, I2, I3, I4, I5, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization, a1 I2, a2 I3, a3 I4, a4 I5, a5 I6) error {
							return fn.(finishBundle6x1[typex.BundleFinalization, I2, I3, I4, I5, I6, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[context.Context, typex.BundleFinalization, I3, I4, I5, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization, I3, I4, I5, I6) error)
						return &caller6x1[context.Context, typex.BundleFinalization, I3, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization, I3, I4, I5, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization, a2 I3, a3 I4, a4 I5, a5 I6) error {
							return fn.(finishBundle6x1[context.Context, typex.BundleFinalization, I3, I4, I5, I6, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[typex.PaneInfo, typex.BundleFinalization, I3, I4, I5, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization, I3, I4, I5, I6) error)
						return &caller6x1[typex.PaneInfo, typex.BundleFinalization, I3, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization, I3, I4, I5, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization, a2 I3, a3 I4, a4 I5, a5 I6) error {
							return fn.(finishBundle6x1[typex.PaneInfo, typex.BundleFinalization, I3, I4, I5, I6, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I4, I5, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization, I4, I5, I6) error)
						return &caller6x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization, I4, I5, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization, a3 I4, a4 I5, a5 I6) error {
							return fn.(finishBundle6x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I4, I5, I6, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[[]typex.Window, typex.BundleFinalization, I3, I4, I5, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization, I3, I4, I5, I6) error)
						return &caller6x1[[]typex.Window, typex.BundleFinalization, I3, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization, I3, I4, I5, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization, a2 I3, a3 I4, a4 I5, a5 I6) error {
							return fn.(finishBundle6x1[[]typex.Window, typex.BundleFinalization, I3, I4, I5, I6, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[context.Context, []typex.Window, typex.BundleFinalization, I4, I5, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization, I4, I5, I6) error)
						return &caller6x1[context.Context, []typex.Window, typex.BundleFinalization, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization, I4, I5, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization, a3 I4, a4 I5, a5 I6) error {
							return fn.(finishBundle6x1[context.Context, []typex.Window, typex.BundleFinalization, I4, I5, I6, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4, I5, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4, I5, I6) error)
						return &caller6x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4, I5, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization, a3 I4, a4 I5, a5 I6) error {
							return fn.(finishBundle6x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4, I5, I6, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I5, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I5, I6) error)
						return &caller6x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I5, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.BundleFinalization, a4 I5, a5 I6) error {
							return fn.(finishBundle6x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I5, I6, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[typex.EventTime, typex.BundleFinalization, I3, I4, I5, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization, I3, I4, I5, I6) error)
						return &caller6x1[typex.EventTime, typex.BundleFinalization, I3, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization, I3, I4, I5, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization, a2 I3, a3 I4, a4 I5, a5 I6) error {
							return fn.(finishBundle6x1[typex.EventTime, typex.BundleFinalization, I3, I4, I5, I6, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[context.Context, typex.EventTime, typex.BundleFinalization, I4, I5, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization, I4, I5, I6) error)
						return &caller6x1[context.Context, typex.EventTime, typex.BundleFinalization, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization, I4, I5, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I4, a4 I5, a5 I6) error {
							return fn.(finishBundle6x1[context.Context, typex.EventTime, typex.BundleFinalization, I4, I5, I6, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4, I5, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4, I5, I6) error)
						return &caller6x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4, I5, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I4, a4 I5, a5 I6) error {
							return fn.(finishBundle6x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4, I5, I6, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I5, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I5, I6) error)
						return &caller6x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I5, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I5, a5 I6) error {
							return fn.(finishBundle6x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I5, I6, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5, I6) error)
						return &caller6x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I4, a4 I5, a5 I6) error {
							return fn.(finishBundle6x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5, I6, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6) error)
						return &caller6x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I5, a5 I6) error {
							return fn.(finishBundle6x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6) error)
						return &caller6x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I5, a5 I6) error {
							return fn.(finishBundle6x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I6) error)
						return &caller6x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 typex.BundleFinalization, a5 I6) error {
							return fn.(finishBundle6x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I6, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				}
			default:
				panic("Invalid signature for FinishBundle")
			}

		case finishBundleIn == 7:
			switch {
			case finishBundleOut == 0:
				if _, ok := doFn.(finishBundle7x0[I0, I1, I2, I3, I4, I5, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I0, I1, I2, I3, I4, I5, I6))
						return &caller7x0[I0, I1, I2, I3, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I0, I1, I2, I3, I4, I5, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I0, a1 I1, a2 I2, a3 I3, a4 I4, a5 I5, a6 I6) {
							fn.(finishBundle7x0[I0, I1, I2, I3, I4, I5, I6]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[context.Context, I1, I2, I3, I4, I5, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, I1, I2, I3, I4, I5, I6))
						return &caller7x0[context.Context, I1, I2, I3, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, I1, I2, I3, I4, I5, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 I1, a2 I2, a3 I3, a4 I4, a5 I5, a6 I6) {
							fn.(finishBundle7x0[context.Context, I1, I2, I3, I4, I5, I6]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[typex.PaneInfo, I1, I2, I3, I4, I5, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, I1, I2, I3, I4, I5, I6))
						return &caller7x0[typex.PaneInfo, I1, I2, I3, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, I1, I2, I3, I4, I5, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 I1, a2 I2, a3 I3, a4 I4, a5 I5, a6 I6) {
							fn.(finishBundle7x0[typex.PaneInfo, I1, I2, I3, I4, I5, I6]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[context.Context, typex.PaneInfo, I2, I3, I4, I5, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, I2, I3, I4, I5, I6))
						return &caller7x0[context.Context, typex.PaneInfo, I2, I3, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, I2, I3, I4, I5, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 I2, a3 I3, a4 I4, a5 I5, a6 I6) {
							fn.(finishBundle7x0[context.Context, typex.PaneInfo, I2, I3, I4, I5, I6]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[[]typex.Window, I1, I2, I3, I4, I5, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, I1, I2, I3, I4, I5, I6))
						return &caller7x0[[]typex.Window, I1, I2, I3, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, I1, I2, I3, I4, I5, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 I1, a2 I2, a3 I3, a4 I4, a5 I5, a6 I6) {
							fn.(finishBundle7x0[[]typex.Window, I1, I2, I3, I4, I5, I6]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[context.Context, []typex.Window, I2, I3, I4, I5, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, I2, I3, I4, I5, I6))
						return &caller7x0[context.Context, []typex.Window, I2, I3, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, I2, I3, I4, I5, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 I2, a3 I3, a4 I4, a5 I5, a6 I6) {
							fn.(finishBundle7x0[context.Context, []typex.Window, I2, I3, I4, I5, I6]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[typex.PaneInfo, []typex.Window, I2, I3, I4, I5, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, I2, I3, I4, I5, I6))
						return &caller7x0[typex.PaneInfo, []typex.Window, I2, I3, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, I2, I3, I4, I5, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 I2, a3 I3, a4 I4, a5 I5, a6 I6) {
							fn.(finishBundle7x0[typex.PaneInfo, []typex.Window, I2, I3, I4, I5, I6]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[context.Context, typex.PaneInfo, []typex.Window, I3, I4, I5, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, I3, I4, I5, I6))
						return &caller7x0[context.Context, typex.PaneInfo, []typex.Window, I3, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, I3, I4, I5, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 I3, a4 I4, a5 I5, a6 I6) {
							fn.(finishBundle7x0[context.Context, typex.PaneInfo, []typex.Window, I3, I4, I5, I6]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[typex.EventTime, I1, I2, I3, I4, I5, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, I1, I2, I3, I4, I5, I6))
						return &caller7x0[typex.EventTime, I1, I2, I3, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, I1, I2, I3, I4, I5, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 I1, a2 I2, a3 I3, a4 I4, a5 I5, a6 I6) {
							fn.(finishBundle7x0[typex.EventTime, I1, I2, I3, I4, I5, I6]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[context.Context, typex.EventTime, I2, I3, I4, I5, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, I2, I3, I4, I5, I6))
						return &caller7x0[context.Context, typex.EventTime, I2, I3, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, I2, I3, I4, I5, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 I2, a3 I3, a4 I4, a5 I5, a6 I6) {
							fn.(finishBundle7x0[context.Context, typex.EventTime, I2, I3, I4, I5, I6]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[typex.PaneInfo, typex.EventTime, I2, I3, I4, I5, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, I2, I3, I4, I5, I6))
						return &caller7x0[typex.PaneInfo, typex.EventTime, I2, I3, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, I2, I3, I4, I5, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 I2, a3 I3, a4 I4, a5 I5, a6 I6) {
							fn.(finishBundle7x0[typex.PaneInfo, typex.EventTime, I2, I3, I4, I5, I6]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[context.Context, typex.PaneInfo, typex.EventTime, I3, I4, I5, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, I3, I4, I5, I6))
						return &caller7x0[context.Context, typex.PaneInfo, typex.EventTime, I3, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, I3, I4, I5, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 I3, a4 I4, a5 I5, a6 I6) {
							fn.(finishBundle7x0[context.Context, typex.PaneInfo, typex.EventTime, I3, I4, I5, I6]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[[]typex.Window, typex.EventTime, I2, I3, I4, I5, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, I2, I3, I4, I5, I6))
						return &caller7x0[[]typex.Window, typex.EventTime, I2, I3, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, I2, I3, I4, I5, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 I2, a3 I3, a4 I4, a5 I5, a6 I6) {
							fn.(finishBundle7x0[[]typex.Window, typex.EventTime, I2, I3, I4, I5, I6]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[context.Context, []typex.Window, typex.EventTime, I3, I4, I5, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, I3, I4, I5, I6))
						return &caller7x0[context.Context, []typex.Window, typex.EventTime, I3, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, I3, I4, I5, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 I3, a4 I4, a5 I5, a6 I6) {
							fn.(finishBundle7x0[context.Context, []typex.Window, typex.EventTime, I3, I4, I5, I6]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[typex.PaneInfo, []typex.Window, typex.EventTime, I3, I4, I5, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, I3, I4, I5, I6))
						return &caller7x0[typex.PaneInfo, []typex.Window, typex.EventTime, I3, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, I3, I4, I5, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 I3, a4 I4, a5 I5, a6 I6) {
							fn.(finishBundle7x0[typex.PaneInfo, []typex.Window, typex.EventTime, I3, I4, I5, I6]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I4, I5, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I4, I5, I6))
						return &caller7x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I4, I5, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 I4, a5 I5, a6 I6) {
							fn.(finishBundle7x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I4, I5, I6]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[typex.BundleFinalization, I1, I2, I3, I4, I5, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization, I1, I2, I3, I4, I5, I6))
						return &caller7x0[typex.BundleFinalization, I1, I2, I3, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization, I1, I2, I3, I4, I5, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization, a1 I1, a2 I2, a3 I3, a4 I4, a5 I5, a6 I6) {
							fn.(finishBundle7x0[typex.BundleFinalization, I1, I2, I3, I4, I5, I6]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[context.Context, typex.BundleFinalization, I2, I3, I4, I5, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization, I2, I3, I4, I5, I6))
						return &caller7x0[context.Context, typex.BundleFinalization, I2, I3, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization, I2, I3, I4, I5, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization, a2 I2, a3 I3, a4 I4, a5 I5, a6 I6) {
							fn.(finishBundle7x0[context.Context, typex.BundleFinalization, I2, I3, I4, I5, I6]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[typex.PaneInfo, typex.BundleFinalization, I2, I3, I4, I5, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization, I2, I3, I4, I5, I6))
						return &caller7x0[typex.PaneInfo, typex.BundleFinalization, I2, I3, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization, I2, I3, I4, I5, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization, a2 I2, a3 I3, a4 I4, a5 I5, a6 I6) {
							fn.(finishBundle7x0[typex.PaneInfo, typex.BundleFinalization, I2, I3, I4, I5, I6]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I3, I4, I5, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization, I3, I4, I5, I6))
						return &caller7x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I3, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization, I3, I4, I5, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization, a3 I3, a4 I4, a5 I5, a6 I6) {
							fn.(finishBundle7x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I3, I4, I5, I6]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[[]typex.Window, typex.BundleFinalization, I2, I3, I4, I5, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization, I2, I3, I4, I5, I6))
						return &caller7x0[[]typex.Window, typex.BundleFinalization, I2, I3, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization, I2, I3, I4, I5, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization, a2 I2, a3 I3, a4 I4, a5 I5, a6 I6) {
							fn.(finishBundle7x0[[]typex.Window, typex.BundleFinalization, I2, I3, I4, I5, I6]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[context.Context, []typex.Window, typex.BundleFinalization, I3, I4, I5, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization, I3, I4, I5, I6))
						return &caller7x0[context.Context, []typex.Window, typex.BundleFinalization, I3, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization, I3, I4, I5, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization, a3 I3, a4 I4, a5 I5, a6 I6) {
							fn.(finishBundle7x0[context.Context, []typex.Window, typex.BundleFinalization, I3, I4, I5, I6]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3, I4, I5, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3, I4, I5, I6))
						return &caller7x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3, I4, I5, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization, a3 I3, a4 I4, a5 I5, a6 I6) {
							fn.(finishBundle7x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3, I4, I5, I6]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4, I5, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4, I5, I6))
						return &caller7x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4, I5, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.BundleFinalization, a4 I4, a5 I5, a6 I6) {
							fn.(finishBundle7x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4, I5, I6]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[typex.EventTime, typex.BundleFinalization, I2, I3, I4, I5, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization, I2, I3, I4, I5, I6))
						return &caller7x0[typex.EventTime, typex.BundleFinalization, I2, I3, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization, I2, I3, I4, I5, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization, a2 I2, a3 I3, a4 I4, a5 I5, a6 I6) {
							fn.(finishBundle7x0[typex.EventTime, typex.BundleFinalization, I2, I3, I4, I5, I6]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[context.Context, typex.EventTime, typex.BundleFinalization, I3, I4, I5, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization, I3, I4, I5, I6))
						return &caller7x0[context.Context, typex.EventTime, typex.BundleFinalization, I3, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization, I3, I4, I5, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I3, a4 I4, a5 I5, a6 I6) {
							fn.(finishBundle7x0[context.Context, typex.EventTime, typex.BundleFinalization, I3, I4, I5, I6]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3, I4, I5, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3, I4, I5, I6))
						return &caller7x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3, I4, I5, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I3, a4 I4, a5 I5, a6 I6) {
							fn.(finishBundle7x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3, I4, I5, I6]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4, I5, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4, I5, I6))
						return &caller7x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4, I5, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I4, a5 I5, a6 I6) {
							fn.(finishBundle7x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4, I5, I6]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4, I5, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4, I5, I6))
						return &caller7x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4, I5, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I3, a4 I4, a5 I5, a6 I6) {
							fn.(finishBundle7x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4, I5, I6]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5, I6))
						return &caller7x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I4, a5 I5, a6 I6) {
							fn.(finishBundle7x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5, I6]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5, I6))
						return &caller7x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I4, a5 I5, a6 I6) {
							fn.(finishBundle7x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5, I6]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6))
						return &caller7x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 typex.BundleFinalization, a5 I5, a6 I6) {
							fn.(finishBundle7x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				}
			case finishBundleOut == 1:
				if _, ok := doFn.(finishBundle7x1[I0, I1, I2, I3, I4, I5, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I0, I1, I2, I3, I4, I5, I6) error)
						return &caller7x1[I0, I1, I2, I3, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I0, I1, I2, I3, I4, I5, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I0, a1 I1, a2 I2, a3 I3, a4 I4, a5 I5, a6 I6) error {
							return fn.(finishBundle7x1[I0, I1, I2, I3, I4, I5, I6, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[context.Context, I1, I2, I3, I4, I5, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, I1, I2, I3, I4, I5, I6) error)
						return &caller7x1[context.Context, I1, I2, I3, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, I1, I2, I3, I4, I5, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 I1, a2 I2, a3 I3, a4 I4, a5 I5, a6 I6) error {
							return fn.(finishBundle7x1[context.Context, I1, I2, I3, I4, I5, I6, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[typex.PaneInfo, I1, I2, I3, I4, I5, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, I1, I2, I3, I4, I5, I6) error)
						return &caller7x1[typex.PaneInfo, I1, I2, I3, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, I1, I2, I3, I4, I5, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 I1, a2 I2, a3 I3, a4 I4, a5 I5, a6 I6) error {
							return fn.(finishBundle7x1[typex.PaneInfo, I1, I2, I3, I4, I5, I6, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[context.Context, typex.PaneInfo, I2, I3, I4, I5, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, I2, I3, I4, I5, I6) error)
						return &caller7x1[context.Context, typex.PaneInfo, I2, I3, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, I2, I3, I4, I5, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 I2, a3 I3, a4 I4, a5 I5, a6 I6) error {
							return fn.(finishBundle7x1[context.Context, typex.PaneInfo, I2, I3, I4, I5, I6, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[[]typex.Window, I1, I2, I3, I4, I5, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, I1, I2, I3, I4, I5, I6) error)
						return &caller7x1[[]typex.Window, I1, I2, I3, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, I1, I2, I3, I4, I5, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 I1, a2 I2, a3 I3, a4 I4, a5 I5, a6 I6) error {
							return fn.(finishBundle7x1[[]typex.Window, I1, I2, I3, I4, I5, I6, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[context.Context, []typex.Window, I2, I3, I4, I5, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, I2, I3, I4, I5, I6) error)
						return &caller7x1[context.Context, []typex.Window, I2, I3, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, I2, I3, I4, I5, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 I2, a3 I3, a4 I4, a5 I5, a6 I6) error {
							return fn.(finishBundle7x1[context.Context, []typex.Window, I2, I3, I4, I5, I6, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[typex.PaneInfo, []typex.Window, I2, I3, I4, I5, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, I2, I3, I4, I5, I6) error)
						return &caller7x1[typex.PaneInfo, []typex.Window, I2, I3, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, I2, I3, I4, I5, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 I2, a3 I3, a4 I4, a5 I5, a6 I6) error {
							return fn.(finishBundle7x1[typex.PaneInfo, []typex.Window, I2, I3, I4, I5, I6, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[context.Context, typex.PaneInfo, []typex.Window, I3, I4, I5, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, I3, I4, I5, I6) error)
						return &caller7x1[context.Context, typex.PaneInfo, []typex.Window, I3, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, I3, I4, I5, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 I3, a4 I4, a5 I5, a6 I6) error {
							return fn.(finishBundle7x1[context.Context, typex.PaneInfo, []typex.Window, I3, I4, I5, I6, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[typex.EventTime, I1, I2, I3, I4, I5, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, I1, I2, I3, I4, I5, I6) error)
						return &caller7x1[typex.EventTime, I1, I2, I3, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, I1, I2, I3, I4, I5, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 I1, a2 I2, a3 I3, a4 I4, a5 I5, a6 I6) error {
							return fn.(finishBundle7x1[typex.EventTime, I1, I2, I3, I4, I5, I6, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[context.Context, typex.EventTime, I2, I3, I4, I5, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, I2, I3, I4, I5, I6) error)
						return &caller7x1[context.Context, typex.EventTime, I2, I3, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, I2, I3, I4, I5, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 I2, a3 I3, a4 I4, a5 I5, a6 I6) error {
							return fn.(finishBundle7x1[context.Context, typex.EventTime, I2, I3, I4, I5, I6, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[typex.PaneInfo, typex.EventTime, I2, I3, I4, I5, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, I2, I3, I4, I5, I6) error)
						return &caller7x1[typex.PaneInfo, typex.EventTime, I2, I3, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, I2, I3, I4, I5, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 I2, a3 I3, a4 I4, a5 I5, a6 I6) error {
							return fn.(finishBundle7x1[typex.PaneInfo, typex.EventTime, I2, I3, I4, I5, I6, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[context.Context, typex.PaneInfo, typex.EventTime, I3, I4, I5, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, I3, I4, I5, I6) error)
						return &caller7x1[context.Context, typex.PaneInfo, typex.EventTime, I3, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, I3, I4, I5, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 I3, a4 I4, a5 I5, a6 I6) error {
							return fn.(finishBundle7x1[context.Context, typex.PaneInfo, typex.EventTime, I3, I4, I5, I6, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[[]typex.Window, typex.EventTime, I2, I3, I4, I5, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, I2, I3, I4, I5, I6) error)
						return &caller7x1[[]typex.Window, typex.EventTime, I2, I3, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, I2, I3, I4, I5, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 I2, a3 I3, a4 I4, a5 I5, a6 I6) error {
							return fn.(finishBundle7x1[[]typex.Window, typex.EventTime, I2, I3, I4, I5, I6, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[context.Context, []typex.Window, typex.EventTime, I3, I4, I5, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, I3, I4, I5, I6) error)
						return &caller7x1[context.Context, []typex.Window, typex.EventTime, I3, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, I3, I4, I5, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 I3, a4 I4, a5 I5, a6 I6) error {
							return fn.(finishBundle7x1[context.Context, []typex.Window, typex.EventTime, I3, I4, I5, I6, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[typex.PaneInfo, []typex.Window, typex.EventTime, I3, I4, I5, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, I3, I4, I5, I6) error)
						return &caller7x1[typex.PaneInfo, []typex.Window, typex.EventTime, I3, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, I3, I4, I5, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 I3, a4 I4, a5 I5, a6 I6) error {
							return fn.(finishBundle7x1[typex.PaneInfo, []typex.Window, typex.EventTime, I3, I4, I5, I6, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I4, I5, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I4, I5, I6) error)
						return &caller7x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I4, I5, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 I4, a5 I5, a6 I6) error {
							return fn.(finishBundle7x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I4, I5, I6, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[typex.BundleFinalization, I1, I2, I3, I4, I5, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization, I1, I2, I3, I4, I5, I6) error)
						return &caller7x1[typex.BundleFinalization, I1, I2, I3, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization, I1, I2, I3, I4, I5, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization, a1 I1, a2 I2, a3 I3, a4 I4, a5 I5, a6 I6) error {
							return fn.(finishBundle7x1[typex.BundleFinalization, I1, I2, I3, I4, I5, I6, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[context.Context, typex.BundleFinalization, I2, I3, I4, I5, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization, I2, I3, I4, I5, I6) error)
						return &caller7x1[context.Context, typex.BundleFinalization, I2, I3, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization, I2, I3, I4, I5, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization, a2 I2, a3 I3, a4 I4, a5 I5, a6 I6) error {
							return fn.(finishBundle7x1[context.Context, typex.BundleFinalization, I2, I3, I4, I5, I6, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[typex.PaneInfo, typex.BundleFinalization, I2, I3, I4, I5, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization, I2, I3, I4, I5, I6) error)
						return &caller7x1[typex.PaneInfo, typex.BundleFinalization, I2, I3, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization, I2, I3, I4, I5, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization, a2 I2, a3 I3, a4 I4, a5 I5, a6 I6) error {
							return fn.(finishBundle7x1[typex.PaneInfo, typex.BundleFinalization, I2, I3, I4, I5, I6, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I3, I4, I5, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization, I3, I4, I5, I6) error)
						return &caller7x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I3, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization, I3, I4, I5, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization, a3 I3, a4 I4, a5 I5, a6 I6) error {
							return fn.(finishBundle7x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I3, I4, I5, I6, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[[]typex.Window, typex.BundleFinalization, I2, I3, I4, I5, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization, I2, I3, I4, I5, I6) error)
						return &caller7x1[[]typex.Window, typex.BundleFinalization, I2, I3, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization, I2, I3, I4, I5, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization, a2 I2, a3 I3, a4 I4, a5 I5, a6 I6) error {
							return fn.(finishBundle7x1[[]typex.Window, typex.BundleFinalization, I2, I3, I4, I5, I6, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[context.Context, []typex.Window, typex.BundleFinalization, I3, I4, I5, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization, I3, I4, I5, I6) error)
						return &caller7x1[context.Context, []typex.Window, typex.BundleFinalization, I3, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization, I3, I4, I5, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization, a3 I3, a4 I4, a5 I5, a6 I6) error {
							return fn.(finishBundle7x1[context.Context, []typex.Window, typex.BundleFinalization, I3, I4, I5, I6, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3, I4, I5, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3, I4, I5, I6) error)
						return &caller7x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3, I4, I5, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization, a3 I3, a4 I4, a5 I5, a6 I6) error {
							return fn.(finishBundle7x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I3, I4, I5, I6, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4, I5, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4, I5, I6) error)
						return &caller7x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4, I5, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.BundleFinalization, a4 I4, a5 I5, a6 I6) error {
							return fn.(finishBundle7x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4, I5, I6, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[typex.EventTime, typex.BundleFinalization, I2, I3, I4, I5, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization, I2, I3, I4, I5, I6) error)
						return &caller7x1[typex.EventTime, typex.BundleFinalization, I2, I3, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization, I2, I3, I4, I5, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization, a2 I2, a3 I3, a4 I4, a5 I5, a6 I6) error {
							return fn.(finishBundle7x1[typex.EventTime, typex.BundleFinalization, I2, I3, I4, I5, I6, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[context.Context, typex.EventTime, typex.BundleFinalization, I3, I4, I5, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization, I3, I4, I5, I6) error)
						return &caller7x1[context.Context, typex.EventTime, typex.BundleFinalization, I3, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization, I3, I4, I5, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I3, a4 I4, a5 I5, a6 I6) error {
							return fn.(finishBundle7x1[context.Context, typex.EventTime, typex.BundleFinalization, I3, I4, I5, I6, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3, I4, I5, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3, I4, I5, I6) error)
						return &caller7x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3, I4, I5, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I3, a4 I4, a5 I5, a6 I6) error {
							return fn.(finishBundle7x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I3, I4, I5, I6, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4, I5, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4, I5, I6) error)
						return &caller7x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4, I5, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I4, a5 I5, a6 I6) error {
							return fn.(finishBundle7x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4, I5, I6, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4, I5, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4, I5, I6) error)
						return &caller7x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4, I5, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I3, a4 I4, a5 I5, a6 I6) error {
							return fn.(finishBundle7x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I3, I4, I5, I6, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5, I6) error)
						return &caller7x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I4, a5 I5, a6 I6) error {
							return fn.(finishBundle7x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5, I6, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5, I6) error)
						return &caller7x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I4, a5 I5, a6 I6) error {
							return fn.(finishBundle7x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5, I6, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6) error)
						return &caller7x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 typex.BundleFinalization, a5 I5, a6 I6) error {
							return fn.(finishBundle7x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				}
			default:
				panic("Invalid signature for FinishBundle")
			}

		default:
			panic("Invalid signature for FinishBundle")
		}
	}
	return nil
}

func buildFinishBundleWrapper8[I0, I1, I2, I3, I4, I5, I6, I7 any](doFn interface{}) func(interface{}) reflectx.Func {
	finishBundleIn := -1
	finishBundleOut := -1
	finishBundleMethod := reflect.ValueOf(doFn).MethodByName("FinishBundle")
	if finishBundleMethod.IsValid() {
		finishBundleIn = finishBundleMethod.Type().NumIn()
		finishBundleOut = finishBundleMethod.Type().NumOut()
		switch {

		case finishBundleIn == 0:
			switch {
			case finishBundleOut == 0:
				if _, ok := doFn.(finishBundle0x0); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func())
						return &caller0x0{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func())(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func() { fn.(finishBundle0x0).FinishBundle() })
					}
				}
			case finishBundleOut == 1:
				if _, ok := doFn.(finishBundle0x1[error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func() error)
						return &caller0x1[error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func() error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func() error { return fn.(finishBundle0x1[error]).FinishBundle() })
					}
				}
			default:
				panic("Invalid signature for FinishBundle")
			}

		case finishBundleIn == 1:
			switch {
			case finishBundleOut == 0:
				if _, ok := doFn.(finishBundle1x0[I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I7))
						return &caller1x0[I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I7) { fn.(finishBundle1x0[I7]).FinishBundle(a0) })
					}
				} else if _, ok := doFn.(finishBundle1x0[context.Context]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context))
						return &caller1x0[context.Context]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context) { fn.(finishBundle1x0[context.Context]).FinishBundle(a0) })
					}
				} else if _, ok := doFn.(finishBundle1x0[typex.PaneInfo]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo))
						return &caller1x0[typex.PaneInfo]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo) { fn.(finishBundle1x0[typex.PaneInfo]).FinishBundle(a0) })
					}
				} else if _, ok := doFn.(finishBundle1x0[[]typex.Window]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window))
						return &caller1x0[[]typex.Window]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window) { fn.(finishBundle1x0[[]typex.Window]).FinishBundle(a0) })
					}
				} else if _, ok := doFn.(finishBundle1x0[typex.EventTime]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime))
						return &caller1x0[typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime) { fn.(finishBundle1x0[typex.EventTime]).FinishBundle(a0) })
					}
				} else if _, ok := doFn.(finishBundle1x0[typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization))
						return &caller1x0[typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization) { fn.(finishBundle1x0[typex.BundleFinalization]).FinishBundle(a0) })
					}
				}
			case finishBundleOut == 1:
				if _, ok := doFn.(finishBundle1x1[I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I7) error)
						return &caller1x1[I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I7) error { return fn.(finishBundle1x1[I7, error]).FinishBundle(a0) })
					}
				} else if _, ok := doFn.(finishBundle1x1[context.Context, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context) error)
						return &caller1x1[context.Context, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context) error { return fn.(finishBundle1x1[context.Context, error]).FinishBundle(a0) })
					}
				} else if _, ok := doFn.(finishBundle1x1[typex.PaneInfo, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo) error)
						return &caller1x1[typex.PaneInfo, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo) error { return fn.(finishBundle1x1[typex.PaneInfo, error]).FinishBundle(a0) })
					}
				} else if _, ok := doFn.(finishBundle1x1[[]typex.Window, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window) error)
						return &caller1x1[[]typex.Window, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window) error { return fn.(finishBundle1x1[[]typex.Window, error]).FinishBundle(a0) })
					}
				} else if _, ok := doFn.(finishBundle1x1[typex.EventTime, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime) error)
						return &caller1x1[typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime) error { return fn.(finishBundle1x1[typex.EventTime, error]).FinishBundle(a0) })
					}
				} else if _, ok := doFn.(finishBundle1x1[typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization) error)
						return &caller1x1[typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization) error {
							return fn.(finishBundle1x1[typex.BundleFinalization, error]).FinishBundle(a0)
						})
					}
				}
			default:
				panic("Invalid signature for FinishBundle")
			}

		case finishBundleIn == 2:
			switch {
			case finishBundleOut == 0:
				if _, ok := doFn.(finishBundle2x0[I6, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I6, I7))
						return &caller2x0[I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I6, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I6, a1 I7) { fn.(finishBundle2x0[I6, I7]).FinishBundle(a0, a1) })
					}
				} else if _, ok := doFn.(finishBundle2x0[context.Context, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, I7))
						return &caller2x0[context.Context, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 I7) { fn.(finishBundle2x0[context.Context, I7]).FinishBundle(a0, a1) })
					}
				} else if _, ok := doFn.(finishBundle2x0[typex.PaneInfo, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, I7))
						return &caller2x0[typex.PaneInfo, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 I7) { fn.(finishBundle2x0[typex.PaneInfo, I7]).FinishBundle(a0, a1) })
					}
				} else if _, ok := doFn.(finishBundle2x0[context.Context, typex.PaneInfo]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo))
						return &caller2x0[context.Context, typex.PaneInfo]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo) {
							fn.(finishBundle2x0[context.Context, typex.PaneInfo]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x0[[]typex.Window, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, I7))
						return &caller2x0[[]typex.Window, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 I7) { fn.(finishBundle2x0[[]typex.Window, I7]).FinishBundle(a0, a1) })
					}
				} else if _, ok := doFn.(finishBundle2x0[context.Context, []typex.Window]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window))
						return &caller2x0[context.Context, []typex.Window]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window) {
							fn.(finishBundle2x0[context.Context, []typex.Window]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x0[typex.PaneInfo, []typex.Window]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window))
						return &caller2x0[typex.PaneInfo, []typex.Window]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window) {
							fn.(finishBundle2x0[typex.PaneInfo, []typex.Window]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x0[typex.EventTime, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, I7))
						return &caller2x0[typex.EventTime, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 I7) { fn.(finishBundle2x0[typex.EventTime, I7]).FinishBundle(a0, a1) })
					}
				} else if _, ok := doFn.(finishBundle2x0[context.Context, typex.EventTime]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime))
						return &caller2x0[context.Context, typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime) {
							fn.(finishBundle2x0[context.Context, typex.EventTime]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x0[typex.PaneInfo, typex.EventTime]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime))
						return &caller2x0[typex.PaneInfo, typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime) {
							fn.(finishBundle2x0[typex.PaneInfo, typex.EventTime]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x0[[]typex.Window, typex.EventTime]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime))
						return &caller2x0[[]typex.Window, typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime) {
							fn.(finishBundle2x0[[]typex.Window, typex.EventTime]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x0[typex.BundleFinalization, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization, I7))
						return &caller2x0[typex.BundleFinalization, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization, a1 I7) {
							fn.(finishBundle2x0[typex.BundleFinalization, I7]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x0[context.Context, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization))
						return &caller2x0[context.Context, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization) {
							fn.(finishBundle2x0[context.Context, typex.BundleFinalization]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x0[typex.PaneInfo, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization))
						return &caller2x0[typex.PaneInfo, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization) {
							fn.(finishBundle2x0[typex.PaneInfo, typex.BundleFinalization]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x0[[]typex.Window, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization))
						return &caller2x0[[]typex.Window, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization) {
							fn.(finishBundle2x0[[]typex.Window, typex.BundleFinalization]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x0[typex.EventTime, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization))
						return &caller2x0[typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization) {
							fn.(finishBundle2x0[typex.EventTime, typex.BundleFinalization]).FinishBundle(a0, a1)
						})
					}
				}
			case finishBundleOut == 1:
				if _, ok := doFn.(finishBundle2x1[I6, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I6, I7) error)
						return &caller2x1[I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I6, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I6, a1 I7) error { return fn.(finishBundle2x1[I6, I7, error]).FinishBundle(a0, a1) })
					}
				} else if _, ok := doFn.(finishBundle2x1[context.Context, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, I7) error)
						return &caller2x1[context.Context, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 I7) error {
							return fn.(finishBundle2x1[context.Context, I7, error]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x1[typex.PaneInfo, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, I7) error)
						return &caller2x1[typex.PaneInfo, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 I7) error {
							return fn.(finishBundle2x1[typex.PaneInfo, I7, error]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x1[context.Context, typex.PaneInfo, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo) error)
						return &caller2x1[context.Context, typex.PaneInfo, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo) error {
							return fn.(finishBundle2x1[context.Context, typex.PaneInfo, error]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x1[[]typex.Window, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, I7) error)
						return &caller2x1[[]typex.Window, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 I7) error {
							return fn.(finishBundle2x1[[]typex.Window, I7, error]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x1[context.Context, []typex.Window, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window) error)
						return &caller2x1[context.Context, []typex.Window, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window) error {
							return fn.(finishBundle2x1[context.Context, []typex.Window, error]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x1[typex.PaneInfo, []typex.Window, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window) error)
						return &caller2x1[typex.PaneInfo, []typex.Window, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window) error {
							return fn.(finishBundle2x1[typex.PaneInfo, []typex.Window, error]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x1[typex.EventTime, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, I7) error)
						return &caller2x1[typex.EventTime, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 I7) error {
							return fn.(finishBundle2x1[typex.EventTime, I7, error]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x1[context.Context, typex.EventTime, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime) error)
						return &caller2x1[context.Context, typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime) error {
							return fn.(finishBundle2x1[context.Context, typex.EventTime, error]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x1[typex.PaneInfo, typex.EventTime, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime) error)
						return &caller2x1[typex.PaneInfo, typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime) error {
							return fn.(finishBundle2x1[typex.PaneInfo, typex.EventTime, error]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x1[[]typex.Window, typex.EventTime, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime) error)
						return &caller2x1[[]typex.Window, typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime) error {
							return fn.(finishBundle2x1[[]typex.Window, typex.EventTime, error]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x1[typex.BundleFinalization, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization, I7) error)
						return &caller2x1[typex.BundleFinalization, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization, a1 I7) error {
							return fn.(finishBundle2x1[typex.BundleFinalization, I7, error]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x1[context.Context, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization) error)
						return &caller2x1[context.Context, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization) error {
							return fn.(finishBundle2x1[context.Context, typex.BundleFinalization, error]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x1[typex.PaneInfo, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization) error)
						return &caller2x1[typex.PaneInfo, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization) error {
							return fn.(finishBundle2x1[typex.PaneInfo, typex.BundleFinalization, error]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x1[[]typex.Window, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization) error)
						return &caller2x1[[]typex.Window, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization) error {
							return fn.(finishBundle2x1[[]typex.Window, typex.BundleFinalization, error]).FinishBundle(a0, a1)
						})
					}
				} else if _, ok := doFn.(finishBundle2x1[typex.EventTime, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization) error)
						return &caller2x1[typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization) error {
							return fn.(finishBundle2x1[typex.EventTime, typex.BundleFinalization, error]).FinishBundle(a0, a1)
						})
					}
				}
			default:
				panic("Invalid signature for FinishBundle")
			}

		case finishBundleIn == 3:
			switch {
			case finishBundleOut == 0:
				if _, ok := doFn.(finishBundle3x0[I5, I6, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I5, I6, I7))
						return &caller3x0[I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I5, I6, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I5, a1 I6, a2 I7) { fn.(finishBundle3x0[I5, I6, I7]).FinishBundle(a0, a1, a2) })
					}
				} else if _, ok := doFn.(finishBundle3x0[context.Context, I6, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, I6, I7))
						return &caller3x0[context.Context, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, I6, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 I6, a2 I7) {
							fn.(finishBundle3x0[context.Context, I6, I7]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[typex.PaneInfo, I6, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, I6, I7))
						return &caller3x0[typex.PaneInfo, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, I6, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 I6, a2 I7) {
							fn.(finishBundle3x0[typex.PaneInfo, I6, I7]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[context.Context, typex.PaneInfo, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, I7))
						return &caller3x0[context.Context, typex.PaneInfo, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 I7) {
							fn.(finishBundle3x0[context.Context, typex.PaneInfo, I7]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[[]typex.Window, I6, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, I6, I7))
						return &caller3x0[[]typex.Window, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, I6, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 I6, a2 I7) {
							fn.(finishBundle3x0[[]typex.Window, I6, I7]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[context.Context, []typex.Window, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, I7))
						return &caller3x0[context.Context, []typex.Window, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 I7) {
							fn.(finishBundle3x0[context.Context, []typex.Window, I7]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[typex.PaneInfo, []typex.Window, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, I7))
						return &caller3x0[typex.PaneInfo, []typex.Window, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 I7) {
							fn.(finishBundle3x0[typex.PaneInfo, []typex.Window, I7]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[context.Context, typex.PaneInfo, []typex.Window]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window))
						return &caller3x0[context.Context, typex.PaneInfo, []typex.Window]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window) {
							fn.(finishBundle3x0[context.Context, typex.PaneInfo, []typex.Window]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[typex.EventTime, I6, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, I6, I7))
						return &caller3x0[typex.EventTime, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, I6, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 I6, a2 I7) {
							fn.(finishBundle3x0[typex.EventTime, I6, I7]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[context.Context, typex.EventTime, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, I7))
						return &caller3x0[context.Context, typex.EventTime, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 I7) {
							fn.(finishBundle3x0[context.Context, typex.EventTime, I7]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[typex.PaneInfo, typex.EventTime, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, I7))
						return &caller3x0[typex.PaneInfo, typex.EventTime, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 I7) {
							fn.(finishBundle3x0[typex.PaneInfo, typex.EventTime, I7]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[context.Context, typex.PaneInfo, typex.EventTime]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime))
						return &caller3x0[context.Context, typex.PaneInfo, typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime) {
							fn.(finishBundle3x0[context.Context, typex.PaneInfo, typex.EventTime]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[[]typex.Window, typex.EventTime, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, I7))
						return &caller3x0[[]typex.Window, typex.EventTime, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 I7) {
							fn.(finishBundle3x0[[]typex.Window, typex.EventTime, I7]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[context.Context, []typex.Window, typex.EventTime]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime))
						return &caller3x0[context.Context, []typex.Window, typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime) {
							fn.(finishBundle3x0[context.Context, []typex.Window, typex.EventTime]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[typex.PaneInfo, []typex.Window, typex.EventTime]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime))
						return &caller3x0[typex.PaneInfo, []typex.Window, typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime) {
							fn.(finishBundle3x0[typex.PaneInfo, []typex.Window, typex.EventTime]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[typex.BundleFinalization, I6, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization, I6, I7))
						return &caller3x0[typex.BundleFinalization, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization, I6, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization, a1 I6, a2 I7) {
							fn.(finishBundle3x0[typex.BundleFinalization, I6, I7]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[context.Context, typex.BundleFinalization, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization, I7))
						return &caller3x0[context.Context, typex.BundleFinalization, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization, a2 I7) {
							fn.(finishBundle3x0[context.Context, typex.BundleFinalization, I7]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[typex.PaneInfo, typex.BundleFinalization, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization, I7))
						return &caller3x0[typex.PaneInfo, typex.BundleFinalization, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization, a2 I7) {
							fn.(finishBundle3x0[typex.PaneInfo, typex.BundleFinalization, I7]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[context.Context, typex.PaneInfo, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization))
						return &caller3x0[context.Context, typex.PaneInfo, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization) {
							fn.(finishBundle3x0[context.Context, typex.PaneInfo, typex.BundleFinalization]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[[]typex.Window, typex.BundleFinalization, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization, I7))
						return &caller3x0[[]typex.Window, typex.BundleFinalization, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization, a2 I7) {
							fn.(finishBundle3x0[[]typex.Window, typex.BundleFinalization, I7]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[context.Context, []typex.Window, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization))
						return &caller3x0[context.Context, []typex.Window, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization) {
							fn.(finishBundle3x0[context.Context, []typex.Window, typex.BundleFinalization]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization))
						return &caller3x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization) {
							fn.(finishBundle3x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[typex.EventTime, typex.BundleFinalization, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization, I7))
						return &caller3x0[typex.EventTime, typex.BundleFinalization, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization, a2 I7) {
							fn.(finishBundle3x0[typex.EventTime, typex.BundleFinalization, I7]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[context.Context, typex.EventTime, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization))
						return &caller3x0[context.Context, typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization) {
							fn.(finishBundle3x0[context.Context, typex.EventTime, typex.BundleFinalization]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization))
						return &caller3x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization) {
							fn.(finishBundle3x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x0[[]typex.Window, typex.EventTime, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization))
						return &caller3x0[[]typex.Window, typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization) {
							fn.(finishBundle3x0[[]typex.Window, typex.EventTime, typex.BundleFinalization]).FinishBundle(a0, a1, a2)
						})
					}
				}
			case finishBundleOut == 1:
				if _, ok := doFn.(finishBundle3x1[I5, I6, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I5, I6, I7) error)
						return &caller3x1[I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I5, I6, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I5, a1 I6, a2 I7) error {
							return fn.(finishBundle3x1[I5, I6, I7, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[context.Context, I6, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, I6, I7) error)
						return &caller3x1[context.Context, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, I6, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 I6, a2 I7) error {
							return fn.(finishBundle3x1[context.Context, I6, I7, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[typex.PaneInfo, I6, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, I6, I7) error)
						return &caller3x1[typex.PaneInfo, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, I6, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 I6, a2 I7) error {
							return fn.(finishBundle3x1[typex.PaneInfo, I6, I7, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[context.Context, typex.PaneInfo, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, I7) error)
						return &caller3x1[context.Context, typex.PaneInfo, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 I7) error {
							return fn.(finishBundle3x1[context.Context, typex.PaneInfo, I7, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[[]typex.Window, I6, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, I6, I7) error)
						return &caller3x1[[]typex.Window, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, I6, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 I6, a2 I7) error {
							return fn.(finishBundle3x1[[]typex.Window, I6, I7, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[context.Context, []typex.Window, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, I7) error)
						return &caller3x1[context.Context, []typex.Window, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 I7) error {
							return fn.(finishBundle3x1[context.Context, []typex.Window, I7, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[typex.PaneInfo, []typex.Window, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, I7) error)
						return &caller3x1[typex.PaneInfo, []typex.Window, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 I7) error {
							return fn.(finishBundle3x1[typex.PaneInfo, []typex.Window, I7, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[context.Context, typex.PaneInfo, []typex.Window, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window) error)
						return &caller3x1[context.Context, typex.PaneInfo, []typex.Window, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window) error {
							return fn.(finishBundle3x1[context.Context, typex.PaneInfo, []typex.Window, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[typex.EventTime, I6, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, I6, I7) error)
						return &caller3x1[typex.EventTime, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, I6, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 I6, a2 I7) error {
							return fn.(finishBundle3x1[typex.EventTime, I6, I7, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[context.Context, typex.EventTime, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, I7) error)
						return &caller3x1[context.Context, typex.EventTime, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 I7) error {
							return fn.(finishBundle3x1[context.Context, typex.EventTime, I7, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[typex.PaneInfo, typex.EventTime, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, I7) error)
						return &caller3x1[typex.PaneInfo, typex.EventTime, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 I7) error {
							return fn.(finishBundle3x1[typex.PaneInfo, typex.EventTime, I7, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[context.Context, typex.PaneInfo, typex.EventTime, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime) error)
						return &caller3x1[context.Context, typex.PaneInfo, typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime) error {
							return fn.(finishBundle3x1[context.Context, typex.PaneInfo, typex.EventTime, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[[]typex.Window, typex.EventTime, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, I7) error)
						return &caller3x1[[]typex.Window, typex.EventTime, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 I7) error {
							return fn.(finishBundle3x1[[]typex.Window, typex.EventTime, I7, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[context.Context, []typex.Window, typex.EventTime, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime) error)
						return &caller3x1[context.Context, []typex.Window, typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime) error {
							return fn.(finishBundle3x1[context.Context, []typex.Window, typex.EventTime, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[typex.PaneInfo, []typex.Window, typex.EventTime, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime) error)
						return &caller3x1[typex.PaneInfo, []typex.Window, typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime) error {
							return fn.(finishBundle3x1[typex.PaneInfo, []typex.Window, typex.EventTime, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[typex.BundleFinalization, I6, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization, I6, I7) error)
						return &caller3x1[typex.BundleFinalization, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization, I6, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization, a1 I6, a2 I7) error {
							return fn.(finishBundle3x1[typex.BundleFinalization, I6, I7, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[context.Context, typex.BundleFinalization, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization, I7) error)
						return &caller3x1[context.Context, typex.BundleFinalization, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization, a2 I7) error {
							return fn.(finishBundle3x1[context.Context, typex.BundleFinalization, I7, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[typex.PaneInfo, typex.BundleFinalization, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization, I7) error)
						return &caller3x1[typex.PaneInfo, typex.BundleFinalization, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization, a2 I7) error {
							return fn.(finishBundle3x1[typex.PaneInfo, typex.BundleFinalization, I7, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[context.Context, typex.PaneInfo, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization) error)
						return &caller3x1[context.Context, typex.PaneInfo, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization) error {
							return fn.(finishBundle3x1[context.Context, typex.PaneInfo, typex.BundleFinalization, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[[]typex.Window, typex.BundleFinalization, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization, I7) error)
						return &caller3x1[[]typex.Window, typex.BundleFinalization, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization, a2 I7) error {
							return fn.(finishBundle3x1[[]typex.Window, typex.BundleFinalization, I7, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[context.Context, []typex.Window, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization) error)
						return &caller3x1[context.Context, []typex.Window, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization) error {
							return fn.(finishBundle3x1[context.Context, []typex.Window, typex.BundleFinalization, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization) error)
						return &caller3x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization) error {
							return fn.(finishBundle3x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[typex.EventTime, typex.BundleFinalization, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization, I7) error)
						return &caller3x1[typex.EventTime, typex.BundleFinalization, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization, a2 I7) error {
							return fn.(finishBundle3x1[typex.EventTime, typex.BundleFinalization, I7, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[context.Context, typex.EventTime, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization) error)
						return &caller3x1[context.Context, typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization) error {
							return fn.(finishBundle3x1[context.Context, typex.EventTime, typex.BundleFinalization, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization) error)
						return &caller3x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization) error {
							return fn.(finishBundle3x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, error]).FinishBundle(a0, a1, a2)
						})
					}
				} else if _, ok := doFn.(finishBundle3x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization) error)
						return &caller3x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization) error {
							return fn.(finishBundle3x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, error]).FinishBundle(a0, a1, a2)
						})
					}
				}
			default:
				panic("Invalid signature for FinishBundle")
			}

		case finishBundleIn == 4:
			switch {
			case finishBundleOut == 0:
				if _, ok := doFn.(finishBundle4x0[I4, I5, I6, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I4, I5, I6, I7))
						return &caller4x0[I4, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I4, I5, I6, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I4, a1 I5, a2 I6, a3 I7) { fn.(finishBundle4x0[I4, I5, I6, I7]).FinishBundle(a0, a1, a2, a3) })
					}
				} else if _, ok := doFn.(finishBundle4x0[context.Context, I5, I6, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, I5, I6, I7))
						return &caller4x0[context.Context, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, I5, I6, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 I5, a2 I6, a3 I7) {
							fn.(finishBundle4x0[context.Context, I5, I6, I7]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[typex.PaneInfo, I5, I6, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, I5, I6, I7))
						return &caller4x0[typex.PaneInfo, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, I5, I6, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 I5, a2 I6, a3 I7) {
							fn.(finishBundle4x0[typex.PaneInfo, I5, I6, I7]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[context.Context, typex.PaneInfo, I6, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, I6, I7))
						return &caller4x0[context.Context, typex.PaneInfo, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, I6, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 I6, a3 I7) {
							fn.(finishBundle4x0[context.Context, typex.PaneInfo, I6, I7]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[[]typex.Window, I5, I6, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, I5, I6, I7))
						return &caller4x0[[]typex.Window, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, I5, I6, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 I5, a2 I6, a3 I7) {
							fn.(finishBundle4x0[[]typex.Window, I5, I6, I7]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[context.Context, []typex.Window, I6, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, I6, I7))
						return &caller4x0[context.Context, []typex.Window, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, I6, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 I6, a3 I7) {
							fn.(finishBundle4x0[context.Context, []typex.Window, I6, I7]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[typex.PaneInfo, []typex.Window, I6, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, I6, I7))
						return &caller4x0[typex.PaneInfo, []typex.Window, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, I6, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 I6, a3 I7) {
							fn.(finishBundle4x0[typex.PaneInfo, []typex.Window, I6, I7]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[context.Context, typex.PaneInfo, []typex.Window, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, I7))
						return &caller4x0[context.Context, typex.PaneInfo, []typex.Window, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 I7) {
							fn.(finishBundle4x0[context.Context, typex.PaneInfo, []typex.Window, I7]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[typex.EventTime, I5, I6, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, I5, I6, I7))
						return &caller4x0[typex.EventTime, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, I5, I6, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 I5, a2 I6, a3 I7) {
							fn.(finishBundle4x0[typex.EventTime, I5, I6, I7]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[context.Context, typex.EventTime, I6, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, I6, I7))
						return &caller4x0[context.Context, typex.EventTime, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, I6, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 I6, a3 I7) {
							fn.(finishBundle4x0[context.Context, typex.EventTime, I6, I7]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[typex.PaneInfo, typex.EventTime, I6, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, I6, I7))
						return &caller4x0[typex.PaneInfo, typex.EventTime, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, I6, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 I6, a3 I7) {
							fn.(finishBundle4x0[typex.PaneInfo, typex.EventTime, I6, I7]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[context.Context, typex.PaneInfo, typex.EventTime, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, I7))
						return &caller4x0[context.Context, typex.PaneInfo, typex.EventTime, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 I7) {
							fn.(finishBundle4x0[context.Context, typex.PaneInfo, typex.EventTime, I7]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[[]typex.Window, typex.EventTime, I6, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, I6, I7))
						return &caller4x0[[]typex.Window, typex.EventTime, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, I6, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 I6, a3 I7) {
							fn.(finishBundle4x0[[]typex.Window, typex.EventTime, I6, I7]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[context.Context, []typex.Window, typex.EventTime, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, I7))
						return &caller4x0[context.Context, []typex.Window, typex.EventTime, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 I7) {
							fn.(finishBundle4x0[context.Context, []typex.Window, typex.EventTime, I7]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[typex.PaneInfo, []typex.Window, typex.EventTime, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, I7))
						return &caller4x0[typex.PaneInfo, []typex.Window, typex.EventTime, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 I7) {
							fn.(finishBundle4x0[typex.PaneInfo, []typex.Window, typex.EventTime, I7]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime))
						return &caller4x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime) {
							fn.(finishBundle4x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[typex.BundleFinalization, I5, I6, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization, I5, I6, I7))
						return &caller4x0[typex.BundleFinalization, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization, I5, I6, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization, a1 I5, a2 I6, a3 I7) {
							fn.(finishBundle4x0[typex.BundleFinalization, I5, I6, I7]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[context.Context, typex.BundleFinalization, I6, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization, I6, I7))
						return &caller4x0[context.Context, typex.BundleFinalization, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization, I6, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization, a2 I6, a3 I7) {
							fn.(finishBundle4x0[context.Context, typex.BundleFinalization, I6, I7]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[typex.PaneInfo, typex.BundleFinalization, I6, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization, I6, I7))
						return &caller4x0[typex.PaneInfo, typex.BundleFinalization, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization, I6, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization, a2 I6, a3 I7) {
							fn.(finishBundle4x0[typex.PaneInfo, typex.BundleFinalization, I6, I7]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization, I7))
						return &caller4x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization, a3 I7) {
							fn.(finishBundle4x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I7]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[[]typex.Window, typex.BundleFinalization, I6, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization, I6, I7))
						return &caller4x0[[]typex.Window, typex.BundleFinalization, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization, I6, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization, a2 I6, a3 I7) {
							fn.(finishBundle4x0[[]typex.Window, typex.BundleFinalization, I6, I7]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[context.Context, []typex.Window, typex.BundleFinalization, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization, I7))
						return &caller4x0[context.Context, []typex.Window, typex.BundleFinalization, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization, a3 I7) {
							fn.(finishBundle4x0[context.Context, []typex.Window, typex.BundleFinalization, I7]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I7))
						return &caller4x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization, a3 I7) {
							fn.(finishBundle4x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I7]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization))
						return &caller4x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.BundleFinalization) {
							fn.(finishBundle4x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[typex.EventTime, typex.BundleFinalization, I6, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization, I6, I7))
						return &caller4x0[typex.EventTime, typex.BundleFinalization, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization, I6, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization, a2 I6, a3 I7) {
							fn.(finishBundle4x0[typex.EventTime, typex.BundleFinalization, I6, I7]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[context.Context, typex.EventTime, typex.BundleFinalization, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization, I7))
						return &caller4x0[context.Context, typex.EventTime, typex.BundleFinalization, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I7) {
							fn.(finishBundle4x0[context.Context, typex.EventTime, typex.BundleFinalization, I7]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I7))
						return &caller4x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I7) {
							fn.(finishBundle4x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I7]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization))
						return &caller4x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 typex.BundleFinalization) {
							fn.(finishBundle4x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization, I7))
						return &caller4x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I7) {
							fn.(finishBundle4x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I7]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization))
						return &caller4x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization) {
							fn.(finishBundle4x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization))
						return &caller4x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization) {
							fn.(finishBundle4x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization]).FinishBundle(a0, a1, a2, a3)
						})
					}
				}
			case finishBundleOut == 1:
				if _, ok := doFn.(finishBundle4x1[I4, I5, I6, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I4, I5, I6, I7) error)
						return &caller4x1[I4, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I4, I5, I6, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I4, a1 I5, a2 I6, a3 I7) error {
							return fn.(finishBundle4x1[I4, I5, I6, I7, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[context.Context, I5, I6, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, I5, I6, I7) error)
						return &caller4x1[context.Context, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, I5, I6, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 I5, a2 I6, a3 I7) error {
							return fn.(finishBundle4x1[context.Context, I5, I6, I7, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[typex.PaneInfo, I5, I6, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, I5, I6, I7) error)
						return &caller4x1[typex.PaneInfo, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, I5, I6, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 I5, a2 I6, a3 I7) error {
							return fn.(finishBundle4x1[typex.PaneInfo, I5, I6, I7, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[context.Context, typex.PaneInfo, I6, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, I6, I7) error)
						return &caller4x1[context.Context, typex.PaneInfo, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, I6, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 I6, a3 I7) error {
							return fn.(finishBundle4x1[context.Context, typex.PaneInfo, I6, I7, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[[]typex.Window, I5, I6, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, I5, I6, I7) error)
						return &caller4x1[[]typex.Window, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, I5, I6, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 I5, a2 I6, a3 I7) error {
							return fn.(finishBundle4x1[[]typex.Window, I5, I6, I7, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[context.Context, []typex.Window, I6, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, I6, I7) error)
						return &caller4x1[context.Context, []typex.Window, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, I6, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 I6, a3 I7) error {
							return fn.(finishBundle4x1[context.Context, []typex.Window, I6, I7, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[typex.PaneInfo, []typex.Window, I6, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, I6, I7) error)
						return &caller4x1[typex.PaneInfo, []typex.Window, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, I6, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 I6, a3 I7) error {
							return fn.(finishBundle4x1[typex.PaneInfo, []typex.Window, I6, I7, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[context.Context, typex.PaneInfo, []typex.Window, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, I7) error)
						return &caller4x1[context.Context, typex.PaneInfo, []typex.Window, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 I7) error {
							return fn.(finishBundle4x1[context.Context, typex.PaneInfo, []typex.Window, I7, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[typex.EventTime, I5, I6, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, I5, I6, I7) error)
						return &caller4x1[typex.EventTime, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, I5, I6, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 I5, a2 I6, a3 I7) error {
							return fn.(finishBundle4x1[typex.EventTime, I5, I6, I7, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[context.Context, typex.EventTime, I6, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, I6, I7) error)
						return &caller4x1[context.Context, typex.EventTime, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, I6, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 I6, a3 I7) error {
							return fn.(finishBundle4x1[context.Context, typex.EventTime, I6, I7, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[typex.PaneInfo, typex.EventTime, I6, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, I6, I7) error)
						return &caller4x1[typex.PaneInfo, typex.EventTime, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, I6, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 I6, a3 I7) error {
							return fn.(finishBundle4x1[typex.PaneInfo, typex.EventTime, I6, I7, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[context.Context, typex.PaneInfo, typex.EventTime, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, I7) error)
						return &caller4x1[context.Context, typex.PaneInfo, typex.EventTime, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 I7) error {
							return fn.(finishBundle4x1[context.Context, typex.PaneInfo, typex.EventTime, I7, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[[]typex.Window, typex.EventTime, I6, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, I6, I7) error)
						return &caller4x1[[]typex.Window, typex.EventTime, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, I6, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 I6, a3 I7) error {
							return fn.(finishBundle4x1[[]typex.Window, typex.EventTime, I6, I7, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[context.Context, []typex.Window, typex.EventTime, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, I7) error)
						return &caller4x1[context.Context, []typex.Window, typex.EventTime, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 I7) error {
							return fn.(finishBundle4x1[context.Context, []typex.Window, typex.EventTime, I7, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[typex.PaneInfo, []typex.Window, typex.EventTime, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, I7) error)
						return &caller4x1[typex.PaneInfo, []typex.Window, typex.EventTime, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 I7) error {
							return fn.(finishBundle4x1[typex.PaneInfo, []typex.Window, typex.EventTime, I7, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime) error)
						return &caller4x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime) error {
							return fn.(finishBundle4x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[typex.BundleFinalization, I5, I6, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization, I5, I6, I7) error)
						return &caller4x1[typex.BundleFinalization, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization, I5, I6, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization, a1 I5, a2 I6, a3 I7) error {
							return fn.(finishBundle4x1[typex.BundleFinalization, I5, I6, I7, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[context.Context, typex.BundleFinalization, I6, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization, I6, I7) error)
						return &caller4x1[context.Context, typex.BundleFinalization, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization, I6, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization, a2 I6, a3 I7) error {
							return fn.(finishBundle4x1[context.Context, typex.BundleFinalization, I6, I7, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[typex.PaneInfo, typex.BundleFinalization, I6, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization, I6, I7) error)
						return &caller4x1[typex.PaneInfo, typex.BundleFinalization, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization, I6, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization, a2 I6, a3 I7) error {
							return fn.(finishBundle4x1[typex.PaneInfo, typex.BundleFinalization, I6, I7, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization, I7) error)
						return &caller4x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization, a3 I7) error {
							return fn.(finishBundle4x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I7, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[[]typex.Window, typex.BundleFinalization, I6, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization, I6, I7) error)
						return &caller4x1[[]typex.Window, typex.BundleFinalization, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization, I6, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization, a2 I6, a3 I7) error {
							return fn.(finishBundle4x1[[]typex.Window, typex.BundleFinalization, I6, I7, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[context.Context, []typex.Window, typex.BundleFinalization, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization, I7) error)
						return &caller4x1[context.Context, []typex.Window, typex.BundleFinalization, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization, a3 I7) error {
							return fn.(finishBundle4x1[context.Context, []typex.Window, typex.BundleFinalization, I7, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I7) error)
						return &caller4x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization, a3 I7) error {
							return fn.(finishBundle4x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I7, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization) error)
						return &caller4x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.BundleFinalization) error {
							return fn.(finishBundle4x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[typex.EventTime, typex.BundleFinalization, I6, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization, I6, I7) error)
						return &caller4x1[typex.EventTime, typex.BundleFinalization, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization, I6, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization, a2 I6, a3 I7) error {
							return fn.(finishBundle4x1[typex.EventTime, typex.BundleFinalization, I6, I7, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[context.Context, typex.EventTime, typex.BundleFinalization, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization, I7) error)
						return &caller4x1[context.Context, typex.EventTime, typex.BundleFinalization, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I7) error {
							return fn.(finishBundle4x1[context.Context, typex.EventTime, typex.BundleFinalization, I7, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I7) error)
						return &caller4x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I7) error {
							return fn.(finishBundle4x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I7, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization) error)
						return &caller4x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 typex.BundleFinalization) error {
							return fn.(finishBundle4x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization, I7) error)
						return &caller4x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I7) error {
							return fn.(finishBundle4x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I7, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization) error)
						return &caller4x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization) error {
							return fn.(finishBundle4x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				} else if _, ok := doFn.(finishBundle4x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization) error)
						return &caller4x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization) error {
							return fn.(finishBundle4x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, error]).FinishBundle(a0, a1, a2, a3)
						})
					}
				}
			default:
				panic("Invalid signature for FinishBundle")
			}

		case finishBundleIn == 5:
			switch {
			case finishBundleOut == 0:
				if _, ok := doFn.(finishBundle5x0[I3, I4, I5, I6, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I3, I4, I5, I6, I7))
						return &caller5x0[I3, I4, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I3, I4, I5, I6, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I3, a1 I4, a2 I5, a3 I6, a4 I7) {
							fn.(finishBundle5x0[I3, I4, I5, I6, I7]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[context.Context, I4, I5, I6, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, I4, I5, I6, I7))
						return &caller5x0[context.Context, I4, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, I4, I5, I6, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 I4, a2 I5, a3 I6, a4 I7) {
							fn.(finishBundle5x0[context.Context, I4, I5, I6, I7]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[typex.PaneInfo, I4, I5, I6, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, I4, I5, I6, I7))
						return &caller5x0[typex.PaneInfo, I4, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, I4, I5, I6, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 I4, a2 I5, a3 I6, a4 I7) {
							fn.(finishBundle5x0[typex.PaneInfo, I4, I5, I6, I7]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[context.Context, typex.PaneInfo, I5, I6, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, I5, I6, I7))
						return &caller5x0[context.Context, typex.PaneInfo, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, I5, I6, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 I5, a3 I6, a4 I7) {
							fn.(finishBundle5x0[context.Context, typex.PaneInfo, I5, I6, I7]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[[]typex.Window, I4, I5, I6, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, I4, I5, I6, I7))
						return &caller5x0[[]typex.Window, I4, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, I4, I5, I6, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 I4, a2 I5, a3 I6, a4 I7) {
							fn.(finishBundle5x0[[]typex.Window, I4, I5, I6, I7]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[context.Context, []typex.Window, I5, I6, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, I5, I6, I7))
						return &caller5x0[context.Context, []typex.Window, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, I5, I6, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 I5, a3 I6, a4 I7) {
							fn.(finishBundle5x0[context.Context, []typex.Window, I5, I6, I7]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[typex.PaneInfo, []typex.Window, I5, I6, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, I5, I6, I7))
						return &caller5x0[typex.PaneInfo, []typex.Window, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, I5, I6, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 I5, a3 I6, a4 I7) {
							fn.(finishBundle5x0[typex.PaneInfo, []typex.Window, I5, I6, I7]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[context.Context, typex.PaneInfo, []typex.Window, I6, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, I6, I7))
						return &caller5x0[context.Context, typex.PaneInfo, []typex.Window, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, I6, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 I6, a4 I7) {
							fn.(finishBundle5x0[context.Context, typex.PaneInfo, []typex.Window, I6, I7]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[typex.EventTime, I4, I5, I6, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, I4, I5, I6, I7))
						return &caller5x0[typex.EventTime, I4, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, I4, I5, I6, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 I4, a2 I5, a3 I6, a4 I7) {
							fn.(finishBundle5x0[typex.EventTime, I4, I5, I6, I7]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[context.Context, typex.EventTime, I5, I6, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, I5, I6, I7))
						return &caller5x0[context.Context, typex.EventTime, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, I5, I6, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 I5, a3 I6, a4 I7) {
							fn.(finishBundle5x0[context.Context, typex.EventTime, I5, I6, I7]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[typex.PaneInfo, typex.EventTime, I5, I6, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, I5, I6, I7))
						return &caller5x0[typex.PaneInfo, typex.EventTime, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, I5, I6, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 I5, a3 I6, a4 I7) {
							fn.(finishBundle5x0[typex.PaneInfo, typex.EventTime, I5, I6, I7]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[context.Context, typex.PaneInfo, typex.EventTime, I6, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, I6, I7))
						return &caller5x0[context.Context, typex.PaneInfo, typex.EventTime, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, I6, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 I6, a4 I7) {
							fn.(finishBundle5x0[context.Context, typex.PaneInfo, typex.EventTime, I6, I7]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[[]typex.Window, typex.EventTime, I5, I6, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, I5, I6, I7))
						return &caller5x0[[]typex.Window, typex.EventTime, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, I5, I6, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 I5, a3 I6, a4 I7) {
							fn.(finishBundle5x0[[]typex.Window, typex.EventTime, I5, I6, I7]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[context.Context, []typex.Window, typex.EventTime, I6, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, I6, I7))
						return &caller5x0[context.Context, []typex.Window, typex.EventTime, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, I6, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 I6, a4 I7) {
							fn.(finishBundle5x0[context.Context, []typex.Window, typex.EventTime, I6, I7]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[typex.PaneInfo, []typex.Window, typex.EventTime, I6, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, I6, I7))
						return &caller5x0[typex.PaneInfo, []typex.Window, typex.EventTime, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, I6, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 I6, a4 I7) {
							fn.(finishBundle5x0[typex.PaneInfo, []typex.Window, typex.EventTime, I6, I7]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I7))
						return &caller5x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 I7) {
							fn.(finishBundle5x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I7]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[typex.BundleFinalization, I4, I5, I6, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization, I4, I5, I6, I7))
						return &caller5x0[typex.BundleFinalization, I4, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization, I4, I5, I6, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization, a1 I4, a2 I5, a3 I6, a4 I7) {
							fn.(finishBundle5x0[typex.BundleFinalization, I4, I5, I6, I7]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[context.Context, typex.BundleFinalization, I5, I6, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization, I5, I6, I7))
						return &caller5x0[context.Context, typex.BundleFinalization, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization, I5, I6, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization, a2 I5, a3 I6, a4 I7) {
							fn.(finishBundle5x0[context.Context, typex.BundleFinalization, I5, I6, I7]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[typex.PaneInfo, typex.BundleFinalization, I5, I6, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization, I5, I6, I7))
						return &caller5x0[typex.PaneInfo, typex.BundleFinalization, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization, I5, I6, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization, a2 I5, a3 I6, a4 I7) {
							fn.(finishBundle5x0[typex.PaneInfo, typex.BundleFinalization, I5, I6, I7]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I6, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization, I6, I7))
						return &caller5x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization, I6, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization, a3 I6, a4 I7) {
							fn.(finishBundle5x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I6, I7]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[[]typex.Window, typex.BundleFinalization, I5, I6, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization, I5, I6, I7))
						return &caller5x0[[]typex.Window, typex.BundleFinalization, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization, I5, I6, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization, a2 I5, a3 I6, a4 I7) {
							fn.(finishBundle5x0[[]typex.Window, typex.BundleFinalization, I5, I6, I7]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[context.Context, []typex.Window, typex.BundleFinalization, I6, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization, I6, I7))
						return &caller5x0[context.Context, []typex.Window, typex.BundleFinalization, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization, I6, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization, a3 I6, a4 I7) {
							fn.(finishBundle5x0[context.Context, []typex.Window, typex.BundleFinalization, I6, I7]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I6, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I6, I7))
						return &caller5x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I6, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization, a3 I6, a4 I7) {
							fn.(finishBundle5x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I6, I7]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I7))
						return &caller5x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.BundleFinalization, a4 I7) {
							fn.(finishBundle5x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I7]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[typex.EventTime, typex.BundleFinalization, I5, I6, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization, I5, I6, I7))
						return &caller5x0[typex.EventTime, typex.BundleFinalization, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization, I5, I6, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization, a2 I5, a3 I6, a4 I7) {
							fn.(finishBundle5x0[typex.EventTime, typex.BundleFinalization, I5, I6, I7]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[context.Context, typex.EventTime, typex.BundleFinalization, I6, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization, I6, I7))
						return &caller5x0[context.Context, typex.EventTime, typex.BundleFinalization, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization, I6, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I6, a4 I7) {
							fn.(finishBundle5x0[context.Context, typex.EventTime, typex.BundleFinalization, I6, I7]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I6, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I6, I7))
						return &caller5x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I6, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I6, a4 I7) {
							fn.(finishBundle5x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I6, I7]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I7))
						return &caller5x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I7) {
							fn.(finishBundle5x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I7]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I6, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization, I6, I7))
						return &caller5x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization, I6, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I6, a4 I7) {
							fn.(finishBundle5x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I6, I7]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I7))
						return &caller5x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I7) {
							fn.(finishBundle5x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I7]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I7))
						return &caller5x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I7) {
							fn.(finishBundle5x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I7]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization))
						return &caller5x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 typex.BundleFinalization) {
							fn.(finishBundle5x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				}
			case finishBundleOut == 1:
				if _, ok := doFn.(finishBundle5x1[I3, I4, I5, I6, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I3, I4, I5, I6, I7) error)
						return &caller5x1[I3, I4, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I3, I4, I5, I6, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I3, a1 I4, a2 I5, a3 I6, a4 I7) error {
							return fn.(finishBundle5x1[I3, I4, I5, I6, I7, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[context.Context, I4, I5, I6, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, I4, I5, I6, I7) error)
						return &caller5x1[context.Context, I4, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, I4, I5, I6, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 I4, a2 I5, a3 I6, a4 I7) error {
							return fn.(finishBundle5x1[context.Context, I4, I5, I6, I7, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[typex.PaneInfo, I4, I5, I6, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, I4, I5, I6, I7) error)
						return &caller5x1[typex.PaneInfo, I4, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, I4, I5, I6, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 I4, a2 I5, a3 I6, a4 I7) error {
							return fn.(finishBundle5x1[typex.PaneInfo, I4, I5, I6, I7, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[context.Context, typex.PaneInfo, I5, I6, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, I5, I6, I7) error)
						return &caller5x1[context.Context, typex.PaneInfo, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, I5, I6, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 I5, a3 I6, a4 I7) error {
							return fn.(finishBundle5x1[context.Context, typex.PaneInfo, I5, I6, I7, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[[]typex.Window, I4, I5, I6, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, I4, I5, I6, I7) error)
						return &caller5x1[[]typex.Window, I4, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, I4, I5, I6, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 I4, a2 I5, a3 I6, a4 I7) error {
							return fn.(finishBundle5x1[[]typex.Window, I4, I5, I6, I7, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[context.Context, []typex.Window, I5, I6, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, I5, I6, I7) error)
						return &caller5x1[context.Context, []typex.Window, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, I5, I6, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 I5, a3 I6, a4 I7) error {
							return fn.(finishBundle5x1[context.Context, []typex.Window, I5, I6, I7, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[typex.PaneInfo, []typex.Window, I5, I6, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, I5, I6, I7) error)
						return &caller5x1[typex.PaneInfo, []typex.Window, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, I5, I6, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 I5, a3 I6, a4 I7) error {
							return fn.(finishBundle5x1[typex.PaneInfo, []typex.Window, I5, I6, I7, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[context.Context, typex.PaneInfo, []typex.Window, I6, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, I6, I7) error)
						return &caller5x1[context.Context, typex.PaneInfo, []typex.Window, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, I6, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 I6, a4 I7) error {
							return fn.(finishBundle5x1[context.Context, typex.PaneInfo, []typex.Window, I6, I7, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[typex.EventTime, I4, I5, I6, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, I4, I5, I6, I7) error)
						return &caller5x1[typex.EventTime, I4, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, I4, I5, I6, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 I4, a2 I5, a3 I6, a4 I7) error {
							return fn.(finishBundle5x1[typex.EventTime, I4, I5, I6, I7, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[context.Context, typex.EventTime, I5, I6, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, I5, I6, I7) error)
						return &caller5x1[context.Context, typex.EventTime, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, I5, I6, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 I5, a3 I6, a4 I7) error {
							return fn.(finishBundle5x1[context.Context, typex.EventTime, I5, I6, I7, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[typex.PaneInfo, typex.EventTime, I5, I6, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, I5, I6, I7) error)
						return &caller5x1[typex.PaneInfo, typex.EventTime, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, I5, I6, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 I5, a3 I6, a4 I7) error {
							return fn.(finishBundle5x1[typex.PaneInfo, typex.EventTime, I5, I6, I7, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[context.Context, typex.PaneInfo, typex.EventTime, I6, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, I6, I7) error)
						return &caller5x1[context.Context, typex.PaneInfo, typex.EventTime, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, I6, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 I6, a4 I7) error {
							return fn.(finishBundle5x1[context.Context, typex.PaneInfo, typex.EventTime, I6, I7, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[[]typex.Window, typex.EventTime, I5, I6, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, I5, I6, I7) error)
						return &caller5x1[[]typex.Window, typex.EventTime, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, I5, I6, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 I5, a3 I6, a4 I7) error {
							return fn.(finishBundle5x1[[]typex.Window, typex.EventTime, I5, I6, I7, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[context.Context, []typex.Window, typex.EventTime, I6, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, I6, I7) error)
						return &caller5x1[context.Context, []typex.Window, typex.EventTime, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, I6, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 I6, a4 I7) error {
							return fn.(finishBundle5x1[context.Context, []typex.Window, typex.EventTime, I6, I7, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[typex.PaneInfo, []typex.Window, typex.EventTime, I6, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, I6, I7) error)
						return &caller5x1[typex.PaneInfo, []typex.Window, typex.EventTime, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, I6, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 I6, a4 I7) error {
							return fn.(finishBundle5x1[typex.PaneInfo, []typex.Window, typex.EventTime, I6, I7, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I7) error)
						return &caller5x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 I7) error {
							return fn.(finishBundle5x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I7, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[typex.BundleFinalization, I4, I5, I6, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization, I4, I5, I6, I7) error)
						return &caller5x1[typex.BundleFinalization, I4, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization, I4, I5, I6, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization, a1 I4, a2 I5, a3 I6, a4 I7) error {
							return fn.(finishBundle5x1[typex.BundleFinalization, I4, I5, I6, I7, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[context.Context, typex.BundleFinalization, I5, I6, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization, I5, I6, I7) error)
						return &caller5x1[context.Context, typex.BundleFinalization, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization, I5, I6, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization, a2 I5, a3 I6, a4 I7) error {
							return fn.(finishBundle5x1[context.Context, typex.BundleFinalization, I5, I6, I7, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[typex.PaneInfo, typex.BundleFinalization, I5, I6, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization, I5, I6, I7) error)
						return &caller5x1[typex.PaneInfo, typex.BundleFinalization, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization, I5, I6, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization, a2 I5, a3 I6, a4 I7) error {
							return fn.(finishBundle5x1[typex.PaneInfo, typex.BundleFinalization, I5, I6, I7, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I6, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization, I6, I7) error)
						return &caller5x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization, I6, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization, a3 I6, a4 I7) error {
							return fn.(finishBundle5x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I6, I7, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[[]typex.Window, typex.BundleFinalization, I5, I6, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization, I5, I6, I7) error)
						return &caller5x1[[]typex.Window, typex.BundleFinalization, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization, I5, I6, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization, a2 I5, a3 I6, a4 I7) error {
							return fn.(finishBundle5x1[[]typex.Window, typex.BundleFinalization, I5, I6, I7, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[context.Context, []typex.Window, typex.BundleFinalization, I6, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization, I6, I7) error)
						return &caller5x1[context.Context, []typex.Window, typex.BundleFinalization, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization, I6, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization, a3 I6, a4 I7) error {
							return fn.(finishBundle5x1[context.Context, []typex.Window, typex.BundleFinalization, I6, I7, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I6, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I6, I7) error)
						return &caller5x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I6, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization, a3 I6, a4 I7) error {
							return fn.(finishBundle5x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I6, I7, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I7) error)
						return &caller5x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.BundleFinalization, a4 I7) error {
							return fn.(finishBundle5x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I7, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[typex.EventTime, typex.BundleFinalization, I5, I6, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization, I5, I6, I7) error)
						return &caller5x1[typex.EventTime, typex.BundleFinalization, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization, I5, I6, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization, a2 I5, a3 I6, a4 I7) error {
							return fn.(finishBundle5x1[typex.EventTime, typex.BundleFinalization, I5, I6, I7, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[context.Context, typex.EventTime, typex.BundleFinalization, I6, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization, I6, I7) error)
						return &caller5x1[context.Context, typex.EventTime, typex.BundleFinalization, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization, I6, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I6, a4 I7) error {
							return fn.(finishBundle5x1[context.Context, typex.EventTime, typex.BundleFinalization, I6, I7, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I6, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I6, I7) error)
						return &caller5x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I6, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I6, a4 I7) error {
							return fn.(finishBundle5x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I6, I7, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I7) error)
						return &caller5x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I7) error {
							return fn.(finishBundle5x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I7, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I6, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization, I6, I7) error)
						return &caller5x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization, I6, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I6, a4 I7) error {
							return fn.(finishBundle5x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I6, I7, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I7) error)
						return &caller5x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I7) error {
							return fn.(finishBundle5x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I7, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I7) error)
						return &caller5x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I7) error {
							return fn.(finishBundle5x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I7, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				} else if _, ok := doFn.(finishBundle5x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization) error)
						return &caller5x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 typex.BundleFinalization) error {
							return fn.(finishBundle5x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, error]).FinishBundle(a0, a1, a2, a3, a4)
						})
					}
				}
			default:
				panic("Invalid signature for FinishBundle")
			}

		case finishBundleIn == 6:
			switch {
			case finishBundleOut == 0:
				if _, ok := doFn.(finishBundle6x0[I2, I3, I4, I5, I6, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I2, I3, I4, I5, I6, I7))
						return &caller6x0[I2, I3, I4, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I2, I3, I4, I5, I6, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I2, a1 I3, a2 I4, a3 I5, a4 I6, a5 I7) {
							fn.(finishBundle6x0[I2, I3, I4, I5, I6, I7]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[context.Context, I3, I4, I5, I6, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, I3, I4, I5, I6, I7))
						return &caller6x0[context.Context, I3, I4, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, I3, I4, I5, I6, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 I3, a2 I4, a3 I5, a4 I6, a5 I7) {
							fn.(finishBundle6x0[context.Context, I3, I4, I5, I6, I7]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[typex.PaneInfo, I3, I4, I5, I6, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, I3, I4, I5, I6, I7))
						return &caller6x0[typex.PaneInfo, I3, I4, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, I3, I4, I5, I6, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 I3, a2 I4, a3 I5, a4 I6, a5 I7) {
							fn.(finishBundle6x0[typex.PaneInfo, I3, I4, I5, I6, I7]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[context.Context, typex.PaneInfo, I4, I5, I6, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, I4, I5, I6, I7))
						return &caller6x0[context.Context, typex.PaneInfo, I4, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, I4, I5, I6, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 I4, a3 I5, a4 I6, a5 I7) {
							fn.(finishBundle6x0[context.Context, typex.PaneInfo, I4, I5, I6, I7]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[[]typex.Window, I3, I4, I5, I6, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, I3, I4, I5, I6, I7))
						return &caller6x0[[]typex.Window, I3, I4, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, I3, I4, I5, I6, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 I3, a2 I4, a3 I5, a4 I6, a5 I7) {
							fn.(finishBundle6x0[[]typex.Window, I3, I4, I5, I6, I7]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[context.Context, []typex.Window, I4, I5, I6, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, I4, I5, I6, I7))
						return &caller6x0[context.Context, []typex.Window, I4, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, I4, I5, I6, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 I4, a3 I5, a4 I6, a5 I7) {
							fn.(finishBundle6x0[context.Context, []typex.Window, I4, I5, I6, I7]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[typex.PaneInfo, []typex.Window, I4, I5, I6, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, I4, I5, I6, I7))
						return &caller6x0[typex.PaneInfo, []typex.Window, I4, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, I4, I5, I6, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 I4, a3 I5, a4 I6, a5 I7) {
							fn.(finishBundle6x0[typex.PaneInfo, []typex.Window, I4, I5, I6, I7]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[context.Context, typex.PaneInfo, []typex.Window, I5, I6, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, I5, I6, I7))
						return &caller6x0[context.Context, typex.PaneInfo, []typex.Window, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, I5, I6, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 I5, a4 I6, a5 I7) {
							fn.(finishBundle6x0[context.Context, typex.PaneInfo, []typex.Window, I5, I6, I7]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[typex.EventTime, I3, I4, I5, I6, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, I3, I4, I5, I6, I7))
						return &caller6x0[typex.EventTime, I3, I4, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, I3, I4, I5, I6, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 I3, a2 I4, a3 I5, a4 I6, a5 I7) {
							fn.(finishBundle6x0[typex.EventTime, I3, I4, I5, I6, I7]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[context.Context, typex.EventTime, I4, I5, I6, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, I4, I5, I6, I7))
						return &caller6x0[context.Context, typex.EventTime, I4, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, I4, I5, I6, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 I4, a3 I5, a4 I6, a5 I7) {
							fn.(finishBundle6x0[context.Context, typex.EventTime, I4, I5, I6, I7]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[typex.PaneInfo, typex.EventTime, I4, I5, I6, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, I4, I5, I6, I7))
						return &caller6x0[typex.PaneInfo, typex.EventTime, I4, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, I4, I5, I6, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 I4, a3 I5, a4 I6, a5 I7) {
							fn.(finishBundle6x0[typex.PaneInfo, typex.EventTime, I4, I5, I6, I7]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[context.Context, typex.PaneInfo, typex.EventTime, I5, I6, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, I5, I6, I7))
						return &caller6x0[context.Context, typex.PaneInfo, typex.EventTime, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, I5, I6, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 I5, a4 I6, a5 I7) {
							fn.(finishBundle6x0[context.Context, typex.PaneInfo, typex.EventTime, I5, I6, I7]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[[]typex.Window, typex.EventTime, I4, I5, I6, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, I4, I5, I6, I7))
						return &caller6x0[[]typex.Window, typex.EventTime, I4, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, I4, I5, I6, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 I4, a3 I5, a4 I6, a5 I7) {
							fn.(finishBundle6x0[[]typex.Window, typex.EventTime, I4, I5, I6, I7]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[context.Context, []typex.Window, typex.EventTime, I5, I6, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, I5, I6, I7))
						return &caller6x0[context.Context, []typex.Window, typex.EventTime, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, I5, I6, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 I5, a4 I6, a5 I7) {
							fn.(finishBundle6x0[context.Context, []typex.Window, typex.EventTime, I5, I6, I7]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[typex.PaneInfo, []typex.Window, typex.EventTime, I5, I6, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, I5, I6, I7))
						return &caller6x0[typex.PaneInfo, []typex.Window, typex.EventTime, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, I5, I6, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 I5, a4 I6, a5 I7) {
							fn.(finishBundle6x0[typex.PaneInfo, []typex.Window, typex.EventTime, I5, I6, I7]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I6, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I6, I7))
						return &caller6x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I6, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 I6, a5 I7) {
							fn.(finishBundle6x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I6, I7]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[typex.BundleFinalization, I3, I4, I5, I6, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization, I3, I4, I5, I6, I7))
						return &caller6x0[typex.BundleFinalization, I3, I4, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization, I3, I4, I5, I6, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization, a1 I3, a2 I4, a3 I5, a4 I6, a5 I7) {
							fn.(finishBundle6x0[typex.BundleFinalization, I3, I4, I5, I6, I7]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[context.Context, typex.BundleFinalization, I4, I5, I6, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization, I4, I5, I6, I7))
						return &caller6x0[context.Context, typex.BundleFinalization, I4, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization, I4, I5, I6, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization, a2 I4, a3 I5, a4 I6, a5 I7) {
							fn.(finishBundle6x0[context.Context, typex.BundleFinalization, I4, I5, I6, I7]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[typex.PaneInfo, typex.BundleFinalization, I4, I5, I6, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization, I4, I5, I6, I7))
						return &caller6x0[typex.PaneInfo, typex.BundleFinalization, I4, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization, I4, I5, I6, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization, a2 I4, a3 I5, a4 I6, a5 I7) {
							fn.(finishBundle6x0[typex.PaneInfo, typex.BundleFinalization, I4, I5, I6, I7]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I5, I6, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization, I5, I6, I7))
						return &caller6x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization, I5, I6, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization, a3 I5, a4 I6, a5 I7) {
							fn.(finishBundle6x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I5, I6, I7]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[[]typex.Window, typex.BundleFinalization, I4, I5, I6, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization, I4, I5, I6, I7))
						return &caller6x0[[]typex.Window, typex.BundleFinalization, I4, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization, I4, I5, I6, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization, a2 I4, a3 I5, a4 I6, a5 I7) {
							fn.(finishBundle6x0[[]typex.Window, typex.BundleFinalization, I4, I5, I6, I7]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[context.Context, []typex.Window, typex.BundleFinalization, I5, I6, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization, I5, I6, I7))
						return &caller6x0[context.Context, []typex.Window, typex.BundleFinalization, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization, I5, I6, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization, a3 I5, a4 I6, a5 I7) {
							fn.(finishBundle6x0[context.Context, []typex.Window, typex.BundleFinalization, I5, I6, I7]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I5, I6, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I5, I6, I7))
						return &caller6x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I5, I6, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization, a3 I5, a4 I6, a5 I7) {
							fn.(finishBundle6x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I5, I6, I7]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I6, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I6, I7))
						return &caller6x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I6, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.BundleFinalization, a4 I6, a5 I7) {
							fn.(finishBundle6x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I6, I7]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[typex.EventTime, typex.BundleFinalization, I4, I5, I6, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization, I4, I5, I6, I7))
						return &caller6x0[typex.EventTime, typex.BundleFinalization, I4, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization, I4, I5, I6, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization, a2 I4, a3 I5, a4 I6, a5 I7) {
							fn.(finishBundle6x0[typex.EventTime, typex.BundleFinalization, I4, I5, I6, I7]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[context.Context, typex.EventTime, typex.BundleFinalization, I5, I6, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization, I5, I6, I7))
						return &caller6x0[context.Context, typex.EventTime, typex.BundleFinalization, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization, I5, I6, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I5, a4 I6, a5 I7) {
							fn.(finishBundle6x0[context.Context, typex.EventTime, typex.BundleFinalization, I5, I6, I7]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I5, I6, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I5, I6, I7))
						return &caller6x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I5, I6, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I5, a4 I6, a5 I7) {
							fn.(finishBundle6x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I5, I6, I7]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I6, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I6, I7))
						return &caller6x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I6, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I6, a5 I7) {
							fn.(finishBundle6x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I6, I7]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6, I7))
						return &caller6x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I5, a4 I6, a5 I7) {
							fn.(finishBundle6x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6, I7]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I6, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I6, I7))
						return &caller6x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I6, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I6, a5 I7) {
							fn.(finishBundle6x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I6, I7]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I6, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I6, I7))
						return &caller6x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I6, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I6, a5 I7) {
							fn.(finishBundle6x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I6, I7]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I7))
						return &caller6x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 typex.BundleFinalization, a5 I7) {
							fn.(finishBundle6x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I7]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				}
			case finishBundleOut == 1:
				if _, ok := doFn.(finishBundle6x1[I2, I3, I4, I5, I6, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I2, I3, I4, I5, I6, I7) error)
						return &caller6x1[I2, I3, I4, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I2, I3, I4, I5, I6, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I2, a1 I3, a2 I4, a3 I5, a4 I6, a5 I7) error {
							return fn.(finishBundle6x1[I2, I3, I4, I5, I6, I7, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[context.Context, I3, I4, I5, I6, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, I3, I4, I5, I6, I7) error)
						return &caller6x1[context.Context, I3, I4, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, I3, I4, I5, I6, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 I3, a2 I4, a3 I5, a4 I6, a5 I7) error {
							return fn.(finishBundle6x1[context.Context, I3, I4, I5, I6, I7, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[typex.PaneInfo, I3, I4, I5, I6, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, I3, I4, I5, I6, I7) error)
						return &caller6x1[typex.PaneInfo, I3, I4, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, I3, I4, I5, I6, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 I3, a2 I4, a3 I5, a4 I6, a5 I7) error {
							return fn.(finishBundle6x1[typex.PaneInfo, I3, I4, I5, I6, I7, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[context.Context, typex.PaneInfo, I4, I5, I6, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, I4, I5, I6, I7) error)
						return &caller6x1[context.Context, typex.PaneInfo, I4, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, I4, I5, I6, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 I4, a3 I5, a4 I6, a5 I7) error {
							return fn.(finishBundle6x1[context.Context, typex.PaneInfo, I4, I5, I6, I7, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[[]typex.Window, I3, I4, I5, I6, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, I3, I4, I5, I6, I7) error)
						return &caller6x1[[]typex.Window, I3, I4, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, I3, I4, I5, I6, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 I3, a2 I4, a3 I5, a4 I6, a5 I7) error {
							return fn.(finishBundle6x1[[]typex.Window, I3, I4, I5, I6, I7, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[context.Context, []typex.Window, I4, I5, I6, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, I4, I5, I6, I7) error)
						return &caller6x1[context.Context, []typex.Window, I4, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, I4, I5, I6, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 I4, a3 I5, a4 I6, a5 I7) error {
							return fn.(finishBundle6x1[context.Context, []typex.Window, I4, I5, I6, I7, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[typex.PaneInfo, []typex.Window, I4, I5, I6, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, I4, I5, I6, I7) error)
						return &caller6x1[typex.PaneInfo, []typex.Window, I4, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, I4, I5, I6, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 I4, a3 I5, a4 I6, a5 I7) error {
							return fn.(finishBundle6x1[typex.PaneInfo, []typex.Window, I4, I5, I6, I7, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[context.Context, typex.PaneInfo, []typex.Window, I5, I6, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, I5, I6, I7) error)
						return &caller6x1[context.Context, typex.PaneInfo, []typex.Window, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, I5, I6, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 I5, a4 I6, a5 I7) error {
							return fn.(finishBundle6x1[context.Context, typex.PaneInfo, []typex.Window, I5, I6, I7, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[typex.EventTime, I3, I4, I5, I6, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, I3, I4, I5, I6, I7) error)
						return &caller6x1[typex.EventTime, I3, I4, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, I3, I4, I5, I6, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 I3, a2 I4, a3 I5, a4 I6, a5 I7) error {
							return fn.(finishBundle6x1[typex.EventTime, I3, I4, I5, I6, I7, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[context.Context, typex.EventTime, I4, I5, I6, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, I4, I5, I6, I7) error)
						return &caller6x1[context.Context, typex.EventTime, I4, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, I4, I5, I6, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 I4, a3 I5, a4 I6, a5 I7) error {
							return fn.(finishBundle6x1[context.Context, typex.EventTime, I4, I5, I6, I7, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[typex.PaneInfo, typex.EventTime, I4, I5, I6, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, I4, I5, I6, I7) error)
						return &caller6x1[typex.PaneInfo, typex.EventTime, I4, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, I4, I5, I6, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 I4, a3 I5, a4 I6, a5 I7) error {
							return fn.(finishBundle6x1[typex.PaneInfo, typex.EventTime, I4, I5, I6, I7, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[context.Context, typex.PaneInfo, typex.EventTime, I5, I6, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, I5, I6, I7) error)
						return &caller6x1[context.Context, typex.PaneInfo, typex.EventTime, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, I5, I6, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 I5, a4 I6, a5 I7) error {
							return fn.(finishBundle6x1[context.Context, typex.PaneInfo, typex.EventTime, I5, I6, I7, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[[]typex.Window, typex.EventTime, I4, I5, I6, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, I4, I5, I6, I7) error)
						return &caller6x1[[]typex.Window, typex.EventTime, I4, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, I4, I5, I6, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 I4, a3 I5, a4 I6, a5 I7) error {
							return fn.(finishBundle6x1[[]typex.Window, typex.EventTime, I4, I5, I6, I7, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[context.Context, []typex.Window, typex.EventTime, I5, I6, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, I5, I6, I7) error)
						return &caller6x1[context.Context, []typex.Window, typex.EventTime, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, I5, I6, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 I5, a4 I6, a5 I7) error {
							return fn.(finishBundle6x1[context.Context, []typex.Window, typex.EventTime, I5, I6, I7, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[typex.PaneInfo, []typex.Window, typex.EventTime, I5, I6, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, I5, I6, I7) error)
						return &caller6x1[typex.PaneInfo, []typex.Window, typex.EventTime, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, I5, I6, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 I5, a4 I6, a5 I7) error {
							return fn.(finishBundle6x1[typex.PaneInfo, []typex.Window, typex.EventTime, I5, I6, I7, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I6, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I6, I7) error)
						return &caller6x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I6, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 I6, a5 I7) error {
							return fn.(finishBundle6x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I6, I7, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[typex.BundleFinalization, I3, I4, I5, I6, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization, I3, I4, I5, I6, I7) error)
						return &caller6x1[typex.BundleFinalization, I3, I4, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization, I3, I4, I5, I6, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization, a1 I3, a2 I4, a3 I5, a4 I6, a5 I7) error {
							return fn.(finishBundle6x1[typex.BundleFinalization, I3, I4, I5, I6, I7, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[context.Context, typex.BundleFinalization, I4, I5, I6, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization, I4, I5, I6, I7) error)
						return &caller6x1[context.Context, typex.BundleFinalization, I4, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization, I4, I5, I6, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization, a2 I4, a3 I5, a4 I6, a5 I7) error {
							return fn.(finishBundle6x1[context.Context, typex.BundleFinalization, I4, I5, I6, I7, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[typex.PaneInfo, typex.BundleFinalization, I4, I5, I6, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization, I4, I5, I6, I7) error)
						return &caller6x1[typex.PaneInfo, typex.BundleFinalization, I4, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization, I4, I5, I6, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization, a2 I4, a3 I5, a4 I6, a5 I7) error {
							return fn.(finishBundle6x1[typex.PaneInfo, typex.BundleFinalization, I4, I5, I6, I7, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I5, I6, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization, I5, I6, I7) error)
						return &caller6x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization, I5, I6, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization, a3 I5, a4 I6, a5 I7) error {
							return fn.(finishBundle6x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I5, I6, I7, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[[]typex.Window, typex.BundleFinalization, I4, I5, I6, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization, I4, I5, I6, I7) error)
						return &caller6x1[[]typex.Window, typex.BundleFinalization, I4, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization, I4, I5, I6, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization, a2 I4, a3 I5, a4 I6, a5 I7) error {
							return fn.(finishBundle6x1[[]typex.Window, typex.BundleFinalization, I4, I5, I6, I7, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[context.Context, []typex.Window, typex.BundleFinalization, I5, I6, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization, I5, I6, I7) error)
						return &caller6x1[context.Context, []typex.Window, typex.BundleFinalization, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization, I5, I6, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization, a3 I5, a4 I6, a5 I7) error {
							return fn.(finishBundle6x1[context.Context, []typex.Window, typex.BundleFinalization, I5, I6, I7, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I5, I6, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I5, I6, I7) error)
						return &caller6x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I5, I6, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization, a3 I5, a4 I6, a5 I7) error {
							return fn.(finishBundle6x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I5, I6, I7, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I6, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I6, I7) error)
						return &caller6x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I6, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.BundleFinalization, a4 I6, a5 I7) error {
							return fn.(finishBundle6x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I6, I7, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[typex.EventTime, typex.BundleFinalization, I4, I5, I6, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization, I4, I5, I6, I7) error)
						return &caller6x1[typex.EventTime, typex.BundleFinalization, I4, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization, I4, I5, I6, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization, a2 I4, a3 I5, a4 I6, a5 I7) error {
							return fn.(finishBundle6x1[typex.EventTime, typex.BundleFinalization, I4, I5, I6, I7, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[context.Context, typex.EventTime, typex.BundleFinalization, I5, I6, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization, I5, I6, I7) error)
						return &caller6x1[context.Context, typex.EventTime, typex.BundleFinalization, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization, I5, I6, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I5, a4 I6, a5 I7) error {
							return fn.(finishBundle6x1[context.Context, typex.EventTime, typex.BundleFinalization, I5, I6, I7, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I5, I6, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I5, I6, I7) error)
						return &caller6x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I5, I6, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I5, a4 I6, a5 I7) error {
							return fn.(finishBundle6x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I5, I6, I7, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I6, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I6, I7) error)
						return &caller6x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I6, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I6, a5 I7) error {
							return fn.(finishBundle6x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I6, I7, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6, I7) error)
						return &caller6x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I5, a4 I6, a5 I7) error {
							return fn.(finishBundle6x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6, I7, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I6, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I6, I7) error)
						return &caller6x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I6, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I6, a5 I7) error {
							return fn.(finishBundle6x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I6, I7, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I6, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I6, I7) error)
						return &caller6x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I6, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I6, a5 I7) error {
							return fn.(finishBundle6x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I6, I7, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				} else if _, ok := doFn.(finishBundle6x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I7) error)
						return &caller6x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 typex.BundleFinalization, a5 I7) error {
							return fn.(finishBundle6x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I7, error]).FinishBundle(a0, a1, a2, a3, a4, a5)
						})
					}
				}
			default:
				panic("Invalid signature for FinishBundle")
			}

		case finishBundleIn == 7:
			switch {
			case finishBundleOut == 0:
				if _, ok := doFn.(finishBundle7x0[I1, I2, I3, I4, I5, I6, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I1, I2, I3, I4, I5, I6, I7))
						return &caller7x0[I1, I2, I3, I4, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I1, I2, I3, I4, I5, I6, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I1, a1 I2, a2 I3, a3 I4, a4 I5, a5 I6, a6 I7) {
							fn.(finishBundle7x0[I1, I2, I3, I4, I5, I6, I7]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[context.Context, I2, I3, I4, I5, I6, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, I2, I3, I4, I5, I6, I7))
						return &caller7x0[context.Context, I2, I3, I4, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, I2, I3, I4, I5, I6, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 I2, a2 I3, a3 I4, a4 I5, a5 I6, a6 I7) {
							fn.(finishBundle7x0[context.Context, I2, I3, I4, I5, I6, I7]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[typex.PaneInfo, I2, I3, I4, I5, I6, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, I2, I3, I4, I5, I6, I7))
						return &caller7x0[typex.PaneInfo, I2, I3, I4, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, I2, I3, I4, I5, I6, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 I2, a2 I3, a3 I4, a4 I5, a5 I6, a6 I7) {
							fn.(finishBundle7x0[typex.PaneInfo, I2, I3, I4, I5, I6, I7]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[context.Context, typex.PaneInfo, I3, I4, I5, I6, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, I3, I4, I5, I6, I7))
						return &caller7x0[context.Context, typex.PaneInfo, I3, I4, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, I3, I4, I5, I6, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 I3, a3 I4, a4 I5, a5 I6, a6 I7) {
							fn.(finishBundle7x0[context.Context, typex.PaneInfo, I3, I4, I5, I6, I7]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[[]typex.Window, I2, I3, I4, I5, I6, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, I2, I3, I4, I5, I6, I7))
						return &caller7x0[[]typex.Window, I2, I3, I4, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, I2, I3, I4, I5, I6, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 I2, a2 I3, a3 I4, a4 I5, a5 I6, a6 I7) {
							fn.(finishBundle7x0[[]typex.Window, I2, I3, I4, I5, I6, I7]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[context.Context, []typex.Window, I3, I4, I5, I6, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, I3, I4, I5, I6, I7))
						return &caller7x0[context.Context, []typex.Window, I3, I4, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, I3, I4, I5, I6, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 I3, a3 I4, a4 I5, a5 I6, a6 I7) {
							fn.(finishBundle7x0[context.Context, []typex.Window, I3, I4, I5, I6, I7]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[typex.PaneInfo, []typex.Window, I3, I4, I5, I6, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, I3, I4, I5, I6, I7))
						return &caller7x0[typex.PaneInfo, []typex.Window, I3, I4, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, I3, I4, I5, I6, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 I3, a3 I4, a4 I5, a5 I6, a6 I7) {
							fn.(finishBundle7x0[typex.PaneInfo, []typex.Window, I3, I4, I5, I6, I7]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[context.Context, typex.PaneInfo, []typex.Window, I4, I5, I6, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, I4, I5, I6, I7))
						return &caller7x0[context.Context, typex.PaneInfo, []typex.Window, I4, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, I4, I5, I6, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 I4, a4 I5, a5 I6, a6 I7) {
							fn.(finishBundle7x0[context.Context, typex.PaneInfo, []typex.Window, I4, I5, I6, I7]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[typex.EventTime, I2, I3, I4, I5, I6, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, I2, I3, I4, I5, I6, I7))
						return &caller7x0[typex.EventTime, I2, I3, I4, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, I2, I3, I4, I5, I6, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 I2, a2 I3, a3 I4, a4 I5, a5 I6, a6 I7) {
							fn.(finishBundle7x0[typex.EventTime, I2, I3, I4, I5, I6, I7]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[context.Context, typex.EventTime, I3, I4, I5, I6, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, I3, I4, I5, I6, I7))
						return &caller7x0[context.Context, typex.EventTime, I3, I4, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, I3, I4, I5, I6, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 I3, a3 I4, a4 I5, a5 I6, a6 I7) {
							fn.(finishBundle7x0[context.Context, typex.EventTime, I3, I4, I5, I6, I7]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[typex.PaneInfo, typex.EventTime, I3, I4, I5, I6, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, I3, I4, I5, I6, I7))
						return &caller7x0[typex.PaneInfo, typex.EventTime, I3, I4, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, I3, I4, I5, I6, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 I3, a3 I4, a4 I5, a5 I6, a6 I7) {
							fn.(finishBundle7x0[typex.PaneInfo, typex.EventTime, I3, I4, I5, I6, I7]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[context.Context, typex.PaneInfo, typex.EventTime, I4, I5, I6, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, I4, I5, I6, I7))
						return &caller7x0[context.Context, typex.PaneInfo, typex.EventTime, I4, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, I4, I5, I6, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 I4, a4 I5, a5 I6, a6 I7) {
							fn.(finishBundle7x0[context.Context, typex.PaneInfo, typex.EventTime, I4, I5, I6, I7]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[[]typex.Window, typex.EventTime, I3, I4, I5, I6, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, I3, I4, I5, I6, I7))
						return &caller7x0[[]typex.Window, typex.EventTime, I3, I4, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, I3, I4, I5, I6, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 I3, a3 I4, a4 I5, a5 I6, a6 I7) {
							fn.(finishBundle7x0[[]typex.Window, typex.EventTime, I3, I4, I5, I6, I7]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[context.Context, []typex.Window, typex.EventTime, I4, I5, I6, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, I4, I5, I6, I7))
						return &caller7x0[context.Context, []typex.Window, typex.EventTime, I4, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, I4, I5, I6, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 I4, a4 I5, a5 I6, a6 I7) {
							fn.(finishBundle7x0[context.Context, []typex.Window, typex.EventTime, I4, I5, I6, I7]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[typex.PaneInfo, []typex.Window, typex.EventTime, I4, I5, I6, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, I4, I5, I6, I7))
						return &caller7x0[typex.PaneInfo, []typex.Window, typex.EventTime, I4, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, I4, I5, I6, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 I4, a4 I5, a5 I6, a6 I7) {
							fn.(finishBundle7x0[typex.PaneInfo, []typex.Window, typex.EventTime, I4, I5, I6, I7]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I5, I6, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I5, I6, I7))
						return &caller7x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I5, I6, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 I5, a5 I6, a6 I7) {
							fn.(finishBundle7x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I5, I6, I7]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[typex.BundleFinalization, I2, I3, I4, I5, I6, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization, I2, I3, I4, I5, I6, I7))
						return &caller7x0[typex.BundleFinalization, I2, I3, I4, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization, I2, I3, I4, I5, I6, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization, a1 I2, a2 I3, a3 I4, a4 I5, a5 I6, a6 I7) {
							fn.(finishBundle7x0[typex.BundleFinalization, I2, I3, I4, I5, I6, I7]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[context.Context, typex.BundleFinalization, I3, I4, I5, I6, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization, I3, I4, I5, I6, I7))
						return &caller7x0[context.Context, typex.BundleFinalization, I3, I4, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization, I3, I4, I5, I6, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization, a2 I3, a3 I4, a4 I5, a5 I6, a6 I7) {
							fn.(finishBundle7x0[context.Context, typex.BundleFinalization, I3, I4, I5, I6, I7]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[typex.PaneInfo, typex.BundleFinalization, I3, I4, I5, I6, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization, I3, I4, I5, I6, I7))
						return &caller7x0[typex.PaneInfo, typex.BundleFinalization, I3, I4, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization, I3, I4, I5, I6, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization, a2 I3, a3 I4, a4 I5, a5 I6, a6 I7) {
							fn.(finishBundle7x0[typex.PaneInfo, typex.BundleFinalization, I3, I4, I5, I6, I7]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I4, I5, I6, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization, I4, I5, I6, I7))
						return &caller7x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I4, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization, I4, I5, I6, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization, a3 I4, a4 I5, a5 I6, a6 I7) {
							fn.(finishBundle7x0[context.Context, typex.PaneInfo, typex.BundleFinalization, I4, I5, I6, I7]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[[]typex.Window, typex.BundleFinalization, I3, I4, I5, I6, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization, I3, I4, I5, I6, I7))
						return &caller7x0[[]typex.Window, typex.BundleFinalization, I3, I4, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization, I3, I4, I5, I6, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization, a2 I3, a3 I4, a4 I5, a5 I6, a6 I7) {
							fn.(finishBundle7x0[[]typex.Window, typex.BundleFinalization, I3, I4, I5, I6, I7]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[context.Context, []typex.Window, typex.BundleFinalization, I4, I5, I6, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization, I4, I5, I6, I7))
						return &caller7x0[context.Context, []typex.Window, typex.BundleFinalization, I4, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization, I4, I5, I6, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization, a3 I4, a4 I5, a5 I6, a6 I7) {
							fn.(finishBundle7x0[context.Context, []typex.Window, typex.BundleFinalization, I4, I5, I6, I7]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4, I5, I6, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4, I5, I6, I7))
						return &caller7x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4, I5, I6, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization, a3 I4, a4 I5, a5 I6, a6 I7) {
							fn.(finishBundle7x0[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4, I5, I6, I7]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I5, I6, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I5, I6, I7))
						return &caller7x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I5, I6, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.BundleFinalization, a4 I5, a5 I6, a6 I7) {
							fn.(finishBundle7x0[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I5, I6, I7]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[typex.EventTime, typex.BundleFinalization, I3, I4, I5, I6, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization, I3, I4, I5, I6, I7))
						return &caller7x0[typex.EventTime, typex.BundleFinalization, I3, I4, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization, I3, I4, I5, I6, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization, a2 I3, a3 I4, a4 I5, a5 I6, a6 I7) {
							fn.(finishBundle7x0[typex.EventTime, typex.BundleFinalization, I3, I4, I5, I6, I7]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[context.Context, typex.EventTime, typex.BundleFinalization, I4, I5, I6, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization, I4, I5, I6, I7))
						return &caller7x0[context.Context, typex.EventTime, typex.BundleFinalization, I4, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization, I4, I5, I6, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I4, a4 I5, a5 I6, a6 I7) {
							fn.(finishBundle7x0[context.Context, typex.EventTime, typex.BundleFinalization, I4, I5, I6, I7]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4, I5, I6, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4, I5, I6, I7))
						return &caller7x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4, I5, I6, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I4, a4 I5, a5 I6, a6 I7) {
							fn.(finishBundle7x0[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4, I5, I6, I7]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I5, I6, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I5, I6, I7))
						return &caller7x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I5, I6, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I5, a5 I6, a6 I7) {
							fn.(finishBundle7x0[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I5, I6, I7]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5, I6, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5, I6, I7))
						return &caller7x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5, I6, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I4, a4 I5, a5 I6, a6 I7) {
							fn.(finishBundle7x0[[]typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5, I6, I7]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6, I7))
						return &caller7x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I5, a5 I6, a6 I7) {
							fn.(finishBundle7x0[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6, I7]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6, I7))
						return &caller7x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I5, a5 I6, a6 I7) {
							fn.(finishBundle7x0[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6, I7]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I6, I7]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I6, I7))
						return &caller7x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I6, I7]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I6, I7))(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 typex.BundleFinalization, a5 I6, a6 I7) {
							fn.(finishBundle7x0[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I6, I7]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				}
			case finishBundleOut == 1:
				if _, ok := doFn.(finishBundle7x1[I1, I2, I3, I4, I5, I6, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(I1, I2, I3, I4, I5, I6, I7) error)
						return &caller7x1[I1, I2, I3, I4, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(I1, I2, I3, I4, I5, I6, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 I1, a1 I2, a2 I3, a3 I4, a4 I5, a5 I6, a6 I7) error {
							return fn.(finishBundle7x1[I1, I2, I3, I4, I5, I6, I7, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[context.Context, I2, I3, I4, I5, I6, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, I2, I3, I4, I5, I6, I7) error)
						return &caller7x1[context.Context, I2, I3, I4, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, I2, I3, I4, I5, I6, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 I2, a2 I3, a3 I4, a4 I5, a5 I6, a6 I7) error {
							return fn.(finishBundle7x1[context.Context, I2, I3, I4, I5, I6, I7, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[typex.PaneInfo, I2, I3, I4, I5, I6, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, I2, I3, I4, I5, I6, I7) error)
						return &caller7x1[typex.PaneInfo, I2, I3, I4, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, I2, I3, I4, I5, I6, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 I2, a2 I3, a3 I4, a4 I5, a5 I6, a6 I7) error {
							return fn.(finishBundle7x1[typex.PaneInfo, I2, I3, I4, I5, I6, I7, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[context.Context, typex.PaneInfo, I3, I4, I5, I6, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, I3, I4, I5, I6, I7) error)
						return &caller7x1[context.Context, typex.PaneInfo, I3, I4, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, I3, I4, I5, I6, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 I3, a3 I4, a4 I5, a5 I6, a6 I7) error {
							return fn.(finishBundle7x1[context.Context, typex.PaneInfo, I3, I4, I5, I6, I7, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[[]typex.Window, I2, I3, I4, I5, I6, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, I2, I3, I4, I5, I6, I7) error)
						return &caller7x1[[]typex.Window, I2, I3, I4, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, I2, I3, I4, I5, I6, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 I2, a2 I3, a3 I4, a4 I5, a5 I6, a6 I7) error {
							return fn.(finishBundle7x1[[]typex.Window, I2, I3, I4, I5, I6, I7, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[context.Context, []typex.Window, I3, I4, I5, I6, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, I3, I4, I5, I6, I7) error)
						return &caller7x1[context.Context, []typex.Window, I3, I4, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, I3, I4, I5, I6, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 I3, a3 I4, a4 I5, a5 I6, a6 I7) error {
							return fn.(finishBundle7x1[context.Context, []typex.Window, I3, I4, I5, I6, I7, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[typex.PaneInfo, []typex.Window, I3, I4, I5, I6, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, I3, I4, I5, I6, I7) error)
						return &caller7x1[typex.PaneInfo, []typex.Window, I3, I4, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, I3, I4, I5, I6, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 I3, a3 I4, a4 I5, a5 I6, a6 I7) error {
							return fn.(finishBundle7x1[typex.PaneInfo, []typex.Window, I3, I4, I5, I6, I7, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[context.Context, typex.PaneInfo, []typex.Window, I4, I5, I6, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, I4, I5, I6, I7) error)
						return &caller7x1[context.Context, typex.PaneInfo, []typex.Window, I4, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, I4, I5, I6, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 I4, a4 I5, a5 I6, a6 I7) error {
							return fn.(finishBundle7x1[context.Context, typex.PaneInfo, []typex.Window, I4, I5, I6, I7, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[typex.EventTime, I2, I3, I4, I5, I6, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, I2, I3, I4, I5, I6, I7) error)
						return &caller7x1[typex.EventTime, I2, I3, I4, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, I2, I3, I4, I5, I6, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 I2, a2 I3, a3 I4, a4 I5, a5 I6, a6 I7) error {
							return fn.(finishBundle7x1[typex.EventTime, I2, I3, I4, I5, I6, I7, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[context.Context, typex.EventTime, I3, I4, I5, I6, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, I3, I4, I5, I6, I7) error)
						return &caller7x1[context.Context, typex.EventTime, I3, I4, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, I3, I4, I5, I6, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 I3, a3 I4, a4 I5, a5 I6, a6 I7) error {
							return fn.(finishBundle7x1[context.Context, typex.EventTime, I3, I4, I5, I6, I7, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[typex.PaneInfo, typex.EventTime, I3, I4, I5, I6, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, I3, I4, I5, I6, I7) error)
						return &caller7x1[typex.PaneInfo, typex.EventTime, I3, I4, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, I3, I4, I5, I6, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 I3, a3 I4, a4 I5, a5 I6, a6 I7) error {
							return fn.(finishBundle7x1[typex.PaneInfo, typex.EventTime, I3, I4, I5, I6, I7, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[context.Context, typex.PaneInfo, typex.EventTime, I4, I5, I6, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, I4, I5, I6, I7) error)
						return &caller7x1[context.Context, typex.PaneInfo, typex.EventTime, I4, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, I4, I5, I6, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 I4, a4 I5, a5 I6, a6 I7) error {
							return fn.(finishBundle7x1[context.Context, typex.PaneInfo, typex.EventTime, I4, I5, I6, I7, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[[]typex.Window, typex.EventTime, I3, I4, I5, I6, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, I3, I4, I5, I6, I7) error)
						return &caller7x1[[]typex.Window, typex.EventTime, I3, I4, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, I3, I4, I5, I6, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 I3, a3 I4, a4 I5, a5 I6, a6 I7) error {
							return fn.(finishBundle7x1[[]typex.Window, typex.EventTime, I3, I4, I5, I6, I7, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[context.Context, []typex.Window, typex.EventTime, I4, I5, I6, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, I4, I5, I6, I7) error)
						return &caller7x1[context.Context, []typex.Window, typex.EventTime, I4, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, I4, I5, I6, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 I4, a4 I5, a5 I6, a6 I7) error {
							return fn.(finishBundle7x1[context.Context, []typex.Window, typex.EventTime, I4, I5, I6, I7, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[typex.PaneInfo, []typex.Window, typex.EventTime, I4, I5, I6, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, I4, I5, I6, I7) error)
						return &caller7x1[typex.PaneInfo, []typex.Window, typex.EventTime, I4, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, I4, I5, I6, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 I4, a4 I5, a5 I6, a6 I7) error {
							return fn.(finishBundle7x1[typex.PaneInfo, []typex.Window, typex.EventTime, I4, I5, I6, I7, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I5, I6, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I5, I6, I7) error)
						return &caller7x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I5, I6, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 I5, a5 I6, a6 I7) error {
							return fn.(finishBundle7x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, I5, I6, I7, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[typex.BundleFinalization, I2, I3, I4, I5, I6, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.BundleFinalization, I2, I3, I4, I5, I6, I7) error)
						return &caller7x1[typex.BundleFinalization, I2, I3, I4, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.BundleFinalization, I2, I3, I4, I5, I6, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.BundleFinalization, a1 I2, a2 I3, a3 I4, a4 I5, a5 I6, a6 I7) error {
							return fn.(finishBundle7x1[typex.BundleFinalization, I2, I3, I4, I5, I6, I7, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[context.Context, typex.BundleFinalization, I3, I4, I5, I6, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.BundleFinalization, I3, I4, I5, I6, I7) error)
						return &caller7x1[context.Context, typex.BundleFinalization, I3, I4, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.BundleFinalization, I3, I4, I5, I6, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.BundleFinalization, a2 I3, a3 I4, a4 I5, a5 I6, a6 I7) error {
							return fn.(finishBundle7x1[context.Context, typex.BundleFinalization, I3, I4, I5, I6, I7, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[typex.PaneInfo, typex.BundleFinalization, I3, I4, I5, I6, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.BundleFinalization, I3, I4, I5, I6, I7) error)
						return &caller7x1[typex.PaneInfo, typex.BundleFinalization, I3, I4, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.BundleFinalization, I3, I4, I5, I6, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.BundleFinalization, a2 I3, a3 I4, a4 I5, a5 I6, a6 I7) error {
							return fn.(finishBundle7x1[typex.PaneInfo, typex.BundleFinalization, I3, I4, I5, I6, I7, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I4, I5, I6, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.BundleFinalization, I4, I5, I6, I7) error)
						return &caller7x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I4, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.BundleFinalization, I4, I5, I6, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.BundleFinalization, a3 I4, a4 I5, a5 I6, a6 I7) error {
							return fn.(finishBundle7x1[context.Context, typex.PaneInfo, typex.BundleFinalization, I4, I5, I6, I7, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[[]typex.Window, typex.BundleFinalization, I3, I4, I5, I6, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.BundleFinalization, I3, I4, I5, I6, I7) error)
						return &caller7x1[[]typex.Window, typex.BundleFinalization, I3, I4, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.BundleFinalization, I3, I4, I5, I6, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.BundleFinalization, a2 I3, a3 I4, a4 I5, a5 I6, a6 I7) error {
							return fn.(finishBundle7x1[[]typex.Window, typex.BundleFinalization, I3, I4, I5, I6, I7, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[context.Context, []typex.Window, typex.BundleFinalization, I4, I5, I6, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.BundleFinalization, I4, I5, I6, I7) error)
						return &caller7x1[context.Context, []typex.Window, typex.BundleFinalization, I4, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.BundleFinalization, I4, I5, I6, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.BundleFinalization, a3 I4, a4 I5, a5 I6, a6 I7) error {
							return fn.(finishBundle7x1[context.Context, []typex.Window, typex.BundleFinalization, I4, I5, I6, I7, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4, I5, I6, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4, I5, I6, I7) error)
						return &caller7x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4, I5, I6, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.BundleFinalization, a3 I4, a4 I5, a5 I6, a6 I7) error {
							return fn.(finishBundle7x1[typex.PaneInfo, []typex.Window, typex.BundleFinalization, I4, I5, I6, I7, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I5, I6, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I5, I6, I7) error)
						return &caller7x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I5, I6, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.BundleFinalization, a4 I5, a5 I6, a6 I7) error {
							return fn.(finishBundle7x1[context.Context, typex.PaneInfo, []typex.Window, typex.BundleFinalization, I5, I6, I7, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[typex.EventTime, typex.BundleFinalization, I3, I4, I5, I6, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.EventTime, typex.BundleFinalization, I3, I4, I5, I6, I7) error)
						return &caller7x1[typex.EventTime, typex.BundleFinalization, I3, I4, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.EventTime, typex.BundleFinalization, I3, I4, I5, I6, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.EventTime, a1 typex.BundleFinalization, a2 I3, a3 I4, a4 I5, a5 I6, a6 I7) error {
							return fn.(finishBundle7x1[typex.EventTime, typex.BundleFinalization, I3, I4, I5, I6, I7, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[context.Context, typex.EventTime, typex.BundleFinalization, I4, I5, I6, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.EventTime, typex.BundleFinalization, I4, I5, I6, I7) error)
						return &caller7x1[context.Context, typex.EventTime, typex.BundleFinalization, I4, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.EventTime, typex.BundleFinalization, I4, I5, I6, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I4, a4 I5, a5 I6, a6 I7) error {
							return fn.(finishBundle7x1[context.Context, typex.EventTime, typex.BundleFinalization, I4, I5, I6, I7, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4, I5, I6, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4, I5, I6, I7) error)
						return &caller7x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4, I5, I6, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I4, a4 I5, a5 I6, a6 I7) error {
							return fn.(finishBundle7x1[typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I4, I5, I6, I7, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I5, I6, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I5, I6, I7) error)
						return &caller7x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I5, I6, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I5, a5 I6, a6 I7) error {
							return fn.(finishBundle7x1[context.Context, typex.PaneInfo, typex.EventTime, typex.BundleFinalization, I5, I6, I7, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5, I6, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func([]typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5, I6, I7) error)
						return &caller7x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func([]typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5, I6, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 []typex.Window, a1 typex.EventTime, a2 typex.BundleFinalization, a3 I4, a4 I5, a5 I6, a6 I7) error {
							return fn.(finishBundle7x1[[]typex.Window, typex.EventTime, typex.BundleFinalization, I4, I5, I6, I7, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6, I7) error)
						return &caller7x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I5, a5 I6, a6 I7) error {
							return fn.(finishBundle7x1[context.Context, []typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6, I7, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6, I7) error)
						return &caller7x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 typex.PaneInfo, a1 []typex.Window, a2 typex.EventTime, a3 typex.BundleFinalization, a4 I5, a5 I6, a6 I7) error {
							return fn.(finishBundle7x1[typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I5, I6, I7, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				} else if _, ok := doFn.(finishBundle7x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I6, I7, error]); ok {
					finishBundleCaller := func(fn interface{}) reflectx.Func {
						f := fn.(func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I6, I7) error)
						return &caller7x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I6, I7, error]{fn: f}
					}
					reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I6, I7) error)(nil)).Elem(), finishBundleCaller)

					return func(fn interface{}) reflectx.Func {
						return reflectx.MakeFunc(func(a0 context.Context, a1 typex.PaneInfo, a2 []typex.Window, a3 typex.EventTime, a4 typex.BundleFinalization, a5 I6, a6 I7) error {
							return fn.(finishBundle7x1[context.Context, typex.PaneInfo, []typex.Window, typex.EventTime, typex.BundleFinalization, I6, I7, error]).FinishBundle(a0, a1, a2, a3, a4, a5, a6)
						})
					}
				}
			default:
				panic("Invalid signature for FinishBundle")
			}

		default:
			panic("Invalid signature for FinishBundle")
		}
	}
	return nil
}

func buildSetupWrapper(doFn interface{}) func(interface{}) reflectx.Func {
	if _, ok := doFn.(setup0x0); ok {
		setupCaller := func(fn interface{}) reflectx.Func {
			f := fn.(func())
			return &caller0x0{fn: f}
		}
		reflectx.RegisterFunc(reflect.TypeOf((*func())(nil)).Elem(), setupCaller)

		return func(fn interface{}) reflectx.Func {
			return reflectx.MakeFunc(func() {
				fn.(setup0x0).Setup()
			})
		}
	} else if _, ok := doFn.(setup1x0); ok {
		setupCaller := func(fn interface{}) reflectx.Func {
			f := fn.(func(context.Context))
			return &caller1x0[context.Context]{fn: f}
		}
		reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context))(nil)).Elem(), setupCaller)

		return func(fn interface{}) reflectx.Func {
			return reflectx.MakeFunc(func(a0 context.Context) {
				fn.(setup1x0).Setup(a0)
			})
		}
	} else if _, ok := doFn.(setup0x1); ok {
		setupCaller := func(fn interface{}) reflectx.Func {
			f := fn.(func() error)
			return &caller0x1[error]{fn: f}
		}
		reflectx.RegisterFunc(reflect.TypeOf((*func() error)(nil)).Elem(), setupCaller)

		return func(fn interface{}) reflectx.Func {
			return reflectx.MakeFunc(func() error {
				return fn.(setup0x1).Setup()
			})
		}
	} else if _, ok := doFn.(setup1x1); ok {
		setupCaller := func(fn interface{}) reflectx.Func {
			f := fn.(func(context.Context) error)
			return &caller1x1[context.Context, error]{fn: f}
		}
		reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context) error)(nil)).Elem(), setupCaller)

		return func(fn interface{}) reflectx.Func {
			return reflectx.MakeFunc(func(a0 context.Context) error {
				return fn.(setup1x1).Setup(a0)
			})
		}
	}

	return nil
}

func buildTeardownWrapper(doFn interface{}) func(interface{}) reflectx.Func {
	if _, ok := doFn.(teardown0x0); ok {
		teardownCaller := func(fn interface{}) reflectx.Func {
			f := fn.(func())
			return &caller0x0{fn: f}
		}
		reflectx.RegisterFunc(reflect.TypeOf((*func())(nil)).Elem(), teardownCaller)

		return func(fn interface{}) reflectx.Func {
			return reflectx.MakeFunc(func() {
				fn.(teardown0x0).Teardown()
			})
		}
	} else if _, ok := doFn.(teardown1x0); ok {
		teardownCaller := func(fn interface{}) reflectx.Func {
			f := fn.(func(context.Context))
			return &caller1x0[context.Context]{fn: f}
		}
		reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context))(nil)).Elem(), teardownCaller)

		return func(fn interface{}) reflectx.Func {
			return reflectx.MakeFunc(func(a0 context.Context) {
				fn.(teardown1x0).Teardown(a0)
			})
		}
	} else if _, ok := doFn.(teardown0x1); ok {
		teardownCaller := func(fn interface{}) reflectx.Func {
			f := fn.(func() error)
			return &caller0x1[error]{fn: f}
		}
		reflectx.RegisterFunc(reflect.TypeOf((*func() error)(nil)).Elem(), teardownCaller)

		return func(fn interface{}) reflectx.Func {
			return reflectx.MakeFunc(func() error {
				return fn.(teardown0x1).Teardown()
			})
		}
	} else if _, ok := doFn.(teardown1x1); ok {
		teardownCaller := func(fn interface{}) reflectx.Func {
			f := fn.(func(context.Context) error)
			return &caller1x1[context.Context, error]{fn: f}
		}
		reflectx.RegisterFunc(reflect.TypeOf((*func(context.Context) error)(nil)).Elem(), teardownCaller)

		return func(fn interface{}) reflectx.Func {
			return reflectx.MakeFunc(func(a0 context.Context) error {
				return fn.(teardown1x1).Teardown(a0)
			})
		}
	}

	return nil
}

type doFn0x0 interface {
	ProcessElement()
}

type caller0x0 struct {
	fn func()
}

func (c *caller0x0) Name() string {
	return reflectx.FunctionName(c.fn)
}

func (c *caller0x0) Type() reflect.Type {
	return reflect.TypeOf(c.fn)
}

func (c *caller0x0) Call(args []interface{}) []interface{} {
	c.fn()
	return []interface{}{}
}

func (c *caller0x0) Call0x0() {
	c.fn()
}

func registerDoFn0x0StructWrappersAndFuncs(doFn doFn0x0) {
	processElementCaller := func(fn interface{}) reflectx.Func {
		f := fn.(func())
		return &caller0x0{fn: f}
	}
	reflectx.RegisterFunc(reflect.TypeOf((*func())(nil)).Elem(), processElementCaller)
	processElementWrapper := func(fn interface{}) reflectx.Func {
		return reflectx.MakeFunc(func() {
			fn.(doFn0x0).ProcessElement()
		})
	}
	startBundleWrapper := buildStartBundleWrapper0(doFn)
	finishBundleWrapper := buildFinishBundleWrapper0(doFn)
	setupWrapper := buildSetupWrapper(doFn)
	teardownWrapper := buildTeardownWrapper(doFn)

	wrapperFn := func(fn interface{}) map[string]reflectx.Func {
		m := map[string]reflectx.Func{}
		if processElementWrapper != nil {
			m["ProcessElement"] = processElementWrapper(fn)
		}
		if startBundleWrapper != nil {
			m["StartBundle"] = startBundleWrapper(fn)
		}
		if finishBundleWrapper != nil {
			m["FinishBundle"] = finishBundleWrapper(fn)
		}
		if setupWrapper != nil {
			m["Setup"] = setupWrapper(fn)
		}
		if teardownWrapper != nil {
			m["Teardown"] = teardownWrapper(fn)
		}

		return m
	}
	reflectx.RegisterStructWrapper(reflect.TypeOf(doFn).Elem(), wrapperFn)
}

// RegisterDoFn0x0 registers your DoFn to optimize execution at runtime.
func RegisterDoFn0x0(doFn doFn0x0) {
	registerDoFnTypes(doFn)
	registerDoFn0x0StructWrappersAndFuncs(doFn)
}

type doFn1x0[I0 any] interface {
	ProcessElement(i0 I0)
}

type caller1x0[I0 any] struct {
	fn func(I0)
}

func (c *caller1x0[I0]) Name() string {
	return reflectx.FunctionName(c.fn)
}

func (c *caller1x0[I0]) Type() reflect.Type {
	return reflect.TypeOf(c.fn)
}

func (c *caller1x0[I0]) Call(args []interface{}) []interface{} {
	c.fn(args[0].(I0))
	return []interface{}{}
}

func (c *caller1x0[I0]) Call1x0(arg0 I0) {
	c.fn(arg0)
}

func registerDoFn1x0StructWrappersAndFuncs[I0 any](doFn doFn1x0[I0]) {
	processElementCaller := func(fn interface{}) reflectx.Func {
		f := fn.(func(I0))
		return &caller1x0[I0]{fn: f}
	}
	reflectx.RegisterFunc(reflect.TypeOf((*func(I0))(nil)).Elem(), processElementCaller)
	processElementWrapper := func(fn interface{}) reflectx.Func {
		return reflectx.MakeFunc(func(a0 I0) {
			fn.(doFn1x0[I0]).ProcessElement(a0)
		})
	}
	startBundleWrapper := buildStartBundleWrapper1[I0](doFn)
	finishBundleWrapper := buildFinishBundleWrapper1[I0](doFn)
	setupWrapper := buildSetupWrapper(doFn)
	teardownWrapper := buildTeardownWrapper(doFn)

	wrapperFn := func(fn interface{}) map[string]reflectx.Func {
		m := map[string]reflectx.Func{}
		if processElementWrapper != nil {
			m["ProcessElement"] = processElementWrapper(fn)
		}
		if startBundleWrapper != nil {
			m["StartBundle"] = startBundleWrapper(fn)
		}
		if finishBundleWrapper != nil {
			m["FinishBundle"] = finishBundleWrapper(fn)
		}
		if setupWrapper != nil {
			m["Setup"] = setupWrapper(fn)
		}
		if teardownWrapper != nil {
			m["Teardown"] = teardownWrapper(fn)
		}

		return m
	}
	reflectx.RegisterStructWrapper(reflect.TypeOf(doFn).Elem(), wrapperFn)
}

// RegisterDoFn1x0[I0 any] registers your DoFn to optimize execution at runtime.
// DoFn input and output parameter types should be provided in order as the generic constraints.
func RegisterDoFn1x0[I0 any](doFn doFn1x0[I0]) {
	registerDoFnTypes(doFn)
	registerDoFn1x0StructWrappersAndFuncs[I0](doFn)
}

type doFn2x0[I0, I1 any] interface {
	ProcessElement(i0 I0, i1 I1)
}

type caller2x0[I0, I1 any] struct {
	fn func(I0, I1)
}

func (c *caller2x0[I0, I1]) Name() string {
	return reflectx.FunctionName(c.fn)
}

func (c *caller2x0[I0, I1]) Type() reflect.Type {
	return reflect.TypeOf(c.fn)
}

func (c *caller2x0[I0, I1]) Call(args []interface{}) []interface{} {
	c.fn(args[0].(I0), args[1].(I1))
	return []interface{}{}
}

func (c *caller2x0[I0, I1]) Call2x0(arg0 I0, arg1 I1) {
	c.fn(arg0, arg1)
}

func registerDoFn2x0StructWrappersAndFuncs[I0, I1 any](doFn doFn2x0[I0, I1]) {
	processElementCaller := func(fn interface{}) reflectx.Func {
		f := fn.(func(I0, I1))
		return &caller2x0[I0, I1]{fn: f}
	}
	reflectx.RegisterFunc(reflect.TypeOf((*func(I0, I1))(nil)).Elem(), processElementCaller)
	processElementWrapper := func(fn interface{}) reflectx.Func {
		return reflectx.MakeFunc(func(a0 I0, a1 I1) {
			fn.(doFn2x0[I0, I1]).ProcessElement(a0, a1)
		})
	}
	startBundleWrapper := buildStartBundleWrapper2[I0, I1](doFn)
	finishBundleWrapper := buildFinishBundleWrapper2[I0, I1](doFn)
	setupWrapper := buildSetupWrapper(doFn)
	teardownWrapper := buildTeardownWrapper(doFn)

	wrapperFn := func(fn interface{}) map[string]reflectx.Func {
		m := map[string]reflectx.Func{}
		if processElementWrapper != nil {
			m["ProcessElement"] = processElementWrapper(fn)
		}
		if startBundleWrapper != nil {
			m["StartBundle"] = startBundleWrapper(fn)
		}
		if finishBundleWrapper != nil {
			m["FinishBundle"] = finishBundleWrapper(fn)
		}
		if setupWrapper != nil {
			m["Setup"] = setupWrapper(fn)
		}
		if teardownWrapper != nil {
			m["Teardown"] = teardownWrapper(fn)
		}

		return m
	}
	reflectx.RegisterStructWrapper(reflect.TypeOf(doFn).Elem(), wrapperFn)
}

// RegisterDoFn2x0[I0, I1 any] registers your DoFn to optimize execution at runtime.
// DoFn input and output parameter types should be provided in order as the generic constraints.
func RegisterDoFn2x0[I0, I1 any](doFn doFn2x0[I0, I1]) {
	registerDoFnTypes(doFn)
	registerDoFn2x0StructWrappersAndFuncs[I0, I1](doFn)
}

type doFn3x0[I0, I1, I2 any] interface {
	ProcessElement(i0 I0, i1 I1, i2 I2)
}

type caller3x0[I0, I1, I2 any] struct {
	fn func(I0, I1, I2)
}

func (c *caller3x0[I0, I1, I2]) Name() string {
	return reflectx.FunctionName(c.fn)
}

func (c *caller3x0[I0, I1, I2]) Type() reflect.Type {
	return reflect.TypeOf(c.fn)
}

func (c *caller3x0[I0, I1, I2]) Call(args []interface{}) []interface{} {
	c.fn(args[0].(I0), args[1].(I1), args[2].(I2))
	return []interface{}{}
}

func (c *caller3x0[I0, I1, I2]) Call3x0(arg0 I0, arg1 I1, arg2 I2) {
	c.fn(arg0, arg1, arg2)
}

func registerDoFn3x0StructWrappersAndFuncs[I0, I1, I2 any](doFn doFn3x0[I0, I1, I2]) {
	processElementCaller := func(fn interface{}) reflectx.Func {
		f := fn.(func(I0, I1, I2))
		return &caller3x0[I0, I1, I2]{fn: f}
	}
	reflectx.RegisterFunc(reflect.TypeOf((*func(I0, I1, I2))(nil)).Elem(), processElementCaller)
	processElementWrapper := func(fn interface{}) reflectx.Func {
		return reflectx.MakeFunc(func(a0 I0, a1 I1, a2 I2) {
			fn.(doFn3x0[I0, I1, I2]).ProcessElement(a0, a1, a2)
		})
	}
	startBundleWrapper := buildStartBundleWrapper3[I0, I1, I2](doFn)
	finishBundleWrapper := buildFinishBundleWrapper3[I0, I1, I2](doFn)
	setupWrapper := buildSetupWrapper(doFn)
	teardownWrapper := buildTeardownWrapper(doFn)

	wrapperFn := func(fn interface{}) map[string]reflectx.Func {
		m := map[string]reflectx.Func{}
		if processElementWrapper != nil {
			m["ProcessElement"] = processElementWrapper(fn)
		}
		if startBundleWrapper != nil {
			m["StartBundle"] = startBundleWrapper(fn)
		}
		if finishBundleWrapper != nil {
			m["FinishBundle"] = finishBundleWrapper(fn)
		}
		if setupWrapper != nil {
			m["Setup"] = setupWrapper(fn)
		}
		if teardownWrapper != nil {
			m["Teardown"] = teardownWrapper(fn)
		}

		return m
	}
	reflectx.RegisterStructWrapper(reflect.TypeOf(doFn).Elem(), wrapperFn)
}

// RegisterDoFn3x0[I0, I1, I2 any] registers your DoFn to optimize execution at runtime.
// DoFn input and output parameter types should be provided in order as the generic constraints.
func RegisterDoFn3x0[I0, I1, I2 any](doFn doFn3x0[I0, I1, I2]) {
	registerDoFnTypes(doFn)
	registerDoFn3x0StructWrappersAndFuncs[I0, I1, I2](doFn)
}

type doFn4x0[I0, I1, I2, I3 any] interface {
	ProcessElement(i0 I0, i1 I1, i2 I2, i3 I3)
}

type caller4x0[I0, I1, I2, I3 any] struct {
	fn func(I0, I1, I2, I3)
}

func (c *caller4x0[I0, I1, I2, I3]) Name() string {
	return reflectx.FunctionName(c.fn)
}

func (c *caller4x0[I0, I1, I2, I3]) Type() reflect.Type {
	return reflect.TypeOf(c.fn)
}

func (c *caller4x0[I0, I1, I2, I3]) Call(args []interface{}) []interface{} {
	c.fn(args[0].(I0), args[1].(I1), args[2].(I2), args[3].(I3))
	return []interface{}{}
}

func (c *caller4x0[I0, I1, I2, I3]) Call4x0(arg0 I0, arg1 I1, arg2 I2, arg3 I3) {
	c.fn(arg0, arg1, arg2, arg3)
}

func registerDoFn4x0StructWrappersAndFuncs[I0, I1, I2, I3 any](doFn doFn4x0[I0, I1, I2, I3]) {
	processElementCaller := func(fn interface{}) reflectx.Func {
		f := fn.(func(I0, I1, I2, I3))
		return &caller4x0[I0, I1, I2, I3]{fn: f}
	}
	reflectx.RegisterFunc(reflect.TypeOf((*func(I0, I1, I2, I3))(nil)).Elem(), processElementCaller)
	processElementWrapper := func(fn interface{}) reflectx.Func {
		return reflectx.MakeFunc(func(a0 I0, a1 I1, a2 I2, a3 I3) {
			fn.(doFn4x0[I0, I1, I2, I3]).ProcessElement(a0, a1, a2, a3)
		})
	}
	startBundleWrapper := buildStartBundleWrapper4[I0, I1, I2, I3](doFn)
	finishBundleWrapper := buildFinishBundleWrapper4[I0, I1, I2, I3](doFn)
	setupWrapper := buildSetupWrapper(doFn)
	teardownWrapper := buildTeardownWrapper(doFn)

	wrapperFn := func(fn interface{}) map[string]reflectx.Func {
		m := map[string]reflectx.Func{}
		if processElementWrapper != nil {
			m["ProcessElement"] = processElementWrapper(fn)
		}
		if startBundleWrapper != nil {
			m["StartBundle"] = startBundleWrapper(fn)
		}
		if finishBundleWrapper != nil {
			m["FinishBundle"] = finishBundleWrapper(fn)
		}
		if setupWrapper != nil {
			m["Setup"] = setupWrapper(fn)
		}
		if teardownWrapper != nil {
			m["Teardown"] = teardownWrapper(fn)
		}

		return m
	}
	reflectx.RegisterStructWrapper(reflect.TypeOf(doFn).Elem(), wrapperFn)
}

// RegisterDoFn4x0[I0, I1, I2, I3 any] registers your DoFn to optimize execution at runtime.
// DoFn input and output parameter types should be provided in order as the generic constraints.
func RegisterDoFn4x0[I0, I1, I2, I3 any](doFn doFn4x0[I0, I1, I2, I3]) {
	registerDoFnTypes(doFn)
	registerDoFn4x0StructWrappersAndFuncs[I0, I1, I2, I3](doFn)
}

type doFn5x0[I0, I1, I2, I3, I4 any] interface {
	ProcessElement(i0 I0, i1 I1, i2 I2, i3 I3, i4 I4)
}

type caller5x0[I0, I1, I2, I3, I4 any] struct {
	fn func(I0, I1, I2, I3, I4)
}

func (c *caller5x0[I0, I1, I2, I3, I4]) Name() string {
	return reflectx.FunctionName(c.fn)
}

func (c *caller5x0[I0, I1, I2, I3, I4]) Type() reflect.Type {
	return reflect.TypeOf(c.fn)
}

func (c *caller5x0[I0, I1, I2, I3, I4]) Call(args []interface{}) []interface{} {
	c.fn(args[0].(I0), args[1].(I1), args[2].(I2), args[3].(I3), args[4].(I4))
	return []interface{}{}
}

func (c *caller5x0[I0, I1, I2, I3, I4]) Call5x0(arg0 I0, arg1 I1, arg2 I2, arg3 I3, arg4 I4) {
	c.fn(arg0, arg1, arg2, arg3, arg4)
}

func registerDoFn5x0StructWrappersAndFuncs[I0, I1, I2, I3, I4 any](doFn doFn5x0[I0, I1, I2, I3, I4]) {
	processElementCaller := func(fn interface{}) reflectx.Func {
		f := fn.(func(I0, I1, I2, I3, I4))
		return &caller5x0[I0, I1, I2, I3, I4]{fn: f}
	}
	reflectx.RegisterFunc(reflect.TypeOf((*func(I0, I1, I2, I3, I4))(nil)).Elem(), processElementCaller)
	processElementWrapper := func(fn interface{}) reflectx.Func {
		return reflectx.MakeFunc(func(a0 I0, a1 I1, a2 I2, a3 I3, a4 I4) {
			fn.(doFn5x0[I0, I1, I2, I3, I4]).ProcessElement(a0, a1, a2, a3, a4)
		})
	}
	startBundleWrapper := buildStartBundleWrapper5[I0, I1, I2, I3, I4](doFn)
	finishBundleWrapper := buildFinishBundleWrapper5[I0, I1, I2, I3, I4](doFn)
	setupWrapper := buildSetupWrapper(doFn)
	teardownWrapper := buildTeardownWrapper(doFn)

	wrapperFn := func(fn interface{}) map[string]reflectx.Func {
		m := map[string]reflectx.Func{}
		if processElementWrapper != nil {
			m["ProcessElement"] = processElementWrapper(fn)
		}
		if startBundleWrapper != nil {
			m["StartBundle"] = startBundleWrapper(fn)
		}
		if finishBundleWrapper != nil {
			m["FinishBundle"] = finishBundleWrapper(fn)
		}
		if setupWrapper != nil {
			m["Setup"] = setupWrapper(fn)
		}
		if teardownWrapper != nil {
			m["Teardown"] = teardownWrapper(fn)
		}

		return m
	}
	reflectx.RegisterStructWrapper(reflect.TypeOf(doFn).Elem(), wrapperFn)
}

// RegisterDoFn5x0[I0, I1, I2, I3, I4 any] registers your DoFn to optimize execution at runtime.
// DoFn input and output parameter types should be provided in order as the generic constraints.
func RegisterDoFn5x0[I0, I1, I2, I3, I4 any](doFn doFn5x0[I0, I1, I2, I3, I4]) {
	registerDoFnTypes(doFn)
	registerDoFn5x0StructWrappersAndFuncs[I0, I1, I2, I3, I4](doFn)
}

type doFn6x0[I0, I1, I2, I3, I4, I5 any] interface {
	ProcessElement(i0 I0, i1 I1, i2 I2, i3 I3, i4 I4, i5 I5)
}

type caller6x0[I0, I1, I2, I3, I4, I5 any] struct {
	fn func(I0, I1, I2, I3, I4, I5)
}

func (c *caller6x0[I0, I1, I2, I3, I4, I5]) Name() string {
	return reflectx.FunctionName(c.fn)
}

func (c *caller6x0[I0, I1, I2, I3, I4, I5]) Type() reflect.Type {
	return reflect.TypeOf(c.fn)
}

func (c *caller6x0[I0, I1, I2, I3, I4, I5]) Call(args []interface{}) []interface{} {
	c.fn(args[0].(I0), args[1].(I1), args[2].(I2), args[3].(I3), args[4].(I4), args[5].(I5))
	return []interface{}{}
}

func (c *caller6x0[I0, I1, I2, I3, I4, I5]) Call6x0(arg0 I0, arg1 I1, arg2 I2, arg3 I3, arg4 I4, arg5 I5) {
	c.fn(arg0, arg1, arg2, arg3, arg4, arg5)
}

func registerDoFn6x0StructWrappersAndFuncs[I0, I1, I2, I3, I4, I5 any](doFn doFn6x0[I0, I1, I2, I3, I4, I5]) {
	processElementCaller := func(fn interface{}) reflectx.Func {
		f := fn.(func(I0, I1, I2, I3, I4, I5))
		return &caller6x0[I0, I1, I2, I3, I4, I5]{fn: f}
	}
	reflectx.RegisterFunc(reflect.TypeOf((*func(I0, I1, I2, I3, I4, I5))(nil)).Elem(), processElementCaller)
	processElementWrapper := func(fn interface{}) reflectx.Func {
		return reflectx.MakeFunc(func(a0 I0, a1 I1, a2 I2, a3 I3, a4 I4, a5 I5) {
			fn.(doFn6x0[I0, I1, I2, I3, I4, I5]).ProcessElement(a0, a1, a2, a3, a4, a5)
		})
	}
	startBundleWrapper := buildStartBundleWrapper6[I0, I1, I2, I3, I4, I5](doFn)
	finishBundleWrapper := buildFinishBundleWrapper6[I0, I1, I2, I3, I4, I5](doFn)
	setupWrapper := buildSetupWrapper(doFn)
	teardownWrapper := buildTeardownWrapper(doFn)

	wrapperFn := func(fn interface{}) map[string]reflectx.Func {
		m := map[string]reflectx.Func{}
		if processElementWrapper != nil {
			m["ProcessElement"] = processElementWrapper(fn)
		}
		if startBundleWrapper != nil {
			m["StartBundle"] = startBundleWrapper(fn)
		}
		if finishBundleWrapper != nil {
			m["FinishBundle"] = finishBundleWrapper(fn)
		}
		if setupWrapper != nil {
			m["Setup"] = setupWrapper(fn)
		}
		if teardownWrapper != nil {
			m["Teardown"] = teardownWrapper(fn)
		}

		return m
	}
	reflectx.RegisterStructWrapper(reflect.TypeOf(doFn).Elem(), wrapperFn)
}

// RegisterDoFn6x0[I0, I1, I2, I3, I4, I5 any] registers your DoFn to optimize execution at runtime.
// DoFn input and output parameter types should be provided in order as the generic constraints.
func RegisterDoFn6x0[I0, I1, I2, I3, I4, I5 any](doFn doFn6x0[I0, I1, I2, I3, I4, I5]) {
	registerDoFnTypes(doFn)
	registerDoFn6x0StructWrappersAndFuncs[I0, I1, I2, I3, I4, I5](doFn)
}

type doFn7x0[I0, I1, I2, I3, I4, I5, I6 any] interface {
	ProcessElement(i0 I0, i1 I1, i2 I2, i3 I3, i4 I4, i5 I5, i6 I6)
}

type caller7x0[I0, I1, I2, I3, I4, I5, I6 any] struct {
	fn func(I0, I1, I2, I3, I4, I5, I6)
}

func (c *caller7x0[I0, I1, I2, I3, I4, I5, I6]) Name() string {
	return reflectx.FunctionName(c.fn)
}

func (c *caller7x0[I0, I1, I2, I3, I4, I5, I6]) Type() reflect.Type {
	return reflect.TypeOf(c.fn)
}

func (c *caller7x0[I0, I1, I2, I3, I4, I5, I6]) Call(args []interface{}) []interface{} {
	c.fn(args[0].(I0), args[1].(I1), args[2].(I2), args[3].(I3), args[4].(I4), args[5].(I5), args[6].(I6))
	return []interface{}{}
}

func (c *caller7x0[I0, I1, I2, I3, I4, I5, I6]) Call7x0(arg0 I0, arg1 I1, arg2 I2, arg3 I3, arg4 I4, arg5 I5, arg6 I6) {
	c.fn(arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

func registerDoFn7x0StructWrappersAndFuncs[I0, I1, I2, I3, I4, I5, I6 any](doFn doFn7x0[I0, I1, I2, I3, I4, I5, I6]) {
	processElementCaller := func(fn interface{}) reflectx.Func {
		f := fn.(func(I0, I1, I2, I3, I4, I5, I6))
		return &caller7x0[I0, I1, I2, I3, I4, I5, I6]{fn: f}
	}
	reflectx.RegisterFunc(reflect.TypeOf((*func(I0, I1, I2, I3, I4, I5, I6))(nil)).Elem(), processElementCaller)
	processElementWrapper := func(fn interface{}) reflectx.Func {
		return reflectx.MakeFunc(func(a0 I0, a1 I1, a2 I2, a3 I3, a4 I4, a5 I5, a6 I6) {
			fn.(doFn7x0[I0, I1, I2, I3, I4, I5, I6]).ProcessElement(a0, a1, a2, a3, a4, a5, a6)
		})
	}
	startBundleWrapper := buildStartBundleWrapper7[I0, I1, I2, I3, I4, I5, I6](doFn)
	finishBundleWrapper := buildFinishBundleWrapper7[I0, I1, I2, I3, I4, I5, I6](doFn)
	setupWrapper := buildSetupWrapper(doFn)
	teardownWrapper := buildTeardownWrapper(doFn)

	wrapperFn := func(fn interface{}) map[string]reflectx.Func {
		m := map[string]reflectx.Func{}
		if processElementWrapper != nil {
			m["ProcessElement"] = processElementWrapper(fn)
		}
		if startBundleWrapper != nil {
			m["StartBundle"] = startBundleWrapper(fn)
		}
		if finishBundleWrapper != nil {
			m["FinishBundle"] = finishBundleWrapper(fn)
		}
		if setupWrapper != nil {
			m["Setup"] = setupWrapper(fn)
		}
		if teardownWrapper != nil {
			m["Teardown"] = teardownWrapper(fn)
		}

		return m
	}
	reflectx.RegisterStructWrapper(reflect.TypeOf(doFn).Elem(), wrapperFn)
}

// RegisterDoFn7x0[I0, I1, I2, I3, I4, I5, I6 any] registers your DoFn to optimize execution at runtime.
// DoFn input and output parameter types should be provided in order as the generic constraints.
func RegisterDoFn7x0[I0, I1, I2, I3, I4, I5, I6 any](doFn doFn7x0[I0, I1, I2, I3, I4, I5, I6]) {
	registerDoFnTypes(doFn)
	registerDoFn7x0StructWrappersAndFuncs[I0, I1, I2, I3, I4, I5, I6](doFn)
}

type doFn8x0[I0, I1, I2, I3, I4, I5, I6, I7 any] interface {
	ProcessElement(i0 I0, i1 I1, i2 I2, i3 I3, i4 I4, i5 I5, i6 I6, i7 I7)
}

type caller8x0[I0, I1, I2, I3, I4, I5, I6, I7 any] struct {
	fn func(I0, I1, I2, I3, I4, I5, I6, I7)
}

func (c *caller8x0[I0, I1, I2, I3, I4, I5, I6, I7]) Name() string {
	return reflectx.FunctionName(c.fn)
}

func (c *caller8x0[I0, I1, I2, I3, I4, I5, I6, I7]) Type() reflect.Type {
	return reflect.TypeOf(c.fn)
}

func (c *caller8x0[I0, I1, I2, I3, I4, I5, I6, I7]) Call(args []interface{}) []interface{} {
	c.fn(args[0].(I0), args[1].(I1), args[2].(I2), args[3].(I3), args[4].(I4), args[5].(I5), args[6].(I6), args[7].(I7))
	return []interface{}{}
}

func (c *caller8x0[I0, I1, I2, I3, I4, I5, I6, I7]) Call8x0(arg0 I0, arg1 I1, arg2 I2, arg3 I3, arg4 I4, arg5 I5, arg6 I6, arg7 I7) {
	c.fn(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
}

func registerDoFn8x0StructWrappersAndFuncs[I0, I1, I2, I3, I4, I5, I6, I7 any](doFn doFn8x0[I0, I1, I2, I3, I4, I5, I6, I7]) {
	processElementCaller := func(fn interface{}) reflectx.Func {
		f := fn.(func(I0, I1, I2, I3, I4, I5, I6, I7))
		return &caller8x0[I0, I1, I2, I3, I4, I5, I6, I7]{fn: f}
	}
	reflectx.RegisterFunc(reflect.TypeOf((*func(I0, I1, I2, I3, I4, I5, I6, I7))(nil)).Elem(), processElementCaller)
	processElementWrapper := func(fn interface{}) reflectx.Func {
		return reflectx.MakeFunc(func(a0 I0, a1 I1, a2 I2, a3 I3, a4 I4, a5 I5, a6 I6, a7 I7) {
			fn.(doFn8x0[I0, I1, I2, I3, I4, I5, I6, I7]).ProcessElement(a0, a1, a2, a3, a4, a5, a6, a7)
		})
	}
	startBundleWrapper := buildStartBundleWrapper8[I0, I1, I2, I3, I4, I5, I6, I7](doFn)
	finishBundleWrapper := buildFinishBundleWrapper8[I0, I1, I2, I3, I4, I5, I6, I7](doFn)
	setupWrapper := buildSetupWrapper(doFn)
	teardownWrapper := buildTeardownWrapper(doFn)

	wrapperFn := func(fn interface{}) map[string]reflectx.Func {
		m := map[string]reflectx.Func{}
		if processElementWrapper != nil {
			m["ProcessElement"] = processElementWrapper(fn)
		}
		if startBundleWrapper != nil {
			m["StartBundle"] = startBundleWrapper(fn)
		}
		if finishBundleWrapper != nil {
			m["FinishBundle"] = finishBundleWrapper(fn)
		}
		if setupWrapper != nil {
			m["Setup"] = setupWrapper(fn)
		}
		if teardownWrapper != nil {
			m["Teardown"] = teardownWrapper(fn)
		}

		return m
	}
	reflectx.RegisterStructWrapper(reflect.TypeOf(doFn).Elem(), wrapperFn)
}

// RegisterDoFn8x0[I0, I1, I2, I3, I4, I5, I6, I7 any] registers your DoFn to optimize execution at runtime.
// DoFn input and output parameter types should be provided in order as the generic constraints.
func RegisterDoFn8x0[I0, I1, I2, I3, I4, I5, I6, I7 any](doFn doFn8x0[I0, I1, I2, I3, I4, I5, I6, I7]) {
	registerDoFnTypes(doFn)
	registerDoFn8x0StructWrappersAndFuncs[I0, I1, I2, I3, I4, I5, I6, I7](doFn)
}

type doFn0x1[R0 any] interface {
	ProcessElement() R0
}

type caller0x1[R0 any] struct {
	fn func() R0
}

func (c *caller0x1[R0]) Name() string {
	return reflectx.FunctionName(c.fn)
}

func (c *caller0x1[R0]) Type() reflect.Type {
	return reflect.TypeOf(c.fn)
}

func (c *caller0x1[R0]) Call(args []interface{}) []interface{} {
	out0 := c.fn()
	return []interface{}{out0}
}

func (c *caller0x1[R0]) Call0x1() interface{} {
	return c.fn()
}

func registerDoFn0x1StructWrappersAndFuncs[R0 any](doFn doFn0x1[R0]) {
	processElementCaller := func(fn interface{}) reflectx.Func {
		f := fn.(func() R0)
		return &caller0x1[R0]{fn: f}
	}
	reflectx.RegisterFunc(reflect.TypeOf((*func() R0)(nil)).Elem(), processElementCaller)
	processElementWrapper := func(fn interface{}) reflectx.Func {
		return reflectx.MakeFunc(func() R0 {
			return fn.(doFn0x1[R0]).ProcessElement()
		})
	}
	startBundleWrapper := buildStartBundleWrapper0(doFn)
	finishBundleWrapper := buildFinishBundleWrapper0(doFn)
	setupWrapper := buildSetupWrapper(doFn)
	teardownWrapper := buildTeardownWrapper(doFn)

	wrapperFn := func(fn interface{}) map[string]reflectx.Func {
		m := map[string]reflectx.Func{}
		if processElementWrapper != nil {
			m["ProcessElement"] = processElementWrapper(fn)
		}
		if startBundleWrapper != nil {
			m["StartBundle"] = startBundleWrapper(fn)
		}
		if finishBundleWrapper != nil {
			m["FinishBundle"] = finishBundleWrapper(fn)
		}
		if setupWrapper != nil {
			m["Setup"] = setupWrapper(fn)
		}
		if teardownWrapper != nil {
			m["Teardown"] = teardownWrapper(fn)
		}

		return m
	}
	reflectx.RegisterStructWrapper(reflect.TypeOf(doFn).Elem(), wrapperFn)
}

// RegisterDoFn0x1[R0 any] registers your DoFn to optimize execution at runtime.
// DoFn input and output parameter types should be provided in order as the generic constraints.
func RegisterDoFn0x1[R0 any](doFn doFn0x1[R0]) {
	registerDoFnTypes(doFn)
	registerDoFn0x1StructWrappersAndFuncs[R0](doFn)
}

type doFn1x1[I0, R0 any] interface {
	ProcessElement(i0 I0) R0
}

type caller1x1[I0, R0 any] struct {
	fn func(I0) R0
}

func (c *caller1x1[I0, R0]) Name() string {
	return reflectx.FunctionName(c.fn)
}

func (c *caller1x1[I0, R0]) Type() reflect.Type {
	return reflect.TypeOf(c.fn)
}

func (c *caller1x1[I0, R0]) Call(args []interface{}) []interface{} {
	out0 := c.fn(args[0].(I0))
	return []interface{}{out0}
}

func (c *caller1x1[I0, R0]) Call1x1(arg0 I0) interface{} {
	return c.fn(arg0)
}

func registerDoFn1x1StructWrappersAndFuncs[I0, R0 any](doFn doFn1x1[I0, R0]) {
	processElementCaller := func(fn interface{}) reflectx.Func {
		f := fn.(func(I0) R0)
		return &caller1x1[I0, R0]{fn: f}
	}
	reflectx.RegisterFunc(reflect.TypeOf((*func(I0) R0)(nil)).Elem(), processElementCaller)
	processElementWrapper := func(fn interface{}) reflectx.Func {
		return reflectx.MakeFunc(func(a0 I0) R0 {
			return fn.(doFn1x1[I0, R0]).ProcessElement(a0)
		})
	}
	startBundleWrapper := buildStartBundleWrapper1[I0](doFn)
	finishBundleWrapper := buildFinishBundleWrapper1[I0](doFn)
	setupWrapper := buildSetupWrapper(doFn)
	teardownWrapper := buildTeardownWrapper(doFn)

	wrapperFn := func(fn interface{}) map[string]reflectx.Func {
		m := map[string]reflectx.Func{}
		if processElementWrapper != nil {
			m["ProcessElement"] = processElementWrapper(fn)
		}
		if startBundleWrapper != nil {
			m["StartBundle"] = startBundleWrapper(fn)
		}
		if finishBundleWrapper != nil {
			m["FinishBundle"] = finishBundleWrapper(fn)
		}
		if setupWrapper != nil {
			m["Setup"] = setupWrapper(fn)
		}
		if teardownWrapper != nil {
			m["Teardown"] = teardownWrapper(fn)
		}

		return m
	}
	reflectx.RegisterStructWrapper(reflect.TypeOf(doFn).Elem(), wrapperFn)
}

// RegisterDoFn1x1[I0, R0 any] registers your DoFn to optimize execution at runtime.
// DoFn input and output parameter types should be provided in order as the generic constraints.
func RegisterDoFn1x1[I0, R0 any](doFn doFn1x1[I0, R0]) {
	registerDoFnTypes(doFn)
	registerDoFn1x1StructWrappersAndFuncs[I0, R0](doFn)
}

type doFn2x1[I0, I1, R0 any] interface {
	ProcessElement(i0 I0, i1 I1) R0
}

type caller2x1[I0, I1, R0 any] struct {
	fn func(I0, I1) R0
}

func (c *caller2x1[I0, I1, R0]) Name() string {
	return reflectx.FunctionName(c.fn)
}

func (c *caller2x1[I0, I1, R0]) Type() reflect.Type {
	return reflect.TypeOf(c.fn)
}

func (c *caller2x1[I0, I1, R0]) Call(args []interface{}) []interface{} {
	out0 := c.fn(args[0].(I0), args[1].(I1))
	return []interface{}{out0}
}

func (c *caller2x1[I0, I1, R0]) Call2x1(arg0 I0, arg1 I1) interface{} {
	return c.fn(arg0, arg1)
}

func registerDoFn2x1StructWrappersAndFuncs[I0, I1, R0 any](doFn doFn2x1[I0, I1, R0]) {
	processElementCaller := func(fn interface{}) reflectx.Func {
		f := fn.(func(I0, I1) R0)
		return &caller2x1[I0, I1, R0]{fn: f}
	}
	reflectx.RegisterFunc(reflect.TypeOf((*func(I0, I1) R0)(nil)).Elem(), processElementCaller)
	processElementWrapper := func(fn interface{}) reflectx.Func {
		return reflectx.MakeFunc(func(a0 I0, a1 I1) R0 {
			return fn.(doFn2x1[I0, I1, R0]).ProcessElement(a0, a1)
		})
	}
	startBundleWrapper := buildStartBundleWrapper2[I0, I1](doFn)
	finishBundleWrapper := buildFinishBundleWrapper2[I0, I1](doFn)
	setupWrapper := buildSetupWrapper(doFn)
	teardownWrapper := buildTeardownWrapper(doFn)

	wrapperFn := func(fn interface{}) map[string]reflectx.Func {
		m := map[string]reflectx.Func{}
		if processElementWrapper != nil {
			m["ProcessElement"] = processElementWrapper(fn)
		}
		if startBundleWrapper != nil {
			m["StartBundle"] = startBundleWrapper(fn)
		}
		if finishBundleWrapper != nil {
			m["FinishBundle"] = finishBundleWrapper(fn)
		}
		if setupWrapper != nil {
			m["Setup"] = setupWrapper(fn)
		}
		if teardownWrapper != nil {
			m["Teardown"] = teardownWrapper(fn)
		}

		return m
	}
	reflectx.RegisterStructWrapper(reflect.TypeOf(doFn).Elem(), wrapperFn)
}

// RegisterDoFn2x1[I0, I1, R0 any] registers your DoFn to optimize execution at runtime.
// DoFn input and output parameter types should be provided in order as the generic constraints.
func RegisterDoFn2x1[I0, I1, R0 any](doFn doFn2x1[I0, I1, R0]) {
	registerDoFnTypes(doFn)
	registerDoFn2x1StructWrappersAndFuncs[I0, I1, R0](doFn)
}

type doFn3x1[I0, I1, I2, R0 any] interface {
	ProcessElement(i0 I0, i1 I1, i2 I2) R0
}

type caller3x1[I0, I1, I2, R0 any] struct {
	fn func(I0, I1, I2) R0
}

func (c *caller3x1[I0, I1, I2, R0]) Name() string {
	return reflectx.FunctionName(c.fn)
}

func (c *caller3x1[I0, I1, I2, R0]) Type() reflect.Type {
	return reflect.TypeOf(c.fn)
}

func (c *caller3x1[I0, I1, I2, R0]) Call(args []interface{}) []interface{} {
	out0 := c.fn(args[0].(I0), args[1].(I1), args[2].(I2))
	return []interface{}{out0}
}

func (c *caller3x1[I0, I1, I2, R0]) Call3x1(arg0 I0, arg1 I1, arg2 I2) interface{} {
	return c.fn(arg0, arg1, arg2)
}

func registerDoFn3x1StructWrappersAndFuncs[I0, I1, I2, R0 any](doFn doFn3x1[I0, I1, I2, R0]) {
	processElementCaller := func(fn interface{}) reflectx.Func {
		f := fn.(func(I0, I1, I2) R0)
		return &caller3x1[I0, I1, I2, R0]{fn: f}
	}
	reflectx.RegisterFunc(reflect.TypeOf((*func(I0, I1, I2) R0)(nil)).Elem(), processElementCaller)
	processElementWrapper := func(fn interface{}) reflectx.Func {
		return reflectx.MakeFunc(func(a0 I0, a1 I1, a2 I2) R0 {
			return fn.(doFn3x1[I0, I1, I2, R0]).ProcessElement(a0, a1, a2)
		})
	}
	startBundleWrapper := buildStartBundleWrapper3[I0, I1, I2](doFn)
	finishBundleWrapper := buildFinishBundleWrapper3[I0, I1, I2](doFn)
	setupWrapper := buildSetupWrapper(doFn)
	teardownWrapper := buildTeardownWrapper(doFn)

	wrapperFn := func(fn interface{}) map[string]reflectx.Func {
		m := map[string]reflectx.Func{}
		if processElementWrapper != nil {
			m["ProcessElement"] = processElementWrapper(fn)
		}
		if startBundleWrapper != nil {
			m["StartBundle"] = startBundleWrapper(fn)
		}
		if finishBundleWrapper != nil {
			m["FinishBundle"] = finishBundleWrapper(fn)
		}
		if setupWrapper != nil {
			m["Setup"] = setupWrapper(fn)
		}
		if teardownWrapper != nil {
			m["Teardown"] = teardownWrapper(fn)
		}

		return m
	}
	reflectx.RegisterStructWrapper(reflect.TypeOf(doFn).Elem(), wrapperFn)
}

// RegisterDoFn3x1[I0, I1, I2, R0 any] registers your DoFn to optimize execution at runtime.
// DoFn input and output parameter types should be provided in order as the generic constraints.
func RegisterDoFn3x1[I0, I1, I2, R0 any](doFn doFn3x1[I0, I1, I2, R0]) {
	registerDoFnTypes(doFn)
	registerDoFn3x1StructWrappersAndFuncs[I0, I1, I2, R0](doFn)
}

type doFn4x1[I0, I1, I2, I3, R0 any] interface {
	ProcessElement(i0 I0, i1 I1, i2 I2, i3 I3) R0
}

type caller4x1[I0, I1, I2, I3, R0 any] struct {
	fn func(I0, I1, I2, I3) R0
}

func (c *caller4x1[I0, I1, I2, I3, R0]) Name() string {
	return reflectx.FunctionName(c.fn)
}

func (c *caller4x1[I0, I1, I2, I3, R0]) Type() reflect.Type {
	return reflect.TypeOf(c.fn)
}

func (c *caller4x1[I0, I1, I2, I3, R0]) Call(args []interface{}) []interface{} {
	out0 := c.fn(args[0].(I0), args[1].(I1), args[2].(I2), args[3].(I3))
	return []interface{}{out0}
}

func (c *caller4x1[I0, I1, I2, I3, R0]) Call4x1(arg0 I0, arg1 I1, arg2 I2, arg3 I3) interface{} {
	return c.fn(arg0, arg1, arg2, arg3)
}

func registerDoFn4x1StructWrappersAndFuncs[I0, I1, I2, I3, R0 any](doFn doFn4x1[I0, I1, I2, I3, R0]) {
	processElementCaller := func(fn interface{}) reflectx.Func {
		f := fn.(func(I0, I1, I2, I3) R0)
		return &caller4x1[I0, I1, I2, I3, R0]{fn: f}
	}
	reflectx.RegisterFunc(reflect.TypeOf((*func(I0, I1, I2, I3) R0)(nil)).Elem(), processElementCaller)
	processElementWrapper := func(fn interface{}) reflectx.Func {
		return reflectx.MakeFunc(func(a0 I0, a1 I1, a2 I2, a3 I3) R0 {
			return fn.(doFn4x1[I0, I1, I2, I3, R0]).ProcessElement(a0, a1, a2, a3)
		})
	}
	startBundleWrapper := buildStartBundleWrapper4[I0, I1, I2, I3](doFn)
	finishBundleWrapper := buildFinishBundleWrapper4[I0, I1, I2, I3](doFn)
	setupWrapper := buildSetupWrapper(doFn)
	teardownWrapper := buildTeardownWrapper(doFn)

	wrapperFn := func(fn interface{}) map[string]reflectx.Func {
		m := map[string]reflectx.Func{}
		if processElementWrapper != nil {
			m["ProcessElement"] = processElementWrapper(fn)
		}
		if startBundleWrapper != nil {
			m["StartBundle"] = startBundleWrapper(fn)
		}
		if finishBundleWrapper != nil {
			m["FinishBundle"] = finishBundleWrapper(fn)
		}
		if setupWrapper != nil {
			m["Setup"] = setupWrapper(fn)
		}
		if teardownWrapper != nil {
			m["Teardown"] = teardownWrapper(fn)
		}

		return m
	}
	reflectx.RegisterStructWrapper(reflect.TypeOf(doFn).Elem(), wrapperFn)
}

// RegisterDoFn4x1[I0, I1, I2, I3, R0 any] registers your DoFn to optimize execution at runtime.
// DoFn input and output parameter types should be provided in order as the generic constraints.
func RegisterDoFn4x1[I0, I1, I2, I3, R0 any](doFn doFn4x1[I0, I1, I2, I3, R0]) {
	registerDoFnTypes(doFn)
	registerDoFn4x1StructWrappersAndFuncs[I0, I1, I2, I3, R0](doFn)
}

type doFn5x1[I0, I1, I2, I3, I4, R0 any] interface {
	ProcessElement(i0 I0, i1 I1, i2 I2, i3 I3, i4 I4) R0
}

type caller5x1[I0, I1, I2, I3, I4, R0 any] struct {
	fn func(I0, I1, I2, I3, I4) R0
}

func (c *caller5x1[I0, I1, I2, I3, I4, R0]) Name() string {
	return reflectx.FunctionName(c.fn)
}

func (c *caller5x1[I0, I1, I2, I3, I4, R0]) Type() reflect.Type {
	return reflect.TypeOf(c.fn)
}

func (c *caller5x1[I0, I1, I2, I3, I4, R0]) Call(args []interface{}) []interface{} {
	out0 := c.fn(args[0].(I0), args[1].(I1), args[2].(I2), args[3].(I3), args[4].(I4))
	return []interface{}{out0}
}

func (c *caller5x1[I0, I1, I2, I3, I4, R0]) Call5x1(arg0 I0, arg1 I1, arg2 I2, arg3 I3, arg4 I4) interface{} {
	return c.fn(arg0, arg1, arg2, arg3, arg4)
}

func registerDoFn5x1StructWrappersAndFuncs[I0, I1, I2, I3, I4, R0 any](doFn doFn5x1[I0, I1, I2, I3, I4, R0]) {
	processElementCaller := func(fn interface{}) reflectx.Func {
		f := fn.(func(I0, I1, I2, I3, I4) R0)
		return &caller5x1[I0, I1, I2, I3, I4, R0]{fn: f}
	}
	reflectx.RegisterFunc(reflect.TypeOf((*func(I0, I1, I2, I3, I4) R0)(nil)).Elem(), processElementCaller)
	processElementWrapper := func(fn interface{}) reflectx.Func {
		return reflectx.MakeFunc(func(a0 I0, a1 I1, a2 I2, a3 I3, a4 I4) R0 {
			return fn.(doFn5x1[I0, I1, I2, I3, I4, R0]).ProcessElement(a0, a1, a2, a3, a4)
		})
	}
	startBundleWrapper := buildStartBundleWrapper5[I0, I1, I2, I3, I4](doFn)
	finishBundleWrapper := buildFinishBundleWrapper5[I0, I1, I2, I3, I4](doFn)
	setupWrapper := buildSetupWrapper(doFn)
	teardownWrapper := buildTeardownWrapper(doFn)

	wrapperFn := func(fn interface{}) map[string]reflectx.Func {
		m := map[string]reflectx.Func{}
		if processElementWrapper != nil {
			m["ProcessElement"] = processElementWrapper(fn)
		}
		if startBundleWrapper != nil {
			m["StartBundle"] = startBundleWrapper(fn)
		}
		if finishBundleWrapper != nil {
			m["FinishBundle"] = finishBundleWrapper(fn)
		}
		if setupWrapper != nil {
			m["Setup"] = setupWrapper(fn)
		}
		if teardownWrapper != nil {
			m["Teardown"] = teardownWrapper(fn)
		}

		return m
	}
	reflectx.RegisterStructWrapper(reflect.TypeOf(doFn).Elem(), wrapperFn)
}

// RegisterDoFn5x1[I0, I1, I2, I3, I4, R0 any] registers your DoFn to optimize execution at runtime.
// DoFn input and output parameter types should be provided in order as the generic constraints.
func RegisterDoFn5x1[I0, I1, I2, I3, I4, R0 any](doFn doFn5x1[I0, I1, I2, I3, I4, R0]) {
	registerDoFnTypes(doFn)
	registerDoFn5x1StructWrappersAndFuncs[I0, I1, I2, I3, I4, R0](doFn)
}

type doFn6x1[I0, I1, I2, I3, I4, I5, R0 any] interface {
	ProcessElement(i0 I0, i1 I1, i2 I2, i3 I3, i4 I4, i5 I5) R0
}

type caller6x1[I0, I1, I2, I3, I4, I5, R0 any] struct {
	fn func(I0, I1, I2, I3, I4, I5) R0
}

func (c *caller6x1[I0, I1, I2, I3, I4, I5, R0]) Name() string {
	return reflectx.FunctionName(c.fn)
}

func (c *caller6x1[I0, I1, I2, I3, I4, I5, R0]) Type() reflect.Type {
	return reflect.TypeOf(c.fn)
}

func (c *caller6x1[I0, I1, I2, I3, I4, I5, R0]) Call(args []interface{}) []interface{} {
	out0 := c.fn(args[0].(I0), args[1].(I1), args[2].(I2), args[3].(I3), args[4].(I4), args[5].(I5))
	return []interface{}{out0}
}

func (c *caller6x1[I0, I1, I2, I3, I4, I5, R0]) Call6x1(arg0 I0, arg1 I1, arg2 I2, arg3 I3, arg4 I4, arg5 I5) interface{} {
	return c.fn(arg0, arg1, arg2, arg3, arg4, arg5)
}

func registerDoFn6x1StructWrappersAndFuncs[I0, I1, I2, I3, I4, I5, R0 any](doFn doFn6x1[I0, I1, I2, I3, I4, I5, R0]) {
	processElementCaller := func(fn interface{}) reflectx.Func {
		f := fn.(func(I0, I1, I2, I3, I4, I5) R0)
		return &caller6x1[I0, I1, I2, I3, I4, I5, R0]{fn: f}
	}
	reflectx.RegisterFunc(reflect.TypeOf((*func(I0, I1, I2, I3, I4, I5) R0)(nil)).Elem(), processElementCaller)
	processElementWrapper := func(fn interface{}) reflectx.Func {
		return reflectx.MakeFunc(func(a0 I0, a1 I1, a2 I2, a3 I3, a4 I4, a5 I5) R0 {
			return fn.(doFn6x1[I0, I1, I2, I3, I4, I5, R0]).ProcessElement(a0, a1, a2, a3, a4, a5)
		})
	}
	startBundleWrapper := buildStartBundleWrapper6[I0, I1, I2, I3, I4, I5](doFn)
	finishBundleWrapper := buildFinishBundleWrapper6[I0, I1, I2, I3, I4, I5](doFn)
	setupWrapper := buildSetupWrapper(doFn)
	teardownWrapper := buildTeardownWrapper(doFn)

	wrapperFn := func(fn interface{}) map[string]reflectx.Func {
		m := map[string]reflectx.Func{}
		if processElementWrapper != nil {
			m["ProcessElement"] = processElementWrapper(fn)
		}
		if startBundleWrapper != nil {
			m["StartBundle"] = startBundleWrapper(fn)
		}
		if finishBundleWrapper != nil {
			m["FinishBundle"] = finishBundleWrapper(fn)
		}
		if setupWrapper != nil {
			m["Setup"] = setupWrapper(fn)
		}
		if teardownWrapper != nil {
			m["Teardown"] = teardownWrapper(fn)
		}

		return m
	}
	reflectx.RegisterStructWrapper(reflect.TypeOf(doFn).Elem(), wrapperFn)
}

// RegisterDoFn6x1[I0, I1, I2, I3, I4, I5, R0 any] registers your DoFn to optimize execution at runtime.
// DoFn input and output parameter types should be provided in order as the generic constraints.
func RegisterDoFn6x1[I0, I1, I2, I3, I4, I5, R0 any](doFn doFn6x1[I0, I1, I2, I3, I4, I5, R0]) {
	registerDoFnTypes(doFn)
	registerDoFn6x1StructWrappersAndFuncs[I0, I1, I2, I3, I4, I5, R0](doFn)
}

type doFn7x1[I0, I1, I2, I3, I4, I5, I6, R0 any] interface {
	ProcessElement(i0 I0, i1 I1, i2 I2, i3 I3, i4 I4, i5 I5, i6 I6) R0
}

type caller7x1[I0, I1, I2, I3, I4, I5, I6, R0 any] struct {
	fn func(I0, I1, I2, I3, I4, I5, I6) R0
}

func (c *caller7x1[I0, I1, I2, I3, I4, I5, I6, R0]) Name() string {
	return reflectx.FunctionName(c.fn)
}

func (c *caller7x1[I0, I1, I2, I3, I4, I5, I6, R0]) Type() reflect.Type {
	return reflect.TypeOf(c.fn)
}

func (c *caller7x1[I0, I1, I2, I3, I4, I5, I6, R0]) Call(args []interface{}) []interface{} {
	out0 := c.fn(args[0].(I0), args[1].(I1), args[2].(I2), args[3].(I3), args[4].(I4), args[5].(I5), args[6].(I6))
	return []interface{}{out0}
}

func (c *caller7x1[I0, I1, I2, I3, I4, I5, I6, R0]) Call7x1(arg0 I0, arg1 I1, arg2 I2, arg3 I3, arg4 I4, arg5 I5, arg6 I6) interface{} {
	return c.fn(arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

func registerDoFn7x1StructWrappersAndFuncs[I0, I1, I2, I3, I4, I5, I6, R0 any](doFn doFn7x1[I0, I1, I2, I3, I4, I5, I6, R0]) {
	processElementCaller := func(fn interface{}) reflectx.Func {
		f := fn.(func(I0, I1, I2, I3, I4, I5, I6) R0)
		return &caller7x1[I0, I1, I2, I3, I4, I5, I6, R0]{fn: f}
	}
	reflectx.RegisterFunc(reflect.TypeOf((*func(I0, I1, I2, I3, I4, I5, I6) R0)(nil)).Elem(), processElementCaller)
	processElementWrapper := func(fn interface{}) reflectx.Func {
		return reflectx.MakeFunc(func(a0 I0, a1 I1, a2 I2, a3 I3, a4 I4, a5 I5, a6 I6) R0 {
			return fn.(doFn7x1[I0, I1, I2, I3, I4, I5, I6, R0]).ProcessElement(a0, a1, a2, a3, a4, a5, a6)
		})
	}
	startBundleWrapper := buildStartBundleWrapper7[I0, I1, I2, I3, I4, I5, I6](doFn)
	finishBundleWrapper := buildFinishBundleWrapper7[I0, I1, I2, I3, I4, I5, I6](doFn)
	setupWrapper := buildSetupWrapper(doFn)
	teardownWrapper := buildTeardownWrapper(doFn)

	wrapperFn := func(fn interface{}) map[string]reflectx.Func {
		m := map[string]reflectx.Func{}
		if processElementWrapper != nil {
			m["ProcessElement"] = processElementWrapper(fn)
		}
		if startBundleWrapper != nil {
			m["StartBundle"] = startBundleWrapper(fn)
		}
		if finishBundleWrapper != nil {
			m["FinishBundle"] = finishBundleWrapper(fn)
		}
		if setupWrapper != nil {
			m["Setup"] = setupWrapper(fn)
		}
		if teardownWrapper != nil {
			m["Teardown"] = teardownWrapper(fn)
		}

		return m
	}
	reflectx.RegisterStructWrapper(reflect.TypeOf(doFn).Elem(), wrapperFn)
}

// RegisterDoFn7x1[I0, I1, I2, I3, I4, I5, I6, R0 any] registers your DoFn to optimize execution at runtime.
// DoFn input and output parameter types should be provided in order as the generic constraints.
func RegisterDoFn7x1[I0, I1, I2, I3, I4, I5, I6, R0 any](doFn doFn7x1[I0, I1, I2, I3, I4, I5, I6, R0]) {
	registerDoFnTypes(doFn)
	registerDoFn7x1StructWrappersAndFuncs[I0, I1, I2, I3, I4, I5, I6, R0](doFn)
}

type doFn8x1[I0, I1, I2, I3, I4, I5, I6, I7, R0 any] interface {
	ProcessElement(i0 I0, i1 I1, i2 I2, i3 I3, i4 I4, i5 I5, i6 I6, i7 I7) R0
}

type caller8x1[I0, I1, I2, I3, I4, I5, I6, I7, R0 any] struct {
	fn func(I0, I1, I2, I3, I4, I5, I6, I7) R0
}

func (c *caller8x1[I0, I1, I2, I3, I4, I5, I6, I7, R0]) Name() string {
	return reflectx.FunctionName(c.fn)
}

func (c *caller8x1[I0, I1, I2, I3, I4, I5, I6, I7, R0]) Type() reflect.Type {
	return reflect.TypeOf(c.fn)
}

func (c *caller8x1[I0, I1, I2, I3, I4, I5, I6, I7, R0]) Call(args []interface{}) []interface{} {
	out0 := c.fn(args[0].(I0), args[1].(I1), args[2].(I2), args[3].(I3), args[4].(I4), args[5].(I5), args[6].(I6), args[7].(I7))
	return []interface{}{out0}
}

func (c *caller8x1[I0, I1, I2, I3, I4, I5, I6, I7, R0]) Call8x1(arg0 I0, arg1 I1, arg2 I2, arg3 I3, arg4 I4, arg5 I5, arg6 I6, arg7 I7) interface{} {
	return c.fn(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
}

func registerDoFn8x1StructWrappersAndFuncs[I0, I1, I2, I3, I4, I5, I6, I7, R0 any](doFn doFn8x1[I0, I1, I2, I3, I4, I5, I6, I7, R0]) {
	processElementCaller := func(fn interface{}) reflectx.Func {
		f := fn.(func(I0, I1, I2, I3, I4, I5, I6, I7) R0)
		return &caller8x1[I0, I1, I2, I3, I4, I5, I6, I7, R0]{fn: f}
	}
	reflectx.RegisterFunc(reflect.TypeOf((*func(I0, I1, I2, I3, I4, I5, I6, I7) R0)(nil)).Elem(), processElementCaller)
	processElementWrapper := func(fn interface{}) reflectx.Func {
		return reflectx.MakeFunc(func(a0 I0, a1 I1, a2 I2, a3 I3, a4 I4, a5 I5, a6 I6, a7 I7) R0 {
			return fn.(doFn8x1[I0, I1, I2, I3, I4, I5, I6, I7, R0]).ProcessElement(a0, a1, a2, a3, a4, a5, a6, a7)
		})
	}
	startBundleWrapper := buildStartBundleWrapper8[I0, I1, I2, I3, I4, I5, I6, I7](doFn)
	finishBundleWrapper := buildFinishBundleWrapper8[I0, I1, I2, I3, I4, I5, I6, I7](doFn)
	setupWrapper := buildSetupWrapper(doFn)
	teardownWrapper := buildTeardownWrapper(doFn)

	wrapperFn := func(fn interface{}) map[string]reflectx.Func {
		m := map[string]reflectx.Func{}
		if processElementWrapper != nil {
			m["ProcessElement"] = processElementWrapper(fn)
		}
		if startBundleWrapper != nil {
			m["StartBundle"] = startBundleWrapper(fn)
		}
		if finishBundleWrapper != nil {
			m["FinishBundle"] = finishBundleWrapper(fn)
		}
		if setupWrapper != nil {
			m["Setup"] = setupWrapper(fn)
		}
		if teardownWrapper != nil {
			m["Teardown"] = teardownWrapper(fn)
		}

		return m
	}
	reflectx.RegisterStructWrapper(reflect.TypeOf(doFn).Elem(), wrapperFn)
}

// RegisterDoFn8x1[I0, I1, I2, I3, I4, I5, I6, I7, R0 any] registers your DoFn to optimize execution at runtime.
// DoFn input and output parameter types should be provided in order as the generic constraints.
func RegisterDoFn8x1[I0, I1, I2, I3, I4, I5, I6, I7, R0 any](doFn doFn8x1[I0, I1, I2, I3, I4, I5, I6, I7, R0]) {
	registerDoFnTypes(doFn)
	registerDoFn8x1StructWrappersAndFuncs[I0, I1, I2, I3, I4, I5, I6, I7, R0](doFn)
}

type doFn0x2[R0, R1 any] interface {
	ProcessElement() (R0, R1)
}

type caller0x2[R0, R1 any] struct {
	fn func() (R0, R1)
}

func (c *caller0x2[R0, R1]) Name() string {
	return reflectx.FunctionName(c.fn)
}

func (c *caller0x2[R0, R1]) Type() reflect.Type {
	return reflect.TypeOf(c.fn)
}

func (c *caller0x2[R0, R1]) Call(args []interface{}) []interface{} {
	out0, out1 := c.fn()
	return []interface{}{out0, out1}
}

func (c *caller0x2[R0, R1]) Call0x2() (interface{}, interface{}) {
	return c.fn()
}

func registerDoFn0x2StructWrappersAndFuncs[R0, R1 any](doFn doFn0x2[R0, R1]) {
	processElementCaller := func(fn interface{}) reflectx.Func {
		f := fn.(func() (R0, R1))
		return &caller0x2[R0, R1]{fn: f}
	}
	reflectx.RegisterFunc(reflect.TypeOf((*func() (R0, R1))(nil)).Elem(), processElementCaller)
	processElementWrapper := func(fn interface{}) reflectx.Func {
		return reflectx.MakeFunc(func() (R0, R1) {
			return fn.(doFn0x2[R0, R1]).ProcessElement()
		})
	}
	startBundleWrapper := buildStartBundleWrapper0(doFn)
	finishBundleWrapper := buildFinishBundleWrapper0(doFn)
	setupWrapper := buildSetupWrapper(doFn)
	teardownWrapper := buildTeardownWrapper(doFn)

	wrapperFn := func(fn interface{}) map[string]reflectx.Func {
		m := map[string]reflectx.Func{}
		if processElementWrapper != nil {
			m["ProcessElement"] = processElementWrapper(fn)
		}
		if startBundleWrapper != nil {
			m["StartBundle"] = startBundleWrapper(fn)
		}
		if finishBundleWrapper != nil {
			m["FinishBundle"] = finishBundleWrapper(fn)
		}
		if setupWrapper != nil {
			m["Setup"] = setupWrapper(fn)
		}
		if teardownWrapper != nil {
			m["Teardown"] = teardownWrapper(fn)
		}

		return m
	}
	reflectx.RegisterStructWrapper(reflect.TypeOf(doFn).Elem(), wrapperFn)
}

// RegisterDoFn0x2[R0, R1 any] registers your DoFn to optimize execution at runtime.
// DoFn input and output parameter types should be provided in order as the generic constraints.
func RegisterDoFn0x2[R0, R1 any](doFn doFn0x2[R0, R1]) {
	registerDoFnTypes(doFn)
	registerDoFn0x2StructWrappersAndFuncs[R0, R1](doFn)
}

type doFn1x2[I0, R0, R1 any] interface {
	ProcessElement(i0 I0) (R0, R1)
}

type caller1x2[I0, R0, R1 any] struct {
	fn func(I0) (R0, R1)
}

func (c *caller1x2[I0, R0, R1]) Name() string {
	return reflectx.FunctionName(c.fn)
}

func (c *caller1x2[I0, R0, R1]) Type() reflect.Type {
	return reflect.TypeOf(c.fn)
}

func (c *caller1x2[I0, R0, R1]) Call(args []interface{}) []interface{} {
	out0, out1 := c.fn(args[0].(I0))
	return []interface{}{out0, out1}
}

func (c *caller1x2[I0, R0, R1]) Call1x2(arg0 I0) (interface{}, interface{}) {
	return c.fn(arg0)
}

func registerDoFn1x2StructWrappersAndFuncs[I0, R0, R1 any](doFn doFn1x2[I0, R0, R1]) {
	processElementCaller := func(fn interface{}) reflectx.Func {
		f := fn.(func(I0) (R0, R1))
		return &caller1x2[I0, R0, R1]{fn: f}
	}
	reflectx.RegisterFunc(reflect.TypeOf((*func(I0) (R0, R1))(nil)).Elem(), processElementCaller)
	processElementWrapper := func(fn interface{}) reflectx.Func {
		return reflectx.MakeFunc(func(a0 I0) (R0, R1) {
			return fn.(doFn1x2[I0, R0, R1]).ProcessElement(a0)
		})
	}
	startBundleWrapper := buildStartBundleWrapper1[I0](doFn)
	finishBundleWrapper := buildFinishBundleWrapper1[I0](doFn)
	setupWrapper := buildSetupWrapper(doFn)
	teardownWrapper := buildTeardownWrapper(doFn)

	wrapperFn := func(fn interface{}) map[string]reflectx.Func {
		m := map[string]reflectx.Func{}
		if processElementWrapper != nil {
			m["ProcessElement"] = processElementWrapper(fn)
		}
		if startBundleWrapper != nil {
			m["StartBundle"] = startBundleWrapper(fn)
		}
		if finishBundleWrapper != nil {
			m["FinishBundle"] = finishBundleWrapper(fn)
		}
		if setupWrapper != nil {
			m["Setup"] = setupWrapper(fn)
		}
		if teardownWrapper != nil {
			m["Teardown"] = teardownWrapper(fn)
		}

		return m
	}
	reflectx.RegisterStructWrapper(reflect.TypeOf(doFn).Elem(), wrapperFn)
}

// RegisterDoFn1x2[I0, R0, R1 any] registers your DoFn to optimize execution at runtime.
// DoFn input and output parameter types should be provided in order as the generic constraints.
func RegisterDoFn1x2[I0, R0, R1 any](doFn doFn1x2[I0, R0, R1]) {
	registerDoFnTypes(doFn)
	registerDoFn1x2StructWrappersAndFuncs[I0, R0, R1](doFn)
}

type doFn2x2[I0, I1, R0, R1 any] interface {
	ProcessElement(i0 I0, i1 I1) (R0, R1)
}

type caller2x2[I0, I1, R0, R1 any] struct {
	fn func(I0, I1) (R0, R1)
}

func (c *caller2x2[I0, I1, R0, R1]) Name() string {
	return reflectx.FunctionName(c.fn)
}

func (c *caller2x2[I0, I1, R0, R1]) Type() reflect.Type {
	return reflect.TypeOf(c.fn)
}

func (c *caller2x2[I0, I1, R0, R1]) Call(args []interface{}) []interface{} {
	out0, out1 := c.fn(args[0].(I0), args[1].(I1))
	return []interface{}{out0, out1}
}

func (c *caller2x2[I0, I1, R0, R1]) Call2x2(arg0 I0, arg1 I1) (interface{}, interface{}) {
	return c.fn(arg0, arg1)
}

func registerDoFn2x2StructWrappersAndFuncs[I0, I1, R0, R1 any](doFn doFn2x2[I0, I1, R0, R1]) {
	processElementCaller := func(fn interface{}) reflectx.Func {
		f := fn.(func(I0, I1) (R0, R1))
		return &caller2x2[I0, I1, R0, R1]{fn: f}
	}
	reflectx.RegisterFunc(reflect.TypeOf((*func(I0, I1) (R0, R1))(nil)).Elem(), processElementCaller)
	processElementWrapper := func(fn interface{}) reflectx.Func {
		return reflectx.MakeFunc(func(a0 I0, a1 I1) (R0, R1) {
			return fn.(doFn2x2[I0, I1, R0, R1]).ProcessElement(a0, a1)
		})
	}
	startBundleWrapper := buildStartBundleWrapper2[I0, I1](doFn)
	finishBundleWrapper := buildFinishBundleWrapper2[I0, I1](doFn)
	setupWrapper := buildSetupWrapper(doFn)
	teardownWrapper := buildTeardownWrapper(doFn)

	wrapperFn := func(fn interface{}) map[string]reflectx.Func {
		m := map[string]reflectx.Func{}
		if processElementWrapper != nil {
			m["ProcessElement"] = processElementWrapper(fn)
		}
		if startBundleWrapper != nil {
			m["StartBundle"] = startBundleWrapper(fn)
		}
		if finishBundleWrapper != nil {
			m["FinishBundle"] = finishBundleWrapper(fn)
		}
		if setupWrapper != nil {
			m["Setup"] = setupWrapper(fn)
		}
		if teardownWrapper != nil {
			m["Teardown"] = teardownWrapper(fn)
		}

		return m
	}
	reflectx.RegisterStructWrapper(reflect.TypeOf(doFn).Elem(), wrapperFn)
}

// RegisterDoFn2x2[I0, I1, R0, R1 any] registers your DoFn to optimize execution at runtime.
// DoFn input and output parameter types should be provided in order as the generic constraints.
func RegisterDoFn2x2[I0, I1, R0, R1 any](doFn doFn2x2[I0, I1, R0, R1]) {
	registerDoFnTypes(doFn)
	registerDoFn2x2StructWrappersAndFuncs[I0, I1, R0, R1](doFn)
}

type doFn3x2[I0, I1, I2, R0, R1 any] interface {
	ProcessElement(i0 I0, i1 I1, i2 I2) (R0, R1)
}

type caller3x2[I0, I1, I2, R0, R1 any] struct {
	fn func(I0, I1, I2) (R0, R1)
}

func (c *caller3x2[I0, I1, I2, R0, R1]) Name() string {
	return reflectx.FunctionName(c.fn)
}

func (c *caller3x2[I0, I1, I2, R0, R1]) Type() reflect.Type {
	return reflect.TypeOf(c.fn)
}

func (c *caller3x2[I0, I1, I2, R0, R1]) Call(args []interface{}) []interface{} {
	out0, out1 := c.fn(args[0].(I0), args[1].(I1), args[2].(I2))
	return []interface{}{out0, out1}
}

func (c *caller3x2[I0, I1, I2, R0, R1]) Call3x2(arg0 I0, arg1 I1, arg2 I2) (interface{}, interface{}) {
	return c.fn(arg0, arg1, arg2)
}

func registerDoFn3x2StructWrappersAndFuncs[I0, I1, I2, R0, R1 any](doFn doFn3x2[I0, I1, I2, R0, R1]) {
	processElementCaller := func(fn interface{}) reflectx.Func {
		f := fn.(func(I0, I1, I2) (R0, R1))
		return &caller3x2[I0, I1, I2, R0, R1]{fn: f}
	}
	reflectx.RegisterFunc(reflect.TypeOf((*func(I0, I1, I2) (R0, R1))(nil)).Elem(), processElementCaller)
	processElementWrapper := func(fn interface{}) reflectx.Func {
		return reflectx.MakeFunc(func(a0 I0, a1 I1, a2 I2) (R0, R1) {
			return fn.(doFn3x2[I0, I1, I2, R0, R1]).ProcessElement(a0, a1, a2)
		})
	}
	startBundleWrapper := buildStartBundleWrapper3[I0, I1, I2](doFn)
	finishBundleWrapper := buildFinishBundleWrapper3[I0, I1, I2](doFn)
	setupWrapper := buildSetupWrapper(doFn)
	teardownWrapper := buildTeardownWrapper(doFn)

	wrapperFn := func(fn interface{}) map[string]reflectx.Func {
		m := map[string]reflectx.Func{}
		if processElementWrapper != nil {
			m["ProcessElement"] = processElementWrapper(fn)
		}
		if startBundleWrapper != nil {
			m["StartBundle"] = startBundleWrapper(fn)
		}
		if finishBundleWrapper != nil {
			m["FinishBundle"] = finishBundleWrapper(fn)
		}
		if setupWrapper != nil {
			m["Setup"] = setupWrapper(fn)
		}
		if teardownWrapper != nil {
			m["Teardown"] = teardownWrapper(fn)
		}

		return m
	}
	reflectx.RegisterStructWrapper(reflect.TypeOf(doFn).Elem(), wrapperFn)
}

// RegisterDoFn3x2[I0, I1, I2, R0, R1 any] registers your DoFn to optimize execution at runtime.
// DoFn input and output parameter types should be provided in order as the generic constraints.
func RegisterDoFn3x2[I0, I1, I2, R0, R1 any](doFn doFn3x2[I0, I1, I2, R0, R1]) {
	registerDoFnTypes(doFn)
	registerDoFn3x2StructWrappersAndFuncs[I0, I1, I2, R0, R1](doFn)
}

type doFn4x2[I0, I1, I2, I3, R0, R1 any] interface {
	ProcessElement(i0 I0, i1 I1, i2 I2, i3 I3) (R0, R1)
}

type caller4x2[I0, I1, I2, I3, R0, R1 any] struct {
	fn func(I0, I1, I2, I3) (R0, R1)
}

func (c *caller4x2[I0, I1, I2, I3, R0, R1]) Name() string {
	return reflectx.FunctionName(c.fn)
}

func (c *caller4x2[I0, I1, I2, I3, R0, R1]) Type() reflect.Type {
	return reflect.TypeOf(c.fn)
}

func (c *caller4x2[I0, I1, I2, I3, R0, R1]) Call(args []interface{}) []interface{} {
	out0, out1 := c.fn(args[0].(I0), args[1].(I1), args[2].(I2), args[3].(I3))
	return []interface{}{out0, out1}
}

func (c *caller4x2[I0, I1, I2, I3, R0, R1]) Call4x2(arg0 I0, arg1 I1, arg2 I2, arg3 I3) (interface{}, interface{}) {
	return c.fn(arg0, arg1, arg2, arg3)
}

func registerDoFn4x2StructWrappersAndFuncs[I0, I1, I2, I3, R0, R1 any](doFn doFn4x2[I0, I1, I2, I3, R0, R1]) {
	processElementCaller := func(fn interface{}) reflectx.Func {
		f := fn.(func(I0, I1, I2, I3) (R0, R1))
		return &caller4x2[I0, I1, I2, I3, R0, R1]{fn: f}
	}
	reflectx.RegisterFunc(reflect.TypeOf((*func(I0, I1, I2, I3) (R0, R1))(nil)).Elem(), processElementCaller)
	processElementWrapper := func(fn interface{}) reflectx.Func {
		return reflectx.MakeFunc(func(a0 I0, a1 I1, a2 I2, a3 I3) (R0, R1) {
			return fn.(doFn4x2[I0, I1, I2, I3, R0, R1]).ProcessElement(a0, a1, a2, a3)
		})
	}
	startBundleWrapper := buildStartBundleWrapper4[I0, I1, I2, I3](doFn)
	finishBundleWrapper := buildFinishBundleWrapper4[I0, I1, I2, I3](doFn)
	setupWrapper := buildSetupWrapper(doFn)
	teardownWrapper := buildTeardownWrapper(doFn)

	wrapperFn := func(fn interface{}) map[string]reflectx.Func {
		m := map[string]reflectx.Func{}
		if processElementWrapper != nil {
			m["ProcessElement"] = processElementWrapper(fn)
		}
		if startBundleWrapper != nil {
			m["StartBundle"] = startBundleWrapper(fn)
		}
		if finishBundleWrapper != nil {
			m["FinishBundle"] = finishBundleWrapper(fn)
		}
		if setupWrapper != nil {
			m["Setup"] = setupWrapper(fn)
		}
		if teardownWrapper != nil {
			m["Teardown"] = teardownWrapper(fn)
		}

		return m
	}
	reflectx.RegisterStructWrapper(reflect.TypeOf(doFn).Elem(), wrapperFn)
}

// RegisterDoFn4x2[I0, I1, I2, I3, R0, R1 any] registers your DoFn to optimize execution at runtime.
// DoFn input and output parameter types should be provided in order as the generic constraints.
func RegisterDoFn4x2[I0, I1, I2, I3, R0, R1 any](doFn doFn4x2[I0, I1, I2, I3, R0, R1]) {
	registerDoFnTypes(doFn)
	registerDoFn4x2StructWrappersAndFuncs[I0, I1, I2, I3, R0, R1](doFn)
}

type doFn5x2[I0, I1, I2, I3, I4, R0, R1 any] interface {
	ProcessElement(i0 I0, i1 I1, i2 I2, i3 I3, i4 I4) (R0, R1)
}

type caller5x2[I0, I1, I2, I3, I4, R0, R1 any] struct {
	fn func(I0, I1, I2, I3, I4) (R0, R1)
}

func (c *caller5x2[I0, I1, I2, I3, I4, R0, R1]) Name() string {
	return reflectx.FunctionName(c.fn)
}

func (c *caller5x2[I0, I1, I2, I3, I4, R0, R1]) Type() reflect.Type {
	return reflect.TypeOf(c.fn)
}

func (c *caller5x2[I0, I1, I2, I3, I4, R0, R1]) Call(args []interface{}) []interface{} {
	out0, out1 := c.fn(args[0].(I0), args[1].(I1), args[2].(I2), args[3].(I3), args[4].(I4))
	return []interface{}{out0, out1}
}

func (c *caller5x2[I0, I1, I2, I3, I4, R0, R1]) Call5x2(arg0 I0, arg1 I1, arg2 I2, arg3 I3, arg4 I4) (interface{}, interface{}) {
	return c.fn(arg0, arg1, arg2, arg3, arg4)
}

func registerDoFn5x2StructWrappersAndFuncs[I0, I1, I2, I3, I4, R0, R1 any](doFn doFn5x2[I0, I1, I2, I3, I4, R0, R1]) {
	processElementCaller := func(fn interface{}) reflectx.Func {
		f := fn.(func(I0, I1, I2, I3, I4) (R0, R1))
		return &caller5x2[I0, I1, I2, I3, I4, R0, R1]{fn: f}
	}
	reflectx.RegisterFunc(reflect.TypeOf((*func(I0, I1, I2, I3, I4) (R0, R1))(nil)).Elem(), processElementCaller)
	processElementWrapper := func(fn interface{}) reflectx.Func {
		return reflectx.MakeFunc(func(a0 I0, a1 I1, a2 I2, a3 I3, a4 I4) (R0, R1) {
			return fn.(doFn5x2[I0, I1, I2, I3, I4, R0, R1]).ProcessElement(a0, a1, a2, a3, a4)
		})
	}
	startBundleWrapper := buildStartBundleWrapper5[I0, I1, I2, I3, I4](doFn)
	finishBundleWrapper := buildFinishBundleWrapper5[I0, I1, I2, I3, I4](doFn)
	setupWrapper := buildSetupWrapper(doFn)
	teardownWrapper := buildTeardownWrapper(doFn)

	wrapperFn := func(fn interface{}) map[string]reflectx.Func {
		m := map[string]reflectx.Func{}
		if processElementWrapper != nil {
			m["ProcessElement"] = processElementWrapper(fn)
		}
		if startBundleWrapper != nil {
			m["StartBundle"] = startBundleWrapper(fn)
		}
		if finishBundleWrapper != nil {
			m["FinishBundle"] = finishBundleWrapper(fn)
		}
		if setupWrapper != nil {
			m["Setup"] = setupWrapper(fn)
		}
		if teardownWrapper != nil {
			m["Teardown"] = teardownWrapper(fn)
		}

		return m
	}
	reflectx.RegisterStructWrapper(reflect.TypeOf(doFn).Elem(), wrapperFn)
}

// RegisterDoFn5x2[I0, I1, I2, I3, I4, R0, R1 any] registers your DoFn to optimize execution at runtime.
// DoFn input and output parameter types should be provided in order as the generic constraints.
func RegisterDoFn5x2[I0, I1, I2, I3, I4, R0, R1 any](doFn doFn5x2[I0, I1, I2, I3, I4, R0, R1]) {
	registerDoFnTypes(doFn)
	registerDoFn5x2StructWrappersAndFuncs[I0, I1, I2, I3, I4, R0, R1](doFn)
}

type doFn6x2[I0, I1, I2, I3, I4, I5, R0, R1 any] interface {
	ProcessElement(i0 I0, i1 I1, i2 I2, i3 I3, i4 I4, i5 I5) (R0, R1)
}

type caller6x2[I0, I1, I2, I3, I4, I5, R0, R1 any] struct {
	fn func(I0, I1, I2, I3, I4, I5) (R0, R1)
}

func (c *caller6x2[I0, I1, I2, I3, I4, I5, R0, R1]) Name() string {
	return reflectx.FunctionName(c.fn)
}

func (c *caller6x2[I0, I1, I2, I3, I4, I5, R0, R1]) Type() reflect.Type {
	return reflect.TypeOf(c.fn)
}

func (c *caller6x2[I0, I1, I2, I3, I4, I5, R0, R1]) Call(args []interface{}) []interface{} {
	out0, out1 := c.fn(args[0].(I0), args[1].(I1), args[2].(I2), args[3].(I3), args[4].(I4), args[5].(I5))
	return []interface{}{out0, out1}
}

func (c *caller6x2[I0, I1, I2, I3, I4, I5, R0, R1]) Call6x2(arg0 I0, arg1 I1, arg2 I2, arg3 I3, arg4 I4, arg5 I5) (interface{}, interface{}) {
	return c.fn(arg0, arg1, arg2, arg3, arg4, arg5)
}

func registerDoFn6x2StructWrappersAndFuncs[I0, I1, I2, I3, I4, I5, R0, R1 any](doFn doFn6x2[I0, I1, I2, I3, I4, I5, R0, R1]) {
	processElementCaller := func(fn interface{}) reflectx.Func {
		f := fn.(func(I0, I1, I2, I3, I4, I5) (R0, R1))
		return &caller6x2[I0, I1, I2, I3, I4, I5, R0, R1]{fn: f}
	}
	reflectx.RegisterFunc(reflect.TypeOf((*func(I0, I1, I2, I3, I4, I5) (R0, R1))(nil)).Elem(), processElementCaller)
	processElementWrapper := func(fn interface{}) reflectx.Func {
		return reflectx.MakeFunc(func(a0 I0, a1 I1, a2 I2, a3 I3, a4 I4, a5 I5) (R0, R1) {
			return fn.(doFn6x2[I0, I1, I2, I3, I4, I5, R0, R1]).ProcessElement(a0, a1, a2, a3, a4, a5)
		})
	}
	startBundleWrapper := buildStartBundleWrapper6[I0, I1, I2, I3, I4, I5](doFn)
	finishBundleWrapper := buildFinishBundleWrapper6[I0, I1, I2, I3, I4, I5](doFn)
	setupWrapper := buildSetupWrapper(doFn)
	teardownWrapper := buildTeardownWrapper(doFn)

	wrapperFn := func(fn interface{}) map[string]reflectx.Func {
		m := map[string]reflectx.Func{}
		if processElementWrapper != nil {
			m["ProcessElement"] = processElementWrapper(fn)
		}
		if startBundleWrapper != nil {
			m["StartBundle"] = startBundleWrapper(fn)
		}
		if finishBundleWrapper != nil {
			m["FinishBundle"] = finishBundleWrapper(fn)
		}
		if setupWrapper != nil {
			m["Setup"] = setupWrapper(fn)
		}
		if teardownWrapper != nil {
			m["Teardown"] = teardownWrapper(fn)
		}

		return m
	}
	reflectx.RegisterStructWrapper(reflect.TypeOf(doFn).Elem(), wrapperFn)
}

// RegisterDoFn6x2[I0, I1, I2, I3, I4, I5, R0, R1 any] registers your DoFn to optimize execution at runtime.
// DoFn input and output parameter types should be provided in order as the generic constraints.
func RegisterDoFn6x2[I0, I1, I2, I3, I4, I5, R0, R1 any](doFn doFn6x2[I0, I1, I2, I3, I4, I5, R0, R1]) {
	registerDoFnTypes(doFn)
	registerDoFn6x2StructWrappersAndFuncs[I0, I1, I2, I3, I4, I5, R0, R1](doFn)
}

type doFn7x2[I0, I1, I2, I3, I4, I5, I6, R0, R1 any] interface {
	ProcessElement(i0 I0, i1 I1, i2 I2, i3 I3, i4 I4, i5 I5, i6 I6) (R0, R1)
}

type caller7x2[I0, I1, I2, I3, I4, I5, I6, R0, R1 any] struct {
	fn func(I0, I1, I2, I3, I4, I5, I6) (R0, R1)
}

func (c *caller7x2[I0, I1, I2, I3, I4, I5, I6, R0, R1]) Name() string {
	return reflectx.FunctionName(c.fn)
}

func (c *caller7x2[I0, I1, I2, I3, I4, I5, I6, R0, R1]) Type() reflect.Type {
	return reflect.TypeOf(c.fn)
}

func (c *caller7x2[I0, I1, I2, I3, I4, I5, I6, R0, R1]) Call(args []interface{}) []interface{} {
	out0, out1 := c.fn(args[0].(I0), args[1].(I1), args[2].(I2), args[3].(I3), args[4].(I4), args[5].(I5), args[6].(I6))
	return []interface{}{out0, out1}
}

func (c *caller7x2[I0, I1, I2, I3, I4, I5, I6, R0, R1]) Call7x2(arg0 I0, arg1 I1, arg2 I2, arg3 I3, arg4 I4, arg5 I5, arg6 I6) (interface{}, interface{}) {
	return c.fn(arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

func registerDoFn7x2StructWrappersAndFuncs[I0, I1, I2, I3, I4, I5, I6, R0, R1 any](doFn doFn7x2[I0, I1, I2, I3, I4, I5, I6, R0, R1]) {
	processElementCaller := func(fn interface{}) reflectx.Func {
		f := fn.(func(I0, I1, I2, I3, I4, I5, I6) (R0, R1))
		return &caller7x2[I0, I1, I2, I3, I4, I5, I6, R0, R1]{fn: f}
	}
	reflectx.RegisterFunc(reflect.TypeOf((*func(I0, I1, I2, I3, I4, I5, I6) (R0, R1))(nil)).Elem(), processElementCaller)
	processElementWrapper := func(fn interface{}) reflectx.Func {
		return reflectx.MakeFunc(func(a0 I0, a1 I1, a2 I2, a3 I3, a4 I4, a5 I5, a6 I6) (R0, R1) {
			return fn.(doFn7x2[I0, I1, I2, I3, I4, I5, I6, R0, R1]).ProcessElement(a0, a1, a2, a3, a4, a5, a6)
		})
	}
	startBundleWrapper := buildStartBundleWrapper7[I0, I1, I2, I3, I4, I5, I6](doFn)
	finishBundleWrapper := buildFinishBundleWrapper7[I0, I1, I2, I3, I4, I5, I6](doFn)
	setupWrapper := buildSetupWrapper(doFn)
	teardownWrapper := buildTeardownWrapper(doFn)

	wrapperFn := func(fn interface{}) map[string]reflectx.Func {
		m := map[string]reflectx.Func{}
		if processElementWrapper != nil {
			m["ProcessElement"] = processElementWrapper(fn)
		}
		if startBundleWrapper != nil {
			m["StartBundle"] = startBundleWrapper(fn)
		}
		if finishBundleWrapper != nil {
			m["FinishBundle"] = finishBundleWrapper(fn)
		}
		if setupWrapper != nil {
			m["Setup"] = setupWrapper(fn)
		}
		if teardownWrapper != nil {
			m["Teardown"] = teardownWrapper(fn)
		}

		return m
	}
	reflectx.RegisterStructWrapper(reflect.TypeOf(doFn).Elem(), wrapperFn)
}

// RegisterDoFn7x2[I0, I1, I2, I3, I4, I5, I6, R0, R1 any] registers your DoFn to optimize execution at runtime.
// DoFn input and output parameter types should be provided in order as the generic constraints.
func RegisterDoFn7x2[I0, I1, I2, I3, I4, I5, I6, R0, R1 any](doFn doFn7x2[I0, I1, I2, I3, I4, I5, I6, R0, R1]) {
	registerDoFnTypes(doFn)
	registerDoFn7x2StructWrappersAndFuncs[I0, I1, I2, I3, I4, I5, I6, R0, R1](doFn)
}

type doFn8x2[I0, I1, I2, I3, I4, I5, I6, I7, R0, R1 any] interface {
	ProcessElement(i0 I0, i1 I1, i2 I2, i3 I3, i4 I4, i5 I5, i6 I6, i7 I7) (R0, R1)
}

type caller8x2[I0, I1, I2, I3, I4, I5, I6, I7, R0, R1 any] struct {
	fn func(I0, I1, I2, I3, I4, I5, I6, I7) (R0, R1)
}

func (c *caller8x2[I0, I1, I2, I3, I4, I5, I6, I7, R0, R1]) Name() string {
	return reflectx.FunctionName(c.fn)
}

func (c *caller8x2[I0, I1, I2, I3, I4, I5, I6, I7, R0, R1]) Type() reflect.Type {
	return reflect.TypeOf(c.fn)
}

func (c *caller8x2[I0, I1, I2, I3, I4, I5, I6, I7, R0, R1]) Call(args []interface{}) []interface{} {
	out0, out1 := c.fn(args[0].(I0), args[1].(I1), args[2].(I2), args[3].(I3), args[4].(I4), args[5].(I5), args[6].(I6), args[7].(I7))
	return []interface{}{out0, out1}
}

func (c *caller8x2[I0, I1, I2, I3, I4, I5, I6, I7, R0, R1]) Call8x2(arg0 I0, arg1 I1, arg2 I2, arg3 I3, arg4 I4, arg5 I5, arg6 I6, arg7 I7) (interface{}, interface{}) {
	return c.fn(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
}

func registerDoFn8x2StructWrappersAndFuncs[I0, I1, I2, I3, I4, I5, I6, I7, R0, R1 any](doFn doFn8x2[I0, I1, I2, I3, I4, I5, I6, I7, R0, R1]) {
	processElementCaller := func(fn interface{}) reflectx.Func {
		f := fn.(func(I0, I1, I2, I3, I4, I5, I6, I7) (R0, R1))
		return &caller8x2[I0, I1, I2, I3, I4, I5, I6, I7, R0, R1]{fn: f}
	}
	reflectx.RegisterFunc(reflect.TypeOf((*func(I0, I1, I2, I3, I4, I5, I6, I7) (R0, R1))(nil)).Elem(), processElementCaller)
	processElementWrapper := func(fn interface{}) reflectx.Func {
		return reflectx.MakeFunc(func(a0 I0, a1 I1, a2 I2, a3 I3, a4 I4, a5 I5, a6 I6, a7 I7) (R0, R1) {
			return fn.(doFn8x2[I0, I1, I2, I3, I4, I5, I6, I7, R0, R1]).ProcessElement(a0, a1, a2, a3, a4, a5, a6, a7)
		})
	}
	startBundleWrapper := buildStartBundleWrapper8[I0, I1, I2, I3, I4, I5, I6, I7](doFn)
	finishBundleWrapper := buildFinishBundleWrapper8[I0, I1, I2, I3, I4, I5, I6, I7](doFn)
	setupWrapper := buildSetupWrapper(doFn)
	teardownWrapper := buildTeardownWrapper(doFn)

	wrapperFn := func(fn interface{}) map[string]reflectx.Func {
		m := map[string]reflectx.Func{}
		if processElementWrapper != nil {
			m["ProcessElement"] = processElementWrapper(fn)
		}
		if startBundleWrapper != nil {
			m["StartBundle"] = startBundleWrapper(fn)
		}
		if finishBundleWrapper != nil {
			m["FinishBundle"] = finishBundleWrapper(fn)
		}
		if setupWrapper != nil {
			m["Setup"] = setupWrapper(fn)
		}
		if teardownWrapper != nil {
			m["Teardown"] = teardownWrapper(fn)
		}

		return m
	}
	reflectx.RegisterStructWrapper(reflect.TypeOf(doFn).Elem(), wrapperFn)
}

// RegisterDoFn8x2[I0, I1, I2, I3, I4, I5, I6, I7, R0, R1 any] registers your DoFn to optimize execution at runtime.
// DoFn input and output parameter types should be provided in order as the generic constraints.
func RegisterDoFn8x2[I0, I1, I2, I3, I4, I5, I6, I7, R0, R1 any](doFn doFn8x2[I0, I1, I2, I3, I4, I5, I6, I7, R0, R1]) {
	registerDoFnTypes(doFn)
	registerDoFn8x2StructWrappersAndFuncs[I0, I1, I2, I3, I4, I5, I6, I7, R0, R1](doFn)
}

type doFn0x3[R0, R1, R2 any] interface {
	ProcessElement() (R0, R1, R2)
}

type caller0x3[R0, R1, R2 any] struct {
	fn func() (R0, R1, R2)
}

func (c *caller0x3[R0, R1, R2]) Name() string {
	return reflectx.FunctionName(c.fn)
}

func (c *caller0x3[R0, R1, R2]) Type() reflect.Type {
	return reflect.TypeOf(c.fn)
}

func (c *caller0x3[R0, R1, R2]) Call(args []interface{}) []interface{} {
	out0, out1, out2 := c.fn()
	return []interface{}{out0, out1, out2}
}

func (c *caller0x3[R0, R1, R2]) Call0x3() (interface{}, interface{}, interface{}) {
	return c.fn()
}

func registerDoFn0x3StructWrappersAndFuncs[R0, R1, R2 any](doFn doFn0x3[R0, R1, R2]) {
	processElementCaller := func(fn interface{}) reflectx.Func {
		f := fn.(func() (R0, R1, R2))
		return &caller0x3[R0, R1, R2]{fn: f}
	}
	reflectx.RegisterFunc(reflect.TypeOf((*func() (R0, R1, R2))(nil)).Elem(), processElementCaller)
	processElementWrapper := func(fn interface{}) reflectx.Func {
		return reflectx.MakeFunc(func() (R0, R1, R2) {
			return fn.(doFn0x3[R0, R1, R2]).ProcessElement()
		})
	}
	startBundleWrapper := buildStartBundleWrapper0(doFn)
	finishBundleWrapper := buildFinishBundleWrapper0(doFn)
	setupWrapper := buildSetupWrapper(doFn)
	teardownWrapper := buildTeardownWrapper(doFn)

	wrapperFn := func(fn interface{}) map[string]reflectx.Func {
		m := map[string]reflectx.Func{}
		if processElementWrapper != nil {
			m["ProcessElement"] = processElementWrapper(fn)
		}
		if startBundleWrapper != nil {
			m["StartBundle"] = startBundleWrapper(fn)
		}
		if finishBundleWrapper != nil {
			m["FinishBundle"] = finishBundleWrapper(fn)
		}
		if setupWrapper != nil {
			m["Setup"] = setupWrapper(fn)
		}
		if teardownWrapper != nil {
			m["Teardown"] = teardownWrapper(fn)
		}

		return m
	}
	reflectx.RegisterStructWrapper(reflect.TypeOf(doFn).Elem(), wrapperFn)
}

// RegisterDoFn0x3[R0, R1, R2 any] registers your DoFn to optimize execution at runtime.
// DoFn input and output parameter types should be provided in order as the generic constraints.
func RegisterDoFn0x3[R0, R1, R2 any](doFn doFn0x3[R0, R1, R2]) {
	registerDoFnTypes(doFn)
	registerDoFn0x3StructWrappersAndFuncs[R0, R1, R2](doFn)
}

type doFn1x3[I0, R0, R1, R2 any] interface {
	ProcessElement(i0 I0) (R0, R1, R2)
}

type caller1x3[I0, R0, R1, R2 any] struct {
	fn func(I0) (R0, R1, R2)
}

func (c *caller1x3[I0, R0, R1, R2]) Name() string {
	return reflectx.FunctionName(c.fn)
}

func (c *caller1x3[I0, R0, R1, R2]) Type() reflect.Type {
	return reflect.TypeOf(c.fn)
}

func (c *caller1x3[I0, R0, R1, R2]) Call(args []interface{}) []interface{} {
	out0, out1, out2 := c.fn(args[0].(I0))
	return []interface{}{out0, out1, out2}
}

func (c *caller1x3[I0, R0, R1, R2]) Call1x3(arg0 I0) (interface{}, interface{}, interface{}) {
	return c.fn(arg0)
}

func registerDoFn1x3StructWrappersAndFuncs[I0, R0, R1, R2 any](doFn doFn1x3[I0, R0, R1, R2]) {
	processElementCaller := func(fn interface{}) reflectx.Func {
		f := fn.(func(I0) (R0, R1, R2))
		return &caller1x3[I0, R0, R1, R2]{fn: f}
	}
	reflectx.RegisterFunc(reflect.TypeOf((*func(I0) (R0, R1, R2))(nil)).Elem(), processElementCaller)
	processElementWrapper := func(fn interface{}) reflectx.Func {
		return reflectx.MakeFunc(func(a0 I0) (R0, R1, R2) {
			return fn.(doFn1x3[I0, R0, R1, R2]).ProcessElement(a0)
		})
	}
	startBundleWrapper := buildStartBundleWrapper1[I0](doFn)
	finishBundleWrapper := buildFinishBundleWrapper1[I0](doFn)
	setupWrapper := buildSetupWrapper(doFn)
	teardownWrapper := buildTeardownWrapper(doFn)

	wrapperFn := func(fn interface{}) map[string]reflectx.Func {
		m := map[string]reflectx.Func{}
		if processElementWrapper != nil {
			m["ProcessElement"] = processElementWrapper(fn)
		}
		if startBundleWrapper != nil {
			m["StartBundle"] = startBundleWrapper(fn)
		}
		if finishBundleWrapper != nil {
			m["FinishBundle"] = finishBundleWrapper(fn)
		}
		if setupWrapper != nil {
			m["Setup"] = setupWrapper(fn)
		}
		if teardownWrapper != nil {
			m["Teardown"] = teardownWrapper(fn)
		}

		return m
	}
	reflectx.RegisterStructWrapper(reflect.TypeOf(doFn).Elem(), wrapperFn)
}

// RegisterDoFn1x3[I0, R0, R1, R2 any] registers your DoFn to optimize execution at runtime.
// DoFn input and output parameter types should be provided in order as the generic constraints.
func RegisterDoFn1x3[I0, R0, R1, R2 any](doFn doFn1x3[I0, R0, R1, R2]) {
	registerDoFnTypes(doFn)
	registerDoFn1x3StructWrappersAndFuncs[I0, R0, R1, R2](doFn)
}

type doFn2x3[I0, I1, R0, R1, R2 any] interface {
	ProcessElement(i0 I0, i1 I1) (R0, R1, R2)
}

type caller2x3[I0, I1, R0, R1, R2 any] struct {
	fn func(I0, I1) (R0, R1, R2)
}

func (c *caller2x3[I0, I1, R0, R1, R2]) Name() string {
	return reflectx.FunctionName(c.fn)
}

func (c *caller2x3[I0, I1, R0, R1, R2]) Type() reflect.Type {
	return reflect.TypeOf(c.fn)
}

func (c *caller2x3[I0, I1, R0, R1, R2]) Call(args []interface{}) []interface{} {
	out0, out1, out2 := c.fn(args[0].(I0), args[1].(I1))
	return []interface{}{out0, out1, out2}
}

func (c *caller2x3[I0, I1, R0, R1, R2]) Call2x3(arg0 I0, arg1 I1) (interface{}, interface{}, interface{}) {
	return c.fn(arg0, arg1)
}

func registerDoFn2x3StructWrappersAndFuncs[I0, I1, R0, R1, R2 any](doFn doFn2x3[I0, I1, R0, R1, R2]) {
	processElementCaller := func(fn interface{}) reflectx.Func {
		f := fn.(func(I0, I1) (R0, R1, R2))
		return &caller2x3[I0, I1, R0, R1, R2]{fn: f}
	}
	reflectx.RegisterFunc(reflect.TypeOf((*func(I0, I1) (R0, R1, R2))(nil)).Elem(), processElementCaller)
	processElementWrapper := func(fn interface{}) reflectx.Func {
		return reflectx.MakeFunc(func(a0 I0, a1 I1) (R0, R1, R2) {
			return fn.(doFn2x3[I0, I1, R0, R1, R2]).ProcessElement(a0, a1)
		})
	}
	startBundleWrapper := buildStartBundleWrapper2[I0, I1](doFn)
	finishBundleWrapper := buildFinishBundleWrapper2[I0, I1](doFn)
	setupWrapper := buildSetupWrapper(doFn)
	teardownWrapper := buildTeardownWrapper(doFn)

	wrapperFn := func(fn interface{}) map[string]reflectx.Func {
		m := map[string]reflectx.Func{}
		if processElementWrapper != nil {
			m["ProcessElement"] = processElementWrapper(fn)
		}
		if startBundleWrapper != nil {
			m["StartBundle"] = startBundleWrapper(fn)
		}
		if finishBundleWrapper != nil {
			m["FinishBundle"] = finishBundleWrapper(fn)
		}
		if setupWrapper != nil {
			m["Setup"] = setupWrapper(fn)
		}
		if teardownWrapper != nil {
			m["Teardown"] = teardownWrapper(fn)
		}

		return m
	}
	reflectx.RegisterStructWrapper(reflect.TypeOf(doFn).Elem(), wrapperFn)
}

// RegisterDoFn2x3[I0, I1, R0, R1, R2 any] registers your DoFn to optimize execution at runtime.
// DoFn input and output parameter types should be provided in order as the generic constraints.
func RegisterDoFn2x3[I0, I1, R0, R1, R2 any](doFn doFn2x3[I0, I1, R0, R1, R2]) {
	registerDoFnTypes(doFn)
	registerDoFn2x3StructWrappersAndFuncs[I0, I1, R0, R1, R2](doFn)
}

type doFn3x3[I0, I1, I2, R0, R1, R2 any] interface {
	ProcessElement(i0 I0, i1 I1, i2 I2) (R0, R1, R2)
}

type caller3x3[I0, I1, I2, R0, R1, R2 any] struct {
	fn func(I0, I1, I2) (R0, R1, R2)
}

func (c *caller3x3[I0, I1, I2, R0, R1, R2]) Name() string {
	return reflectx.FunctionName(c.fn)
}

func (c *caller3x3[I0, I1, I2, R0, R1, R2]) Type() reflect.Type {
	return reflect.TypeOf(c.fn)
}

func (c *caller3x3[I0, I1, I2, R0, R1, R2]) Call(args []interface{}) []interface{} {
	out0, out1, out2 := c.fn(args[0].(I0), args[1].(I1), args[2].(I2))
	return []interface{}{out0, out1, out2}
}

func (c *caller3x3[I0, I1, I2, R0, R1, R2]) Call3x3(arg0 I0, arg1 I1, arg2 I2) (interface{}, interface{}, interface{}) {
	return c.fn(arg0, arg1, arg2)
}

func registerDoFn3x3StructWrappersAndFuncs[I0, I1, I2, R0, R1, R2 any](doFn doFn3x3[I0, I1, I2, R0, R1, R2]) {
	processElementCaller := func(fn interface{}) reflectx.Func {
		f := fn.(func(I0, I1, I2) (R0, R1, R2))
		return &caller3x3[I0, I1, I2, R0, R1, R2]{fn: f}
	}
	reflectx.RegisterFunc(reflect.TypeOf((*func(I0, I1, I2) (R0, R1, R2))(nil)).Elem(), processElementCaller)
	processElementWrapper := func(fn interface{}) reflectx.Func {
		return reflectx.MakeFunc(func(a0 I0, a1 I1, a2 I2) (R0, R1, R2) {
			return fn.(doFn3x3[I0, I1, I2, R0, R1, R2]).ProcessElement(a0, a1, a2)
		})
	}
	startBundleWrapper := buildStartBundleWrapper3[I0, I1, I2](doFn)
	finishBundleWrapper := buildFinishBundleWrapper3[I0, I1, I2](doFn)
	setupWrapper := buildSetupWrapper(doFn)
	teardownWrapper := buildTeardownWrapper(doFn)

	wrapperFn := func(fn interface{}) map[string]reflectx.Func {
		m := map[string]reflectx.Func{}
		if processElementWrapper != nil {
			m["ProcessElement"] = processElementWrapper(fn)
		}
		if startBundleWrapper != nil {
			m["StartBundle"] = startBundleWrapper(fn)
		}
		if finishBundleWrapper != nil {
			m["FinishBundle"] = finishBundleWrapper(fn)
		}
		if setupWrapper != nil {
			m["Setup"] = setupWrapper(fn)
		}
		if teardownWrapper != nil {
			m["Teardown"] = teardownWrapper(fn)
		}

		return m
	}
	reflectx.RegisterStructWrapper(reflect.TypeOf(doFn).Elem(), wrapperFn)
}

// RegisterDoFn3x3[I0, I1, I2, R0, R1, R2 any] registers your DoFn to optimize execution at runtime.
// DoFn input and output parameter types should be provided in order as the generic constraints.
func RegisterDoFn3x3[I0, I1, I2, R0, R1, R2 any](doFn doFn3x3[I0, I1, I2, R0, R1, R2]) {
	registerDoFnTypes(doFn)
	registerDoFn3x3StructWrappersAndFuncs[I0, I1, I2, R0, R1, R2](doFn)
}

type doFn4x3[I0, I1, I2, I3, R0, R1, R2 any] interface {
	ProcessElement(i0 I0, i1 I1, i2 I2, i3 I3) (R0, R1, R2)
}

type caller4x3[I0, I1, I2, I3, R0, R1, R2 any] struct {
	fn func(I0, I1, I2, I3) (R0, R1, R2)
}

func (c *caller4x3[I0, I1, I2, I3, R0, R1, R2]) Name() string {
	return reflectx.FunctionName(c.fn)
}

func (c *caller4x3[I0, I1, I2, I3, R0, R1, R2]) Type() reflect.Type {
	return reflect.TypeOf(c.fn)
}

func (c *caller4x3[I0, I1, I2, I3, R0, R1, R2]) Call(args []interface{}) []interface{} {
	out0, out1, out2 := c.fn(args[0].(I0), args[1].(I1), args[2].(I2), args[3].(I3))
	return []interface{}{out0, out1, out2}
}

func (c *caller4x3[I0, I1, I2, I3, R0, R1, R2]) Call4x3(arg0 I0, arg1 I1, arg2 I2, arg3 I3) (interface{}, interface{}, interface{}) {
	return c.fn(arg0, arg1, arg2, arg3)
}

func registerDoFn4x3StructWrappersAndFuncs[I0, I1, I2, I3, R0, R1, R2 any](doFn doFn4x3[I0, I1, I2, I3, R0, R1, R2]) {
	processElementCaller := func(fn interface{}) reflectx.Func {
		f := fn.(func(I0, I1, I2, I3) (R0, R1, R2))
		return &caller4x3[I0, I1, I2, I3, R0, R1, R2]{fn: f}
	}
	reflectx.RegisterFunc(reflect.TypeOf((*func(I0, I1, I2, I3) (R0, R1, R2))(nil)).Elem(), processElementCaller)
	processElementWrapper := func(fn interface{}) reflectx.Func {
		return reflectx.MakeFunc(func(a0 I0, a1 I1, a2 I2, a3 I3) (R0, R1, R2) {
			return fn.(doFn4x3[I0, I1, I2, I3, R0, R1, R2]).ProcessElement(a0, a1, a2, a3)
		})
	}
	startBundleWrapper := buildStartBundleWrapper4[I0, I1, I2, I3](doFn)
	finishBundleWrapper := buildFinishBundleWrapper4[I0, I1, I2, I3](doFn)
	setupWrapper := buildSetupWrapper(doFn)
	teardownWrapper := buildTeardownWrapper(doFn)

	wrapperFn := func(fn interface{}) map[string]reflectx.Func {
		m := map[string]reflectx.Func{}
		if processElementWrapper != nil {
			m["ProcessElement"] = processElementWrapper(fn)
		}
		if startBundleWrapper != nil {
			m["StartBundle"] = startBundleWrapper(fn)
		}
		if finishBundleWrapper != nil {
			m["FinishBundle"] = finishBundleWrapper(fn)
		}
		if setupWrapper != nil {
			m["Setup"] = setupWrapper(fn)
		}
		if teardownWrapper != nil {
			m["Teardown"] = teardownWrapper(fn)
		}

		return m
	}
	reflectx.RegisterStructWrapper(reflect.TypeOf(doFn).Elem(), wrapperFn)
}

// RegisterDoFn4x3[I0, I1, I2, I3, R0, R1, R2 any] registers your DoFn to optimize execution at runtime.
// DoFn input and output parameter types should be provided in order as the generic constraints.
func RegisterDoFn4x3[I0, I1, I2, I3, R0, R1, R2 any](doFn doFn4x3[I0, I1, I2, I3, R0, R1, R2]) {
	registerDoFnTypes(doFn)
	registerDoFn4x3StructWrappersAndFuncs[I0, I1, I2, I3, R0, R1, R2](doFn)
}

type doFn5x3[I0, I1, I2, I3, I4, R0, R1, R2 any] interface {
	ProcessElement(i0 I0, i1 I1, i2 I2, i3 I3, i4 I4) (R0, R1, R2)
}

type caller5x3[I0, I1, I2, I3, I4, R0, R1, R2 any] struct {
	fn func(I0, I1, I2, I3, I4) (R0, R1, R2)
}

func (c *caller5x3[I0, I1, I2, I3, I4, R0, R1, R2]) Name() string {
	return reflectx.FunctionName(c.fn)
}

func (c *caller5x3[I0, I1, I2, I3, I4, R0, R1, R2]) Type() reflect.Type {
	return reflect.TypeOf(c.fn)
}

func (c *caller5x3[I0, I1, I2, I3, I4, R0, R1, R2]) Call(args []interface{}) []interface{} {
	out0, out1, out2 := c.fn(args[0].(I0), args[1].(I1), args[2].(I2), args[3].(I3), args[4].(I4))
	return []interface{}{out0, out1, out2}
}

func (c *caller5x3[I0, I1, I2, I3, I4, R0, R1, R2]) Call5x3(arg0 I0, arg1 I1, arg2 I2, arg3 I3, arg4 I4) (interface{}, interface{}, interface{}) {
	return c.fn(arg0, arg1, arg2, arg3, arg4)
}

func registerDoFn5x3StructWrappersAndFuncs[I0, I1, I2, I3, I4, R0, R1, R2 any](doFn doFn5x3[I0, I1, I2, I3, I4, R0, R1, R2]) {
	processElementCaller := func(fn interface{}) reflectx.Func {
		f := fn.(func(I0, I1, I2, I3, I4) (R0, R1, R2))
		return &caller5x3[I0, I1, I2, I3, I4, R0, R1, R2]{fn: f}
	}
	reflectx.RegisterFunc(reflect.TypeOf((*func(I0, I1, I2, I3, I4) (R0, R1, R2))(nil)).Elem(), processElementCaller)
	processElementWrapper := func(fn interface{}) reflectx.Func {
		return reflectx.MakeFunc(func(a0 I0, a1 I1, a2 I2, a3 I3, a4 I4) (R0, R1, R2) {
			return fn.(doFn5x3[I0, I1, I2, I3, I4, R0, R1, R2]).ProcessElement(a0, a1, a2, a3, a4)
		})
	}
	startBundleWrapper := buildStartBundleWrapper5[I0, I1, I2, I3, I4](doFn)
	finishBundleWrapper := buildFinishBundleWrapper5[I0, I1, I2, I3, I4](doFn)
	setupWrapper := buildSetupWrapper(doFn)
	teardownWrapper := buildTeardownWrapper(doFn)

	wrapperFn := func(fn interface{}) map[string]reflectx.Func {
		m := map[string]reflectx.Func{}
		if processElementWrapper != nil {
			m["ProcessElement"] = processElementWrapper(fn)
		}
		if startBundleWrapper != nil {
			m["StartBundle"] = startBundleWrapper(fn)
		}
		if finishBundleWrapper != nil {
			m["FinishBundle"] = finishBundleWrapper(fn)
		}
		if setupWrapper != nil {
			m["Setup"] = setupWrapper(fn)
		}
		if teardownWrapper != nil {
			m["Teardown"] = teardownWrapper(fn)
		}

		return m
	}
	reflectx.RegisterStructWrapper(reflect.TypeOf(doFn).Elem(), wrapperFn)
}

// RegisterDoFn5x3[I0, I1, I2, I3, I4, R0, R1, R2 any] registers your DoFn to optimize execution at runtime.
// DoFn input and output parameter types should be provided in order as the generic constraints.
func RegisterDoFn5x3[I0, I1, I2, I3, I4, R0, R1, R2 any](doFn doFn5x3[I0, I1, I2, I3, I4, R0, R1, R2]) {
	registerDoFnTypes(doFn)
	registerDoFn5x3StructWrappersAndFuncs[I0, I1, I2, I3, I4, R0, R1, R2](doFn)
}

type doFn6x3[I0, I1, I2, I3, I4, I5, R0, R1, R2 any] interface {
	ProcessElement(i0 I0, i1 I1, i2 I2, i3 I3, i4 I4, i5 I5) (R0, R1, R2)
}

type caller6x3[I0, I1, I2, I3, I4, I5, R0, R1, R2 any] struct {
	fn func(I0, I1, I2, I3, I4, I5) (R0, R1, R2)
}

func (c *caller6x3[I0, I1, I2, I3, I4, I5, R0, R1, R2]) Name() string {
	return reflectx.FunctionName(c.fn)
}

func (c *caller6x3[I0, I1, I2, I3, I4, I5, R0, R1, R2]) Type() reflect.Type {
	return reflect.TypeOf(c.fn)
}

func (c *caller6x3[I0, I1, I2, I3, I4, I5, R0, R1, R2]) Call(args []interface{}) []interface{} {
	out0, out1, out2 := c.fn(args[0].(I0), args[1].(I1), args[2].(I2), args[3].(I3), args[4].(I4), args[5].(I5))
	return []interface{}{out0, out1, out2}
}

func (c *caller6x3[I0, I1, I2, I3, I4, I5, R0, R1, R2]) Call6x3(arg0 I0, arg1 I1, arg2 I2, arg3 I3, arg4 I4, arg5 I5) (interface{}, interface{}, interface{}) {
	return c.fn(arg0, arg1, arg2, arg3, arg4, arg5)
}

func registerDoFn6x3StructWrappersAndFuncs[I0, I1, I2, I3, I4, I5, R0, R1, R2 any](doFn doFn6x3[I0, I1, I2, I3, I4, I5, R0, R1, R2]) {
	processElementCaller := func(fn interface{}) reflectx.Func {
		f := fn.(func(I0, I1, I2, I3, I4, I5) (R0, R1, R2))
		return &caller6x3[I0, I1, I2, I3, I4, I5, R0, R1, R2]{fn: f}
	}
	reflectx.RegisterFunc(reflect.TypeOf((*func(I0, I1, I2, I3, I4, I5) (R0, R1, R2))(nil)).Elem(), processElementCaller)
	processElementWrapper := func(fn interface{}) reflectx.Func {
		return reflectx.MakeFunc(func(a0 I0, a1 I1, a2 I2, a3 I3, a4 I4, a5 I5) (R0, R1, R2) {
			return fn.(doFn6x3[I0, I1, I2, I3, I4, I5, R0, R1, R2]).ProcessElement(a0, a1, a2, a3, a4, a5)
		})
	}
	startBundleWrapper := buildStartBundleWrapper6[I0, I1, I2, I3, I4, I5](doFn)
	finishBundleWrapper := buildFinishBundleWrapper6[I0, I1, I2, I3, I4, I5](doFn)
	setupWrapper := buildSetupWrapper(doFn)
	teardownWrapper := buildTeardownWrapper(doFn)

	wrapperFn := func(fn interface{}) map[string]reflectx.Func {
		m := map[string]reflectx.Func{}
		if processElementWrapper != nil {
			m["ProcessElement"] = processElementWrapper(fn)
		}
		if startBundleWrapper != nil {
			m["StartBundle"] = startBundleWrapper(fn)
		}
		if finishBundleWrapper != nil {
			m["FinishBundle"] = finishBundleWrapper(fn)
		}
		if setupWrapper != nil {
			m["Setup"] = setupWrapper(fn)
		}
		if teardownWrapper != nil {
			m["Teardown"] = teardownWrapper(fn)
		}

		return m
	}
	reflectx.RegisterStructWrapper(reflect.TypeOf(doFn).Elem(), wrapperFn)
}

// RegisterDoFn6x3[I0, I1, I2, I3, I4, I5, R0, R1, R2 any] registers your DoFn to optimize execution at runtime.
// DoFn input and output parameter types should be provided in order as the generic constraints.
func RegisterDoFn6x3[I0, I1, I2, I3, I4, I5, R0, R1, R2 any](doFn doFn6x3[I0, I1, I2, I3, I4, I5, R0, R1, R2]) {
	registerDoFnTypes(doFn)
	registerDoFn6x3StructWrappersAndFuncs[I0, I1, I2, I3, I4, I5, R0, R1, R2](doFn)
}

type doFn7x3[I0, I1, I2, I3, I4, I5, I6, R0, R1, R2 any] interface {
	ProcessElement(i0 I0, i1 I1, i2 I2, i3 I3, i4 I4, i5 I5, i6 I6) (R0, R1, R2)
}

type caller7x3[I0, I1, I2, I3, I4, I5, I6, R0, R1, R2 any] struct {
	fn func(I0, I1, I2, I3, I4, I5, I6) (R0, R1, R2)
}

func (c *caller7x3[I0, I1, I2, I3, I4, I5, I6, R0, R1, R2]) Name() string {
	return reflectx.FunctionName(c.fn)
}

func (c *caller7x3[I0, I1, I2, I3, I4, I5, I6, R0, R1, R2]) Type() reflect.Type {
	return reflect.TypeOf(c.fn)
}

func (c *caller7x3[I0, I1, I2, I3, I4, I5, I6, R0, R1, R2]) Call(args []interface{}) []interface{} {
	out0, out1, out2 := c.fn(args[0].(I0), args[1].(I1), args[2].(I2), args[3].(I3), args[4].(I4), args[5].(I5), args[6].(I6))
	return []interface{}{out0, out1, out2}
}

func (c *caller7x3[I0, I1, I2, I3, I4, I5, I6, R0, R1, R2]) Call7x3(arg0 I0, arg1 I1, arg2 I2, arg3 I3, arg4 I4, arg5 I5, arg6 I6) (interface{}, interface{}, interface{}) {
	return c.fn(arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

func registerDoFn7x3StructWrappersAndFuncs[I0, I1, I2, I3, I4, I5, I6, R0, R1, R2 any](doFn doFn7x3[I0, I1, I2, I3, I4, I5, I6, R0, R1, R2]) {
	processElementCaller := func(fn interface{}) reflectx.Func {
		f := fn.(func(I0, I1, I2, I3, I4, I5, I6) (R0, R1, R2))
		return &caller7x3[I0, I1, I2, I3, I4, I5, I6, R0, R1, R2]{fn: f}
	}
	reflectx.RegisterFunc(reflect.TypeOf((*func(I0, I1, I2, I3, I4, I5, I6) (R0, R1, R2))(nil)).Elem(), processElementCaller)
	processElementWrapper := func(fn interface{}) reflectx.Func {
		return reflectx.MakeFunc(func(a0 I0, a1 I1, a2 I2, a3 I3, a4 I4, a5 I5, a6 I6) (R0, R1, R2) {
			return fn.(doFn7x3[I0, I1, I2, I3, I4, I5, I6, R0, R1, R2]).ProcessElement(a0, a1, a2, a3, a4, a5, a6)
		})
	}
	startBundleWrapper := buildStartBundleWrapper7[I0, I1, I2, I3, I4, I5, I6](doFn)
	finishBundleWrapper := buildFinishBundleWrapper7[I0, I1, I2, I3, I4, I5, I6](doFn)
	setupWrapper := buildSetupWrapper(doFn)
	teardownWrapper := buildTeardownWrapper(doFn)

	wrapperFn := func(fn interface{}) map[string]reflectx.Func {
		m := map[string]reflectx.Func{}
		if processElementWrapper != nil {
			m["ProcessElement"] = processElementWrapper(fn)
		}
		if startBundleWrapper != nil {
			m["StartBundle"] = startBundleWrapper(fn)
		}
		if finishBundleWrapper != nil {
			m["FinishBundle"] = finishBundleWrapper(fn)
		}
		if setupWrapper != nil {
			m["Setup"] = setupWrapper(fn)
		}
		if teardownWrapper != nil {
			m["Teardown"] = teardownWrapper(fn)
		}

		return m
	}
	reflectx.RegisterStructWrapper(reflect.TypeOf(doFn).Elem(), wrapperFn)
}

// RegisterDoFn7x3[I0, I1, I2, I3, I4, I5, I6, R0, R1, R2 any] registers your DoFn to optimize execution at runtime.
// DoFn input and output parameter types should be provided in order as the generic constraints.
func RegisterDoFn7x3[I0, I1, I2, I3, I4, I5, I6, R0, R1, R2 any](doFn doFn7x3[I0, I1, I2, I3, I4, I5, I6, R0, R1, R2]) {
	registerDoFnTypes(doFn)
	registerDoFn7x3StructWrappersAndFuncs[I0, I1, I2, I3, I4, I5, I6, R0, R1, R2](doFn)
}

type doFn8x3[I0, I1, I2, I3, I4, I5, I6, I7, R0, R1, R2 any] interface {
	ProcessElement(i0 I0, i1 I1, i2 I2, i3 I3, i4 I4, i5 I5, i6 I6, i7 I7) (R0, R1, R2)
}

type caller8x3[I0, I1, I2, I3, I4, I5, I6, I7, R0, R1, R2 any] struct {
	fn func(I0, I1, I2, I3, I4, I5, I6, I7) (R0, R1, R2)
}

func (c *caller8x3[I0, I1, I2, I3, I4, I5, I6, I7, R0, R1, R2]) Name() string {
	return reflectx.FunctionName(c.fn)
}

func (c *caller8x3[I0, I1, I2, I3, I4, I5, I6, I7, R0, R1, R2]) Type() reflect.Type {
	return reflect.TypeOf(c.fn)
}

func (c *caller8x3[I0, I1, I2, I3, I4, I5, I6, I7, R0, R1, R2]) Call(args []interface{}) []interface{} {
	out0, out1, out2 := c.fn(args[0].(I0), args[1].(I1), args[2].(I2), args[3].(I3), args[4].(I4), args[5].(I5), args[6].(I6), args[7].(I7))
	return []interface{}{out0, out1, out2}
}

func (c *caller8x3[I0, I1, I2, I3, I4, I5, I6, I7, R0, R1, R2]) Call8x3(arg0 I0, arg1 I1, arg2 I2, arg3 I3, arg4 I4, arg5 I5, arg6 I6, arg7 I7) (interface{}, interface{}, interface{}) {
	return c.fn(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
}

func registerDoFn8x3StructWrappersAndFuncs[I0, I1, I2, I3, I4, I5, I6, I7, R0, R1, R2 any](doFn doFn8x3[I0, I1, I2, I3, I4, I5, I6, I7, R0, R1, R2]) {
	processElementCaller := func(fn interface{}) reflectx.Func {
		f := fn.(func(I0, I1, I2, I3, I4, I5, I6, I7) (R0, R1, R2))
		return &caller8x3[I0, I1, I2, I3, I4, I5, I6, I7, R0, R1, R2]{fn: f}
	}
	reflectx.RegisterFunc(reflect.TypeOf((*func(I0, I1, I2, I3, I4, I5, I6, I7) (R0, R1, R2))(nil)).Elem(), processElementCaller)
	processElementWrapper := func(fn interface{}) reflectx.Func {
		return reflectx.MakeFunc(func(a0 I0, a1 I1, a2 I2, a3 I3, a4 I4, a5 I5, a6 I6, a7 I7) (R0, R1, R2) {
			return fn.(doFn8x3[I0, I1, I2, I3, I4, I5, I6, I7, R0, R1, R2]).ProcessElement(a0, a1, a2, a3, a4, a5, a6, a7)
		})
	}
	startBundleWrapper := buildStartBundleWrapper8[I0, I1, I2, I3, I4, I5, I6, I7](doFn)
	finishBundleWrapper := buildFinishBundleWrapper8[I0, I1, I2, I3, I4, I5, I6, I7](doFn)
	setupWrapper := buildSetupWrapper(doFn)
	teardownWrapper := buildTeardownWrapper(doFn)

	wrapperFn := func(fn interface{}) map[string]reflectx.Func {
		m := map[string]reflectx.Func{}
		if processElementWrapper != nil {
			m["ProcessElement"] = processElementWrapper(fn)
		}
		if startBundleWrapper != nil {
			m["StartBundle"] = startBundleWrapper(fn)
		}
		if finishBundleWrapper != nil {
			m["FinishBundle"] = finishBundleWrapper(fn)
		}
		if setupWrapper != nil {
			m["Setup"] = setupWrapper(fn)
		}
		if teardownWrapper != nil {
			m["Teardown"] = teardownWrapper(fn)
		}

		return m
	}
	reflectx.RegisterStructWrapper(reflect.TypeOf(doFn).Elem(), wrapperFn)
}

// RegisterDoFn8x3[I0, I1, I2, I3, I4, I5, I6, I7, R0, R1, R2 any] registers your DoFn to optimize execution at runtime.
// DoFn input and output parameter types should be provided in order as the generic constraints.
func RegisterDoFn8x3[I0, I1, I2, I3, I4, I5, I6, I7, R0, R1, R2 any](doFn doFn8x3[I0, I1, I2, I3, I4, I5, I6, I7, R0, R1, R2]) {
	registerDoFnTypes(doFn)
	registerDoFn8x3StructWrappersAndFuncs[I0, I1, I2, I3, I4, I5, I6, I7, R0, R1, R2](doFn)
}

type doFn0x4[R0, R1, R2, R3 any] interface {
	ProcessElement() (R0, R1, R2, R3)
}

type caller0x4[R0, R1, R2, R3 any] struct {
	fn func() (R0, R1, R2, R3)
}

func (c *caller0x4[R0, R1, R2, R3]) Name() string {
	return reflectx.FunctionName(c.fn)
}

func (c *caller0x4[R0, R1, R2, R3]) Type() reflect.Type {
	return reflect.TypeOf(c.fn)
}

func (c *caller0x4[R0, R1, R2, R3]) Call(args []interface{}) []interface{} {
	out0, out1, out2, out3 := c.fn()
	return []interface{}{out0, out1, out2, out3}
}

func (c *caller0x4[R0, R1, R2, R3]) Call0x4() (interface{}, interface{}, interface{}, interface{}) {
	return c.fn()
}

func registerDoFn0x4StructWrappersAndFuncs[R0, R1, R2, R3 any](doFn doFn0x4[R0, R1, R2, R3]) {
	processElementCaller := func(fn interface{}) reflectx.Func {
		f := fn.(func() (R0, R1, R2, R3))
		return &caller0x4[R0, R1, R2, R3]{fn: f}
	}
	reflectx.RegisterFunc(reflect.TypeOf((*func() (R0, R1, R2, R3))(nil)).Elem(), processElementCaller)
	processElementWrapper := func(fn interface{}) reflectx.Func {
		return reflectx.MakeFunc(func() (R0, R1, R2, R3) {
			return fn.(doFn0x4[R0, R1, R2, R3]).ProcessElement()
		})
	}
	startBundleWrapper := buildStartBundleWrapper0(doFn)
	finishBundleWrapper := buildFinishBundleWrapper0(doFn)
	setupWrapper := buildSetupWrapper(doFn)
	teardownWrapper := buildTeardownWrapper(doFn)

	wrapperFn := func(fn interface{}) map[string]reflectx.Func {
		m := map[string]reflectx.Func{}
		if processElementWrapper != nil {
			m["ProcessElement"] = processElementWrapper(fn)
		}
		if startBundleWrapper != nil {
			m["StartBundle"] = startBundleWrapper(fn)
		}
		if finishBundleWrapper != nil {
			m["FinishBundle"] = finishBundleWrapper(fn)
		}
		if setupWrapper != nil {
			m["Setup"] = setupWrapper(fn)
		}
		if teardownWrapper != nil {
			m["Teardown"] = teardownWrapper(fn)
		}

		return m
	}
	reflectx.RegisterStructWrapper(reflect.TypeOf(doFn).Elem(), wrapperFn)
}

// RegisterDoFn0x4[R0, R1, R2, R3 any] registers your DoFn to optimize execution at runtime.
// DoFn input and output parameter types should be provided in order as the generic constraints.
func RegisterDoFn0x4[R0, R1, R2, R3 any](doFn doFn0x4[R0, R1, R2, R3]) {
	registerDoFnTypes(doFn)
	registerDoFn0x4StructWrappersAndFuncs[R0, R1, R2, R3](doFn)
}

type doFn1x4[I0, R0, R1, R2, R3 any] interface {
	ProcessElement(i0 I0) (R0, R1, R2, R3)
}

type caller1x4[I0, R0, R1, R2, R3 any] struct {
	fn func(I0) (R0, R1, R2, R3)
}

func (c *caller1x4[I0, R0, R1, R2, R3]) Name() string {
	return reflectx.FunctionName(c.fn)
}

func (c *caller1x4[I0, R0, R1, R2, R3]) Type() reflect.Type {
	return reflect.TypeOf(c.fn)
}

func (c *caller1x4[I0, R0, R1, R2, R3]) Call(args []interface{}) []interface{} {
	out0, out1, out2, out3 := c.fn(args[0].(I0))
	return []interface{}{out0, out1, out2, out3}
}

func (c *caller1x4[I0, R0, R1, R2, R3]) Call1x4(arg0 I0) (interface{}, interface{}, interface{}, interface{}) {
	return c.fn(arg0)
}

func registerDoFn1x4StructWrappersAndFuncs[I0, R0, R1, R2, R3 any](doFn doFn1x4[I0, R0, R1, R2, R3]) {
	processElementCaller := func(fn interface{}) reflectx.Func {
		f := fn.(func(I0) (R0, R1, R2, R3))
		return &caller1x4[I0, R0, R1, R2, R3]{fn: f}
	}
	reflectx.RegisterFunc(reflect.TypeOf((*func(I0) (R0, R1, R2, R3))(nil)).Elem(), processElementCaller)
	processElementWrapper := func(fn interface{}) reflectx.Func {
		return reflectx.MakeFunc(func(a0 I0) (R0, R1, R2, R3) {
			return fn.(doFn1x4[I0, R0, R1, R2, R3]).ProcessElement(a0)
		})
	}
	startBundleWrapper := buildStartBundleWrapper1[I0](doFn)
	finishBundleWrapper := buildFinishBundleWrapper1[I0](doFn)
	setupWrapper := buildSetupWrapper(doFn)
	teardownWrapper := buildTeardownWrapper(doFn)

	wrapperFn := func(fn interface{}) map[string]reflectx.Func {
		m := map[string]reflectx.Func{}
		if processElementWrapper != nil {
			m["ProcessElement"] = processElementWrapper(fn)
		}
		if startBundleWrapper != nil {
			m["StartBundle"] = startBundleWrapper(fn)
		}
		if finishBundleWrapper != nil {
			m["FinishBundle"] = finishBundleWrapper(fn)
		}
		if setupWrapper != nil {
			m["Setup"] = setupWrapper(fn)
		}
		if teardownWrapper != nil {
			m["Teardown"] = teardownWrapper(fn)
		}

		return m
	}
	reflectx.RegisterStructWrapper(reflect.TypeOf(doFn).Elem(), wrapperFn)
}

// RegisterDoFn1x4[I0, R0, R1, R2, R3 any] registers your DoFn to optimize execution at runtime.
// DoFn input and output parameter types should be provided in order as the generic constraints.
func RegisterDoFn1x4[I0, R0, R1, R2, R3 any](doFn doFn1x4[I0, R0, R1, R2, R3]) {
	registerDoFnTypes(doFn)
	registerDoFn1x4StructWrappersAndFuncs[I0, R0, R1, R2, R3](doFn)
}

type doFn2x4[I0, I1, R0, R1, R2, R3 any] interface {
	ProcessElement(i0 I0, i1 I1) (R0, R1, R2, R3)
}

type caller2x4[I0, I1, R0, R1, R2, R3 any] struct {
	fn func(I0, I1) (R0, R1, R2, R3)
}

func (c *caller2x4[I0, I1, R0, R1, R2, R3]) Name() string {
	return reflectx.FunctionName(c.fn)
}

func (c *caller2x4[I0, I1, R0, R1, R2, R3]) Type() reflect.Type {
	return reflect.TypeOf(c.fn)
}

func (c *caller2x4[I0, I1, R0, R1, R2, R3]) Call(args []interface{}) []interface{} {
	out0, out1, out2, out3 := c.fn(args[0].(I0), args[1].(I1))
	return []interface{}{out0, out1, out2, out3}
}

func (c *caller2x4[I0, I1, R0, R1, R2, R3]) Call2x4(arg0 I0, arg1 I1) (interface{}, interface{}, interface{}, interface{}) {
	return c.fn(arg0, arg1)
}

func registerDoFn2x4StructWrappersAndFuncs[I0, I1, R0, R1, R2, R3 any](doFn doFn2x4[I0, I1, R0, R1, R2, R3]) {
	processElementCaller := func(fn interface{}) reflectx.Func {
		f := fn.(func(I0, I1) (R0, R1, R2, R3))
		return &caller2x4[I0, I1, R0, R1, R2, R3]{fn: f}
	}
	reflectx.RegisterFunc(reflect.TypeOf((*func(I0, I1) (R0, R1, R2, R3))(nil)).Elem(), processElementCaller)
	processElementWrapper := func(fn interface{}) reflectx.Func {
		return reflectx.MakeFunc(func(a0 I0, a1 I1) (R0, R1, R2, R3) {
			return fn.(doFn2x4[I0, I1, R0, R1, R2, R3]).ProcessElement(a0, a1)
		})
	}
	startBundleWrapper := buildStartBundleWrapper2[I0, I1](doFn)
	finishBundleWrapper := buildFinishBundleWrapper2[I0, I1](doFn)
	setupWrapper := buildSetupWrapper(doFn)
	teardownWrapper := buildTeardownWrapper(doFn)

	wrapperFn := func(fn interface{}) map[string]reflectx.Func {
		m := map[string]reflectx.Func{}
		if processElementWrapper != nil {
			m["ProcessElement"] = processElementWrapper(fn)
		}
		if startBundleWrapper != nil {
			m["StartBundle"] = startBundleWrapper(fn)
		}
		if finishBundleWrapper != nil {
			m["FinishBundle"] = finishBundleWrapper(fn)
		}
		if setupWrapper != nil {
			m["Setup"] = setupWrapper(fn)
		}
		if teardownWrapper != nil {
			m["Teardown"] = teardownWrapper(fn)
		}

		return m
	}
	reflectx.RegisterStructWrapper(reflect.TypeOf(doFn).Elem(), wrapperFn)
}

// RegisterDoFn2x4[I0, I1, R0, R1, R2, R3 any] registers your DoFn to optimize execution at runtime.
// DoFn input and output parameter types should be provided in order as the generic constraints.
func RegisterDoFn2x4[I0, I1, R0, R1, R2, R3 any](doFn doFn2x4[I0, I1, R0, R1, R2, R3]) {
	registerDoFnTypes(doFn)
	registerDoFn2x4StructWrappersAndFuncs[I0, I1, R0, R1, R2, R3](doFn)
}

type doFn3x4[I0, I1, I2, R0, R1, R2, R3 any] interface {
	ProcessElement(i0 I0, i1 I1, i2 I2) (R0, R1, R2, R3)
}

type caller3x4[I0, I1, I2, R0, R1, R2, R3 any] struct {
	fn func(I0, I1, I2) (R0, R1, R2, R3)
}

func (c *caller3x4[I0, I1, I2, R0, R1, R2, R3]) Name() string {
	return reflectx.FunctionName(c.fn)
}

func (c *caller3x4[I0, I1, I2, R0, R1, R2, R3]) Type() reflect.Type {
	return reflect.TypeOf(c.fn)
}

func (c *caller3x4[I0, I1, I2, R0, R1, R2, R3]) Call(args []interface{}) []interface{} {
	out0, out1, out2, out3 := c.fn(args[0].(I0), args[1].(I1), args[2].(I2))
	return []interface{}{out0, out1, out2, out3}
}

func (c *caller3x4[I0, I1, I2, R0, R1, R2, R3]) Call3x4(arg0 I0, arg1 I1, arg2 I2) (interface{}, interface{}, interface{}, interface{}) {
	return c.fn(arg0, arg1, arg2)
}

func registerDoFn3x4StructWrappersAndFuncs[I0, I1, I2, R0, R1, R2, R3 any](doFn doFn3x4[I0, I1, I2, R0, R1, R2, R3]) {
	processElementCaller := func(fn interface{}) reflectx.Func {
		f := fn.(func(I0, I1, I2) (R0, R1, R2, R3))
		return &caller3x4[I0, I1, I2, R0, R1, R2, R3]{fn: f}
	}
	reflectx.RegisterFunc(reflect.TypeOf((*func(I0, I1, I2) (R0, R1, R2, R3))(nil)).Elem(), processElementCaller)
	processElementWrapper := func(fn interface{}) reflectx.Func {
		return reflectx.MakeFunc(func(a0 I0, a1 I1, a2 I2) (R0, R1, R2, R3) {
			return fn.(doFn3x4[I0, I1, I2, R0, R1, R2, R3]).ProcessElement(a0, a1, a2)
		})
	}
	startBundleWrapper := buildStartBundleWrapper3[I0, I1, I2](doFn)
	finishBundleWrapper := buildFinishBundleWrapper3[I0, I1, I2](doFn)
	setupWrapper := buildSetupWrapper(doFn)
	teardownWrapper := buildTeardownWrapper(doFn)

	wrapperFn := func(fn interface{}) map[string]reflectx.Func {
		m := map[string]reflectx.Func{}
		if processElementWrapper != nil {
			m["ProcessElement"] = processElementWrapper(fn)
		}
		if startBundleWrapper != nil {
			m["StartBundle"] = startBundleWrapper(fn)
		}
		if finishBundleWrapper != nil {
			m["FinishBundle"] = finishBundleWrapper(fn)
		}
		if setupWrapper != nil {
			m["Setup"] = setupWrapper(fn)
		}
		if teardownWrapper != nil {
			m["Teardown"] = teardownWrapper(fn)
		}

		return m
	}
	reflectx.RegisterStructWrapper(reflect.TypeOf(doFn).Elem(), wrapperFn)
}

// RegisterDoFn3x4[I0, I1, I2, R0, R1, R2, R3 any] registers your DoFn to optimize execution at runtime.
// DoFn input and output parameter types should be provided in order as the generic constraints.
func RegisterDoFn3x4[I0, I1, I2, R0, R1, R2, R3 any](doFn doFn3x4[I0, I1, I2, R0, R1, R2, R3]) {
	registerDoFnTypes(doFn)
	registerDoFn3x4StructWrappersAndFuncs[I0, I1, I2, R0, R1, R2, R3](doFn)
}

type doFn4x4[I0, I1, I2, I3, R0, R1, R2, R3 any] interface {
	ProcessElement(i0 I0, i1 I1, i2 I2, i3 I3) (R0, R1, R2, R3)
}

type caller4x4[I0, I1, I2, I3, R0, R1, R2, R3 any] struct {
	fn func(I0, I1, I2, I3) (R0, R1, R2, R3)
}

func (c *caller4x4[I0, I1, I2, I3, R0, R1, R2, R3]) Name() string {
	return reflectx.FunctionName(c.fn)
}

func (c *caller4x4[I0, I1, I2, I3, R0, R1, R2, R3]) Type() reflect.Type {
	return reflect.TypeOf(c.fn)
}

func (c *caller4x4[I0, I1, I2, I3, R0, R1, R2, R3]) Call(args []interface{}) []interface{} {
	out0, out1, out2, out3 := c.fn(args[0].(I0), args[1].(I1), args[2].(I2), args[3].(I3))
	return []interface{}{out0, out1, out2, out3}
}

func (c *caller4x4[I0, I1, I2, I3, R0, R1, R2, R3]) Call4x4(arg0 I0, arg1 I1, arg2 I2, arg3 I3) (interface{}, interface{}, interface{}, interface{}) {
	return c.fn(arg0, arg1, arg2, arg3)
}

func registerDoFn4x4StructWrappersAndFuncs[I0, I1, I2, I3, R0, R1, R2, R3 any](doFn doFn4x4[I0, I1, I2, I3, R0, R1, R2, R3]) {
	processElementCaller := func(fn interface{}) reflectx.Func {
		f := fn.(func(I0, I1, I2, I3) (R0, R1, R2, R3))
		return &caller4x4[I0, I1, I2, I3, R0, R1, R2, R3]{fn: f}
	}
	reflectx.RegisterFunc(reflect.TypeOf((*func(I0, I1, I2, I3) (R0, R1, R2, R3))(nil)).Elem(), processElementCaller)
	processElementWrapper := func(fn interface{}) reflectx.Func {
		return reflectx.MakeFunc(func(a0 I0, a1 I1, a2 I2, a3 I3) (R0, R1, R2, R3) {
			return fn.(doFn4x4[I0, I1, I2, I3, R0, R1, R2, R3]).ProcessElement(a0, a1, a2, a3)
		})
	}
	startBundleWrapper := buildStartBundleWrapper4[I0, I1, I2, I3](doFn)
	finishBundleWrapper := buildFinishBundleWrapper4[I0, I1, I2, I3](doFn)
	setupWrapper := buildSetupWrapper(doFn)
	teardownWrapper := buildTeardownWrapper(doFn)

	wrapperFn := func(fn interface{}) map[string]reflectx.Func {
		m := map[string]reflectx.Func{}
		if processElementWrapper != nil {
			m["ProcessElement"] = processElementWrapper(fn)
		}
		if startBundleWrapper != nil {
			m["StartBundle"] = startBundleWrapper(fn)
		}
		if finishBundleWrapper != nil {
			m["FinishBundle"] = finishBundleWrapper(fn)
		}
		if setupWrapper != nil {
			m["Setup"] = setupWrapper(fn)
		}
		if teardownWrapper != nil {
			m["Teardown"] = teardownWrapper(fn)
		}

		return m
	}
	reflectx.RegisterStructWrapper(reflect.TypeOf(doFn).Elem(), wrapperFn)
}

// RegisterDoFn4x4[I0, I1, I2, I3, R0, R1, R2, R3 any] registers your DoFn to optimize execution at runtime.
// DoFn input and output parameter types should be provided in order as the generic constraints.
func RegisterDoFn4x4[I0, I1, I2, I3, R0, R1, R2, R3 any](doFn doFn4x4[I0, I1, I2, I3, R0, R1, R2, R3]) {
	registerDoFnTypes(doFn)
	registerDoFn4x4StructWrappersAndFuncs[I0, I1, I2, I3, R0, R1, R2, R3](doFn)
}

type doFn5x4[I0, I1, I2, I3, I4, R0, R1, R2, R3 any] interface {
	ProcessElement(i0 I0, i1 I1, i2 I2, i3 I3, i4 I4) (R0, R1, R2, R3)
}

type caller5x4[I0, I1, I2, I3, I4, R0, R1, R2, R3 any] struct {
	fn func(I0, I1, I2, I3, I4) (R0, R1, R2, R3)
}

func (c *caller5x4[I0, I1, I2, I3, I4, R0, R1, R2, R3]) Name() string {
	return reflectx.FunctionName(c.fn)
}

func (c *caller5x4[I0, I1, I2, I3, I4, R0, R1, R2, R3]) Type() reflect.Type {
	return reflect.TypeOf(c.fn)
}

func (c *caller5x4[I0, I1, I2, I3, I4, R0, R1, R2, R3]) Call(args []interface{}) []interface{} {
	out0, out1, out2, out3 := c.fn(args[0].(I0), args[1].(I1), args[2].(I2), args[3].(I3), args[4].(I4))
	return []interface{}{out0, out1, out2, out3}
}

func (c *caller5x4[I0, I1, I2, I3, I4, R0, R1, R2, R3]) Call5x4(arg0 I0, arg1 I1, arg2 I2, arg3 I3, arg4 I4) (interface{}, interface{}, interface{}, interface{}) {
	return c.fn(arg0, arg1, arg2, arg3, arg4)
}

func registerDoFn5x4StructWrappersAndFuncs[I0, I1, I2, I3, I4, R0, R1, R2, R3 any](doFn doFn5x4[I0, I1, I2, I3, I4, R0, R1, R2, R3]) {
	processElementCaller := func(fn interface{}) reflectx.Func {
		f := fn.(func(I0, I1, I2, I3, I4) (R0, R1, R2, R3))
		return &caller5x4[I0, I1, I2, I3, I4, R0, R1, R2, R3]{fn: f}
	}
	reflectx.RegisterFunc(reflect.TypeOf((*func(I0, I1, I2, I3, I4) (R0, R1, R2, R3))(nil)).Elem(), processElementCaller)
	processElementWrapper := func(fn interface{}) reflectx.Func {
		return reflectx.MakeFunc(func(a0 I0, a1 I1, a2 I2, a3 I3, a4 I4) (R0, R1, R2, R3) {
			return fn.(doFn5x4[I0, I1, I2, I3, I4, R0, R1, R2, R3]).ProcessElement(a0, a1, a2, a3, a4)
		})
	}
	startBundleWrapper := buildStartBundleWrapper5[I0, I1, I2, I3, I4](doFn)
	finishBundleWrapper := buildFinishBundleWrapper5[I0, I1, I2, I3, I4](doFn)
	setupWrapper := buildSetupWrapper(doFn)
	teardownWrapper := buildTeardownWrapper(doFn)

	wrapperFn := func(fn interface{}) map[string]reflectx.Func {
		m := map[string]reflectx.Func{}
		if processElementWrapper != nil {
			m["ProcessElement"] = processElementWrapper(fn)
		}
		if startBundleWrapper != nil {
			m["StartBundle"] = startBundleWrapper(fn)
		}
		if finishBundleWrapper != nil {
			m["FinishBundle"] = finishBundleWrapper(fn)
		}
		if setupWrapper != nil {
			m["Setup"] = setupWrapper(fn)
		}
		if teardownWrapper != nil {
			m["Teardown"] = teardownWrapper(fn)
		}

		return m
	}
	reflectx.RegisterStructWrapper(reflect.TypeOf(doFn).Elem(), wrapperFn)
}

// RegisterDoFn5x4[I0, I1, I2, I3, I4, R0, R1, R2, R3 any] registers your DoFn to optimize execution at runtime.
// DoFn input and output parameter types should be provided in order as the generic constraints.
func RegisterDoFn5x4[I0, I1, I2, I3, I4, R0, R1, R2, R3 any](doFn doFn5x4[I0, I1, I2, I3, I4, R0, R1, R2, R3]) {
	registerDoFnTypes(doFn)
	registerDoFn5x4StructWrappersAndFuncs[I0, I1, I2, I3, I4, R0, R1, R2, R3](doFn)
}

type doFn6x4[I0, I1, I2, I3, I4, I5, R0, R1, R2, R3 any] interface {
	ProcessElement(i0 I0, i1 I1, i2 I2, i3 I3, i4 I4, i5 I5) (R0, R1, R2, R3)
}

type caller6x4[I0, I1, I2, I3, I4, I5, R0, R1, R2, R3 any] struct {
	fn func(I0, I1, I2, I3, I4, I5) (R0, R1, R2, R3)
}

func (c *caller6x4[I0, I1, I2, I3, I4, I5, R0, R1, R2, R3]) Name() string {
	return reflectx.FunctionName(c.fn)
}

func (c *caller6x4[I0, I1, I2, I3, I4, I5, R0, R1, R2, R3]) Type() reflect.Type {
	return reflect.TypeOf(c.fn)
}

func (c *caller6x4[I0, I1, I2, I3, I4, I5, R0, R1, R2, R3]) Call(args []interface{}) []interface{} {
	out0, out1, out2, out3 := c.fn(args[0].(I0), args[1].(I1), args[2].(I2), args[3].(I3), args[4].(I4), args[5].(I5))
	return []interface{}{out0, out1, out2, out3}
}

func (c *caller6x4[I0, I1, I2, I3, I4, I5, R0, R1, R2, R3]) Call6x4(arg0 I0, arg1 I1, arg2 I2, arg3 I3, arg4 I4, arg5 I5) (interface{}, interface{}, interface{}, interface{}) {
	return c.fn(arg0, arg1, arg2, arg3, arg4, arg5)
}

func registerDoFn6x4StructWrappersAndFuncs[I0, I1, I2, I3, I4, I5, R0, R1, R2, R3 any](doFn doFn6x4[I0, I1, I2, I3, I4, I5, R0, R1, R2, R3]) {
	processElementCaller := func(fn interface{}) reflectx.Func {
		f := fn.(func(I0, I1, I2, I3, I4, I5) (R0, R1, R2, R3))
		return &caller6x4[I0, I1, I2, I3, I4, I5, R0, R1, R2, R3]{fn: f}
	}
	reflectx.RegisterFunc(reflect.TypeOf((*func(I0, I1, I2, I3, I4, I5) (R0, R1, R2, R3))(nil)).Elem(), processElementCaller)
	processElementWrapper := func(fn interface{}) reflectx.Func {
		return reflectx.MakeFunc(func(a0 I0, a1 I1, a2 I2, a3 I3, a4 I4, a5 I5) (R0, R1, R2, R3) {
			return fn.(doFn6x4[I0, I1, I2, I3, I4, I5, R0, R1, R2, R3]).ProcessElement(a0, a1, a2, a3, a4, a5)
		})
	}
	startBundleWrapper := buildStartBundleWrapper6[I0, I1, I2, I3, I4, I5](doFn)
	finishBundleWrapper := buildFinishBundleWrapper6[I0, I1, I2, I3, I4, I5](doFn)
	setupWrapper := buildSetupWrapper(doFn)
	teardownWrapper := buildTeardownWrapper(doFn)

	wrapperFn := func(fn interface{}) map[string]reflectx.Func {
		m := map[string]reflectx.Func{}
		if processElementWrapper != nil {
			m["ProcessElement"] = processElementWrapper(fn)
		}
		if startBundleWrapper != nil {
			m["StartBundle"] = startBundleWrapper(fn)
		}
		if finishBundleWrapper != nil {
			m["FinishBundle"] = finishBundleWrapper(fn)
		}
		if setupWrapper != nil {
			m["Setup"] = setupWrapper(fn)
		}
		if teardownWrapper != nil {
			m["Teardown"] = teardownWrapper(fn)
		}

		return m
	}
	reflectx.RegisterStructWrapper(reflect.TypeOf(doFn).Elem(), wrapperFn)
}

// RegisterDoFn6x4[I0, I1, I2, I3, I4, I5, R0, R1, R2, R3 any] registers your DoFn to optimize execution at runtime.
// DoFn input and output parameter types should be provided in order as the generic constraints.
func RegisterDoFn6x4[I0, I1, I2, I3, I4, I5, R0, R1, R2, R3 any](doFn doFn6x4[I0, I1, I2, I3, I4, I5, R0, R1, R2, R3]) {
	registerDoFnTypes(doFn)
	registerDoFn6x4StructWrappersAndFuncs[I0, I1, I2, I3, I4, I5, R0, R1, R2, R3](doFn)
}

type doFn7x4[I0, I1, I2, I3, I4, I5, I6, R0, R1, R2, R3 any] interface {
	ProcessElement(i0 I0, i1 I1, i2 I2, i3 I3, i4 I4, i5 I5, i6 I6) (R0, R1, R2, R3)
}

type caller7x4[I0, I1, I2, I3, I4, I5, I6, R0, R1, R2, R3 any] struct {
	fn func(I0, I1, I2, I3, I4, I5, I6) (R0, R1, R2, R3)
}

func (c *caller7x4[I0, I1, I2, I3, I4, I5, I6, R0, R1, R2, R3]) Name() string {
	return reflectx.FunctionName(c.fn)
}

func (c *caller7x4[I0, I1, I2, I3, I4, I5, I6, R0, R1, R2, R3]) Type() reflect.Type {
	return reflect.TypeOf(c.fn)
}

func (c *caller7x4[I0, I1, I2, I3, I4, I5, I6, R0, R1, R2, R3]) Call(args []interface{}) []interface{} {
	out0, out1, out2, out3 := c.fn(args[0].(I0), args[1].(I1), args[2].(I2), args[3].(I3), args[4].(I4), args[5].(I5), args[6].(I6))
	return []interface{}{out0, out1, out2, out3}
}

func (c *caller7x4[I0, I1, I2, I3, I4, I5, I6, R0, R1, R2, R3]) Call7x4(arg0 I0, arg1 I1, arg2 I2, arg3 I3, arg4 I4, arg5 I5, arg6 I6) (interface{}, interface{}, interface{}, interface{}) {
	return c.fn(arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

func registerDoFn7x4StructWrappersAndFuncs[I0, I1, I2, I3, I4, I5, I6, R0, R1, R2, R3 any](doFn doFn7x4[I0, I1, I2, I3, I4, I5, I6, R0, R1, R2, R3]) {
	processElementCaller := func(fn interface{}) reflectx.Func {
		f := fn.(func(I0, I1, I2, I3, I4, I5, I6) (R0, R1, R2, R3))
		return &caller7x4[I0, I1, I2, I3, I4, I5, I6, R0, R1, R2, R3]{fn: f}
	}
	reflectx.RegisterFunc(reflect.TypeOf((*func(I0, I1, I2, I3, I4, I5, I6) (R0, R1, R2, R3))(nil)).Elem(), processElementCaller)
	processElementWrapper := func(fn interface{}) reflectx.Func {
		return reflectx.MakeFunc(func(a0 I0, a1 I1, a2 I2, a3 I3, a4 I4, a5 I5, a6 I6) (R0, R1, R2, R3) {
			return fn.(doFn7x4[I0, I1, I2, I3, I4, I5, I6, R0, R1, R2, R3]).ProcessElement(a0, a1, a2, a3, a4, a5, a6)
		})
	}
	startBundleWrapper := buildStartBundleWrapper7[I0, I1, I2, I3, I4, I5, I6](doFn)
	finishBundleWrapper := buildFinishBundleWrapper7[I0, I1, I2, I3, I4, I5, I6](doFn)
	setupWrapper := buildSetupWrapper(doFn)
	teardownWrapper := buildTeardownWrapper(doFn)

	wrapperFn := func(fn interface{}) map[string]reflectx.Func {
		m := map[string]reflectx.Func{}
		if processElementWrapper != nil {
			m["ProcessElement"] = processElementWrapper(fn)
		}
		if startBundleWrapper != nil {
			m["StartBundle"] = startBundleWrapper(fn)
		}
		if finishBundleWrapper != nil {
			m["FinishBundle"] = finishBundleWrapper(fn)
		}
		if setupWrapper != nil {
			m["Setup"] = setupWrapper(fn)
		}
		if teardownWrapper != nil {
			m["Teardown"] = teardownWrapper(fn)
		}

		return m
	}
	reflectx.RegisterStructWrapper(reflect.TypeOf(doFn).Elem(), wrapperFn)
}

// RegisterDoFn7x4[I0, I1, I2, I3, I4, I5, I6, R0, R1, R2, R3 any] registers your DoFn to optimize execution at runtime.
// DoFn input and output parameter types should be provided in order as the generic constraints.
func RegisterDoFn7x4[I0, I1, I2, I3, I4, I5, I6, R0, R1, R2, R3 any](doFn doFn7x4[I0, I1, I2, I3, I4, I5, I6, R0, R1, R2, R3]) {
	registerDoFnTypes(doFn)
	registerDoFn7x4StructWrappersAndFuncs[I0, I1, I2, I3, I4, I5, I6, R0, R1, R2, R3](doFn)
}

type doFn8x4[I0, I1, I2, I3, I4, I5, I6, I7, R0, R1, R2, R3 any] interface {
	ProcessElement(i0 I0, i1 I1, i2 I2, i3 I3, i4 I4, i5 I5, i6 I6, i7 I7) (R0, R1, R2, R3)
}

type caller8x4[I0, I1, I2, I3, I4, I5, I6, I7, R0, R1, R2, R3 any] struct {
	fn func(I0, I1, I2, I3, I4, I5, I6, I7) (R0, R1, R2, R3)
}

func (c *caller8x4[I0, I1, I2, I3, I4, I5, I6, I7, R0, R1, R2, R3]) Name() string {
	return reflectx.FunctionName(c.fn)
}

func (c *caller8x4[I0, I1, I2, I3, I4, I5, I6, I7, R0, R1, R2, R3]) Type() reflect.Type {
	return reflect.TypeOf(c.fn)
}

func (c *caller8x4[I0, I1, I2, I3, I4, I5, I6, I7, R0, R1, R2, R3]) Call(args []interface{}) []interface{} {
	out0, out1, out2, out3 := c.fn(args[0].(I0), args[1].(I1), args[2].(I2), args[3].(I3), args[4].(I4), args[5].(I5), args[6].(I6), args[7].(I7))
	return []interface{}{out0, out1, out2, out3}
}

func (c *caller8x4[I0, I1, I2, I3, I4, I5, I6, I7, R0, R1, R2, R3]) Call8x4(arg0 I0, arg1 I1, arg2 I2, arg3 I3, arg4 I4, arg5 I5, arg6 I6, arg7 I7) (interface{}, interface{}, interface{}, interface{}) {
	return c.fn(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
}

func registerDoFn8x4StructWrappersAndFuncs[I0, I1, I2, I3, I4, I5, I6, I7, R0, R1, R2, R3 any](doFn doFn8x4[I0, I1, I2, I3, I4, I5, I6, I7, R0, R1, R2, R3]) {
	processElementCaller := func(fn interface{}) reflectx.Func {
		f := fn.(func(I0, I1, I2, I3, I4, I5, I6, I7) (R0, R1, R2, R3))
		return &caller8x4[I0, I1, I2, I3, I4, I5, I6, I7, R0, R1, R2, R3]{fn: f}
	}
	reflectx.RegisterFunc(reflect.TypeOf((*func(I0, I1, I2, I3, I4, I5, I6, I7) (R0, R1, R2, R3))(nil)).Elem(), processElementCaller)
	processElementWrapper := func(fn interface{}) reflectx.Func {
		return reflectx.MakeFunc(func(a0 I0, a1 I1, a2 I2, a3 I3, a4 I4, a5 I5, a6 I6, a7 I7) (R0, R1, R2, R3) {
			return fn.(doFn8x4[I0, I1, I2, I3, I4, I5, I6, I7, R0, R1, R2, R3]).ProcessElement(a0, a1, a2, a3, a4, a5, a6, a7)
		})
	}
	startBundleWrapper := buildStartBundleWrapper8[I0, I1, I2, I3, I4, I5, I6, I7](doFn)
	finishBundleWrapper := buildFinishBundleWrapper8[I0, I1, I2, I3, I4, I5, I6, I7](doFn)
	setupWrapper := buildSetupWrapper(doFn)
	teardownWrapper := buildTeardownWrapper(doFn)

	wrapperFn := func(fn interface{}) map[string]reflectx.Func {
		m := map[string]reflectx.Func{}
		if processElementWrapper != nil {
			m["ProcessElement"] = processElementWrapper(fn)
		}
		if startBundleWrapper != nil {
			m["StartBundle"] = startBundleWrapper(fn)
		}
		if finishBundleWrapper != nil {
			m["FinishBundle"] = finishBundleWrapper(fn)
		}
		if setupWrapper != nil {
			m["Setup"] = setupWrapper(fn)
		}
		if teardownWrapper != nil {
			m["Teardown"] = teardownWrapper(fn)
		}

		return m
	}
	reflectx.RegisterStructWrapper(reflect.TypeOf(doFn).Elem(), wrapperFn)
}

// RegisterDoFn8x4[I0, I1, I2, I3, I4, I5, I6, I7, R0, R1, R2, R3 any] registers your DoFn to optimize execution at runtime.
// DoFn input and output parameter types should be provided in order as the generic constraints.
func RegisterDoFn8x4[I0, I1, I2, I3, I4, I5, I6, I7, R0, R1, R2, R3 any](doFn doFn8x4[I0, I1, I2, I3, I4, I5, I6, I7, R0, R1, R2, R3]) {
	registerDoFnTypes(doFn)
	registerDoFn8x4StructWrappersAndFuncs[I0, I1, I2, I3, I4, I5, I6, I7, R0, R1, R2, R3](doFn)
}

type startBundle0x0 interface {
	StartBundle()
}

type finishBundle0x0 interface {
	FinishBundle()
}

type startBundle1x0[I0 any] interface {
	StartBundle(i0 I0)
}

type finishBundle1x0[I0 any] interface {
	FinishBundle(i0 I0)
}

type startBundle2x0[I0, I1 any] interface {
	StartBundle(i0 I0, i1 I1)
}

type finishBundle2x0[I0, I1 any] interface {
	FinishBundle(i0 I0, i1 I1)
}

type startBundle3x0[I0, I1, I2 any] interface {
	StartBundle(i0 I0, i1 I1, i2 I2)
}

type finishBundle3x0[I0, I1, I2 any] interface {
	FinishBundle(i0 I0, i1 I1, i2 I2)
}

type startBundle4x0[I0, I1, I2, I3 any] interface {
	StartBundle(i0 I0, i1 I1, i2 I2, i3 I3)
}

type finishBundle4x0[I0, I1, I2, I3 any] interface {
	FinishBundle(i0 I0, i1 I1, i2 I2, i3 I3)
}

type startBundle5x0[I0, I1, I2, I3, I4 any] interface {
	StartBundle(i0 I0, i1 I1, i2 I2, i3 I3, i4 I4)
}

type finishBundle5x0[I0, I1, I2, I3, I4 any] interface {
	FinishBundle(i0 I0, i1 I1, i2 I2, i3 I3, i4 I4)
}

type startBundle6x0[I0, I1, I2, I3, I4, I5 any] interface {
	StartBundle(i0 I0, i1 I1, i2 I2, i3 I3, i4 I4, i5 I5)
}

type finishBundle6x0[I0, I1, I2, I3, I4, I5 any] interface {
	FinishBundle(i0 I0, i1 I1, i2 I2, i3 I3, i4 I4, i5 I5)
}

type startBundle7x0[I0, I1, I2, I3, I4, I5, I6 any] interface {
	StartBundle(i0 I0, i1 I1, i2 I2, i3 I3, i4 I4, i5 I5, i6 I6)
}

type finishBundle7x0[I0, I1, I2, I3, I4, I5, I6 any] interface {
	FinishBundle(i0 I0, i1 I1, i2 I2, i3 I3, i4 I4, i5 I5, i6 I6)
}

type startBundle0x1[R0 any] interface {
	StartBundle() R0
}

type finishBundle0x1[R0 any] interface {
	FinishBundle() R0
}

type startBundle1x1[I0, R0 any] interface {
	StartBundle(i0 I0) R0
}

type finishBundle1x1[I0, R0 any] interface {
	FinishBundle(i0 I0) R0
}

type startBundle2x1[I0, I1, R0 any] interface {
	StartBundle(i0 I0, i1 I1) R0
}

type finishBundle2x1[I0, I1, R0 any] interface {
	FinishBundle(i0 I0, i1 I1) R0
}

type startBundle3x1[I0, I1, I2, R0 any] interface {
	StartBundle(i0 I0, i1 I1, i2 I2) R0
}

type finishBundle3x1[I0, I1, I2, R0 any] interface {
	FinishBundle(i0 I0, i1 I1, i2 I2) R0
}

type startBundle4x1[I0, I1, I2, I3, R0 any] interface {
	StartBundle(i0 I0, i1 I1, i2 I2, i3 I3) R0
}

type finishBundle4x1[I0, I1, I2, I3, R0 any] interface {
	FinishBundle(i0 I0, i1 I1, i2 I2, i3 I3) R0
}

type startBundle5x1[I0, I1, I2, I3, I4, R0 any] interface {
	StartBundle(i0 I0, i1 I1, i2 I2, i3 I3, i4 I4) R0
}

type finishBundle5x1[I0, I1, I2, I3, I4, R0 any] interface {
	FinishBundle(i0 I0, i1 I1, i2 I2, i3 I3, i4 I4) R0
}

type startBundle6x1[I0, I1, I2, I3, I4, I5, R0 any] interface {
	StartBundle(i0 I0, i1 I1, i2 I2, i3 I3, i4 I4, i5 I5) R0
}

type finishBundle6x1[I0, I1, I2, I3, I4, I5, R0 any] interface {
	FinishBundle(i0 I0, i1 I1, i2 I2, i3 I3, i4 I4, i5 I5) R0
}

type startBundle7x1[I0, I1, I2, I3, I4, I5, I6, R0 any] interface {
	StartBundle(i0 I0, i1 I1, i2 I2, i3 I3, i4 I4, i5 I5, i6 I6) R0
}

type finishBundle7x1[I0, I1, I2, I3, I4, I5, I6, R0 any] interface {
	FinishBundle(i0 I0, i1 I1, i2 I2, i3 I3, i4 I4, i5 I5, i6 I6) R0
}

type setup0x0 interface {
	Setup()
}

type setup1x0 interface {
	Setup(ctx context.Context)
}

type setup0x1 interface {
	Setup() error
}

type setup1x1 interface {
	Setup(ctx context.Context) error
}

type teardown0x0 interface {
	Teardown()
}

type teardown1x0 interface {
	Teardown(ctx context.Context)
}

type teardown0x1 interface {
	Teardown() error
}

type teardown1x1 interface {
	Teardown(ctx context.Context) error
}

func registerDoFnTypes(doFn interface{}) {
	// Register the doFn
	runtime.RegisterType(reflect.TypeOf(doFn).Elem())
	schema.RegisterType(reflect.TypeOf(doFn).Elem())

	// Register all types in the DoFn
	fn := reflect.ValueOf(doFn).MethodByName("ProcessElement").Type()
	for i := 0; i < fn.NumIn(); i++ {
		in := reflectx.SkipPtr(fn.In(i))
		if in.Kind() == reflect.Struct {
			runtime.RegisterType(in)
			schema.RegisterType(in)
		}
	}
	for i := 0; i < fn.NumOut(); i++ {
		out := reflectx.SkipPtr(fn.Out(i))
		if out.Kind() == reflect.Struct {
			runtime.RegisterType(out)
			schema.RegisterType(out)
		}
	}
}
