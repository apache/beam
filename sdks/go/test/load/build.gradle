/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * License); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins { id 'org.apache.beam.module' }
applyGoNature()

description = "Apache Beam :: SDKs :: Go :: Test :: Load"

def getLocalPlatform = {
  String hostOs = com.github.blindpirate.gogradle.crossplatform.Os.getHostOs()
  String hostArch = com.github.blindpirate.gogradle.crossplatform.Arch.getHostArch()
  return hostOs + '-' + hostArch
}

dependencies {
  golang {
    // TODO(herohde): use "./" prefix to prevent gogradle use base github path, for now.
    // TODO(herohde): get the pkg subdirectory only, if possible. We spend mins pulling cmd/beamctl deps.
    build name: './github.com/apache/beam/sdks/go', dir: project(':sdks:go').projectDir
    test name: './github.com/apache/beam/sdks/go', dir: project(':sdks:go').projectDir
  }
}

golang {
  packagePath = 'github.com/apache/beam/sdks/go/test/load'
  goBuild {
    // We always want to build linux-amd64 in addition to the user host platform
    // so we can submit this as the remote binary used within the Go container.
    //
    // TODO: Move this into build_rules.gradle applyGoNature. This currently
    // can't be done because com.github.blindpirate.gogradle.crossplatform.*
    // is not found within when invoked from within build_rules.gradle applyGoNature
    targetPlatform = [getLocalPlatform(), 'linux-amd64']
    //Â Build all the tests
    go 'build -o ./build/bin/${GOOS}_${GOARCH}/pardo github.com/apache/beam/sdks/go/test/load/pardo'
    go 'build -o ./build/bin/${GOOS}_${GOARCH}/combine github.com/apache/beam/sdks/go/test/load/combine'
    go 'build -o ./build/bin/${GOOS}_${GOARCH}/group_by_key github.com/apache/beam/sdks/go/test/load/group_by_key'
    go 'build -o ./build/bin/${GOOS}_${GOARCH}/cogbk github.com/apache/beam/sdks/go/test/load/cogbk'
  }
}

task run {
  dependsOn goBuild
  def arguments = project.findProperty("loadTest.args") ?: ""
  def binary = project.findProperty("loadTest.mainClass")
  arguments += " --worker_binary=linux_amd64/${binary}"

  doLast {
    exec {
      workingDir "${projectDir}/build/bin"
      commandLine 'sh', '-c', "./${getLocalPlatform().replace("-", "_")}/${binary} ${arguments}"
    }
  }
}
