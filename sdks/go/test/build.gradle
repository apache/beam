/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * License); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins { id 'org.apache.beam.module' }
applyGoNature()
applyPythonNature()

description = "Apache Beam :: SDKs :: Go :: Test"

// Figure out why the golang plugin does not add a build dependency between projects.
// Without the line below, we get spurious errors about not being able to resolve
// "./github.com/apache/beam/sdks/go"
resolveBuildDependencies.dependsOn ":sdks:go:goBuild"

clean.dependsOn cleanVendor

dependencies {
  golang {
    // TODO(herohde): use "./" prefix to prevent gogradle use base github path, for now.
    // TODO(herohde): get the pkg subdirectory only, if possible. We spend mins pulling cmd/beamctl deps.
    build name: './github.com/apache/beam/sdks/go', dir: project(':sdks:go').projectDir
    test name: './github.com/apache/beam/sdks/go', dir: project(':sdks:go').projectDir
  }
}

golang {
  packagePath = 'github.com/apache/beam/sdks/go/test'
  goBuild {
    // Build the linux-amd64 worker. The native version is built in the parent to
    // have a fixed name, which is not possible with multiple target platforms. The
    // script would otherwise have to figure out which arch/platform binary to invoke.

    targetPlatform = ['linux-amd64']
    go 'build -o ./build/bin/linux-amd64/worker github.com/apache/beam/sdks/go/test/integration/driver'
  }
}

// ValidatesRunner tests for Dataflow. Runs tests in the integration directory
// with Dataflow to validate that the runner behaves as expected.
task dataflowValidatesRunner() {
  dependsOn ":sdks:go:test:goBuild"
  dependsOn ":runners:google-cloud-dataflow-java:worker:shadowJar"
  dependsOn ":sdks:java:testing:expansion-service:buildTestExpansionServiceJar"

  doLast {
    def options = [
            "--runner dataflow",
            "--dataflow_worker_jar ${project(":runners:google-cloud-dataflow-java:worker").shadowJar.archivePath}",
            "--expansion_service_jar ${project(":sdks:java:testing:expansion-service").buildTestExpansionServiceJar.archivePath}",
    ]
    exec {
      executable "sh"
      args "-c", "./run_validatesrunner_tests.sh ${options.join(' ')}"
    }
  }
}

// ValidatesRunner tests for Flink. Runs tests in the integration directory
// with Flink to validate that the runner behaves as expected.
task flinkValidatesRunner {
  dependsOn ":sdks:go:test:goBuild"
  dependsOn ":sdks:go:container:docker"
  dependsOn ":runners:flink:${project.ext.latestFlinkVersion}:job-server:shadowJar"
  dependsOn ":sdks:java:testing:expansion-service:buildTestExpansionServiceJar"
  doLast {
    def options = [
            "--runner flink",
            "--flink_job_server_jar ${project(":runners:flink:${project.ext.latestFlinkVersion}:job-server").shadowJar.archivePath}",
            "--expansion_service_jar ${project(":sdks:java:testing:expansion-service").buildTestExpansionServiceJar.archivePath}",
    ]
    exec {
      executable "sh"
      args "-c", "./run_validatesrunner_tests.sh ${options.join(' ')}"
    }
  }
}

// ValidatesRunner tests for Spark. Runs tests in the integration directory
// with Spark to validate that the runner behaves as expected.
task sparkValidatesRunner {
  dependsOn ":sdks:go:test:goBuild"
  dependsOn ":runners:spark:2:job-server:shadowJar"
  dependsOn ":sdks:java:testing:expansion-service:buildTestExpansionServiceJar"
  doLast {
    def options = [
            "--runner spark",
            "--spark_job_server_jar ${project(":runners:spark:2:job-server").shadowJar.archivePath}",
            "--expansion_service_jar ${project(":sdks:java:testing:expansion-service").buildTestExpansionServiceJar.archivePath}",
    ]
    exec {
      executable "sh"
      args "-c", "./run_validatesrunner_tests.sh ${options.join(' ')}"
    }
  }
}

// ValidatesRunner tests for the Python Portable runner (aka. ULR). Runs tests
// in the integration directory with the ULR to validate that the runner behaves
// as expected.
//
// The ULR can exhibit strange behavior when containers are built with outdated
// vendored directories. For best results use the clean task, like so:
//   ./gradlew clean :sdks:go:test:ulrValidatesRunner
task ulrValidatesRunner {
  dependsOn ":sdks:go:test:goBuild"
  dependsOn ":sdks:go:container:docker"
  dependsOn ":sdks:java:container:java11:docker"
  dependsOn "setupVirtualenv"
  dependsOn ":sdks:python:buildPython"
  dependsOn ":sdks:java:testing:expansion-service:buildTestExpansionServiceJar"
  doLast {
    def options = [
            "--runner portable",
            "--expansion_service_jar ${project(":sdks:java:testing:expansion-service").buildTestExpansionServiceJar.archivePath}",
    ]
    exec {
      executable "sh"
      workingDir "${project.rootDir}/sdks/python"
      args "-c", ". ${envdir}/bin/activate && pip install -e ."
    }
    exec {
      executable "sh"
      args "-c", ". ${envdir}/bin/activate && ./run_validatesrunner_tests.sh ${options.join(' ')}"
    }
  }
}

// A slightly modified version of the normal ulrValidatesRunner task, this
// one passes in an extra flag to the script so it is configured to run on
// Jenkins.
task ulrValidatesRunnerJenkins {
  dependsOn ":sdks:go:test:goBuild"
  dependsOn ":sdks:go:container:docker"
  dependsOn ":sdks:java:container:java11:docker"
  dependsOn "setupVirtualenv"
  dependsOn ":sdks:python:buildPython"
  dependsOn ":sdks:java:testing:expansion-service:buildTestExpansionServiceJar"
  doLast {
    def options = [
            "--runner portable",
            "--expansion_service_jar ${project(":sdks:java:testing:expansion-service").buildTestExpansionServiceJar.archivePath}",
            "--jenkins",
    ]
    exec {
      executable "sh"
      workingDir "${project.rootDir}/sdks/python"
      args "-c", ". ${envdir}/bin/activate && pip install -e ."
    }
    exec {
      executable "sh"
      args "-c", ". ${envdir}/bin/activate && ./run_validatesrunner_tests.sh ${options.join(' ')}"
    }
  }
}
