/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * License); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
  id 'base'
  id 'org.apache.beam.module'
}
applyDockerNature()
applyPythonNature()
applyGoNature()

configurations {
  dockerDependency
}

dependencies {
 dockerDependency project(path: ":sdks:python", configuration: "distTarBall")
}

task copyDockerfileDependencies(type: Copy) {
    from configurations.dockerDependency
    rename 'apache-beam.*tar.gz', 'apache-beam-sdk.tar.gz'
    setDuplicatesStrategy(DuplicatesStrategy.INCLUDE)
    into "build/target"
}

task copyRequirementsFile(type: Copy) {
    from project(':sdks:python:container:py38').fileTree("./")
    include 'base_image_requirements.txt'
    rename 'base_image_requirements.txt', 'requirements.txt'
    setDuplicatesStrategy(DuplicatesStrategy.INCLUDE)
    into "build/target"
}

goBuild {
  goTargets = '*.go' // only build the immediate directory.
  outputLocation = './build/target/launcher/${GOOS}_${GOARCH}/boot'
}

docker {
  name containerImageName(
          name: project.docker_image_default_repo_prefix + "python_expansion_service",
          root: project.rootProject.hasProperty(["docker-repository-root"]) ?
                  project.rootProject["docker-repository-root"] :
                  project.docker_image_default_repo_root,
          tag: project.rootProject.hasProperty(["docker-tag"]) ?
                  project.rootProject["docker-tag"] : project.sdk_version)
  // tags used by dockerTag task
  tags containerImageTags()
  files "./build"
}

dockerPrepare.dependsOn goBuild
dockerPrepare.dependsOn copyDockerfileDependencies
dockerPrepare.dependsOn copyRequirementsFile

task pushAll {
  dependsOn ":sdks:java:expansion-service:container:dockerPush"
}
