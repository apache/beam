/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * License); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Define common lifecycle tasks and artifact types
apply plugin: "base"

/*************************************************************************************************/
// Basic build and Python environment setup/cleanup


// For some reason base doesn't define a test task  so we define it below and make
// check depend on it. This makes the Python project similar to the task layout like
// Java projects, see https://docs.gradle.org/4.2.1/userguide/img/javaPluginTasks.png
task test {}
check.dependsOn test

evaluationDependsOn(":beam-runners-google-cloud-dataflow-java-fn-api-worker")

def envdir = "${project.buildDir}/gradleenv"
def tox_opts = "-c tox.ini --recreate"

task setupVirtualenv {
  doLast {
    exec {
      commandLine 'virtualenv', "${envdir}"
    }
    exec {
      executable 'sh'
      args '-c', ". ${envdir}/bin/activate && pip install --upgrade tox==3.0.0 grpcio-tools==1.3.5"
    }
  }
  // Gradle will delete outputs whenever it thinks they are stale. Putting a
  // specific binary here could make gradle delete it while pip will believe
  // the package is fully installed.
  outputs.dirs(envdir)
}

configurations { distConfig }

task sdist(dependsOn: 'setupVirtualenv') {
  doLast {
    exec {
      executable 'sh'
      args '-c', ". ${envdir}/bin/activate && python setup.py sdist --formats zip,gztar --dist-dir ${project.buildDir}"
    }
    def collection = fileTree("${project.buildDir}"){ include '**/*.tar.gz' exclude '**/apache-beam.tar.gz'}
    println "sdist archive name: ${collection.singleFile}"
    // we need a fixed name for the artifact
    copy { from collection.singleFile; into "${project.buildDir}"; rename { 'apache-beam.tar.gz' } }
  }
}

artifacts {
  distConfig file: file("${project.buildDir}/apache-beam.tar.gz"), builtBy: sdist
}

task cleanPython(dependsOn: 'setupVirtualenv') {
  doLast {
    exec {
      executable 'sh'
      args '-c', ". ${envdir}/bin/activate && python setup.py clean"
    }
  }
}
clean.dependsOn cleanPython

task buildPython(dependsOn: 'setupVirtualenv') {
  doLast {
    println 'Building Python Dependencies'
    exec {
      executable 'sh'
      args '-c', ". ${envdir}/bin/activate && python setup.py build --build-base ${project.buildDir}"
    }
  }
}
build.dependsOn buildPython

/*************************************************************************************************/
// Unit testing

task lint {}
check.dependsOn lint

task lintPy27(dependsOn: 'setupVirtualenv') {
  doLast {
    exec {
      executable 'sh'
      args '-c', ". ${envdir}/bin/activate && tox ${tox_opts} -e py27-lint"
    }
  }
}
lint.dependsOn lintPy27

task lintPy27_3(dependsOn: 'setupVirtualenv') {
  doLast {
    exec {
      executable 'sh'
      args '-c', ". ${envdir}/bin/activate && tox ${tox_opts} -e py27-lint3"
    }
  }
}
lint.dependsOn lintPy27_3

task lintPy3(dependsOn: 'setupVirtualenv') {
  doLast {
    exec {
      executable 'sh'
      args '-c', ". ${envdir}/bin/activate && tox ${tox_opts} -e py3-lint"
    }
  }
}
lint.dependsOn lintPy3

task testGcp(dependsOn: 'setupVirtualenv') {
  doLast {
    exec {
      executable 'sh'
      args '-c', ". ${envdir}/bin/activate && tox ${tox_opts} -e py27-gcp"
    }
  }
}
test.dependsOn testGcp

task testPython2(dependsOn: 'setupVirtualenv') {
  doLast {
    exec {
      executable 'sh'
      args '-c', ". ${envdir}/bin/activate && tox ${tox_opts} -e py27"
    }
  }
}
test.dependsOn testPython2

task testPython3(dependsOn: 'setupVirtualenv') {
  doLast {
    exec {
      executable 'sh'
      args '-c', ". ${envdir}/bin/activate && tox ${tox_opts} -e py3"
    }
  }
}
test.dependsOn testPython3

task testCython(dependsOn: 'setupVirtualenv') {
  doLast {
    exec {
      executable 'sh'
      args '-c', ". ${envdir}/bin/activate && tox ${tox_opts} -e py27-cython"
    }
  }
}
test.dependsOn testCython
// Ensure that testCython runs exclusively to other tests. This line is not
// actually required, since gradle doesn't do parallel execution within a
// project.
testCython.mustRunAfter testPython2, testGcp

task docs(dependsOn: 'setupVirtualenv') {
  doLast {
    exec {
      executable 'sh'
      args '-c', ". ${envdir}/bin/activate && tox ${tox_opts} -e docs"
    }
  }
}
assemble.dependsOn docs

task cover(dependsOn: 'setupVirtualenv') {
  doLast {
    exec {
      executable 'sh'
      args '-c', ". ${envdir}/bin/activate && tox ${tox_opts} -e cover"
    }
  }
}

task preCommit() {
  dependsOn "docs"
  dependsOn "testCython"
  dependsOn "testPython2"
  dependsOn "testPython3"
  dependsOn "testGcp"
  dependsOn "lint"
}

/*************************************************************************************************/
// E2E integration testing and validates runner testing

task installGcpTest(dependsOn: 'setupVirtualenv') {
  doLast {
    exec {
      executable 'sh'
      args '-c', ". ${envdir}/bin/activate && pip install -e .[gcp,test]"
    }
  }
}
installGcpTest.mustRunAfter sdist

// Basic test options for ITs running on Jenkins.
def basicTestOpts = [
        "--nocapture",  // print stdout instantly
        "--processes=8",  // run tests in parallel
        "--process-timeout=4500", // timeout of whole command execution
]

def mapToArgString(argMap) {
  def argList = []
  argMap.each { k, v ->
    if (v in List) {
      v = "\"${v.join(' ')}\""
    }
    argList.add("--$k $v")
  }
  return argList.join(' ')
}

task directRunnerIT(dependsOn: 'installGcpTest') {
  // Run IT tests with TestDirectRunner in batch.
  doLast {
    def tests = [
        "apache_beam.examples.wordcount_it_test:WordCountIT.test_wordcount_it",
        "apache_beam.io.gcp.pubsub_integration_test:PubSubIntegrationTest",
        "apache_beam.io.gcp.big_query_query_to_table_it_test:BigQueryQueryToTableIT",
        "apache_beam.io.gcp.bigquery_io_read_it_test",
    ]
    def batchTestOpts = basicTestOpts + ["--tests=${tests.join(',')}"]
    def argMap = ["runner": "TestDirectRunner",
                  "test_opts": batchTestOpts]
    def batchCmdArgs = mapToArgString(argMap)
    exec {
      executable 'sh'
      args '-c', ". ${envdir}/bin/activate && ./scripts/run_integration_test.sh $batchCmdArgs"
    }
  }

  // Run IT tests with TestDirectRunner in streaming.
  doLast {
    def tests = [
        "apache_beam.examples.wordcount_it_test:WordCountIT.test_wordcount_it",
        "apache_beam.io.gcp.pubsub_integration_test:PubSubIntegrationTest",
    ]
    def streamingTestOpts = basicTestOpts + ["--tests=${tests.join(',')}"]
    def argMap = ["runner": "TestDirectRunner",
                  "streaming": "true",
                  "test_opts": streamingTestOpts]
    def streamingCmdArgs = mapToArgString(argMap)
    exec {
      executable 'sh'
      args '-c', ". ${envdir}/bin/activate && ./scripts/run_integration_test.sh $streamingCmdArgs"
    }
  }
}

// Before running this, you need to:
//
// 1. Build the SDK container:
//
//    ./gradlew -p sdks/python/container docker
//
// 2. Either a) or b)
//  a) If you want the Job Server to run in a Docker container:
//
//    ./gradlew :beam-runners-flink_2.11-job-server-container:docker
//
//  b) Otherwise, start a local JobService, for example, the Portable Flink runner
//    (in a separate shell since it continues to run):
//
//    ./gradlew :beam-runners-flink_2.11-job-server:runShadow
//
// Then you can run this example:
//
//  Docker (2a):
//
//    ./gradlew :beam-sdks-python:portableWordCount
//
//  Local JobService (2b):
//
//    ./gradlew :beam-sdks-python:portableWordCount -PjobEndpoint=localhost:8099
//
task portableWordCount(dependsOn: 'installGcpTest') {
  doLast {
    // TODO: Figure out GCS credentials and use real GCS input and output.
    def options = [
            "--input=/etc/profile",
            "--output=/tmp/py-wordcount-direct",
            "--runner=PortableRunner",
    ]
    if (project.hasProperty("streaming"))
      options += ["--streaming"]
    if (project.hasProperty("jobEndpoint"))
      options += ["--job_endpoint=${project.property('jobEndpoint')}"]
    exec {
      executable 'sh'
      args '-c', ". ${envdir}/bin/activate && python -m apache_beam.examples.wordcount ${options.join(' ')}"
      // TODO: Check that the output file is generated and runs.
    }
  }
}

// Run single or a set of integration tests with provided test options and pipeline options.
task integrationTest(dependsOn: ['installGcpTest', 'sdist']) {
  doLast {
    def argMap = [:]

    // Build test options that configures test environment and framework
    def testOptions = basicTestOpts
    if (project.hasProperty('testOptions'))
      // Customize test options by adding more nose flags to -Ptest_opt in commandline
      testOptions = project.property('testOptions')
    if (project.hasProperty('attr'))
      testOptions += ["--attr=${project.property('attr')}"]
    if (project.hasProperty('tests'))
      testOptions += ["--tests=${project.property('tests')}"]
    argMap["test_opts"] = testOptions

    // Build pipeline options that configures pipeline job
    if (project.hasProperty('pipelineOptions'))
      argMap["pipeline_opts"] = project.property('pipelineOptions')

    def cmdArgs = mapToArgString(argMap)
    exec {
      executable 'sh'
      args '-c', ". ${envdir}/bin/activate && ./scripts/run_integration_test.sh $cmdArgs"
    }
  }
}

// Run PostCommit integration tests on default runner (TestDataflowRunner)
task postCommitIT(dependsOn: ['installGcpTest', 'sdist']) {
  doLast {
    def testOpts = basicTestOpts + ["--attr=IT"]
    def cmdArgs = mapToArgString(["test_opts": testOpts])
    exec {
      executable 'sh'
      args '-c', ". ${envdir}/bin/activate && ./scripts/run_integration_test.sh $cmdArgs"
    }
  }
}

task validatesRunnerBatchTests(dependsOn: ['installGcpTest', 'sdist']) {
  doLast {
    def testOpts = basicTestOpts + ["--attr=ValidatesRunner"]
    def cmdArgs = mapToArgString(["test_opts": testOpts])
    exec {
      executable 'sh'
      args '-c', ". ${envdir}/bin/activate && ./scripts/run_integration_test.sh $cmdArgs"
    }
  }
}

task validatesRunnerStreamingTests(dependsOn: ['installGcpTest', 'sdist']) {
  dependsOn ":beam-runners-google-cloud-dataflow-java-fn-api-worker:shadowJar"

  def dataflowWorkerJar = project(":beam-runners-google-cloud-dataflow-java-fn-api-worker").shadowJar.archivePath

  doLast {
    // TODO(BEAM-3544,BEAM-5025): Disable tests with 'sickbay-streaming' tag.
    def testOpts = basicTestOpts + ["--attr=ValidatesRunner,!sickbay-streaming"]
    def argMap = ["test_opts": testOpts,
                  "streaming": "true",
                  "worker_jar": dataflowWorkerJar]
    def cmdArgs = mapToArgString(argMap)
    exec {
      executable 'sh'
      args '-c', ". ${envdir}/bin/activate && ./scripts/run_integration_test.sh $cmdArgs"
    }
  }
}

task hdfsIntegrationTest(dependsOn: 'installGcpTest') {
  doLast {
    exec {
      executable 'sh'
      args '-c', ". ${envdir}/bin/activate && ./apache_beam/io/hdfs_integration_test/hdfs_integration_test.sh"
    }
  }
}

class CompatibilityMatrixConfig {
  // Execute batch or streaming pipelines.
  boolean streaming = false
  // Execute on Docker or Process based environment.
  SDK_WORKER_TYPE workerType = SDK_WORKER_TYPE.DOCKER

  enum SDK_WORKER_TYPE {
    DOCKER, PROCESS
  }
}

def flinkCompatibilityMatrix = {
  def config = it ? it as CompatibilityMatrixConfig : new CompatibilityMatrixConfig()
  def workerType = config.workerType.name()
  def streaming = config.streaming
  def environment_config = config.workerType == CompatibilityMatrixConfig.SDK_WORKER_TYPE.PROCESS ? "--environment_config='{\"command\": \"${project(":beam-sdks-python:").buildDir.absolutePath}/sdk_worker.sh\"}'" : ""
  def name = "flinkCompatibilityMatrix${streaming ? 'Streaming' : 'Batch'}${workerType}"
  tasks.create(name: name) {
    dependsOn 'setupVirtualenv'
    dependsOn ':beam-runners-flink_2.11-job-server:shadowJar'
    if (workerType.toLowerCase() == 'docker')
      dependsOn ':beam-sdks-python-container:docker'
    else
      dependsOn 'createProcessWorker'
    doLast {
      exec {
        executable 'sh'
        args '-c', ". ${envdir}/bin/activate && pip install -e . && python -m apache_beam.runners.portability.flink_runner_test --flink_job_server_jar=${project(":beam-runners-flink_2.11-job-server:").shadowJar.archivePath} --environment_type=${workerType} ${environment_config} ${streaming ? '--streaming' : ''}"
      }
    }
  }
}

task flinkCompatibilityMatrixDocker() {
  dependsOn flinkCompatibilityMatrix(streaming: false)
  dependsOn flinkCompatibilityMatrix(streaming: true)
}

task flinkCompatibilityMatrixProcess() {
  dependsOn flinkCompatibilityMatrix(streaming: false, workerType: CompatibilityMatrixConfig.SDK_WORKER_TYPE.PROCESS)
  dependsOn flinkCompatibilityMatrix(streaming: true, workerType: CompatibilityMatrixConfig.SDK_WORKER_TYPE.PROCESS)
}

task flinkValidatesRunner() {
  dependsOn 'flinkCompatibilityMatrixDocker'
}

task postCommit() {
  dependsOn "preCommit"
  dependsOn "directRunnerIT"
  dependsOn "hdfsIntegrationTest"
  dependsOn "postCommitIT"
}

/*************************************************************************************************/
// Other build and analysis tasks

// Snapshot of dependency requirements defined in setup.py.
// Results will be stored in files under Gradle build directory.
task depSnapshot(dependsOn: 'installGcpTest') {
  doLast {
    println 'Snapshoting full dependencies requirements with versions info to requirements.txt.'
    exec {
      // Remove useless item "pkg-resources" from file which is introduced by a bug in Ubuntu.
      executable 'sh'
      args '-c', ". ${envdir}/bin/activate && pip freeze --local --all | grep -v \"pkg-resources\" > ${project.buildDir}/requirements.txt"
    }
  }
}

task dependencyUpdates(dependsOn: ':dependencyUpdates') {
  doLast {
    exec {
      executable 'sh'
      args '-c', "./scripts/run_dependency_check.sh"
    }
  }
}

task buildSnapshot() {
  dependsOn 'sdist'
  dependsOn 'depSnapshot'
}

project.task('createProcessWorker') {
  dependsOn ':beam-sdks-python-container:build'
  dependsOn 'setupVirtualenv'
  def sdkWorkerFile = file("${project.buildDir}/sdk_worker.sh")
  def workerScript = "${project(":beam-sdks-python-container:").buildDir.absolutePath}/target/launcher/linux_amd64/boot"
  def sdkWorkerFileCode = "sh -c \". ${envdir}/bin/activate && ${workerScript} \$* \""
  outputs.file sdkWorkerFile
  doLast {
    sdkWorkerFile.write sdkWorkerFileCode
    exec {
      commandLine('sh', '-c', ". ${envdir}/bin/activate && cd ${project.projectDir} && python setup.py install ")
    }
    exec {
      commandLine('chmod', '+x', sdkWorkerFile)
    }
  }
}
