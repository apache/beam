# coding=utf-8
#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#


pipeline:
  type: chain
  transforms:
    - type: Create
      config:
        elements:
          - text: "I am happy"
            id: 1
          - text: "I am sad"
            id: 2
          - text: "I am ðŸ¤—"
            id: 3
          - text: "I am ðŸ˜ ðŸ˜ ðŸ˜ "
            id: 4

    - type: RunInference
      name: DistilBERTRemoteInference
      config:
        model_handler:
          type: "VertexAIModelHandlerJSON"
          config:
            endpoint_id: 1320167118796226560
            project: "silicon-synapse-460717-a0"
            location: "us-central1"
            preprocess:
              callable: "lambda x: x.text"
#              callable: |
#                import uuid
#                def func(row):
#                  return { 'text': row.text }
#            postprocess:
#              callable: |
#                def fn(x: 'PredictionResult'):
#                  print(x)
#                  return beam.Row(example=x.example,
#                    inference=x.inference,
#                    model_id=x.model_id)

    - type: LogForTesting

    - type: MapToFields
      config:
        language: python
        # append: true
        fields:
          id: id
          text:
            callable: "lambda x: x.text"
          label:
            callable: "lambda x: x.inference.inference[0]['label']"
          score:
            callable: "lambda x: x.inference.inference[0]['score']"
          # blablabla: blablabla

    - type: LogForTesting

options:
  yaml_experimental_features: ML
#  blablabla: blablabla
