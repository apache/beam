# coding=utf-8
#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This is an example of a Beam YAML pipeline that reads messages from Pub/Sub
# and writes them to BigQuery.  This matches the Dataflow Template located
# here - https://cloud.google.com/dataflow/docs/guides/templates/provided/pubsub-subscription-to-bigquery

pipeline:
  type: composite
  transforms:
    # Step 1: Reading messages from Pub/Sub subscription
    - type: ReadFromPubSub
      name: ReadMessages
      config:
        subscription: "projects/apache-beam-testing/subscription/my-subscription"
        format: JSON
        schema: 
          type: object
          properties:
            data: {type: BYTES}
            attributes: {type: object}
    # Step 2: Write successful records out to BigQuery
    - type: WriteToBigQuery
      name: WriteMessages
      input: ReadMessages
      config:
        table: "apache-beam-testing.yaml_test.order_data"
        create_disposition: "CREATE_NEVER"
        write_disposition: "WRITE_APPEND"
        error_handling:
          output: "deadLetterQueue"
        num_streams: 1
    # Step 3: Write the failed messages to BQ to a JSON file
    - type: WriteToJson
      input: WriteMessages.deadLetterQueue
      config:
        path: "gs://my-bucket/yaml-123/writingToBigQueryErrors.json"

options:
  streaming: true


# Expected:
#  Row(label='37a', rank=1)
#  Row(label='37b', rank=4)
#  Row(label='37c', rank=3)
#  Row(label='37d', rank=2)
