# coding=utf-8
#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

pipeline:
  transforms:
    # Read text file into a collection of rows, each with one field, `line`.
    - type: ReadFromText
      name: ReadFromGCS
      config:
        path: gs://dataflow-samples/shakespeare/kinglear.txt

    # Write the rows as JSON-encoded records to a given Kafka topic.
    - type: WriteToKafka
      name: WriteToKafkaTopic
      input: ReadFromGCS
      config:
        bootstrap_servers: "{{ BOOTSTRAP_SERVERS }}"
        topic: "{{ TOPIC }}"
        format: "JSON"
        producer_config_updates:
          sasl.jaas.config: "org.apache.kafka.common.security.plain.PlainLoginModule required \
            username={{ USERNAME }} \
            password={{ PASSWORD }};"
          security.protocol: "SASL_PLAINTEXT"
          sasl.mechanism: "PLAIN"

    # Read records from a given Kafka topic into a collection of rows, with
    # fields corresponding to the following Kafka message JSON schema.
    - type: ReadFromKafka
      name: ReadFromKafkaTopic
      config:
        format: "JSON"
        schema: |
          {
            "type": "object",
            "properties": {
              "line": {"type": "string"}
            }
          }
        topic: "{{ TOPIC }}"
        bootstrap_servers: "{{ BOOTSTRAP_SERVERS }}"
        auto_offset_reset_config: earliest
        consumer_config:
          sasl.jaas.config: "org.apache.kafka.common.security.plain.PlainLoginModule required \
            username={{ USERNAME }} \
            password={{ PASSWORD }};"
          security.protocol: "SASL_PLAINTEXT"
          sasl.mechanism: "PLAIN"

    # Split `line` field in each row into list of words.
    - type: MapToFields
      name: MapToListOfWords
      input: ReadFromKafkaTopic
      config:
        language: python
        fields:
          words:
            callable: |
              import re
              def my_mapping(row):
                return re.findall(r"[A-Za-z\']+", row.line.lower())

    # Explode each list of words into separate rows.
    - type: Explode
      name: ExplodeIntoRows
      input: MapToListOfWords
      config:
        fields: words

    # Since each word is now distinct row, rename field to "word".
    - type: MapToFields
      name: RenameFields
      input: ExplodeIntoRows
      config:
        fields:
          word: words

    # With an unbounded source such as Kafka, a window is required for
    # any subsequent GroupBy transform.
    - type: WindowInto
      name: Windowing
      input: RenameFields
      windowing:
        type: fixed
        size: 15s

    # Group by distinct words within a window of the collection and add field
    # "count" that contains number of instances, or count, for each word in
    # that window of the collection.
    - type: Combine
      name: GroupByDistinctWords
      input: Windowing
      config:
        language: python
        group_by: word
        combine:
          count:
            value: word
            fn: count

    - type: LogForTesting
      input: GroupByDistinctWords

# Expected:
#  Row(word='fool', count=1)
#  Row(word='thou', count=2)
#  Row(word='shouldst', count=1)
#  Row(word='not', count=1)
#  Row(word='have', count=1)
#  Row(word='been', count=2)
#  Row(word='old', count=1)
#  Row(word='till', count=1)
#  Row(word='hadst', count=1)
#  Row(word='wise', count=1)
#  Row(word='king', count=1)
#  Row(word='lear', count=1)
#  Row(word='nothing', count=2)
#  Row(word='will', count=1)
#  Row(word='come', count=1)
#  Row(word='of', count=1)
#  Row(word='speak', count=1)
#  Row(word='again', count=1)
#  Row(word='never', count=5)