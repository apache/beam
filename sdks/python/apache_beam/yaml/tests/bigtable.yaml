#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#


fixtures:
  - name: BT_INSTANCE
    type: "apache_beam.yaml.integration_tests.temp_bigtable_table"
    config:
      project: "apache-beam-testing"
  - name: TEMP_DIR
    # Need distributed filesystem to be able to read and write from a container.
    type: "apache_beam.yaml.integration_tests.gcs_temp_dir"
    config:
      bucket: "gs://temp-storage-for-end-to-end-tests/temp-it"

  # Tests for BigTable YAML IO

pipelines:
  - pipeline:
      type: chain
      transforms:
        - type: Create
          config:
            elements:
              - {key: 'row1',
                type: 'SetCell',
                family_name: "cf1",
                column_qualifier: "cq1",
                value: "value1",
                timestamp_micros: -1}
              - {key: 'row1',
                  type: 'SetCell',
                  family_name: "cf2",
                  column_qualifier: "cq1",
                  value: "value2",
                  timestamp_micros: 1000}

        - type: LogForTesting
        - type: MapToFields
          name: ConvertStringsToBytes
          config:
            language: python
            fields:
              # For 'SetCell' and 'DeleteFromColumn'
              key:
                callable: |
                  def convert_to_bytes(row):
                    return bytes(row.key, 'utf-8') if "key" in row._fields else None
              type:
                type
              family_name:
                callable: |
                  def convert_to_bytes(row):
                    return bytes(row.family_name, 'utf-8') if 'family_name' in row._fields else None
              column_qualifier:
                callable: |
                  def convert_to_bytes(row):
                    return bytes(row.column_qualifier, 'utf-8') if 'column_qualifier' in row._fields else None
              value:
                callable: |
                  def convert_to_bytes(row):
                    return bytes(row.value, 'utf-8') if 'value' in row._fields else None
              timestamp_micros:
                timestamp_micros
              # The 'type', 'timestamp_micros', 'start_timestamp_micros', 'end_timestamp_micros'
              # fields are already of the correct type (String, Long) or are optional.
              # We only need to convert fields that are Strings in YAML but need to be Bytes in Java.

        - type: WriteToBigTable
          config:
            project: 'apache-beam-testing'
            instance: "{BT_INSTANCE}"
            table: 'test-table'
