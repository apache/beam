#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

"""Code for generating typehints_with_futureannotations_test.py.

Intended for internal use only, no backward-compatibility guarantees."""
from pathlib import Path
import os

from apache_beam.typehints import typehints_test

_THIS_FILE_NAME = Path(__file__).name
_TEST_FILE_NAME = Path(typehints_test.__file__).name
# pylint: disable=line-too-long
FUTUREANNOTATIONS_TEST_HEADER = (
    f"""# File generated by {_THIS_FILE_NAME}, do not edit manually.
# Copy of {_TEST_FILE_NAME} with 'from __future__ import annotations' added.
from __future__ import annotations
# pylint: disable-all
""")  # yapf: disable


def generate_typehints_with_futureannotations_test():
  orig_typehints_test_file = typehints_test.__file__
  with open(orig_typehints_test_file, 'r') as f:
    orig_contents = f.read()
  new_contents = FUTUREANNOTATIONS_TEST_HEADER + orig_contents
  output_file = get_target_filename()
  with open(output_file, 'w') as f:
    f.write(new_contents)
  return output_file


def get_target_filename():
  """Get the target filename for the generated file."""
  orig_typehints_test_file = typehints_test.__file__
  output_file = Path(
      orig_typehints_test_file
  ).parent / "typehints_with_futureannotations_test.py"
  return output_file


def check_generated_file():
  """Check that the generated file is up to date."""
  generated_file = get_target_filename()
  assert os.path.exists(generated_file), f"Generated file {generated_file} does not exist."
  with open(generated_file, 'r') as f:
    existing_contents = f.read()
  orig_typehints_test_file = typehints_test.__file__
  with open(orig_typehints_test_file, 'r') as f:
    orig_contents = f.read()
  expected_contents = FUTUREANNOTATIONS_TEST_HEADER + orig_contents
  err_msg = (
      f"Generated file {generated_file} is out of date. Please run "
      f"`python3 -m apache_beam.typehints.testing.typehints_test_generator` to regenerate it."
  )
  assert existing_contents == expected_contents, err_msg


if __name__ == "__main__":
  output_file = generate_typehints_with_futureannotations_test()
  print(f"Generated file {output_file}.")
