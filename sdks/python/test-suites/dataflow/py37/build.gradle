/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * License); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: org.apache.beam.gradle.BeamModulePlugin
applyPythonNature()
enablePythonPerformanceTest()

dependencies {
  distTarBall project(path: ":sdks:python", configuration: "distTarBall")
}

// Required to setup a Python 3 virtualenv and task names.
pythonVersion = '3.7'
apply from: "../common.gradle"

def runScriptsDir = "${rootDir}/sdks/python/scripts"

def preCommitIT(String runScriptsDir, String envdir, Boolean streaming, Boolean runnerV2) {
  def suffix = runnerV2 ? '_V2' : ''
  suffix = streaming ? "_streaming$suffix" : "_batch$suffix"
  task "preCommitIT${suffix}" {
    dependsOn 'installGcpTest'
    dependsOn ':sdks:python:sdist'
    dependsOn ":runners:google-cloud-dataflow-java:worker:shadowJar"

    def dataflowWorkerJar = project(":runners:google-cloud-dataflow-java:worker").shadowJar.archivePath

    doLast {
      // Basic integration tests to run in PreCommit
      def precommitTests = streaming ? [
              "apache_beam.examples.streaming_wordcount_it_test:StreamingWordCountIT.test_streaming_wordcount_it",
      ] : [
              "apache_beam.examples.wordcount_it_test:WordCountIT.test_wordcount_it",
      ]
      def testOpts = [
              "--tests=${precommitTests.join(',')}",
              "--nocapture",    // Print stdout instantly
              "--processes=2",    // Number of tests running in parallel
              "--process-timeout=1800",   // Timeout of whole command execution
      ]

      def argMap = [
              "test_opts"   : testOpts,
              "sdk_location": files(configurations.distTarBall.files).singleFile,
              "worker_jar"  : dataflowWorkerJar,
              "suite"       : "preCommitIT-df-py37"
      ]

      if (runnerV2) {
        argMap.put("runner_v2", "true")
        // KMS is not supported for streaming engine.
        argMap.put("kms_key_name", "\"\"")
      }
      if (streaming){
        argMap.put("streaming", "true")
      }

      def cmdArgs = mapToArgString(argMap)
      exec {
        executable 'sh'
        args '-c', ". ${envdir}/bin/activate && ${runScriptsDir}/run_integration_test.sh $cmdArgs"
      }
    }
  }
}

preCommitIT(runScriptsDir, envdir, false, false)
preCommitIT(runScriptsDir, envdir, true, false)
preCommitIT(runScriptsDir, envdir, false, true)
preCommitIT(runScriptsDir, envdir, true, true)

task preCommitIT{
  dependsOn preCommitIT_batch
  dependsOn preCommitIT_streaming
}

task preCommitIT_V2{
  dependsOn preCommitIT_batch_V2
  dependsOn preCommitIT_streaming_V2
}
