// @generated by protobuf-ts 2.1.0 with parameter client_grpc1,server_grpc1,generate_dependencies
// @generated from protobuf file "org/apache/beam/model/pipeline/v1/beam_runner_api.proto" (package "org.apache.beam.model.pipeline.v1", syntax proto3)
// tslint:disable
//
//
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
//
//
// Protocol Buffers describing the Runner API, which is the runner-independent,
// SDK-independent definition of the Beam model.
//
import { TestStreamService } from "./beam_runner_api";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { TestStreamPayload_Event } from "./beam_runner_api";
import type { EventsRequest } from "./beam_runner_api";
import * as grpc from "@grpc/grpc-js";
/**
 * @generated from protobuf service org.apache.beam.model.pipeline.v1.TestStreamService
 */
export interface ITestStreamServiceClient {
    /**
     * A TestStream will request for events using this RPC.
     *
     * @generated from protobuf rpc: Events(org.apache.beam.model.pipeline.v1.EventsRequest) returns (stream org.apache.beam.model.pipeline.v1.TestStreamPayload.Event);
     */
    events(input: EventsRequest, metadata?: grpc.Metadata, options?: grpc.CallOptions): grpc.ClientReadableStream<TestStreamPayload_Event>;
    events(input: EventsRequest, options?: grpc.CallOptions): grpc.ClientReadableStream<TestStreamPayload_Event>;
}
/**
 * @generated from protobuf service org.apache.beam.model.pipeline.v1.TestStreamService
 */
export class TestStreamServiceClient extends grpc.Client implements ITestStreamServiceClient {
    private readonly _binaryOptions: Partial<BinaryReadOptions & BinaryWriteOptions>;
    constructor(address: string, credentials: grpc.ChannelCredentials, options: grpc.ClientOptions = {}, binaryOptions: Partial<BinaryReadOptions & BinaryWriteOptions> = {}) {
        super(address, credentials, options);
        this._binaryOptions = binaryOptions;
    }
    /**
     * A TestStream will request for events using this RPC.
     *
     * @generated from protobuf rpc: Events(org.apache.beam.model.pipeline.v1.EventsRequest) returns (stream org.apache.beam.model.pipeline.v1.TestStreamPayload.Event);
     */
    events(input: EventsRequest, metadata?: grpc.Metadata | grpc.CallOptions, options?: grpc.CallOptions): grpc.ClientReadableStream<TestStreamPayload_Event> {
        const method = TestStreamService.methods[0];
        return this.makeServerStreamRequest<EventsRequest, TestStreamPayload_Event>(`/${TestStreamService.typeName}/${method.name}`, (value: EventsRequest): Buffer => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value: Buffer): TestStreamPayload_Event => method.O.fromBinary(value, this._binaryOptions), input, (metadata as any), options);
    }
}
