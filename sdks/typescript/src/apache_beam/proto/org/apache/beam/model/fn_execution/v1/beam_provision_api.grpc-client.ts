// @generated by protobuf-ts 2.1.0 with parameter client_grpc1,server_grpc1,generate_dependencies
// @generated from protobuf file "org/apache/beam/model/fn_execution/v1/beam_provision_api.proto" (package "org.apache.beam.model.fn_execution.v1", syntax proto3)
// tslint:disable
//
//
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
//
//
// Protocol Buffers describing the Provision API, for communicating with a runner
// for job and environment provisioning information over GRPC.
//
import { ProvisionService } from "./beam_provision_api";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { GetProvisionInfoResponse } from "./beam_provision_api";
import type { GetProvisionInfoRequest } from "./beam_provision_api";
import * as grpc from "@grpc/grpc-js";
/**
 * A service to provide runtime provisioning information to the SDK harness
 * worker instances -- such as pipeline options, resource constraints and
 * other job metadata -- needed by an SDK harness instance to initialize.
 *
 * @generated from protobuf service org.apache.beam.model.fn_execution.v1.ProvisionService
 */
export interface IProvisionServiceClient {
    /**
     * Get provision information for the SDK harness worker instance.
     *
     * @generated from protobuf rpc: GetProvisionInfo(org.apache.beam.model.fn_execution.v1.GetProvisionInfoRequest) returns (org.apache.beam.model.fn_execution.v1.GetProvisionInfoResponse);
     */
    getProvisionInfo(input: GetProvisionInfoRequest, metadata: grpc.Metadata, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: GetProvisionInfoResponse) => void): grpc.ClientUnaryCall;
    getProvisionInfo(input: GetProvisionInfoRequest, metadata: grpc.Metadata, callback: (err: grpc.ServiceError | null, value?: GetProvisionInfoResponse) => void): grpc.ClientUnaryCall;
    getProvisionInfo(input: GetProvisionInfoRequest, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: GetProvisionInfoResponse) => void): grpc.ClientUnaryCall;
    getProvisionInfo(input: GetProvisionInfoRequest, callback: (err: grpc.ServiceError | null, value?: GetProvisionInfoResponse) => void): grpc.ClientUnaryCall;
}
/**
 * A service to provide runtime provisioning information to the SDK harness
 * worker instances -- such as pipeline options, resource constraints and
 * other job metadata -- needed by an SDK harness instance to initialize.
 *
 * @generated from protobuf service org.apache.beam.model.fn_execution.v1.ProvisionService
 */
export class ProvisionServiceClient extends grpc.Client implements IProvisionServiceClient {
    private readonly _binaryOptions: Partial<BinaryReadOptions & BinaryWriteOptions>;
    constructor(address: string, credentials: grpc.ChannelCredentials, options: grpc.ClientOptions = {}, binaryOptions: Partial<BinaryReadOptions & BinaryWriteOptions> = {}) {
        super(address, credentials, options);
        this._binaryOptions = binaryOptions;
    }
    /**
     * Get provision information for the SDK harness worker instance.
     *
     * @generated from protobuf rpc: GetProvisionInfo(org.apache.beam.model.fn_execution.v1.GetProvisionInfoRequest) returns (org.apache.beam.model.fn_execution.v1.GetProvisionInfoResponse);
     */
    getProvisionInfo(input: GetProvisionInfoRequest, metadata: grpc.Metadata | grpc.CallOptions | ((err: grpc.ServiceError | null, value?: GetProvisionInfoResponse) => void), options?: grpc.CallOptions | ((err: grpc.ServiceError | null, value?: GetProvisionInfoResponse) => void), callback?: ((err: grpc.ServiceError | null, value?: GetProvisionInfoResponse) => void)): grpc.ClientUnaryCall {
        const method = ProvisionService.methods[0];
        return this.makeUnaryRequest<GetProvisionInfoRequest, GetProvisionInfoResponse>(`/${ProvisionService.typeName}/${method.name}`, (value: GetProvisionInfoRequest): Buffer => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value: Buffer): GetProvisionInfoResponse => method.O.fromBinary(value, this._binaryOptions), input, (metadata as any), (options as any), (callback as any));
    }
}
