/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * License); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins { id 'org.apache.beam.module' }

description = "Apache Beam :: SDKs :: Typescript"

configurations {
  packTarball
}

def tarballName = "apache-beam.tgz"

def typescriptSdkDeps = project.files(
          project.fileTree(
          dir: "${project.rootDir}",
          include: ['model/**', 'sdks/typescript/src/**', 'sdks/typescript/*.json'],
          // Exclude temporary directories and files that are generated
          // during build and test.
          exclude: [
            '**/build/**',
            '**/dist/**',
            '**/target/**',
            '**/.gogradle/**',
            '**/reports/test/index.html',
          ])
          )

def pack = tasks.register("pack") {

  doLast {
    // Build artifact
    exec {
      executable 'sh'
      args '-c', "npm install && npm run build && npm pack --pack-destination ${buildDir}"
    }

    def collection = fileTree(buildDir){ include "**/*${project.version}*.tgz" exclude 'srcs/**'}

    // we need a fixed name for the artifact
    copy { from collection.singleFile; into buildDir; rename { tarballName } }
    logger.info('Create distribution tar file {} in {}', tarballName, buildDir)
  }
  inputs.files(typescriptSdkDeps)
      .withPropertyName('typescriptSdkDeps')
      .withPathSensitivity(PathSensitivity.RELATIVE)
  outputs.file "${buildDir}/${tarballName}"
}

artifacts {
  packTarball file: file("${buildDir}/${tarballName}"), builtBy: pack
}
