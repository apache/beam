// @generated by protobuf-ts 2.1.0 with parameter generate_dependencies
// @generated from protobuf file "beam_expansion_api.proto" (package "org.apache.beam.model.expansion.v1", syntax proto3)
// tslint:disable
//
//
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
//
//
// Protocol Buffers describing the Expansion API, an api for expanding
// transforms in a remote SDK.
//
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { ExpansionService } from "./beam_expansion_api";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { ExpansionResponse } from "./beam_expansion_api";
import type { ExpansionRequest } from "./beam_expansion_api";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * Job Service for constructing pipelines
 *
 * @generated from protobuf service org.apache.beam.model.expansion.v1.ExpansionService
 */
export interface IExpansionServiceClient {
    /**
     * @generated from protobuf rpc: Expand(org.apache.beam.model.expansion.v1.ExpansionRequest) returns (org.apache.beam.model.expansion.v1.ExpansionResponse);
     */
    expand(input: ExpansionRequest, options?: RpcOptions): UnaryCall<ExpansionRequest, ExpansionResponse>;
}
/**
 * Job Service for constructing pipelines
 *
 * @generated from protobuf service org.apache.beam.model.expansion.v1.ExpansionService
 */
export class ExpansionServiceClient implements IExpansionServiceClient, ServiceInfo {
    typeName = ExpansionService.typeName;
    methods = ExpansionService.methods;
    options = ExpansionService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: Expand(org.apache.beam.model.expansion.v1.ExpansionRequest) returns (org.apache.beam.model.expansion.v1.ExpansionResponse);
     */
    expand(input: ExpansionRequest, options?: RpcOptions): UnaryCall<ExpansionRequest, ExpansionResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<ExpansionRequest, ExpansionResponse>("unary", this._transport, method, opt, input);
    }
}
